{
  "description":"Control a turtle and draw amazing pictures with code. In this challenge you'll learn the fundamentals of programming by using instructions to position a turtle on the screen. You'll draw lines, patterns and shapes in the same way computers draw images on the screen.\nEverything - from games to web browsers to apps like Netflix - that generates images on the screen, - it all starts with code!",
  "title":"DT Challenge Python \u2013 Turtle",
  "modules":[
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\n<p>\n  You have probably noticed that you repeat yourself a lot in turtle programs.  Using loops makes turtle much less repetitive!\n<\/p>\n\n<p>Drawing a square the long way:<\/p>\n\n```lang:py3;eg:py3-eg-g3-drawing-shapes-loops\nfrom turtle import *\n\nforward(50)\nright(90)\nforward(50)\nright(90)\nforward(50)\nright(90)\nforward(50)\nright(90)\n```\n\nWe can use a loop to *repeat* certain instructions. Then, we don't have to repeat the same two instructions over and over again.\n\n<p>Here's a much shorter way of drawing a square, using loops:<\/p>\n\n\n```lang:py3;eg:py3-eg-g3-drawing-shapes-with-loops\nfrom turtle import *\n\nfor count in range(4):\n  forward(50)\n  right(90)\n```\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Drawing shapes with loops",
              "content_rendered":"<p>\n  You have probably noticed that you repeat yourself a lot in turtle programs.  Using loops makes turtle much less repetitive!\n<\/p>\n<p>Drawing a square the long way:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-eg-g3-drawing-shapes-loops\"><code data-lang=\"py3\">from turtle import *\n\nforward(50)\nright(90)\nforward(50)\nright(90)\nforward(50)\nright(90)\nforward(50)\nright(90)\n<\/code><\/pre>\n<p>We can use a loop to <em>repeat<\/em> certain instructions. Then, we don't have to repeat the same two instructions over and over again.<\/p>\n<p>Here's a much shorter way of drawing a square, using loops:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-eg-g3-drawing-shapes-with-loops\"><code data-lang=\"py3\">from turtle import *\n\nfor count in range(4):\n  forward(50)\n  right(90)\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nLet's look at what's happening here. \n\n`range(4)` is acting like a **repeat**, counting up four times -- **sneakily, starting at 0**, and counting up 4 times, so `0`, `1`, `2` and `3`. \n\nFor each different value (which is saved in `count` each time), the **body** of the loop is run. That is, the `forward(50)` and `right(90)` commands are run. Then, the loop restarts!\n\n```lang:py3;eg:py3-eg-g3-drawing-shapes-with-loops2\nfrom turtle import *\n\nfor count in range(4):\n  forward(50)\n  right(90)\n```\nThe **body** of the loop is all the lines that are *indented*, - that is, that start with two spaces in the example above.\n\n**Make sure all the instructions in your body are indented to the same amount!** We recommend you try two spaces."
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"A closer look at for loops",
              "content_rendered":"<p>Let's look at what's happening here.<\/p>\n<p><code data-lang=\"py3\">range(4)<\/code> is acting like a <strong>repeat<\/strong>, counting up four times &ndash; <strong>sneakily, starting at 0<\/strong>, and counting up 4 times, so <code data-lang=\"py3\">0<\/code>, <code data-lang=\"py3\">1<\/code>, <code data-lang=\"py3\">2<\/code> and <code data-lang=\"py3\">3<\/code>.<\/p>\n<p>For each different value (which is saved in <code data-lang=\"py3\">count<\/code> each time), the <strong>body<\/strong> of the loop is run. That is, the <code data-lang=\"py3\">forward(50)<\/code> and <code data-lang=\"py3\">right(90)<\/code> commands are run. Then, the loop restarts!<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-eg-g3-drawing-shapes-with-loops2\"><code data-lang=\"py3\">from turtle import *\n\nfor count in range(4):\n  forward(50)\n  right(90)\n<\/code><\/pre>\n<p>The <strong>body<\/strong> of the loop is all the lines that are <em>indented<\/em>, - that is, that start with two spaces in the example above.<\/p>\n<p><strong>Make sure all the instructions in your body are indented to the same amount!<\/strong> We recommend you try two spaces.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nJust to see what's happening, we can print out some information to the screen. This program will print out **Hello!** to the screen four times:\n\n```lang:py3;eg:py3-turtle-print-loops1\nfor count in range(4):\n  print('Hello!')\n```\n\nAnd this loop will print out the **value** that we're saving in `count`. See how it gets set to a different number each time, first `0`, then `1`, `2`, and `3`:\n\n```lang:py3;eg:py3-turtle-print-loops2\nfor count in range(4):\n  print(count)\n```\n\nYou don't have to call it `count`, either! You can call it anything you like!\n\n```lang:py3;eg:py3-turtle-print-loops3\nfor side_number in range(4):\n  print(side_number)\n```"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Looping with numbers",
              "content_rendered":"<p>Just to see what's happening, we can print out some information to the screen. This program will print out <strong>Hello!<\/strong> to the screen four times:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-print-loops1\"><code data-lang=\"py3\">for count in range(4):\n  print('Hello!')\n<\/code><\/pre>\n<p>And this loop will print out the <strong>value<\/strong> that we're saving in <code data-lang=\"py3\">count<\/code>. See how it gets set to a different number each time, first <code data-lang=\"py3\">0<\/code>, then <code data-lang=\"py3\">1<\/code>, <code data-lang=\"py3\">2<\/code>, and <code data-lang=\"py3\">3<\/code>:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-print-loops2\"><code data-lang=\"py3\">for count in range(4):\n  print(count)\n<\/code><\/pre>\n<p>You don't have to call it <code data-lang=\"py3\">count<\/code>, either! You can call it anything you like!<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-print-loops3\"><code data-lang=\"py3\">for side_number in range(4):\n  print(side_number)\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nLet's see how this works with the turtle! \n\n```lang:py3;eg:py3-eg-g3-drawing-shapes-for-loops\nfrom turtle import *\n\nfor side_number in range(4):\n  print('Now drawing side number:')\n  print(side_number)\n  forward(50)\n  right(90)\n```\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Looping and drawing",
              "content_rendered":"<p>Let's see how this works with the turtle!<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-eg-g3-drawing-shapes-for-loops\"><code data-lang=\"py3\">from turtle import *\n\nfor side_number in range(4):\n  print('Now drawing side number:')\n  print(side_number)\n  forward(50)\n  right(90)\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nThere are a few gotchas with loops to look out for!\n\n**Don't forget the colon!** The `for` line has to end with a `:`, or else the loop won't work!\n\n```lang:py3;eg:py3-eg-g3-loop-checklist\nfrom turtle import *\n\nfor count in range(9):\n  forward(20)\n  right(40)\n```\n\n\n**Make sure all the instructions in your body are indented to the same amount!** You can use two spaces, four spaces, or a tab, but they all have to be the same! "
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Looping lookouts!",
              "content_rendered":"<p>There are a few gotchas with loops to look out for!<\/p>\n<p><strong>Don't forget the colon!<\/strong> The <code data-lang=\"py3\">for<\/code> line has to end with a <code data-lang=\"py3\">:<\/code>, or else the loop won't work!<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-eg-g3-loop-checklist\"><code data-lang=\"py3\">from turtle import *\n\nfor count in range(9):\n  forward(20)\n  right(40)\n<\/code><\/pre>\n<p><strong>Make sure all the instructions in your body are indented to the same amount!<\/strong> You can use two spaces, four spaces, or a tab, but they all have to be the same!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Back to Square One",
              "purpose":"",
              "problem":"aca-python-logo-square-right-simple-repeat",
              "type":1,
              "problem_id":4659
            }
          ],
          "title":"Loops with the turtle"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nWe can use `for` loops to make some great patterns!\n\n\n```lang:py3;eg:py3-tutle-patterns-forloops\nfrom turtle import *\n\nfor count in range(6):\n  forward(50)\n  left(120)\n  forward(50)\n  left(120)\n  forward(50)\n  left(120)\n  left(60)\n```\n\n<!--\nIf we're being tricky, we can even put `for` loops *inside* other `for` loops!\n\n```lang:py3;eg:py3-tutle-patterns-forloops-embed\nfrom turtle import *\n\nfor count in range(6):\n  for count2 in range(3):\n    forward(50)\n    left(120)\n  left(60)\n```\n-->"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Repeat Block",
              "content_rendered":"<p>We can use <code data-lang=\"py3\">for<\/code> loops to make some great patterns!<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-tutle-patterns-forloops\"><code data-lang=\"py3\">from turtle import *\n\nfor count in range(6):\n  forward(50)\n  left(120)\n  forward(50)\n  left(120)\n  forward(50)\n  left(120)\n  left(60)\n<\/code><\/pre>\n<!--\nIf we're being tricky, we can even put `for` loops *inside* other `for` loops!\n\n```lang:py3;eg:py3-tutle-patterns-forloops-embed\nfrom turtle import *\n\nfor count in range(6):\n  for count2 in range(3):\n    forward(50)\n    left(120)\n  left(60)\n```\n-->",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Row of terraces",
              "purpose":"",
              "problem":"aca-python-logo-houses-in-a-row-repeat",
              "type":1,
              "problem_id":4660
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Staircase",
              "purpose":"",
              "problem":"aca-blockly-logo-staircase-simple-0",
              "type":1,
              "problem_id":4665
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nWhen we use a `for` loop, it repeats everything indented inside of it, the so-called *body* of the loop. Let's say we wanted to draw 6 squares. We could try something like this:\n\n```lang:py3;eg:py3-turtle-turn-first-part1\nfrom turtle import *\n\nfor count in range(6):\n  forward(20)\n  right(90)\n  forward(20)\n  right(90)\n  forward(20)\n  right(90)\n  forward(20)\n  right(90)\n```\n\n\n<p>Six squares are drawn, but <strong>on top of each other<\/strong>! To draw more squares side by side, we'll need to add in an extra step to <strong>move forward<\/strong> between each square.<\/p>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Squares on squares on squares",
              "content_rendered":"<p>When we use a <code data-lang=\"py3\">for<\/code> loop, it repeats everything indented inside of it, the so-called <em>body<\/em> of the loop. Let's say we wanted to draw 6 squares. We could try something like this:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-turn-first-part1\"><code data-lang=\"py3\">from turtle import *\n\nfor count in range(6):\n  forward(20)\n  right(90)\n  forward(20)\n  right(90)\n  forward(20)\n  right(90)\n  forward(20)\n  right(90)\n<\/code><\/pre>\n<p>Six squares are drawn, but <strong>on top of each other<\/strong>! To draw more squares side by side, we'll need to add in an extra step to <strong>move forward<\/strong> between each square.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown \n\nHere, we've added a `left(90)` at the beginning, and a `forward(20)` at the end of the instructions within the `for` loop, so that each time the square is drawn in a new position, pointing the right way.\n\n```lang:py3;eg:py3-turtle-turn-first-part2\nfrom turtle import *\n\nleft(90)\nfor count in range(6):\n  forward(20)\n  right(90)\n  forward(20)\n  right(90)\n  forward(20)\n  right(90)\n  forward(20)\n  right(90)\n  forward(20)\n```\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Moving between loops",
              "content_rendered":"<p>Here, we've added a <code data-lang=\"py3\">left(90)<\/code> at the beginning, and a <code data-lang=\"py3\">forward(20)<\/code> at the end of the instructions within the <code data-lang=\"py3\">for<\/code> loop, so that each time the square is drawn in a new position, pointing the right way.<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-turn-first-part2\"><code data-lang=\"py3\">from turtle import *\n\nleft(90)\nfor count in range(6):\n  forward(20)\n  right(90)\n  forward(20)\n  right(90)\n  forward(20)\n  right(90)\n  forward(20)\n  right(90)\n  forward(20)\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Blocks in a Row",
              "purpose":"",
              "problem":"aca-python-logo-square-block-row",
              "type":1,
              "problem_id":4666
            }
          ],
          "title":"Loops and Movement"
        }
      ],
      "title":"Looping with the Turtle",
      "label":"aca-python-turtle-yr78-looping",
      "updated_at":"2018-05-14T06:56:14.186449+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nIf there's one thing computers are really good at, it's working with numbers.  They can do billions of calculations per second!\n\nIn fact, Python is much better than a calculator, because it has variables!\n\nWe can use variables to store numbers for later, and we can do calculations on them, too!\n\nPython can do all the operations you expect from a calculator:\n\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr><th>Name<\/th><th>Calculator<\/th><th>Python<\/th><\/tr>\n  <\/thead>\n  <tbody>\n    <tr><td>add<\/td><td>+<\/td><td><code data-lang=\"py3\">+<\/code><\/td><\/tr>\n    <tr><td>subtract<\/td><td>-<\/td><td><code data-lang=\"py3\">-<\/code><\/td><\/tr>\n    <tr><td>multiply<\/td><td>\u00d7<\/td><td><code data-lang=\"py3\">*<\/code><\/td><\/tr>\n    <tr><td>divide<\/td><td>\u00f7<\/td><td><code data-lang=\"py3\">\/<\/code><\/td><\/tr>\n  <\/tbody>\n<\/table>\n\n<p>\n  Python uses <code data-lang=\"py3\">\/<\/code> for division because \u00f7 isn't a key on most keyboards!\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Python the Calculator",
              "content_rendered":"<p>If there's one thing computers are really good at, it's working with numbers.  They can do billions of calculations per second!<\/p>\n<p>In fact, Python is much better than a calculator, because it has variables!<\/p>\n<p>We can use variables to store numbers for later, and we can do calculations on them, too!<\/p>\n<p>Python can do all the operations you expect from a calculator:<\/p>\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr><th>Name<\/th><th>Calculator<\/th><th>Python<\/th><\/tr>\n  <\/thead>\n  <tbody>\n    <tr><td>add<\/td><td>+<\/td><td><code data-lang=\"py3\">+<\/code><\/td><\/tr>\n    <tr><td>subtract<\/td><td>-<\/td><td><code data-lang=\"py3\">-<\/code><\/td><\/tr>\n    <tr><td>multiply<\/td><td>\u00d7<\/td><td><code data-lang=\"py3\">*<\/code><\/td><\/tr>\n    <tr><td>divide<\/td><td>\u00f7<\/td><td><code data-lang=\"py3\">\/<\/code><\/td><\/tr>\n  <\/tbody>\n<\/table>\n<p>\n  Python uses <code data-lang=\"py3\">\/<\/code> for division because \u00f7 isn't a key on most keyboards!\n<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown \n\n  When drawing our square, we did the exact same thing 4 times: draw a line, and turn right. \nBut if we made a typo and one side was longer than the others, it wouldn't make a square!<\/p>\n\n\nWe need a <strong>better way to remember and reuse<\/strong> things like the side length.\n\n\n  We can use a <em>variable<\/em>!  Each variable has a <em>name<\/em> which we use to set and get our value:\n\n```lang:py3;eg:py3-turtle-variable-intro\nfrom turtle import *\n\nline_length = 100\n\nforward(line_length)\nleft(90)\nforward(line_length)\n```\n\n\n`line_length = 100` creates a new variable called <code data-lang=\"py3\">line_length<\/code>. It holds the value `100`.\n  We can then use the `line_length` variable to use that number as often as we want.\n\nChange the value of `line_length` to something else, and see what happens!\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>\n  Variables are <em>extremely<\/em> powerful.  <strong>Variables allow the program to store information and retrieve it for future use.<\/strong>  Any substantial program will use many variables.\n<\/p>\n<p>\n  Variables help avoid duplicate code, by saving repeatedly used values.\n  <strong>They also make the code easier to understand.<\/strong>  Well-chosen variable names help explain what the program is doing and why.\n<\/p>\n<p>There are a few rules about naming variables in Python. Variables can't contain a space, and they can't start with a number.<\/p>\n<figure class=\"align-center\">\n  <img alt=\"Rename a variable\" src=\"https:\/\/groklearning-cdn.com\/modules\/4ax6CRAP4d8RV2ED26c2zT\/blockly-rename-var.png\" width=\"300px\">\n<\/figure>\n<p>\n  Now the <strong>Variables<\/strong> menu will show a set block <bk class=\"var\">set <bk class=\"inner\">line<\/bk><\/bk> and get block <bk class=\"var\"><bk class=\"inner\">line<\/bk><\/bk> for your new variable.\n<\/p>\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    AC:DT does not explicitly mention variables. However, variables are central to any collecting, storing, and processing of data (and responding to user input) in a program.\n  <\/p>\n  <p>\n   Spreadsheet cells and database columns also act as variables.  This includes Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP009\" target=\"_blank\">ACTDIP009<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP016\" target=\"_blank\">ACTDIP016<\/a>.\n  <\/p>\n  <p>\n    Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP026\" target=\"_blank\">ACTDIP026<\/a> and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP037\" target=\"_blank\">ACTDIP037<\/a> include structured data, which we cover in the other Challenge streams.\n  <\/p>\n<\/aside>",
              "notes":[
                {
                  "left":"#markdown\n<p>\n  Variables are <em>extremely<\/em> powerful.  <strong>Variables allow the program to store information and retrieve it for future use.<\/strong>  Any substantial program will use many variables.\n<\/p>\n\n<p>\n  Variables help avoid duplicate code, by saving repeatedly used values.\n  <strong>They also make the code easier to understand.<\/strong>  Well-chosen variable names help explain what the program is doing and why.\n<\/p>\n\nThere are a few rules about naming variables in Python. Variables can't contain a space, and they can't start with a number. \n\n<figure class=\"align-center\">\n  <img alt=\"Rename a variable\" src=\"https:\/\/groklearning-cdn.com\/modules\/4ax6CRAP4d8RV2ED26c2zT\/blockly-rename-var.png\" width=\"300px\">\n<\/figure>\n\n<p>\n  Now the <strong>Variables<\/strong> menu will show a set block <bk class=\"var\">set <bk class=\"inner\">line<\/bk><\/bk> and get block <bk class=\"var\"><bk class=\"inner\">line<\/bk><\/bk> for your new variable.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    AC:DT does not explicitly mention variables. However, variables are central to any collecting, storing, and processing of data (and responding to user input) in a program.\n  <\/p>\n  <p>\n   Spreadsheet cells and database columns also act as variables.  This includes Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP009\" target=\"_blank\">ACTDIP009<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP016\" target=\"_blank\">ACTDIP016<\/a>.\n  <\/p>\n  <p>\n    Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP026\" target=\"_blank\">ACTDIP026<\/a> and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP037\" target=\"_blank\">ACTDIP037<\/a> include structured data, which we cover in the other Challenge streams.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "title":"Remembering things",
              "content_rendered":"<p>When drawing our square, we did the exact same thing 4 times: draw a line, and turn right.\nBut if we made a typo and one side was longer than the others, it wouldn't make a square!<\/p><\/p>\n<p>We need a <strong>better way to remember and reuse<\/strong> things like the side length.<\/p>\n<p>We can use a <em>variable<\/em>!  Each variable has a <em>name<\/em> which we use to set and get our value:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-variable-intro\"><code data-lang=\"py3\">from turtle import *\n\nline_length = 100\n\nforward(line_length)\nleft(90)\nforward(line_length)\n<\/code><\/pre>\n<p><code data-lang=\"py3\">line_length = 100<\/code> creates a new variable called <code data-lang=\"py3\">line_length<\/code>. It holds the value <code data-lang=\"py3\">100<\/code>.\nWe can then use the <code data-lang=\"py3\">line_length<\/code> variable to use that number as often as we want.<\/p>\n<p>Change the value of <code data-lang=\"py3\">line_length<\/code> to something else, and see what happens!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nOnce we've got values saved in variables, it's really easy to change how things work in our programs.\n\n```lang:py3;eg:py3-turtle-variable-reuse\nfrom turtle import *\n\nsides = 5\nside_length = 50\n\next_angle = 360\/sides\n\nfor i in range(sides):\n  forward(side_length)\n  left(ext_angle)\n```\n\nTry changing the value saved in the `sides` variable to a different number!"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Reusing variables",
              "content_rendered":"<p>Once we've got values saved in variables, it's really easy to change how things work in our programs.<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-variable-reuse\"><code data-lang=\"py3\">from turtle import *\n\nsides = 5\nside_length = 50\n\next_angle = 360\/sides\n\nfor i in range(sides):\n  forward(side_length)\n  left(ext_angle)\n<\/code><\/pre>\n<p>Try changing the value saved in the <code data-lang=\"py3\">sides<\/code> variable to a different number!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nWe can use `input` to get the computer to ask a question. We might want to know what the user's favourite colour is. We could ask like this:\n\n<pre class=\"js-editor\" data-eg-id=\"py-logo-input-eg1\"><code data-lang=\"py3\">\nfave_colour = input(\"What is your favourite colour? \")\n\nprint(\"You answered: \" + fave_colour)\n<\/code><\/pre>\n\nTry running this a few times and saying different colours!"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Asking Questions",
              "content_rendered":"<p>We can use <code data-lang=\"py3\">input<\/code> to get the computer to ask a question. We might want to know what the user's favourite colour is. We could ask like this:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"py-logo-input-eg1\"><code data-lang=\"py3\">\nfave_colour = input(\"What is your favourite colour? \")\n\nprint(\"You answered: \" + fave_colour)\n<\/code><\/pre>\n<p>Try running this a few times and saying different colours!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Coloured Cards",
              "purpose":"",
              "problem":"aca-python-logo-any-coloured-cards",
              "type":1,
              "problem_id":4742
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nComputers understand information in a different way to how people understand information. \n\nHumans can easily understanding that the spoken word \"dog\", a picture of a dog, or the letters *d*, *o* and *g* all represent the same thing. Computers don't see these similarities - they only see differences.\n\nThis is especially important when dealing with numbers! \n\nIf we ask a question with the computer using `input`, the answer always comes back as a *word* - what we call a **string** (short for *string of characters*). \n\nIf we want to *use* the answer that the user tells us as a number, we need to make sure Python understands it as a *number*.\n\nWe can do this using `int`:\n\n<pre class=\"js-editor\" data-eg-id=\"py-logo-input-square-eg1\"><code data-lang=\"py3\">\nfrom turtle import *\nside_length = input(\"How long should the square sides be? \")\n\nside_length = int(side_length)\n\nfor i in range(4):\n  forward(side_length)\n  right(90)\n<\/code><\/pre>"
                }
              ],
              "layout":0,
              "notes_rendered":"\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Text and numbers are two important types of user input.\n  <\/p>\n  <p>\n    AC:DT requires students to write programs involving <em>user input<\/em> from Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>.\n    Students must <em>predict output for a given input<\/em> in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a>.\n  <\/p>\n<\/aside>\n",
              "notes":[
                {
                  "left":"\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Text and numbers are two important types of user input.\n  <\/p>\n  <p>\n    AC:DT requires students to write programs involving <em>user input<\/em> from Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>.\n    Students must <em>predict output for a given input<\/em> in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a>.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "title":"Numbers and strings are different things!",
              "content_rendered":"<p>Computers understand information in a different way to how people understand information.<\/p>\n<p>Humans can easily understanding that the spoken word &quot;dog&quot;, a picture of a dog, or the letters <em>d<\/em>, <em>o<\/em> and <em>g<\/em> all represent the same thing. Computers don't see these similarities - they only see differences.<\/p>\n<p>This is especially important when dealing with numbers!<\/p>\n<p>If we ask a question with the computer using <code data-lang=\"py3\">input<\/code>, the answer always comes back as a <em>word<\/em> - what we call a <strong>string<\/strong> (short for <em>string of characters<\/em>).<\/p>\n<p>If we want to <em>use<\/em> the answer that the user tells us as a number, we need to make sure Python understands it as a <em>number<\/em>.<\/p>\n<p>We can do this using <code data-lang=\"py3\">int<\/code>:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"py-logo-input-square-eg1\"><code data-lang=\"py3\">\nfrom turtle import *\nside_length = input(\"How long should the square sides be? \")\n\nside_length = int(side_length)\n\nfor i in range(4):\n  forward(side_length)\n  right(90)\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nThe `turtle` functions, like `forward`, only work with numbers.  So if we ask the user for information using `input`, if it's a number, we need to make sure we use `int` to *save* it as a number.\n\n\n<pre class=\"js-editor\" data-eg-id=\"logo-with-strings-eg1\"><code data-lang=\"py3\">\nfrom turtle import *\ndistance = input('How far? ')\nforward(distance)\n<\/code><\/pre>\n\n<p>\n  Because we're calling <code data-lang=\"py3\">forward<\/code> with <code data-lang=\"py3\">'50'<\/code> (a string), instead of <code data-lang=\"py3\">50<\/code> (an integer), it complains with a <code data-lang=\"err\">TypeError<\/code>:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"logo-with-strings-eg1\"><code data-lang=\"py3\">\n<o>How far? <\/o><i>50<\/i>\n<o>Traceback (most recent call last):\n  File \"program.py\", line 3, in &lt;module>\n    forward(distance)\n  File \"\/tmp\/tmpbgmiSJ\/turtle.py\", line 632, in forward\n    raise TypeError('Expected integer or float argument')\nTypeError: Expected integer or float argument<\/o>\n<\/code><\/pre>\n\n<p>\n  Wow, this looks scary, <em>but it isn't<\/em>!  Look at the last line. It says the <code data-lang=\"err\">TypeError<\/code> occurred in our call to <code data-lang=\"py3\">forward<\/code> on <code data-lang=\"err\">line 3<\/code> of <code data-lang=\"err\">program.py<\/code> (our code). The <code data-lang=\"py3\">forward<\/code> function is defined in <code data-lang=\"err\">turtle.py<\/code> (the <code data-lang=\"py3\">turtle<\/code> module file).\n<\/p>\n\n<p>\n  Notice that <strong>where the error is detected isn't where the mistake was made<\/strong> (the missing <code data-lang=\"py3\">int<\/code>).  This is very common in programming.\n<\/p>\n\n<p>We need to convert the string into an integer, like this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"logo-with-strings-eg2\"><code data-lang=\"py3\">\nfrom turtle import *\ndistance = int(input('How far? '))\nforward(distance)\n<\/code><\/pre>\n\n<p>and now it works, because <code data-lang=\"py3\">forward<\/code> is given an integer, not a string.<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Text and numbers are two important types of user input.\n  <\/p>\n  <p>\n    AC:DT requires students to write programs involving <em>user input<\/em> from Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>.\n    Students must <em>predict output for a given input<\/em> in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a>.\n  <\/p>\n<\/aside>\n",
              "notes":[
                {
                  "left":"\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Text and numbers are two important types of user input.\n  <\/p>\n  <p>\n    AC:DT requires students to write programs involving <em>user input<\/em> from Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>.\n    Students must <em>predict output for a given input<\/em> in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a>.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "title":"Asking the user for information",
              "content_rendered":"<p>The <code data-lang=\"py3\">turtle<\/code> functions, like <code data-lang=\"py3\">forward<\/code>, only work with numbers.  So if we ask the user for information using <code data-lang=\"py3\">input<\/code>, if it's a number, we need to make sure we use <code data-lang=\"py3\">int<\/code> to <em>save<\/em> it as a number.<\/p>\n<pre class=\"js-editor\" data-eg-id=\"logo-with-strings-eg1\"><code data-lang=\"py3\">\nfrom turtle import *\ndistance = input('How far? ')\nforward(distance)\n<\/code><\/pre>\n<p>\n  Because we're calling <code data-lang=\"py3\">forward<\/code> with <code data-lang=\"py3\">'50'<\/code> (a string), instead of <code data-lang=\"py3\">50<\/code> (an integer), it complains with a <code data-lang=\"err\">TypeError<\/code>:\n<\/p>\n<pre class=\"js-terminal\" data-eg-id=\"logo-with-strings-eg1\"><code data-lang=\"py3\">\n<o>How far? <\/o><i>50<\/i>\n<o>Traceback (most recent call last):\n  File \"program.py\", line 3, in &lt;module>\n    forward(distance)\n  File \"\/tmp\/tmpbgmiSJ\/turtle.py\", line 632, in forward\n    raise TypeError('Expected integer or float argument')\nTypeError: Expected integer or float argument<\/o>\n<\/code><\/pre>\n<p>\n  Wow, this looks scary, <em>but it isn't<\/em>!  Look at the last line. It says the <code data-lang=\"err\">TypeError<\/code> occurred in our call to <code data-lang=\"py3\">forward<\/code> on <code data-lang=\"err\">line 3<\/code> of <code data-lang=\"err\">program.py<\/code> (our code). The <code data-lang=\"py3\">forward<\/code> function is defined in <code data-lang=\"err\">turtle.py<\/code> (the <code data-lang=\"py3\">turtle<\/code> module file).\n<\/p>\n<p>\n  Notice that <strong>where the error is detected isn't where the mistake was made<\/strong> (the missing <code data-lang=\"py3\">int<\/code>).  This is very common in programming.\n<\/p>\n<p>We need to convert the string into an integer, like this:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"logo-with-strings-eg2\"><code data-lang=\"py3\">\nfrom turtle import *\ndistance = int(input('How far? '))\nforward(distance)\n<\/code><\/pre>\n<p>and now it works, because <code data-lang=\"py3\">forward<\/code> is given an integer, not a string.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nTurtles would be boring if they drew the same shape every time.\n\nNow that we can ask the user for information using `input`, let's ask them how high our top hat should be:\n\n\n```lang:py3;eg:py3-turtle-variable-input\nfrom turtle import *\n\nhat_height = int(input('What height should the hat be? '))\nforward(30)\nleft(90)\nforward(hat_height)\nright(90)\nforward(30)\nright(90)\nforward(hat_height)\nleft(90)\nforward(30)\n```"
                }
              ],
              "layout":0,
              "notes_rendered":"\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Text and numbers are two important types of user input.\n  <\/p>\n  <p>\n    AC:DT requires students to write programs involving <em>user input<\/em> from Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>.\n    Students must <em>predict output for a given input<\/em> in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a>.\n  <\/p>\n<\/aside>\n",
              "notes":[
                {
                  "left":"\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Text and numbers are two important types of user input.\n  <\/p>\n  <p>\n    AC:DT requires students to write programs involving <em>user input<\/em> from Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>.\n    Students must <em>predict output for a given input<\/em> in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a>.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "title":"Using user input",
              "content_rendered":"<p>Turtles would be boring if they drew the same shape every time.<\/p>\n<p>Now that we can ask the user for information using <code data-lang=\"py3\">input<\/code>, let's ask them how high our top hat should be:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-variable-input\"><code data-lang=\"py3\">from turtle import *\n\nhat_height = int(input('What height should the hat be? '))\nforward(30)\nleft(90)\nforward(hat_height)\nright(90)\nforward(30)\nright(90)\nforward(hat_height)\nleft(90)\nforward(30)\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Purple square",
              "purpose":"",
              "problem":"aca-python-logo-any-square-purple",
              "type":1,
              "problem_id":4739
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Step up",
              "purpose":"",
              "problem":"aca-python-logo-step-up-how-many-steps",
              "type":1,
              "problem_id":4743
            }
          ],
          "title":"Variables and input"
        }
      ],
      "title":"Asking Questions",
      "label":"aca-python-turtle-yr78-turtle-input",
      "updated_at":"2018-05-14T06:56:14.097600+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n Let's add some colour! We can set the colour that we're drawing with using `pencolor`:\n\n```lang:py3;eg:py3-logo-pen-colors-equilateral2\nfrom turtle import *\npencolor('blue')\n\nforward(60)\nleft(120)\npencolor('hotpink')\nforward(60)\nleft(120)\npencolor('darkgreen')\nforward(60)\n```\n\n\n\n\n\n<aside class=\"info\">\n  <h2>Most code uses <em>color<\/em> (American spelling)!<\/h2>\n  <p>\n    Most programs and modules (like <code data-lang=\"py3\">turtle<\/code>) will spell colour with the American spelling (c-o-l-o-r, no u) \u2013\u00a0so watch out!\n  <\/p>\n<\/aside>\n\n\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Now with colour!",
              "content_rendered":"<p>Let's add some colour! We can set the colour that we're drawing with using <code data-lang=\"py3\">pencolor<\/code>:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-logo-pen-colors-equilateral2\"><code data-lang=\"py3\">from turtle import *\npencolor('blue')\n\nforward(60)\nleft(120)\npencolor('hotpink')\nforward(60)\nleft(120)\npencolor('darkgreen')\nforward(60)\n<\/code><\/pre>\n<aside class=\"info\">\n  <h2>Most code uses <em>color<\/em> (American spelling)!<\/h2>\n  <p>\n    Most programs and modules (like <code data-lang=\"py3\">turtle<\/code>) will spell colour with the American spelling (c-o-l-o-r, no u) \u2013\u00a0so watch out!\n  <\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nTry some other colour names! But **be careful**, you have to use a colour that the turtle knows about, and you must spell it correctly. \n\n  Here are some of our favourite colours:\n\n<table class=\"table table-hover table-bordered\" style=\"font-size: 14px\">\n  <tbody>\n    <tr><td style=\"background-color: red; color: white\">red<\/td><td style=\"background-color: orangered; color: white\">orangered<\/td><td style=\"background-color: tomato; color: white\">tomato<\/td><td style=\"background-color: coral; color: white\">coral<\/td><td style=\"background-color: salmon; color: white\">salmon<\/td><\/tr>\n    <tr><td style=\"background-color: darkorange; color: white\">darkorange<\/td><td style=\"background-color: orange; color: white\">orange<\/td><td style=\"background-color: goldenrod; color: white\">goldenrod<\/td><td style=\"background-color: gold; color: black\">gold<\/td><td style=\"background-color: yellow; color: black\">yellow<\/td><\/tr>\n    <tr><td style=\"background-color: darkgreen; color: white\">darkgreen<\/td><td style=\"background-color: forestgreen; color: white\">forestgreen<\/td><td style=\"background-color: springgreen; color: black\">springgreen<\/td><td style=\"background-color: lawngreen; color: black\">lawngreen<\/td><td style=\"background-color: #00ff00; color: black\">green<\/td><\/tr>\n    <tr><td style=\"background-color: navy; color: white\">navy<\/td><td style=\"background-color: mediumblue; color: white\">mediumblue<\/td><td style=\"background-color: royalblue; color: white\">royalblue<\/td><td style=\"background-color: cornflowerblue; color: white\">cornflowerblue<\/td><td style=\"background-color: skyblue; color: black\">skyblue<\/td><\/tr>\n    <tr><td style=\"background-color: darkviolet; color: white\">darkviolet<\/td><td style=\"background-color: purple; color: white\">purple<\/td><td style=\"background-color: orchid; color: white\">orchid<\/td><td style=\"background-color: violet; color: white\">violet<\/td><td style=\"background-color: plum; color: black\">plum<\/td><\/tr>    \n    <tr><td style=\"background-color: deeppink; color: white\">deeppink<\/td><td style=\"background-color: hotpink; color: white\">hotpink<\/td><td style=\"background-color: pink; color: black\">pink<\/td><td style=\"background-color: lightpink; color: black\">lightpink<\/td><td style=\"background-color: mistyrose; color: black\">mistyrose<\/td><\/tr>\n    <tr><td style=\"background-color: brown; color: white\">brown<\/td><td style=\"background-color: saddlebrown; color: white\">saddlebrown<\/td><td style=\"background-color: chocolate; color: white\">chocolate<\/td><td style=\"background-color: tan; color: black\">tan<\/td><td style=\"background-color: wheat; color: black\">wheat<\/td><\/tr>\n    <tr><td style=\"background-color: black; color: white\">black<\/td><td style=\"background-color: slategrey; color: white\">slategrey<\/td><td style=\"background-color: dimgray; color: white\">dimgray<\/td><td style=\"background-color: lightgray; color: black\">lightgray<\/td><td style=\"background-color: white; color: black\">white<\/td><\/tr>    \n  <\/tbody>\n<\/table>\n\n\n\nYou can see the whole list of colour names that Turtle understands <a href=\"http:\/\/wiki.tcl.tk\/37701\" target=\"_blank\">here<\/a>.\n\n\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"All the colours of the rainbow!",
              "content_rendered":"<p>Try some other colour names! But <strong>be careful<\/strong>, you have to use a colour that the turtle knows about, and you must spell it correctly.<\/p>\n<p>Here are some of our favourite colours:<\/p>\n<table class=\"table table-hover table-bordered\" style=\"font-size: 14px\">\n  <tbody>\n    <tr><td style=\"background-color: red; color: white\">red<\/td><td style=\"background-color: orangered; color: white\">orangered<\/td><td style=\"background-color: tomato; color: white\">tomato<\/td><td style=\"background-color: coral; color: white\">coral<\/td><td style=\"background-color: salmon; color: white\">salmon<\/td><\/tr>\n    <tr><td style=\"background-color: darkorange; color: white\">darkorange<\/td><td style=\"background-color: orange; color: white\">orange<\/td><td style=\"background-color: goldenrod; color: white\">goldenrod<\/td><td style=\"background-color: gold; color: black\">gold<\/td><td style=\"background-color: yellow; color: black\">yellow<\/td><\/tr>\n    <tr><td style=\"background-color: darkgreen; color: white\">darkgreen<\/td><td style=\"background-color: forestgreen; color: white\">forestgreen<\/td><td style=\"background-color: springgreen; color: black\">springgreen<\/td><td style=\"background-color: lawngreen; color: black\">lawngreen<\/td><td style=\"background-color: #00ff00; color: black\">green<\/td><\/tr>\n    <tr><td style=\"background-color: navy; color: white\">navy<\/td><td style=\"background-color: mediumblue; color: white\">mediumblue<\/td><td style=\"background-color: royalblue; color: white\">royalblue<\/td><td style=\"background-color: cornflowerblue; color: white\">cornflowerblue<\/td><td style=\"background-color: skyblue; color: black\">skyblue<\/td><\/tr>\n    <tr><td style=\"background-color: darkviolet; color: white\">darkviolet<\/td><td style=\"background-color: purple; color: white\">purple<\/td><td style=\"background-color: orchid; color: white\">orchid<\/td><td style=\"background-color: violet; color: white\">violet<\/td><td style=\"background-color: plum; color: black\">plum<\/td><\/tr>    \n    <tr><td style=\"background-color: deeppink; color: white\">deeppink<\/td><td style=\"background-color: hotpink; color: white\">hotpink<\/td><td style=\"background-color: pink; color: black\">pink<\/td><td style=\"background-color: lightpink; color: black\">lightpink<\/td><td style=\"background-color: mistyrose; color: black\">mistyrose<\/td><\/tr>\n    <tr><td style=\"background-color: brown; color: white\">brown<\/td><td style=\"background-color: saddlebrown; color: white\">saddlebrown<\/td><td style=\"background-color: chocolate; color: white\">chocolate<\/td><td style=\"background-color: tan; color: black\">tan<\/td><td style=\"background-color: wheat; color: black\">wheat<\/td><\/tr>\n    <tr><td style=\"background-color: black; color: white\">black<\/td><td style=\"background-color: slategrey; color: white\">slategrey<\/td><td style=\"background-color: dimgray; color: white\">dimgray<\/td><td style=\"background-color: lightgray; color: black\">lightgray<\/td><td style=\"background-color: white; color: black\">white<\/td><\/tr>    \n  <\/tbody>\n<\/table>\n<p>You can see the whole list of colour names that Turtle understands <a href=\"http:\/\/wiki.tcl.tk\/37701\" target=\"_blank\">here<\/a>.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Skyblue Square",
              "purpose":"",
              "problem":"aca-python-logo-square-right-simple-skyblue",
              "type":1,
              "problem_id":4668
            }
          ],
          "title":"Turtle colours"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nThose lines are looking nice and colourful, but they're a bit thin! We can change how thick the pen is using `pensize`.\n\nThe default pen width we have used so far is 1.\n\n```lang:py3;eg:py3-turtle-line-thinkness\nfrom turtle import *\n\npensize(5)\nforward(100)\nleft(90)\n\npensize(10)\nforward(100)\n```\n\nTry it out with different sizes!\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Drawing thicker lines",
              "content_rendered":"<p>Those lines are looking nice and colourful, but they're a bit thin! We can change how thick the pen is using <code data-lang=\"py3\">pensize<\/code>.<\/p>\n<p>The default pen width we have used so far is 1.<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-line-thinkness\"><code data-lang=\"py3\">from turtle import *\n\npensize(5)\nforward(100)\nleft(90)\n\npensize(10)\nforward(100)\n<\/code><\/pre>\n<p>Try it out with different sizes!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"aca-python-logo-solid-thick-house",
              "type":1,
              "problem_id":4669
            }
          ],
          "title":"Turtle lines"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nAs well as changing the colour of lines, we can also fill shapes with colour.\n\nTo fill a shape, we need to tell the turtle when to **begin filling** and when to **end filling**. \n\nWe use `begin_fill` at the beginning of the shape we want to fill, and `end_fill` at the end.\n\nWe also need to set the `fillcolor` to the colour we want!\n\n```lang:py3;eg:py3-turtle-colour-fill1\nfrom turtle import *\n\nfillcolor('red')\nbegin_fill()\nforward(100)\nleft(120)\nforward(100)\nleft(120)\nforward(100)\nleft(120)\nend_fill()\n```\n\n\n\n<p>Try guessing what this program will draw before running the example! Then try changing the fill colour!<\/p>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Filling with colour",
              "content_rendered":"<p>As well as changing the colour of lines, we can also fill shapes with colour.<\/p>\n<p>To fill a shape, we need to tell the turtle when to <strong>begin filling<\/strong> and when to <strong>end filling<\/strong>.<\/p>\n<p>We use <code data-lang=\"py3\">begin_fill<\/code> at the beginning of the shape we want to fill, and <code data-lang=\"py3\">end_fill<\/code> at the end.<\/p>\n<p>We also need to set the <code data-lang=\"py3\">fillcolor<\/code> to the colour we want!<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-colour-fill1\"><code data-lang=\"py3\">from turtle import *\n\nfillcolor('red')\nbegin_fill()\nforward(100)\nleft(120)\nforward(100)\nleft(120)\nforward(100)\nleft(120)\nend_fill()\n<\/code><\/pre>\n<p>Try guessing what this program will draw before running the example! Then try changing the fill colour!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nWe've already seen how drawing shapes is easier with loops, let's draw some shapes with both loops and fills!\n\n```lang:py3;eg:py3-turtle-fill-loops2\nfrom turtle import *\n\nfillcolor('cornflowerblue')\nbegin_fill()\nfor count in range(4):\n  forward(100)\n  left(90)\nend_fill()\n```\n\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Fills and loops",
              "content_rendered":"<p>We've already seen how drawing shapes is easier with loops, let's draw some shapes with both loops and fills!<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-fill-loops2\"><code data-lang=\"py3\">from turtle import *\n\nfillcolor('cornflowerblue')\nbegin_fill()\nfor count in range(4):\n  forward(100)\n  left(90)\nend_fill()\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nThe `begin_fill` and `end_fill` have to go **outside** the whole shape. You can't fill in a single line -- there's nothing to fill in!\n\nThis example is trying to fill in each individual line, but not the whole completed shape:\n\n```lang:py3;eg:py3-turtle-fill-loops-broken\nfrom turtle import *\n\nfillcolor('orange')\nfor count in range(4):\n  begin_fill()\n  forward(100)\n  left(90)\n  end_fill()\n```\n\nSee how the shape isn't coloured in?\n\n<p>If we put the fill <em>inside<\/em> the loop, then the turtle tries to separately fill each side of the shape, which doesn't work!<\/p>\n\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Filling flat out",
              "content_rendered":"<p>The <code data-lang=\"py3\">begin_fill<\/code> and <code data-lang=\"py3\">end_fill<\/code> have to go <strong>outside<\/strong> the whole shape. You can't fill in a single line &ndash; there's nothing to fill in!<\/p>\n<p>This example is trying to fill in each individual line, but not the whole completed shape:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-fill-loops-broken\"><code data-lang=\"py3\">from turtle import *\n\nfillcolor('orange')\nfor count in range(4):\n  begin_fill()\n  forward(100)\n  left(90)\n  end_fill()\n<\/code><\/pre>\n<p>See how the shape isn't coloured in?<\/p>\n<p>If we put the fill <em>inside<\/em> the loop, then the turtle tries to separately fill each side of the shape, which doesn't work!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\n\nThe `begin_fill` and `end_fill` need to be wrapped around the whole shape you want to fill in. \n\nIn this case, that means putting them **outside** the `for` loop:\n```lang:py3;eg:py3-turtle-fill-loops-fixed\nfrom turtle import *\n\nfillcolor('orange')\nbegin_fill()\nfor count in range(4):\n  forward(100)\n  left(90)\nend_fill()\n```\n\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Functional filling",
              "content_rendered":"<p>The <code data-lang=\"py3\">begin_fill<\/code> and <code data-lang=\"py3\">end_fill<\/code> need to be wrapped around the whole shape you want to fill in.<\/p>\n<p>In this case, that means putting them <strong>outside<\/strong> the <code data-lang=\"py3\">for<\/code> loop:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-fill-loops-fixed\"><code data-lang=\"py3\">from turtle import *\n\nfillcolor('orange')\nbegin_fill()\nfor count in range(4):\n  forward(100)\n  left(90)\nend_fill()\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Square Pennant Flags",
              "purpose":"",
              "problem":"aca-python-logo-square-pennant-flags",
              "type":1,
              "problem_id":4670
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Swim between the flags!",
              "purpose":"",
              "problem":"aca-turtle-logo-lifesaving-flag",
              "type":1,
              "problem_id":4671
            }
          ],
          "title":"Filled shapes with the turtle"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\n  It's boring to always have a plain white background. That's why we have a way to set the `bgcolor` - short for **background color**.\n\n```lang:py3;eg:py3-turtle-background-color\nfrom turtle import *\n\nbgcolor('skyblue')\n```\n\n\n<p>\n  Any of the colour names we've seen before will work here. (You can see the full list <a href=\"http:\/\/wiki.tcl.tk\/37701\" target=\"_blank\">here<\/a>).\n<\/p>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Background colours",
              "content_rendered":"<p>It's boring to always have a plain white background. That's why we have a way to set the <code data-lang=\"py3\">bgcolor<\/code> - short for <strong>background color<\/strong>.<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-background-color\"><code data-lang=\"py3\">from turtle import *\n\nbgcolor('skyblue')\n<\/code><\/pre>\n<p>\n  Any of the colour names we've seen before will work here. (You can see the full list <a href=\"http:\/\/wiki.tcl.tk\/37701\" target=\"_blank\">here<\/a>).\n<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Fallout Shelter",
              "purpose":"",
              "problem":"aca-python-logo-fallout-shelter",
              "type":1,
              "problem_id":4672
            }
          ],
          "title":"Advanced Turtle-fu!"
        }
      ],
      "title":"Add a Dash of Colour",
      "label":"aca-python-turtle-yr78-coloured-turtles",
      "updated_at":"2018-05-14T06:56:14.086287+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  So far our programs have been just a sequence of steps that run from top to bottom. The programs <em>run the same way every time<\/em>.\n<\/p>\n\n<p>\n  In the real world, we <strong>decide<\/strong> to <strong>take different steps<\/strong> based on our situation. For example, if it's raining, we do an <em>extra step<\/em> of taking an umbrella before leaving the house.\n<\/p>\n\n<p>\n  This <em>flowchart<\/em> describes this process (or <em>algorithm<\/em>):\n<\/p>\n\n<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xl=\"http:\/\/www.w3.org\/1999\/xlink\" version=\"1.1\" viewBox=\"-2 -2 344 134\" width=\"344pt\" height=\"134pt\" style=\"position: relative; display: block; margin: 0 auto; width: 90%\">\n<defs><marker orient=\"auto\" overflow=\"visible\" markerUnits=\"strokeWidth\" id=\"FilledArrow_Marker\" viewBox=\"-1 -3 7 6\" markerWidth=\"7\" markerHeight=\"6\" color=\"black\"><g><path d=\"M 4.8000002 0 L 0 -1.8000001 L 0 1.8000001 Z\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\"\/><\/g><\/marker><font-face font-family=\"Lato\" font-size=\"12\" panose-1=\"2 15 5 2 2 2 4 3 2 3\" units-per-em=\"1000\" underline-position=\"-51.5\" underline-thickness=\"97\" slope=\"0\" x-height=\"514\" cap-height=\"724\" ascent=\"986.9995\" descent=\"-212.99744\" font-weight=\"500\"><font-face-src><font-face-name name=\"Lato-Regular\"\/><\/font-face-src><\/font-face><\/defs><g stroke=\"none\" stroke-opacity=\"1\" stroke-dasharray=\"none\" fill=\"none\" fill-opacity=\"1\"><g><line x1=\"50.500013\" y1=\"90\" x2=\"66.1\" y2=\"90\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><path d=\"M 120 50 L 120 25 L 157.1 25\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(94.5 30.04491)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"black\" x=\".62619825\" y=\"12\" textLength=\"6.186\">y<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"black\" x=\"6.6441982\" y=\"12\" textLength=\"11.5319996\">es<\/tspan><\/text><path d=\"M 250 25 L 301.5 25 L 301.5 51.5\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><line x1=\"160\" y1=\"90\" x2=\"246.1\" y2=\"90\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(163 95)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".25\" y=\"12\" textLength=\"13.5\">no<\/tspan><\/text><rect x=\"170\" y=\"0\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"170\" y=\"0\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(175 10)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.248\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"20.966\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"32.684\" y=\"12\" textLength=\"22.068001\">e an<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"12.317\" y=\"27\" textLength=\"27.648\">umbr<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"39.719\" y=\"27\" textLength=\"17.964001\">ella<\/tspan><\/text><path d=\"M 120 50 L 160 90 L 120 130 L 80 90 Z\" fill=\"#ff5900\"\/><path d=\"M 120 50 L 160 90 L 120 130 L 80 90 Z\" stroke=\"#ff5900\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(95.8 71)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.685\" y=\"12\" textLength=\"3.3599999\">I<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"18.865\" y=\"12\" textLength=\"18.521999\">s it <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"4.501\" y=\"27\" textLength=\"4.368\">r<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.773\" y=\"27\" textLength=\"36.726002\">aining?<\/tspan><\/text><rect x=\"260\" y=\"65\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"260\" y=\"65\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(265 75)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"9.302\" y=\"12\" textLength=\"54.468\">Leave the <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"19.139\" y=\"27\" textLength=\"31.722\">house<\/tspan><\/text><circle cx=\"25\" cy=\"90\" r=\"25.00004\" fill=\"#7b188f\"\/><circle cx=\"25\" cy=\"90\" r=\"25.00004\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\"\/><text transform=\"translate(10 82.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"2.412\" y=\"12\" textLength=\"6.5100002\">S<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.652\" y=\"12\" textLength=\"18.936001\">tart<\/tspan><\/text><\/g><\/g><\/svg>\n\n<p>\n  The diamond needs a <code data-lang=\"in\">yes<\/code> or <code data-lang=\"in\">no<\/code> decision. \nIf the answer is <code data-lang=\"in\">yes<\/code>, we do the extra step of taking an umbrella. \nIf the answer is <code data-lang=\"in\">no<\/code>, we skip it.\n<\/p>\n\n<p>\n  We can write this in Python using an <code data-lang=\"py3\">if<\/code> statement.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Why do we need decisions?",
              "content_rendered":"<p>\n  So far our programs have been just a sequence of steps that run from top to bottom. The programs <em>run the same way every time<\/em>.\n<\/p>\n\n<p>\n  In the real world, we <strong>decide<\/strong> to <strong>take different steps<\/strong> based on our situation. For example, if it's raining, we do an <em>extra step<\/em> of taking an umbrella before leaving the house.\n<\/p>\n\n<p>\n  This <em>flowchart<\/em> describes this process (or <em>algorithm<\/em>):\n<\/p>\n\n<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xl=\"http:\/\/www.w3.org\/1999\/xlink\" version=\"1.1\" viewBox=\"-2 -2 344 134\" width=\"344pt\" height=\"134pt\" style=\"position: relative; display: block; margin: 0 auto; width: 90%\">\n<defs><marker orient=\"auto\" overflow=\"visible\" markerUnits=\"strokeWidth\" id=\"FilledArrow_Marker\" viewBox=\"-1 -3 7 6\" markerWidth=\"7\" markerHeight=\"6\" color=\"black\"><g><path d=\"M 4.8000002 0 L 0 -1.8000001 L 0 1.8000001 Z\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\"\/><\/g><\/marker><font-face font-family=\"Lato\" font-size=\"12\" panose-1=\"2 15 5 2 2 2 4 3 2 3\" units-per-em=\"1000\" underline-position=\"-51.5\" underline-thickness=\"97\" slope=\"0\" x-height=\"514\" cap-height=\"724\" ascent=\"986.9995\" descent=\"-212.99744\" font-weight=\"500\"><font-face-src><font-face-name name=\"Lato-Regular\"\/><\/font-face-src><\/font-face><\/defs><g stroke=\"none\" stroke-opacity=\"1\" stroke-dasharray=\"none\" fill=\"none\" fill-opacity=\"1\"><g><line x1=\"50.500013\" y1=\"90\" x2=\"66.1\" y2=\"90\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><path d=\"M 120 50 L 120 25 L 157.1 25\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(94.5 30.04491)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"black\" x=\".62619825\" y=\"12\" textLength=\"6.186\">y<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"black\" x=\"6.6441982\" y=\"12\" textLength=\"11.5319996\">es<\/tspan><\/text><path d=\"M 250 25 L 301.5 25 L 301.5 51.5\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><line x1=\"160\" y1=\"90\" x2=\"246.1\" y2=\"90\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(163 95)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".25\" y=\"12\" textLength=\"13.5\">no<\/tspan><\/text><rect x=\"170\" y=\"0\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"170\" y=\"0\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(175 10)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.248\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"20.966\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"32.684\" y=\"12\" textLength=\"22.068001\">e an<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"12.317\" y=\"27\" textLength=\"27.648\">umbr<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"39.719\" y=\"27\" textLength=\"17.964001\">ella<\/tspan><\/text><path d=\"M 120 50 L 160 90 L 120 130 L 80 90 Z\" fill=\"#ff5900\"\/><path d=\"M 120 50 L 160 90 L 120 130 L 80 90 Z\" stroke=\"#ff5900\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(95.8 71)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.685\" y=\"12\" textLength=\"3.3599999\">I<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"18.865\" y=\"12\" textLength=\"18.521999\">s it <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"4.501\" y=\"27\" textLength=\"4.368\">r<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.773\" y=\"27\" textLength=\"36.726002\">aining?<\/tspan><\/text><rect x=\"260\" y=\"65\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"260\" y=\"65\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(265 75)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"9.302\" y=\"12\" textLength=\"54.468\">Leave the <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"19.139\" y=\"27\" textLength=\"31.722\">house<\/tspan><\/text><circle cx=\"25\" cy=\"90\" r=\"25.00004\" fill=\"#7b188f\"\/><circle cx=\"25\" cy=\"90\" r=\"25.00004\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\"\/><text transform=\"translate(10 82.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"2.412\" y=\"12\" textLength=\"6.5100002\">S<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.652\" y=\"12\" textLength=\"18.936001\">tart<\/tspan><\/text><\/g><\/g><\/svg>\n\n<p>\n  The diamond needs a <code data-lang=\"in\">yes<\/code> or <code data-lang=\"in\">no<\/code> decision. \nIf the answer is <code data-lang=\"in\">yes<\/code>, we do the extra step of taking an umbrella. \nIf the answer is <code data-lang=\"in\">no<\/code>, we skip it.\n<\/p>\n\n<p>\n  We can write this in Python using an <code data-lang=\"py3\">if<\/code> statement.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nLet's write our flowchart as a Python program:\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-what-if-it-is-raining-0\"><code data-lang=\"py3\">raining = input('Is it raining (yes\/no)? ')\nif raining == 'yes':\n  print('Take an umbrella.')\nprint('Leave the house.')\n<\/code><\/pre>\n\n<strong>Try it! What happens when you say <code data-lang=\"in\">yes<\/code>, <code data-lang=\"in\">no<\/code>, or any other answer?<\/strong>\n\nNotice that the first <code data-lang=\"py3\">print<\/code> is <em>indented<\/em> (by two spaces). The `print` instruction is used to display characters and text on the screen.\n\nThis indented `print` instruction is the <em>body<\/em> of the <code data-lang=\"py3\">if<\/code> statement.  The body must be indented.\n\n\n\n  If the value stored in <code data-lang=\"py3\">raining<\/code> <em>is equal to<\/em> <code data-lang=\"py3\">'yes'<\/code> (because the user entered <code data-lang=\"in\">yes<\/code>), then the body is run. Otherwise, it is skipped.\n\n\n<p>\n  The second <code data-lang=\"py3\">print<\/code> always runs, because it is not indented, and isn't controlled by the <code data-lang=\"py3\">if<\/code> statement.\n<\/p>\n\n<aside class=\"info\">\n  <h2>An <code data-lang=\"py3\">if<\/code> statement is a <em>control structure<\/em><\/h2>\n  <p>\n    The <code data-lang=\"py3\">if<\/code> statement <em>controls<\/em> how the program runs by deciding if the body is run or not.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"What if it is raining?",
              "content_rendered":"<p>Let's write our flowchart as a Python program:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-what-if-it-is-raining-0\"><code data-lang=\"py3\">raining = input('Is it raining (yes\/no)? ')\nif raining == 'yes':\n  print('Take an umbrella.')\nprint('Leave the house.')\n<\/code><\/pre>\n<p><strong>Try it! What happens when you say <code data-lang=\"in\">yes<\/code>, <code data-lang=\"in\">no<\/code>, or any other answer?<\/strong><\/p>\n<p>Notice that the first <code data-lang=\"py3\">print<\/code> is <em>indented<\/em> (by two spaces). The <code data-lang=\"py3\">print<\/code> instruction is used to display characters and text on the screen.<\/p>\n<p>This indented <code data-lang=\"py3\">print<\/code> instruction is the <em>body<\/em> of the <code data-lang=\"py3\">if<\/code> statement.  The body must be indented.<\/p>\n<p>If the value stored in <code data-lang=\"py3\">raining<\/code> <em>is equal to<\/em> <code data-lang=\"py3\">'yes'<\/code> (because the user entered <code data-lang=\"in\">yes<\/code>), then the body is run. Otherwise, it is skipped.<\/p>\n<p>\n  The second <code data-lang=\"py3\">print<\/code> always runs, because it is not indented, and isn't controlled by the <code data-lang=\"py3\">if<\/code> statement.\n<\/p>\n<aside class=\"info\">\n  <h2>An <code data-lang=\"py3\">if<\/code> statement is a <em>control structure<\/em><\/h2>\n  <p>\n    The <code data-lang=\"py3\">if<\/code> statement <em>controls<\/em> how the program runs by deciding if the body is run or not.\n  <\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nWe can use `if` to make decisions with the Turtle, too! \n\n![Flowchart for making a colourful image with the turtle](https:\/\/groklearning-cdn.com\/modules\/2aPopNxZzzav7WLxMKZEbV\/decisions-turtle.png)\n\nThis might look something like this in code:\n\n```lang:py3;eg:py3-turtle-decisions-colourful\nfrom turtle import *\ncolourful = input('Make it colourful? ')\nif colourful == 'yes':\n  bgcolor('yellow')\n  pencolor('darkgreen')\nforward(50)\n\n```"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Decisions with the Turtle",
              "content_rendered":"<p>We can use <code data-lang=\"py3\">if<\/code> to make decisions with the Turtle, too!<\/p>\n<p><figure class=\"align-center\">\n<img src=\"https:\/\/groklearning-cdn.com\/modules\/2aPopNxZzzav7WLxMKZEbV\/decisions-turtle.png\" title=\"Flowchart for making a colourful image with the turtle\" alt=\"Flowchart for making a colourful image with the turtle\" width=\"90%\">\n<figcaption>\nFlowchart for making a colourful image with the turtle\n<\/figcaption>\n<\/figure>\n<\/p>\n<p>This might look something like this in code:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-decisions-colourful\"><code data-lang=\"py3\">from turtle import *\ncolourful = input('Make it colourful? ')\nif colourful == 'yes':\n  bgcolor('yellow')\n  pencolor('darkgreen')\nforward(50)\n\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nAn <code data-lang=\"py3\">if<\/code> statement can control more than one statement in its body.\n\nThese statements must have the same indentation, like this:\n\n```lang:py3;eg:py3-turtle-decisions-colourful2\nfrom turtle import *\ncolourful = input('Make it colourful? ')\nif colourful == 'yes':\n  bgcolor('yellow')\n  pencolor('darkgreen')\n  pensize(5)\nforward(50)\n\n```\n\nIf the user types in `\"yes\"` then all the indented lines (the <em>block<\/em>) will be executed first, then continue on with the rest of the program.\n\nIf it's anything else, those lines will be skipped and the next not-indented line (`forward(50)`) will be executed.\n\n<aside class=\"info\">\n  <h2>Careful with spaces!<\/h2>\n  <p> The number of spaces of indent must be to the same depth for every statement in the block. This example is broken because the indentation of the two lines is different:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-controlling-a-block-of-code-1\"><code data-lang=\"py3\">food = input('What food do you like? ')\nif food == 'cake':\n  print('Wow, I love cake too!')\n    print('Did I tell you I like cake?')\n<\/code><\/pre>\n  <p>You can fix it by making both <code data-lang=\"py3\">print<\/code> statements indented by the same number of spaces (usually 2 or 4).<\/p>  \n<\/aside>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Controlling a block of code",
              "content_rendered":"<p>An <code data-lang=\"py3\">if<\/code> statement can control more than one statement in its body.<\/p>\n<p>These statements must have the same indentation, like this:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-turtle-decisions-colourful2\"><code data-lang=\"py3\">from turtle import *\ncolourful = input('Make it colourful? ')\nif colourful == 'yes':\n  bgcolor('yellow')\n  pencolor('darkgreen')\n  pensize(5)\nforward(50)\n\n<\/code><\/pre>\n<p>If the user types in <code data-lang=\"py3\">&quot;yes&quot;<\/code> then all the indented lines (the <em>block<\/em>) will be executed first, then continue on with the rest of the program.<\/p>\n<p>If it's anything else, those lines will be skipped and the next not-indented line (<code data-lang=\"py3\">forward(50)<\/code>) will be executed.<\/p>\n<aside class=\"info\">\n  <h2>Careful with spaces!<\/h2>\n  <p> The number of spaces of indent must be to the same depth for every statement in the block. This example is broken because the indentation of the two lines is different:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-controlling-a-block-of-code-1\"><code data-lang=\"py3\">food = input('What food do you like? ')\nif food == 'cake':\n  print('Wow, I love cake too!')\n    print('Did I tell you I like cake?')\n<\/code><\/pre>\n  <p>You can fix it by making both <code data-lang=\"py3\">print<\/code> statements indented by the same number of spaces (usually 2 or 4).<\/p>  \n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\n  You will notice in our examples that we are using two equals signs to check whether the variable is equal to a particular value:\n\n```lang:py3;eg:py3-turtle-decisions-assignment;norun\ncolourful = input(\"Draw a background? \")\nif colourful == 'yes':\n  bgcolor('yellow')\n```\n\nThis can seem quite confusing for beginner programmers.\n\nA single `=` is used for <em>assignment<\/em>.\nThis is what we do to set variables.\nThe first line of the program above is setting the variable <code data-lang=\"py3\">colourful<\/code> to the value <code data-lang=\"py3\">\"yes\"<\/code> using a single equals sign.\n\n\n  A double <code data-lang=\"py3\">==<\/code> is used for <em>comparison<\/em>.\n  This is what we do to check whether two things are equal.\n  The second line of the program above is checking whether the variable <code data-lang=\"py3\">colourful<\/code> is equal to \"yes\"<\/code> using a double equals sign.\n\n\n  If you do accidentally mix these up, Python will help by giving you a <code data-lang=\"py3\">SyntaxError<\/code>.\n  For example, try running this program:\n\n<pre class=\"js-editor\" data-eg-id=\"assignment-ve-comparison-eg1\"><code data-lang=\"py3\">colourful = input(\"Draw a background? \")\nif colourful = \"yes\":\n  bgcolor(\"yellow\")\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"assignment-ve-comparison-eg1\"><code data-lang=\"py3\">  File \"program.py\", line 2\n    if colourful = \"yes\":\n            ^\nSyntaxError: invalid syntax\n<\/code><\/pre>\n\n\nThe second line only has one equals sign where it should have two.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Assignment vs. comparison",
              "content_rendered":"<p>You will notice in our examples that we are using two equals signs to check whether the variable is equal to a particular value:<\/p>\n<pre style=\"\" data-runnable=\"false\" class=\"js-editor\" data-eg-id=\"py3-turtle-decisions-assignment\"><code data-lang=\"py3\">colourful = input(&quot;Draw a background? &quot;)\nif colourful == 'yes':\n  bgcolor('yellow')\n<\/code><\/pre>\n<p>This can seem quite confusing for beginner programmers.<\/p>\n<p>A single <code data-lang=\"py3\">=<\/code> is used for <em>assignment<\/em>.\nThis is what we do to set variables.\nThe first line of the program above is setting the variable <code data-lang=\"py3\">colourful<\/code> to the value <code data-lang=\"py3\">&quot;yes&quot;<\/code> using a single equals sign.<\/p>\n<p>A double <code data-lang=\"py3\">==<\/code> is used for <em>comparison<\/em>.\nThis is what we do to check whether two things are equal.\nThe second line of the program above is checking whether the variable <code data-lang=\"py3\">colourful<\/code> is equal to &quot;yes&quot;<\/code> using a double equals sign.<\/p>\n<p>If you do accidentally mix these up, Python will help by giving you a <code data-lang=\"py3\">SyntaxError<\/code>.\nFor example, try running this program:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"assignment-ve-comparison-eg1\"><code data-lang=\"py3\">colourful = input(\"Draw a background? \")\nif colourful = \"yes\":\n  bgcolor(\"yellow\")\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"assignment-ve-comparison-eg1\"><code data-lang=\"py3\">  File \"program.py\", line 2\n    if colourful = \"yes\":\n            ^\nSyntaxError: invalid syntax\n<\/code><\/pre>\n<p>The second line only has one equals sign where it should have two.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Studybot - Highlighter or Pen",
              "purpose":"",
              "problem":"aca-python-logo-highlighter-or-pen",
              "type":1,
              "problem_id":4744
            }
          ],
          "title":"Making decisions"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\n`if` statements allow you to make <em>yes<\/em> or <em>no<\/em> decisions.\n  In Python these are called `True` and `False`.\n\nSometimes, we want an extra part to the `if` statement which is only run when a *condition* is `False`.\n\n\n<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xl=\"http:\/\/www.w3.org\/1999\/xlink\" version=\"1.1\" viewBox=\"-2 248 344 184\" width=\"344pt\" height=\"184pt\" style=\"position: relative; display: block; margin: 0 auto; width: 90%\"><defs><marker orient=\"auto\" overflow=\"visible\" markerUnits=\"strokeWidth\" id=\"FilledArrow_Marker\" viewBox=\"-1 -3 7 6\" markerWidth=\"7\" markerHeight=\"6\" color=\"black\"><g><path d=\"M 4.8000002 0 L 0 -1.8000001 L 0 1.8000001 Z\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\"><\/path><\/g><\/marker><font-face font-family=\"Lato\" font-size=\"12\" panose-1=\"2 15 5 2 2 2 4 3 2 3\" units-per-em=\"1000\" underline-position=\"-51.5\" underline-thickness=\"97\" slope=\"0\" x-height=\"514\" cap-height=\"724\" ascent=\"986.9995\" descent=\"-212.99744\" font-weight=\"500\"><font-face-src><font-face-name name=\"Lato-Regular\"><\/font-face-name><\/font-face-src><\/font-face><\/defs><g stroke=\"none\" stroke-opacity=\"1\" stroke-dasharray=\"none\" fill=\"none\" fill-opacity=\"1\"><g><path d=\"M 120 380 L 120 405 L 157.5 405\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/path><line x1=\"50.500013\" y1=\"340\" x2=\"66.1\" y2=\"340\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/line><path d=\"M 120 300 L 120 275 L 157.1 275\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/path><text transform=\"translate(94.5 280.04491)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".62619825\" y=\"12\" textLength=\"6.186\">y<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\"6.6441982\" y=\"12\" textLength=\"11.5319996\">es<\/tspan><\/text><path d=\"M 250 275 L 300 275 L 300 300\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/path><rect x=\"170\" y=\"250\" width=\"80\" height=\"50\" fill=\"#7b188f\"><\/rect><rect x=\"170\" y=\"250\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/rect><text transform=\"translate(175 260)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.248\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"20.966\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"32.684\" y=\"12\" textLength=\"22.068001\">e an<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"12.317\" y=\"27\" textLength=\"27.648\">umbr<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"39.719\" y=\"27\" textLength=\"17.964001\">ella<\/tspan><\/text><path d=\"M 120 300 L 160 340 L 120 380 L 80 340 Z\" fill=\"#ff5900\"><\/path><path d=\"M 120 300 L 160 340 L 120 380 L 80 340 Z\" stroke=\"#ff5900\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/path><text transform=\"translate(95.8 321)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.685\" y=\"12\" textLength=\"3.3599999\">I<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"18.865\" y=\"12\" textLength=\"18.521999\">s it <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"4.501\" y=\"27\" textLength=\"4.368\">r<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.773\" y=\"27\" textLength=\"36.726002\">aining?<\/tspan><\/text><rect x=\"260\" y=\"315\" width=\"80\" height=\"50\" fill=\"#7b188f\"><\/rect><rect x=\"260\" y=\"315\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/rect><text transform=\"translate(265 325)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"9.302\" y=\"12\" textLength=\"54.468\">Leave the <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"19.139\" y=\"27\" textLength=\"31.722\">house<\/tspan><\/text><circle cx=\"25\" cy=\"340\" r=\"25.00004\" fill=\"#7b188f\"><\/circle><circle cx=\"25\" cy=\"340\" r=\"25.00004\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\"><\/circle><text transform=\"translate(10 332.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"2.412\" y=\"12\" textLength=\"6.5100002\">S<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.652\" y=\"12\" textLength=\"18.936001\">tart<\/tspan><\/text><rect x=\"170\" y=\"380\" width=\"80\" height=\"50\" fill=\"#7b188f\"><\/rect><rect x=\"170\" y=\"380\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/rect><text transform=\"translate(175 397.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.618\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"14.336\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"26.054\" y=\"12\" textLength=\"31.104\">e a ha<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"57.08\" y=\"12\" textLength=\"4.302\">t<\/tspan><\/text><text transform=\"translate(96.9012 382.9551)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".25\" y=\"12\" textLength=\"13.5\">no<\/tspan><\/text><path d=\"M 250 405 L 300 404.91018 L 300 378.9\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/path><\/g><\/g><\/svg>\n\nIf the user says `yes` it is raining, then the program should say to take an umbrella, but otherwise it should say to put on a hat.\n\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Decisions with two options",
              "content_rendered":"<p><code data-lang=\"py3\">if<\/code> statements allow you to make <em>yes<\/em> or <em>no<\/em> decisions.\nIn Python these are called <code data-lang=\"py3\">True<\/code> and <code data-lang=\"py3\">False<\/code>.<\/p>\n<p>Sometimes, we want an extra part to the <code data-lang=\"py3\">if<\/code> statement which is only run when a <em>condition<\/em> is <code data-lang=\"py3\">False<\/code>.<\/p>\n<p><svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xl=\"http:\/\/www.w3.org\/1999\/xlink\" version=\"1.1\" viewBox=\"-2 248 344 184\" width=\"344pt\" height=\"184pt\" style=\"position: relative; display: block; margin: 0 auto; width: 90%\"><defs><marker orient=\"auto\" overflow=\"visible\" markerUnits=\"strokeWidth\" id=\"FilledArrow_Marker\" viewBox=\"-1 -3 7 6\" markerWidth=\"7\" markerHeight=\"6\" color=\"black\"><g><path d=\"M 4.8000002 0 L 0 -1.8000001 L 0 1.8000001 Z\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\"><\/path><\/g><\/marker><font-face font-family=\"Lato\" font-size=\"12\" panose-1=\"2 15 5 2 2 2 4 3 2 3\" units-per-em=\"1000\" underline-position=\"-51.5\" underline-thickness=\"97\" slope=\"0\" x-height=\"514\" cap-height=\"724\" ascent=\"986.9995\" descent=\"-212.99744\" font-weight=\"500\"><font-face-src><font-face-name name=\"Lato-Regular\"><\/font-face-name><\/font-face-src><\/font-face><\/defs><g stroke=\"none\" stroke-opacity=\"1\" stroke-dasharray=\"none\" fill=\"none\" fill-opacity=\"1\"><g><path d=\"M 120 380 L 120 405 L 157.5 405\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/path><line x1=\"50.500013\" y1=\"340\" x2=\"66.1\" y2=\"340\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/line><path d=\"M 120 300 L 120 275 L 157.1 275\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/path><text transform=\"translate(94.5 280.04491)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".62619825\" y=\"12\" textLength=\"6.186\">y<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\"6.6441982\" y=\"12\" textLength=\"11.5319996\">es<\/tspan><\/text><path d=\"M 250 275 L 300 275 L 300 300\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/path><rect x=\"170\" y=\"250\" width=\"80\" height=\"50\" fill=\"#7b188f\"><\/rect><rect x=\"170\" y=\"250\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/rect><text transform=\"translate(175 260)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.248\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"20.966\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"32.684\" y=\"12\" textLength=\"22.068001\">e an<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"12.317\" y=\"27\" textLength=\"27.648\">umbr<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"39.719\" y=\"27\" textLength=\"17.964001\">ella<\/tspan><\/text><path d=\"M 120 300 L 160 340 L 120 380 L 80 340 Z\" fill=\"#ff5900\"><\/path><path d=\"M 120 300 L 160 340 L 120 380 L 80 340 Z\" stroke=\"#ff5900\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/path><text transform=\"translate(95.8 321)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.685\" y=\"12\" textLength=\"3.3599999\">I<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"18.865\" y=\"12\" textLength=\"18.521999\">s it <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"4.501\" y=\"27\" textLength=\"4.368\">r<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.773\" y=\"27\" textLength=\"36.726002\">aining?<\/tspan><\/text><rect x=\"260\" y=\"315\" width=\"80\" height=\"50\" fill=\"#7b188f\"><\/rect><rect x=\"260\" y=\"315\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/rect><text transform=\"translate(265 325)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"9.302\" y=\"12\" textLength=\"54.468\">Leave the <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"19.139\" y=\"27\" textLength=\"31.722\">house<\/tspan><\/text><circle cx=\"25\" cy=\"340\" r=\"25.00004\" fill=\"#7b188f\"><\/circle><circle cx=\"25\" cy=\"340\" r=\"25.00004\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\"><\/circle><text transform=\"translate(10 332.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"2.412\" y=\"12\" textLength=\"6.5100002\">S<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.652\" y=\"12\" textLength=\"18.936001\">tart<\/tspan><\/text><rect x=\"170\" y=\"380\" width=\"80\" height=\"50\" fill=\"#7b188f\"><\/rect><rect x=\"170\" y=\"380\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/rect><text transform=\"translate(175 397.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.618\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"14.336\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"26.054\" y=\"12\" textLength=\"31.104\">e a ha<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"57.08\" y=\"12\" textLength=\"4.302\">t<\/tspan><\/text><text transform=\"translate(96.9012 382.9551)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".25\" y=\"12\" textLength=\"13.5\">no<\/tspan><\/text><path d=\"M 250 405 L 300 404.91018 L 300 378.9\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"><\/path><\/g><\/g><\/svg><\/p>\n<p>If the user says <code data-lang=\"py3\">yes<\/code> it is raining, then the program should say to take an umbrella, but otherwise it should say to put on a hat.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nIn Python the `else` keyword specifies the steps to follow if the condition is `False` (in this case if it's **not** raining).\n\nIf the user says `yes` it is raining then the first *block* is executed, otherwise, the second *block* is executed instead:\n\n```eg:eg-g1-if-it-isnt-raining-0;lang:py3;\n\nraining = input('Is it raining? ')\nif raining == 'yes':\n  print('Pick up an umbrella.')\nelse:\n  print('Put on a hat.')\n```\n\nThe program will **never** say to pick up an umbrella *and* put on a hat!\n\n> ## Don't forget the colon!\n> Notice the `else` keyword must be followed by a `:` character, just like the `if` statement.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"If it isn't raining...",
              "content_rendered":"<p>In Python the <code data-lang=\"py3\">else<\/code> keyword specifies the steps to follow if the condition is <code data-lang=\"py3\">False<\/code> (in this case if it's <strong>not<\/strong> raining).<\/p>\n<p>If the user says <code data-lang=\"py3\">yes<\/code> it is raining then the first <em>block<\/em> is executed, otherwise, the second <em>block<\/em> is executed instead:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"eg-g1-if-it-isnt-raining-0\"><code data-lang=\"py3\">\nraining = input('Is it raining? ')\nif raining == 'yes':\n  print('Pick up an umbrella.')\nelse:\n  print('Put on a hat.')\n<\/code><\/pre>\n<p>The program will <strong>never<\/strong> say to pick up an umbrella <em>and<\/em> put on a hat!<\/p>\n<aside class=\"info\">\n<h2>Don't forget the colon!<\/h2>\n<p>Notice the <code data-lang=\"py3\">else<\/code> keyword must be followed by a <code data-lang=\"py3\">:<\/code> character, just like the <code data-lang=\"py3\">if<\/code> statement.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Traffic light",
              "purpose":"",
              "problem":"aca-python-logo-square-traffic-light",
              "type":1,
              "problem_id":4748
            }
          ],
          "title":"Decisions with two options"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>So far we have only checked whether two things are equal. However, there are other ways to compare things (particularly when we are using numbers). We can use the following <em>comparison operators<\/em> in <code data-lang=\"py3\">if<\/code> statements:<\/p>\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr><th>Operation<\/th><th>Operator<\/th><\/tr>\n  <\/thead>\n  <tbody>\n    <tr><td>equal to<\/td><td><code data-lang=\"py3\">==<\/code><\/td><\/tr>\n    <tr><td>not equal to<\/td><td><code data-lang=\"py3\">!=<\/code><\/td><\/tr>\n    <tr><td>less than<\/td><td><code data-lang=\"py3\">&lt;<\/code><\/td><\/tr>\n    <tr><td>less than or equal to<\/td><td><code data-lang=\"py3\">&lt;=<\/code><\/td><\/tr>\n    <tr><td>greater than<\/td><td><code data-lang=\"py3\">&gt;<\/code><\/td><\/tr>\n    <tr><td>greater than or equal to<\/td><td><code data-lang=\"py3\">&gt;=<\/code><\/td><\/tr>\n  <\/tbody>\n<\/table>\n\n<p>You can use a <code data-lang=\"py3\">print<\/code> statement to test these operators in conditional expressions:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"boolean-testing-for-control1\"><code data-lang=\"py3\">\nx = 3\nprint(x &lt; 10)\n<\/code><\/pre>\n\n<p>This prints <code data-lang=\"py3\">True<\/code> because 3 is less than 10.<\/p>\n<pre class=\"js-editor\" data-eg-id=\"boolean-testing-for-control2\"><code data-lang=\"py3\">\nx = 3\nprint(x &gt; 10)\n<\/code><\/pre>\n<p>This prints <code data-lang=\"py3\">False<\/code> because 3 is not greater than 10.<\/p>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"How do we compare things?",
              "content_rendered":"<p>So far we have only checked whether two things are equal. However, there are other ways to compare things (particularly when we are using numbers). We can use the following <em>comparison operators<\/em> in <code data-lang=\"py3\">if<\/code> statements:<\/p>\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr><th>Operation<\/th><th>Operator<\/th><\/tr>\n  <\/thead>\n  <tbody>\n    <tr><td>equal to<\/td><td><code data-lang=\"py3\">==<\/code><\/td><\/tr>\n    <tr><td>not equal to<\/td><td><code data-lang=\"py3\">!=<\/code><\/td><\/tr>\n    <tr><td>less than<\/td><td><code data-lang=\"py3\">&lt;<\/code><\/td><\/tr>\n    <tr><td>less than or equal to<\/td><td><code data-lang=\"py3\">&lt;=<\/code><\/td><\/tr>\n    <tr><td>greater than<\/td><td><code data-lang=\"py3\">&gt;<\/code><\/td><\/tr>\n    <tr><td>greater than or equal to<\/td><td><code data-lang=\"py3\">&gt;=<\/code><\/td><\/tr>\n  <\/tbody>\n<\/table>\n\n<p>You can use a <code data-lang=\"py3\">print<\/code> statement to test these operators in conditional expressions:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"boolean-testing-for-control1\"><code data-lang=\"py3\">\nx = 3\nprint(x &lt; 10)\n<\/code><\/pre>\n\n<p>This prints <code data-lang=\"py3\">True<\/code> because 3 is less than 10.<\/p>\n<pre class=\"js-editor\" data-eg-id=\"boolean-testing-for-control2\"><code data-lang=\"py3\">\nx = 3\nprint(x &gt; 10)\n<\/code><\/pre>\n<p>This prints <code data-lang=\"py3\">False<\/code> because 3 is not greater than 10.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Let's try some more examples to demonstrate how conditional operators work. Firstly, we have less than or equal to (<code data-lang=\"py3\">&lt;=<\/code>):<\/p>\n<pre class=\"js-editor\" data-eg-id=\"op-lte\"><code data-lang=\"py3\">\nx = 5\nprint(x &lt;= 10)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"op-lte\"><code data-lang=\"py3\">\n<o>True\n<\/o>\n<\/code><\/pre>\n<p>Any value of <code data-lang=\"py3\">x<\/code> up to and including 10 will result in <code data-lang=\"py3\">True<\/code>. Any value of <code data-lang=\"py3\">x<\/code> greater than 10 will result in <code data-lang=\"py3\">False<\/code>. The opposite is true for greater than or equal to (<code data-lang=\"py3\">&gt;=<\/code>).<\/p>\n\n<p>Another important operator is not equal to (<code data-lang=\"py3\">!=<\/code>):<\/p>\n<pre class=\"js-editor\" data-eg-id=\"op-gte\"><code data-lang=\"py3\">\nx = 5\nprint(x != 10)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"op-gte\"><code data-lang=\"py3\">\n<o>True\n<\/o>\n<\/code><\/pre>\n<p>Notice this program prints <code data-lang=\"py3\">True<\/code> because 5 is not equal to 10. This can be a bit confusing - see what happens if you change the value of <code data-lang=\"py3\">x<\/code> to 10.<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Experimenting with comparison",
              "content_rendered":"<p>Let's try some more examples to demonstrate how conditional operators work. Firstly, we have less than or equal to (<code data-lang=\"py3\">&lt;=<\/code>):<\/p>\n<pre class=\"js-editor\" data-eg-id=\"op-lte\"><code data-lang=\"py3\">\nx = 5\nprint(x &lt;= 10)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"op-lte\"><code data-lang=\"py3\">\n<o>True\n<\/o>\n<\/code><\/pre>\n<p>Any value of <code data-lang=\"py3\">x<\/code> up to and including 10 will result in <code data-lang=\"py3\">True<\/code>. Any value of <code data-lang=\"py3\">x<\/code> greater than 10 will result in <code data-lang=\"py3\">False<\/code>. The opposite is true for greater than or equal to (<code data-lang=\"py3\">&gt;=<\/code>).<\/p>\n\n<p>Another important operator is not equal to (<code data-lang=\"py3\">!=<\/code>):<\/p>\n<pre class=\"js-editor\" data-eg-id=\"op-gte\"><code data-lang=\"py3\">\nx = 5\nprint(x != 10)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"op-gte\"><code data-lang=\"py3\">\n<o>True\n<\/o>\n<\/code><\/pre>\n<p>Notice this program prints <code data-lang=\"py3\">True<\/code> because 5 is not equal to 10. This can be a bit confusing - see what happens if you change the value of <code data-lang=\"py3\">x<\/code> to 10.<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Now we can bring together everything we've learned in this section, and write programs that make decisions based on numerical input.\n  The example below makes two decisions based on the value in <code data-lang=\"py3\">x<\/code>:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g2-making-decisions-with-numbers-0\"><code data-lang=\"py3\">x = 3\nif x &lt;= 3:\n  print('x is less than or equal to three')\nelse:\n  print('x is greater than three')\n<\/code><\/pre>\n<p>\n  Try assigning different values to <code data-lang=\"py3\">x<\/code> to change how the program executes.\n<\/p>\n<p>\n  We could do something similar, but with user input:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g2-making-decisions-with-numbers-1\"><code data-lang=\"py3\">height = int(input('How many cm tall are you? '))\nif height == 157:\n  print('You are the same height as Kylie Minogue.')\nelse:\n  print('You are not the same height as Kylie Minogue.')\n<\/code><\/pre>\n<p>\n  Remember you have to convert input to an integer using the <code data-lang=\"py3\">int<\/code> function if you want to do numerical comparisons.\n<\/p>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Making decisions with numbers",
              "content_rendered":"<p>\n  Now we can bring together everything we've learned in this section, and write programs that make decisions based on numerical input.\n  The example below makes two decisions based on the value in <code data-lang=\"py3\">x<\/code>:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g2-making-decisions-with-numbers-0\"><code data-lang=\"py3\">x = 3\nif x &lt;= 3:\n  print('x is less than or equal to three')\nelse:\n  print('x is greater than three')\n<\/code><\/pre>\n<p>\n  Try assigning different values to <code data-lang=\"py3\">x<\/code> to change how the program executes.\n<\/p>\n<p>\n  We could do something similar, but with user input:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g2-making-decisions-with-numbers-1\"><code data-lang=\"py3\">height = int(input('How many cm tall are you? '))\nif height == 157:\n  print('You are the same height as Kylie Minogue.')\nelse:\n  print('You are not the same height as Kylie Minogue.')\n<\/code><\/pre>\n<p>\n  Remember you have to convert input to an integer using the <code data-lang=\"py3\">int<\/code> function if you want to do numerical comparisons.\n<\/p>",
              "purpose":"",
              "type":0
            }
          ],
          "title":"Decisions about numbers"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nSometimes, we want to make decisions with more than two options. We can use `elif` short for *else if* to compare multiple things in the same check:\n\n```eg:eg-g3-interplanetary-visitor-0;lang:py3;\nplanet = input('What planet are you from? ')\nif planet == 'Earth':\n  print('Hello Earthling friend.')\nelif planet == 'Mars':\n  print('Hello Martian friend.')\nelif planet == 'Jupiter':\n  print('Hello Jovian friend.')\nelif planet == 'Pluto':\n  print('Pluto is not a planet!')\nelse:\n  print('I do not know your planet.')\n\n```\n\nYou can add as many `elif` clauses as you like, to deal with different cases.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Interplanetary visitor",
              "content_rendered":"<p>Sometimes, we want to make decisions with more than two options. We can use <code data-lang=\"py3\">elif<\/code> short for <em>else if<\/em> to compare multiple things in the same check:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"eg-g3-interplanetary-visitor-0\"><code data-lang=\"py3\">planet = input('What planet are you from? ')\nif planet == 'Earth':\n  print('Hello Earthling friend.')\nelif planet == 'Mars':\n  print('Hello Martian friend.')\nelif planet == 'Jupiter':\n  print('Hello Jovian friend.')\nelif planet == 'Pluto':\n  print('Pluto is not a planet!')\nelse:\n  print('I do not know your planet.')\n\n<\/code><\/pre>\n<p>You can add as many <code data-lang=\"py3\">elif<\/code> clauses as you like, to deal with different cases.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: The Three Little Pigs",
              "purpose":"",
              "problem":"aca-python-logo-three-little-pigs-house-loop",
              "type":1,
              "problem_id":4749
            }
          ],
          "title":"Making complex decisions"
        }
      ],
      "title":"Making Decisions",
      "label":"aca-python-turtle-yr78-if",
      "updated_at":"2018-05-14T06:56:14.152213+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Meet the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Turtle_graphics\" target=\"_blank\">turtle<\/a>!<\/p>\n\n<pre class=\"js-logo-animation\"><code data-lang=\"logo\" style=\"display: none\">\n[\"begin_animation\",400,300,10,\"a1c29740-31a1-11e5-acfe-a45e60b77597\"]\n[\"create_shape\",0,[[0,0],[-5,-9],[0,-7],[5,-9]],{\"pencolor\":[0,0,0],\"outline\":1,\"pensize\":1,\"fillcolor\":[0,0,0],\"filled\":true}]\n[\"change_shape\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]]]\n[\"pen\",{\"heading\":0.0,\"outline\":1,\"fillcolor\":[0,0,0],\"tilt\":0.0,\"pencolor\":[0,0,0],\"shown\":true,\"pensize\":1,\"pendown\":false,\"speed\":3}]\n[\"left\",1.5707963267948966]\n[\"forward\",50.0]\n[\"pen\",{\"heading\":1.5707963267948966,\"pendown\":true}]\n[\"left\",-1.5707963267948966]\n[\"left\",-0.9424777960769379]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"left\",-0.9424777960769379]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"left\",-0.9424777960769379]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"left\",-0.9424777960769379]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"left\",-0.9424777960769379]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"end_animation\"]\n<\/code><\/pre>\n\n<p>\n  In this course, you'll be using the programming language Python to drive the turtle. \n  It's fun, and what you'll learn is the basis for all <a href=\"https:\/\/en.wikipedia.org\/wiki\/Vector_graphics\" target=\"_blank\">vector graphics<\/a> in computers.\n<\/p>\n\n<p>\n  Your job is to write Python code to drive the turtle.  What you'll learn is the basis for all <a href=\"https:\/\/en.wikipedia.org\/wiki\/Vector_graphics\" target=\"_blank\">vector graphics<\/a>.\n<\/p>\n\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Module introducing statements, the building blocks of code. Statements are needed for implementation in Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a>, 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>, 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030\" target=\"_blank\">ACTDIP030<\/a>, and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP041\" target=\"_blank\">ACTDIP041<\/a> even though statements are not mentioned explicitly in the content descriptions.\n  <\/p>\n<\/aside>\n<aside class=\"info\">\n<h2>Teacher Notes Available!<\/h2>\n<p>Lesson plans and support are available on the <a target=\"_blank\" href=\"https:\/\/aca.edu.au\/challenges\/\">Australian Computing Academy website<\/a>.<\/p>\n<\/aside>\n<p>\n  Turtle is an implementation of <a href=\"https:\/\/en.wikipedia.org\/wiki\/Turtle_graphics\" target=\"_blank\">turtle graphics<\/a> originating from Seymour Papert's <a href=\"https:\/\/en.wikipedia.org\/wiki\/Logo_(programming_language)\" target=\"_blank\">Logo<\/a> from the 1960's.\n<\/p>\n<p>\nThis version uses Python, a general purpose text base programming language, to move and rotate the turtle while it draws lines and shapes, with various line and fill properties. \n<\/p>\n<p>\nWe also have a Blockly course, which follows a similar trajectory to this course. The Blockly version uses visual programming blocks, and is based upon Python's <code data-lang=\"py3\">turtle<\/code> module. If you'd like, you can use the Blockly version to give some students a leg up, then swap them into this version.\n<\/p>\n<p>\n  Turtle graphics has seen an educational resurgence recently \u2013\u00a0the immediate visual feedback; natural integration of coding with maths, especially geometry; and opportunities for artistic expression continue to delight teachers and students.\n<\/p>\n<aside class=\"info\">\n  <h2>We automark the lines and shapes<\/h2>\n  <p>\n    Our intelligent automarker checks the shapes drawn by the turtle. <strong>It ignores the direction and order they are drawn in.<\/strong>\n  <\/p>\n  <p>\n    As long as the shapes are <em>where<\/em> they should be, you can draw them however you wish.  There are many correct answers!\n  <\/p>\n<\/aside>\n<p>\n  Thanks for giving the DT Challenge a go!\n<\/p>\n<p>\n  <strong>The most important thing is to get kids exploring the examples.<\/strong>\n<\/p>\n<p>\n  Students who run, modify, and then rerun the examples have a much better chance of understanding how the code works.\n<\/p>\n<p>\n  <strong>It's even better if they break the code so it doesn't work any more!<\/strong>\n<\/p>\n<p>\n  That way, they learn how code breaks, and can fix it themselves. They can swap back to the original by clicking the <span class=\"icon-undo2\" style=\"font-size: 16px\"><\/span> button.\n<\/p>\n<aside class=\"info\">\n  <h2>Creative Commons Attribution 4.0 licence<\/h2>\n  <p>All of the material in this Australian Digital Technologies Challenge has been licensed under Creative Commonts Attribution 4.0.  This means you can copy and adapt the material for any purpose, as long as you include an attribution for the Australian Computing Academy.<\/p>\n<\/aside>",
              "notes":[
                {
                  "left":"#markdown\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Module introducing statements, the building blocks of code. Statements are needed for implementation in Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a>, 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>, 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030\" target=\"_blank\">ACTDIP030<\/a>, and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP041\" target=\"_blank\">ACTDIP041<\/a> even though statements are not mentioned explicitly in the content descriptions.\n  <\/p>\n<\/aside>\n\n> ## Teacher Notes Available!\n> Lesson plans and support are available on the [Australian Computing Academy website](https:\/\/aca.edu.au\/challenges\/).\n\n\n<p>\n  Turtle is an implementation of <a href=\"https:\/\/en.wikipedia.org\/wiki\/Turtle_graphics\" target=\"_blank\">turtle graphics<\/a> originating from Seymour Papert's <a href=\"https:\/\/en.wikipedia.org\/wiki\/Logo_(programming_language)\" target=\"_blank\">Logo<\/a> from the 1960's.\n<\/p>\n\n<p>\nThis version uses Python, a general purpose text base programming language, to move and rotate the turtle while it draws lines and shapes, with various line and fill properties. \n<\/p>\n\n<p>\nWe also have a Blockly course, which follows a similar trajectory to this course. The Blockly version uses visual programming blocks, and is based upon Python's <code data-lang=\"py3\">turtle<\/code> module. If you'd like, you can use the Blockly version to give some students a leg up, then swap them into this version.\n<\/p>\n\n<p>\n  Turtle graphics has seen an educational resurgence recently \u2013\u00a0the immediate visual feedback; natural integration of coding with maths, especially geometry; and opportunities for artistic expression continue to delight teachers and students.\n<\/p>\n\n<aside class=\"info\">\n  <h2>We automark the lines and shapes<\/h2>\n  <p>\n    Our intelligent automarker checks the shapes drawn by the turtle. <strong>It ignores the direction and order they are drawn in.<\/strong>\n  <\/p>\n  <p>\n    As long as the shapes are <em>where<\/em> they should be, you can draw them however you wish.  There are many correct answers!\n  <\/p>\n<\/aside>\n\n<p>\n  Thanks for giving the DT Challenge a go!\n<\/p>\n\n<p>\n  <strong>The most important thing is to get kids exploring the examples.<\/strong>\n<\/p>\n\n<p>\n  Students who run, modify, and then rerun the examples have a much better chance of understanding how the code works.\n<\/p>\n\n<p>\n  <strong>It's even better if they break the code so it doesn't work any more!<\/strong>\n<\/p>\n\n<p>\n  That way, they learn how code breaks, and can fix it themselves. They can swap back to the original by clicking the <span class=\"icon-undo2\" style=\"font-size: 16px\"><\/span> button.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Creative Commons Attribution 4.0 licence<\/h2>\n  <p>All of the material in this Australian Digital Technologies Challenge has been licensed under Creative Commonts Attribution 4.0.  This means you can copy and adapt the material for any purpose, as long as you include an attribution for the Australian Computing Academy.<\/p>\n<\/aside>\n"
                }
              ],
              "title":"Introducing the turtle",
              "content_rendered":"<p>Meet the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Turtle_graphics\" target=\"_blank\">turtle<\/a>!<\/p>\n\n<pre class=\"js-logo-animation\"><code data-lang=\"logo\" style=\"display: none\">\n[\"begin_animation\",400,300,10,\"a1c29740-31a1-11e5-acfe-a45e60b77597\"]\n[\"create_shape\",0,[[0,0],[-5,-9],[0,-7],[5,-9]],{\"pencolor\":[0,0,0],\"outline\":1,\"pensize\":1,\"fillcolor\":[0,0,0],\"filled\":true}]\n[\"change_shape\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]]]\n[\"pen\",{\"heading\":0.0,\"outline\":1,\"fillcolor\":[0,0,0],\"tilt\":0.0,\"pencolor\":[0,0,0],\"shown\":true,\"pensize\":1,\"pendown\":false,\"speed\":3}]\n[\"left\",1.5707963267948966]\n[\"forward\",50.0]\n[\"pen\",{\"heading\":1.5707963267948966,\"pendown\":true}]\n[\"left\",-1.5707963267948966]\n[\"left\",-0.9424777960769379]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"left\",-0.9424777960769379]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"left\",-0.9424777960769379]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"left\",-0.9424777960769379]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"left\",-0.9424777960769379]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"end_animation\"]\n<\/code><\/pre>\n\n<p>\n  In this course, you'll be using the programming language Python to drive the turtle. \n  It's fun, and what you'll learn is the basis for all <a href=\"https:\/\/en.wikipedia.org\/wiki\/Vector_graphics\" target=\"_blank\">vector graphics<\/a> in computers.\n<\/p>\n\n<p>\n  Your job is to write Python code to drive the turtle.  What you'll learn is the basis for all <a href=\"https:\/\/en.wikipedia.org\/wiki\/Vector_graphics\" target=\"_blank\">vector graphics<\/a>.\n<\/p>\n\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  <code data-lang=\"py3\">turtle<\/code> is a Python <em>module<\/em>. It's an extra part of the Python language, so we need to import its functions by putting an <code data-lang=\"py3\">import<\/code> statement at the top of each program:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-logo-zig-zag\"><code data-lang=\"py3\">\nfrom turtle import *\nforward(100)\n<\/code><\/pre>\n\n<p>\n  The <code data-lang=\"py3\">*<\/code> means <em>everything<\/em>, so this imports all of the functions from the <code data-lang=\"py3\">turtle<\/code> module. <strong>Run this example to see what it does!<\/strong>\n<\/p>\n\n<aside class=\"info\">\n  <h2>Where is the turtle?<\/h2>\n  <p>The turtle module is only enabled on turtle questions. If you want to start playing around, skip ahead to the next question before coming back to read the notes.<\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Turtle Modules",
              "content_rendered":"<p>\n  <code data-lang=\"py3\">turtle<\/code> is a Python <em>module<\/em>. It's an extra part of the Python language, so we need to import its functions by putting an <code data-lang=\"py3\">import<\/code> statement at the top of each program:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-logo-zig-zag\"><code data-lang=\"py3\">\nfrom turtle import *\nforward(100)\n<\/code><\/pre>\n\n<p>\n  The <code data-lang=\"py3\">*<\/code> means <em>everything<\/em>, so this imports all of the functions from the <code data-lang=\"py3\">turtle<\/code> module. <strong>Run this example to see what it does!<\/strong>\n<\/p>\n\n<aside class=\"info\">\n  <h2>Where is the turtle?<\/h2>\n  <p>The turtle module is only enabled on turtle questions. If you want to start playing around, skip ahead to the next question before coming back to read the notes.<\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Let's make the turtle move! Click the <span class=\"icon-play4\" style=\"font-size: 16px\"><\/span> button:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-aca-logo-left\"><code data-lang=\"py3\">\nfrom turtle import *\nforward(100)\n<\/code><\/pre>\n\n<p>When you run the Python code, it makes the turtle move forward!<\/p>\n\n<p>The number is the number of <em>turtle steps<\/em> to move. A bigger number will move the turtle further.<\/p>\n\n<p>Try changing the <code data-lang=\"py3\">100<\/code> to <code data-lang=\"py3\">30<\/code> in the code snippet above and see how far the turtle moves.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>\n  Students find turtle problems hard for three main reasons:\n<\/p>\n\n<ul>\n  <li>the moves and turns are from the <strong>turtle's point of view<\/strong>. If the turtle is facing right, a <bk class=\"lib\">move forward<\/bk> will take the turtle further to the right;<\/li>\n  <li>the angle calculations are tricky \u2013\u00a0you need to <strong>calculate the change in the turtle's direction<\/strong>, not the angle between the lines it draws;<\/li>\n  <li>a <strong>single error can make a mess<\/strong>\u00a0\u2013\u00a0once the turtle is off track, it usually stays off track. A single error can feel overwhelmingly like many many errors.\n<\/ul>\n\n<p>\n  <strong>Students need to focus on fixing the first error the turtle makes.<\/strong>\n<\/p>\n\n<p>\n  In the automarker feedback, we show them the expected output as a dotted line, so they can see when the turtle stops following it.\n<\/p>\n\n",
              "notes":[
                {
                  "left":"<p>\n  Students find turtle problems hard for three main reasons:\n<\/p>\n\n<ul>\n  <li>the moves and turns are from the <strong>turtle's point of view<\/strong>. If the turtle is facing right, a <bk class=\"lib\">move forward<\/bk> will take the turtle further to the right;<\/li>\n  <li>the angle calculations are tricky \u2013\u00a0you need to <strong>calculate the change in the turtle's direction<\/strong>, not the angle between the lines it draws;<\/li>\n  <li>a <strong>single error can make a mess<\/strong>\u00a0\u2013\u00a0once the turtle is off track, it usually stays off track. A single error can feel overwhelmingly like many many errors.\n<\/ul>\n\n<p>\n  <strong>Students need to focus on fixing the first error the turtle makes.<\/strong>\n<\/p>\n\n<p>\n  In the automarker feedback, we show them the expected output as a dotted line, so they can see when the turtle stops following it.\n<\/p>\n\n"
                }
              ],
              "title":"Move forward",
              "content_rendered":"<p>Let's make the turtle move! Click the <span class=\"icon-play4\" style=\"font-size: 16px\"><\/span> button:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-aca-logo-left\"><code data-lang=\"py3\">\nfrom turtle import *\nforward(100)\n<\/code><\/pre>\n\n<p>When you run the Python code, it makes the turtle move forward!<\/p>\n\n<p>The number is the number of <em>turtle steps<\/em> to move. A bigger number will move the turtle further.<\/p>\n\n<p>Try changing the <code data-lang=\"py3\">100<\/code> to <code data-lang=\"py3\">30<\/code> in the code snippet above and see how far the turtle moves.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Make a move!",
              "purpose":"",
              "problem":"aca-python-turtle-move-forward",
              "type":1,
              "problem_id":4641
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  <strong>You can think of an <em>angle<\/em> as a <em>change of direction<\/em>.<\/strong>\n  The angle between two lines is the turn you'd make to go from one line to the other.  Here, the lines are the turtle's old and new directions.\n<\/p>\n\n<p>\n  Angles can be measured in <em>degrees<\/em> (written as \u00b0).  A 360\u00b0 turn is a complete circle (a <em>revolution<\/em>).  Other turns are fractions of 360\u00b0.\n<\/p>\n\n<p>\n  <strong>Try our interactive diagram! You can drag the <span style=\"color: #bbb\">grey<\/span> turtle around.<\/strong>\n<\/p>\n\n<iframe src=\"https:\/\/static.groklearning-cdn.com\/static\/images\/interactive-svgs\/logo-angles-1.svg\" width=\"100%\" height=\"360\" style=\"border: none\"><\/iframe>\n\n<p>\n  <strong>Turning a quarter of a circle (to face sideways) is 360\u00b0&nbsp;\u00f7&nbsp;4&nbsp;=&nbsp;90\u00b0.<\/strong><br>\n  This is called a <em>right angle<\/em> (don't confuse it with turning right!)\n<\/p>\n    \n<p>\n  <strong>Turning half a circle (to face backwards) is 360\u00b0&nbsp;\u00f7&nbsp;2&nbsp;=&nbsp;180\u00b0.<\/strong><br>\n  This is called a <em>straight angle<\/em> (it looks like a straight line).\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Cross curricular linking<\/h2>\n  <p>\n    Angles information on the following slides introduces, reinforces and builds upon and towards:\n<\/p>\n<ul>\n<li>\n  <strong>Year 3:<\/strong> Identify angles as measures of turn and compare angle sizes in everyday situations <a href=\"https:\/\/www.australiancurriculum.edu.au\/Search\/?q=ACMMG064\" target=\"_blank\">ACMMG064<\/a>\n<\/li>\n<li>\n  <strong>Year 4:<\/strong> Compare angles and classify them as equal to, greater than, or less than, a right angle <a href=\"https:\/\/www.australiancurriculum.edu.au\/Search\/?q=ACMMG089\" target=\"_blank\">ACMMG089<\/a>, especially elaboration: <em> creating angles and comparing them to a right angle using digital technologies<\/em>\n<\/li>\n<li>\n  <strong>Year 5:<\/strong> Estimate, measure and compare angles using degrees. Construct angles using a protractor <a href=\"https:\/\/www.australiancurriculum.edu.au\/Search\/?q=ACMMG112\" target=\"_blank\">ACMMG112<\/a>\n<\/li>\n<li>\n  <strong>Year 6:<\/strong> Investigate, with and without digital technologies, angles on a straight line, angles at a point and vertically opposite angles. Use results to find unknown angles\n <a href=\"https:\/\/www.australiancurriculum.edu.au\/Search\/?q=ACMMG141\" target=\"_blank\">ACMMG141<\/a>\n<\/li>\n<li>\n  <strong>Year 7:<\/strong> Classify triangles according to their side and angle properties and describe quadrilaterals <a href=\"https:\/\/www.australiancurriculum.edu.au\/Search\/?q=ACMMG165\" target=\"_blank\">ACMMG165<\/a>\n<\/li>\n<li>\n  <strong>Year 8:<\/strong> Establish properties of quadrilaterals using congruent triangles and angle properties, and solve related numerical problems using reasoning <a href=\"https:\/\/www.australiancurriculum.edu.au\/Search\/?q=ACMMG165\" target=\"_blank\">ACMMG202<\/a>\n<\/li>\n<\/ul>\n<\/aside>",
              "notes":[
                {
                  "left":"#markdown \n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Cross curricular linking<\/h2>\n  <p>\n    Angles information on the following slides introduces, reinforces and builds upon and towards:\n<\/p>\n<ul>\n<li>\n  <strong>Year 3:<\/strong> Identify angles as measures of turn and compare angle sizes in everyday situations <a href=\"https:\/\/www.australiancurriculum.edu.au\/Search\/?q=ACMMG064\" target=\"_blank\">ACMMG064<\/a>\n<\/li>\n<li>\n  <strong>Year 4:<\/strong> Compare angles and classify them as equal to, greater than, or less than, a right angle <a href=\"https:\/\/www.australiancurriculum.edu.au\/Search\/?q=ACMMG089\" target=\"_blank\">ACMMG089<\/a>, especially elaboration: <em> creating angles and comparing them to a right angle using digital technologies<\/em>\n<\/li>\n<li>\n  <strong>Year 5:<\/strong> Estimate, measure and compare angles using degrees. Construct angles using a protractor <a href=\"https:\/\/www.australiancurriculum.edu.au\/Search\/?q=ACMMG112\" target=\"_blank\">ACMMG112<\/a>\n<\/li>\n<li>\n  <strong>Year 6:<\/strong> Investigate, with and without digital technologies, angles on a straight line, angles at a point and vertically opposite angles. Use results to find unknown angles\n <a href=\"https:\/\/www.australiancurriculum.edu.au\/Search\/?q=ACMMG141\" target=\"_blank\">ACMMG141<\/a>\n<\/li>\n\n<li>\n  <strong>Year 7:<\/strong> Classify triangles according to their side and angle properties and describe quadrilaterals <a href=\"https:\/\/www.australiancurriculum.edu.au\/Search\/?q=ACMMG165\" target=\"_blank\">ACMMG165<\/a>\n<\/li>\n<li>\n  <strong>Year 8:<\/strong> Establish properties of quadrilaterals using congruent triangles and angle properties, and solve related numerical problems using reasoning <a href=\"https:\/\/www.australiancurriculum.edu.au\/Search\/?q=ACMMG165\" target=\"_blank\">ACMMG202<\/a>\n<\/li>\n<\/ul>\n\n<\/aside>\n"
                }
              ],
              "title":"What do these \u00b0 signs mean?",
              "content_rendered":"<p>\n  <strong>You can think of an <em>angle<\/em> as a <em>change of direction<\/em>.<\/strong>\n  The angle between two lines is the turn you'd make to go from one line to the other.  Here, the lines are the turtle's old and new directions.\n<\/p>\n\n<p>\n  Angles can be measured in <em>degrees<\/em> (written as \u00b0).  A 360\u00b0 turn is a complete circle (a <em>revolution<\/em>).  Other turns are fractions of 360\u00b0.\n<\/p>\n\n<p>\n  <strong>Try our interactive diagram! You can drag the <span style=\"color: #bbb\">grey<\/span> turtle around.<\/strong>\n<\/p>\n\n<iframe src=\"https:\/\/static.groklearning-cdn.com\/static\/images\/interactive-svgs\/logo-angles-1.svg\" width=\"100%\" height=\"360\" style=\"border: none\"><\/iframe>\n\n<p>\n  <strong>Turning a quarter of a circle (to face sideways) is 360\u00b0&nbsp;\u00f7&nbsp;4&nbsp;=&nbsp;90\u00b0.<\/strong><br>\n  This is called a <em>right angle<\/em> (don't confuse it with turning right!)\n<\/p>\n    \n<p>\n  <strong>Turning half a circle (to face backwards) is 360\u00b0&nbsp;\u00f7&nbsp;2&nbsp;=&nbsp;180\u00b0.<\/strong><br>\n  This is called a <em>straight angle<\/em> (it looks like a straight line).\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  <strong>The turtle always starts off facing to the right.<\/strong>\n<\/p>\n\n<p>\n  If you want to change which way the turtle is facing, you can turn <code data-lang=\"py3\">left<\/code> or turn <code data-lang=\"py3\">right<\/code>. These functions need the angle to turn in degrees. Here we're turning left by 90\u00b0 (a right angle):\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-logo-left\"><code data-lang=\"py3\">\nfrom turtle import *\nleft(90)\n<\/code><\/pre>\n\n<p>Now the turtle is facing the top of the screen.<\/p>\n\n<p>\n  If you turn a total of 360\u00b0 then the turtle will end up facing the same way as how it started, because 360\u00b0 is a full circle:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-logo-rev\"><code data-lang=\"py3\">from turtle import *\nright(90)\nright(180)\nright(90)\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>\n  There are several buttons to control the turtle animations:\n<\/p>\n\n<div class=\"logo-preview\" style=\"border-bottom: 0\">\n  <div class=\"logo-preview-top-bar\" style=\"display: inline-block\">\n    <menu class=\"logo-preview-actions\">\n      <button class=\"action js-play\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Play animation\" style=\"display: inline-block;\">\n        <span class=\"icon icon-loop\"><\/span>\n      <\/button>\n      <button class=\"action js-pause\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Pause animation\" style=\"display: none;\">\n        <span class=\"icon icon-pause2\"><\/span>\n      <\/button>\n      <button class=\"action js-stop\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Stop animation\" style=\"display: none;\">\n        <span class=\"icon icon-stop2\"><\/span>\n      <\/button>\n      <button class=\"action js-turtle\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Toggle turtle\">\n        <span class=\"icon icon-eye-blocked\"><\/span>\n      <\/button>\n      <button class=\"action js-grid\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Toggle grid lines\">\n        <span class=\"icon icon-grid7\"><\/span>\n      <\/button>\n    <\/menu>\n  <\/div>\n<\/div>\n\n<p>\n  The <span class=\"icon icon-loop\"><\/span> button (re)plays the animation, regardless of whether the program is running.  The <span class=\"icon icon-eye-blocked\"><\/span> button toggles the turtle visibility itself, so you can just see the lines being drawn.  The <span class=\"icon icon-grid7\"><\/span> button toggles a 50-step grid centred on the turtle's starting point.\n<\/p>\n\n<p>\n  When the animation is running, you will see:\n<\/p>\n\n<div class=\"logo-preview\" style=\"border-bottom: 0\">\n  <div class=\"logo-preview-top-bar\" style=\"display: inline-block\">\n    <menu class=\"logo-preview-actions\">\n      <button class=\"action js-play\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Play animation\" style=\"display: none;\">\n        <span class=\"icon icon-loop\"><\/span>\n      <\/button>\n      <button class=\"action js-pause\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Pause animation\" style=\"display: inline-block;\">\n        <span class=\"icon icon-pause2\"><\/span>\n      <\/button>\n      <button class=\"action js-stop\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Stop animation\" style=\"display: inline-block;\">\n        <span class=\"icon icon-stop2\"><\/span>\n      <\/button>\n      <button class=\"action js-turtle\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Toggle turtle\">\n        <span class=\"icon icon-eye-blocked\"><\/span>\n      <\/button>\n      <button class=\"action js-grid\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Toggle grid lines\">\n        <span class=\"icon icon-grid7\"><\/span>\n      <\/button>\n    <\/menu>\n  <\/div>\n<\/div>\n\n<p>\n  These extra buttons allow you to pause <span class=\"icon icon-pause2\"><\/span> and stop <span class=\"icon icon-stop2\"><\/span> the animation before it finishes.\n<\/p>\n",
              "notes":[
                {
                  "left":"<p>\n  There are several buttons to control the turtle animations:\n<\/p>\n\n<div class=\"logo-preview\" style=\"border-bottom: 0\">\n  <div class=\"logo-preview-top-bar\" style=\"display: inline-block\">\n    <menu class=\"logo-preview-actions\">\n      <button class=\"action js-play\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Play animation\" style=\"display: inline-block;\">\n        <span class=\"icon icon-loop\"><\/span>\n      <\/button>\n      <button class=\"action js-pause\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Pause animation\" style=\"display: none;\">\n        <span class=\"icon icon-pause2\"><\/span>\n      <\/button>\n      <button class=\"action js-stop\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Stop animation\" style=\"display: none;\">\n        <span class=\"icon icon-stop2\"><\/span>\n      <\/button>\n      <button class=\"action js-turtle\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Toggle turtle\">\n        <span class=\"icon icon-eye-blocked\"><\/span>\n      <\/button>\n      <button class=\"action js-grid\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Toggle grid lines\">\n        <span class=\"icon icon-grid7\"><\/span>\n      <\/button>\n    <\/menu>\n  <\/div>\n<\/div>\n\n<p>\n  The <span class=\"icon icon-loop\"><\/span> button (re)plays the animation, regardless of whether the program is running.  The <span class=\"icon icon-eye-blocked\"><\/span> button toggles the turtle visibility itself, so you can just see the lines being drawn.  The <span class=\"icon icon-grid7\"><\/span> button toggles a 50-step grid centred on the turtle's starting point.\n<\/p>\n\n<p>\n  When the animation is running, you will see:\n<\/p>\n\n<div class=\"logo-preview\" style=\"border-bottom: 0\">\n  <div class=\"logo-preview-top-bar\" style=\"display: inline-block\">\n    <menu class=\"logo-preview-actions\">\n      <button class=\"action js-play\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Play animation\" style=\"display: none;\">\n        <span class=\"icon icon-loop\"><\/span>\n      <\/button>\n      <button class=\"action js-pause\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Pause animation\" style=\"display: inline-block;\">\n        <span class=\"icon icon-pause2\"><\/span>\n      <\/button>\n      <button class=\"action js-stop\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Stop animation\" style=\"display: inline-block;\">\n        <span class=\"icon icon-stop2\"><\/span>\n      <\/button>\n      <button class=\"action js-turtle\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Toggle turtle\">\n        <span class=\"icon icon-eye-blocked\"><\/span>\n      <\/button>\n      <button class=\"action js-grid\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Toggle grid lines\">\n        <span class=\"icon icon-grid7\"><\/span>\n      <\/button>\n    <\/menu>\n  <\/div>\n<\/div>\n\n<p>\n  These extra buttons allow you to pause <span class=\"icon icon-pause2\"><\/span> and stop <span class=\"icon icon-stop2\"><\/span> the animation before it finishes.\n<\/p>\n"
                }
              ],
              "title":"Turning corners",
              "content_rendered":"<p>\n  <strong>The turtle always starts off facing to the right.<\/strong>\n<\/p>\n\n<p>\n  If you want to change which way the turtle is facing, you can turn <code data-lang=\"py3\">left<\/code> or turn <code data-lang=\"py3\">right<\/code>. These functions need the angle to turn in degrees. Here we're turning left by 90\u00b0 (a right angle):\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-logo-left\"><code data-lang=\"py3\">\nfrom turtle import *\nleft(90)\n<\/code><\/pre>\n\n<p>Now the turtle is facing the top of the screen.<\/p>\n\n<p>\n  If you turn a total of 360\u00b0 then the turtle will end up facing the same way as how it started, because 360\u00b0 is a full circle:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-logo-rev\"><code data-lang=\"py3\">from turtle import *\nright(90)\nright(180)\nright(90)\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  The turtle follows instructions <strong>from its point of view<\/strong>.  If the turtle is facing right, calling <code data-lang=\"py3\">forward<\/code> will make the turtle move forward for it (but towards the right of the screen for you).\n<\/p>\n\n<p>\nYou can combine turtle instructions to draw shapes:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-aca-logo-equil-triangle\"><code data-lang=\"py3\">\nfrom turtle import *\nforward(100)\nright(120)\nforward(100)\nright(120)\nforward(100)\n<\/code><\/pre>\n\n<p>Here we've drawn a triangle with 60\u00b0 angles, and 100 turtle steps on each side.  Since the sides are equal length, we've drawn an <a href=\"https:\/\/en.wikipedia.org\/wiki\/Equilateral_triangle\" target=\"_blank\">equilateral triangle<\/em>.<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Drawing a shape",
              "content_rendered":"<p>\n  The turtle follows instructions <strong>from its point of view<\/strong>.  If the turtle is facing right, calling <code data-lang=\"py3\">forward<\/code> will make the turtle move forward for it (but towards the right of the screen for you).\n<\/p>\n\n<p>\nYou can combine turtle instructions to draw shapes:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-aca-logo-equil-triangle\"><code data-lang=\"py3\">\nfrom turtle import *\nforward(100)\nright(120)\nforward(100)\nright(120)\nforward(100)\n<\/code><\/pre>\n\n<p>Here we've drawn a triangle with 60\u00b0 angles, and 100 turtle steps on each side.  Since the sides are equal length, we've drawn an <a href=\"https:\/\/en.wikipedia.org\/wiki\/Equilateral_triangle\" target=\"_blank\">equilateral triangle<\/em>.<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Starting from Square One",
              "purpose":"",
              "problem":"aca-python-turtle-square",
              "type":1,
              "problem_id":4642
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Get rect!",
              "purpose":"",
              "problem":"aca-python-logo-rectangle",
              "type":1,
              "problem_id":4643
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Domino",
              "purpose":"",
              "problem":"aca-python-logo-domino",
              "type":1,
              "problem_id":4644
            }
          ],
          "title":"Turtle"
        }
      ],
      "title":"Introducing the Turtle",
      "label":"aca-python-turtle-yr78-turtle-intro",
      "updated_at":"2018-05-14T06:56:14.173283+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  <strong>Remember that you can think of an <em>angle<\/em> as a <em>change of direction<\/em>.<\/strong>\n  The angle between two lines is the turn you'd make to go from one line to the other.  Here, the lines are the turtle's old and new directions.\n<\/p>\n\n<p>\n  We've added a green <em>internal<\/em> angle between the two lines in our diagram.  You can see the 180\u00b0&nbsp;\u2013&nbsp;<span style=\"color: blue\">150\u00b0<\/span>&nbsp;=&nbsp;<span style=\"color: green\">30\u00b0<\/span> turn you need:\n<\/p>\n\n<iframe src=\"https:\/\/static.groklearning-cdn.com\/static\/images\/interactive-svgs\/logo-angles-2.svg\" width=\"100%\" height=\"360\" style=\"border: none\"><\/iframe>\n\n<p>\n  <strong>If you get stuck with angle calculations, use the diagram!<\/strong>\n<\/p>\n\n\n<pre class=\"js-editor\" data-eg-id=\"aca-turn-angle-eg1\"><code data-lang=\"py3\">\nfrom turtle import *\nright(30)\nforward(100)\n<\/code><\/pre>\n\n<pre class=\"js-logo-animation\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"a3c73376-34b8-11e8-966b-f9112b6bf709\"]\n[\"create_shape\",\"a3c7414a-34b8-11e8-966b-f9112b6bf709\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"filled\":true,\"pensize\":1,\"fillcolor\":[0,0,0],\"pencolor\":[0,0,0]}]\n[\"left\",-0.5235987755982988]\n[\"forward\",100]\n[\"end_animation\"]\n<\/code><\/pre>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Spin me right round!",
              "content_rendered":"<p>\n  <strong>Remember that you can think of an <em>angle<\/em> as a <em>change of direction<\/em>.<\/strong>\n  The angle between two lines is the turn you'd make to go from one line to the other.  Here, the lines are the turtle's old and new directions.\n<\/p>\n\n<p>\n  We've added a green <em>internal<\/em> angle between the two lines in our diagram.  You can see the 180\u00b0&nbsp;\u2013&nbsp;<span style=\"color: blue\">150\u00b0<\/span>&nbsp;=&nbsp;<span style=\"color: green\">30\u00b0<\/span> turn you need:\n<\/p>\n\n<iframe src=\"https:\/\/static.groklearning-cdn.com\/static\/images\/interactive-svgs\/logo-angles-2.svg\" width=\"100%\" height=\"360\" style=\"border: none\"><\/iframe>\n\n<p>\n  <strong>If you get stuck with angle calculations, use the diagram!<\/strong>\n<\/p>\n\n\n<pre class=\"js-editor\" data-eg-id=\"aca-turn-angle-eg1\"><code data-lang=\"py3\">\nfrom turtle import *\nright(30)\nforward(100)\n<\/code><\/pre>\n\n<pre class=\"js-logo-animation\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"a3c73376-34b8-11e8-966b-f9112b6bf709\"]\n[\"create_shape\",\"a3c7414a-34b8-11e8-966b-f9112b6bf709\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"filled\":true,\"pensize\":1,\"fillcolor\":[0,0,0],\"pencolor\":[0,0,0]}]\n[\"left\",-0.5235987755982988]\n[\"forward\",100]\n[\"end_animation\"]\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: 45 angle",
              "purpose":"",
              "problem":"aca-python-turtle-plate-bowl",
              "type":1,
              "problem_id":4645
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Equilateral triangle",
              "purpose":"",
              "problem":"aca-python-turtle-equilateral-triangle-no-variable",
              "type":1,
              "problem_id":4657
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: House",
              "purpose":"",
              "problem":"aca-blockly-logo-house-no-variables-0",
              "type":1,
              "problem_id":4658
            }
          ],
          "title":"Angles"
        }
      ],
      "title":"Angles with the Turtle",
      "label":"aca-python-turtle-yr78-turtle-intro-angles",
      "updated_at":"2018-05-14T06:56:16.266886+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\n**Congratulations on making it through the course!** You've learnt so much!\n\n\nWe've put together a few extension questions and some advanced Turtle tips and tricks to challenge you even more. Have a go, and also try out your skills in our Turtle Playground question at the end where you can draw whatever you like! \n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Congratulations!",
              "content_rendered":"<p><strong>Congratulations on making it through the course!<\/strong> You've learnt so much!<\/p>\n<p>We've put together a few extension questions and some advanced Turtle tips and tricks to challenge you even more. Have a go, and also try out your skills in our Turtle Playground question at the end where you can draw whatever you like!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Heartbeat",
              "purpose":"",
              "problem":"aca-python-logo-heartbeat",
              "type":1,
              "problem_id":4754
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nSometimes you'll need to move the turtle around into the right position without drawing anything.\n  The `penup` and `pendown` functions let you control this:\n\n```eg:py3-logo-penup-pendown;lang:py3;\nfrom turtle import *\nforward(50)\npenup()\nforward(50)\npendown()\nforward(50)\n\n```\n\nImagine the turtle is holding a pen, after you've lifted up the pen with `penup` the pen is off the paper and the turtle won't draw anything as it moves around. After you've put the pen back down with `pendown`, the turtle will draw as it moves again.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Pen up and down",
              "content_rendered":"<p>Sometimes you'll need to move the turtle around into the right position without drawing anything.\nThe <code data-lang=\"py3\">penup<\/code> and <code data-lang=\"py3\">pendown<\/code> functions let you control this:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-logo-penup-pendown\"><code data-lang=\"py3\">from turtle import *\nforward(50)\npenup()\nforward(50)\npendown()\nforward(50)\n\n<\/code><\/pre>\n<p>Imagine the turtle is holding a pen, after you've lifted up the pen with <code data-lang=\"py3\">penup<\/code> the pen is off the paper and the turtle won't draw anything as it moves around. After you've put the pen back down with <code data-lang=\"py3\">pendown<\/code>, the turtle will draw as it moves again.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Wooden Fence",
              "purpose":"",
              "problem":"aca-python-logo-build-a-fence",
              "type":1,
              "problem_id":4758
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Scaleable House",
              "purpose":"",
              "problem":"aca-python-logo-variable-scaleable-house",
              "type":1,
              "problem_id":4757
            }
          ],
          "title":"Congratulations!"
        }
      ],
      "title":"Putting it all together!",
      "label":"aca-python-turtle-yr78-extension",
      "updated_at":"2018-05-14T06:56:14.352993+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nThis is the Playground Module. You can use these questions to draw whatever you'd like.\n\nThese questions aren't for points, just for playing, so have a go!\n\nMake a work of art! Draw to your heart's content, and get those Turtles moving!"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Playground Awaits!",
              "content_rendered":"<p>This is the Playground Module. You can use these questions to draw whatever you'd like.<\/p>\n<p>These questions aren't for points, just for playing, so have a go!<\/p>\n<p>Make a work of art! Draw to your heart's content, and get those Turtles moving!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Playground 1!",
              "purpose":"",
              "problem":"aca-python-logo-playground-0",
              "type":1,
              "problem_id":4759
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Playground 2!",
              "purpose":"",
              "problem":"aca-python-logo-playground-1",
              "type":1,
              "problem_id":4760
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Playground 3!",
              "purpose":"",
              "problem":"aca-python-logo-playground-2",
              "type":1,
              "problem_id":4761
            }
          ],
          "title":"Turtle Playground"
        }
      ],
      "title":"Playground!",
      "label":"aca-python-turtle-yr78-playground",
      "updated_at":"2018-05-14T06:56:14.886926+00:00",
      "concepts":[

      ]
    }
  ],
  "problems":[
    {
      "language":1,
      "title":"Blocks in a Row",
      "notes":"",
      "updated_at":"2018-04-27T05:30:22.702353+00:00",
      "label":"aca-python-logo-square-block-row",
      "content":"<p>\n  Let's draw a row of blocks!\n<\/p>\n\n<p>\n  The row should be 6 blocks long, and each square should have sides <strong>30 turtle steps<\/strong> long.\n<\/p>\n\n<pre class=\"js-logo-animation\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"685bab80-d7ef-11e7-bf91-22000afc90e2\"]\n[\"create_shape\",\"685bb9a4-d7ef-11e7-bf91-22000afc90e2\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"fillcolor\":[0,0,0],\"pencolor\":[0,0,0],\"pensize\":1,\"filled\":true}]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"end_animation\"]\n<\/code><\/pre>\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"74c0f73c-4d01-40c7-a909-93bee5ae99b8\",\"content\":\"from turtle import *\\n\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"math_number\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_turn_simple\"]",
      "teacher_notes":"This question asks students to use a repeat block to draw a sequence of squares. Students have just seen a very similar example on the previous slide, and they have also seen how to use a repeat block to draw a single square with fewer blocks, so some might try to combine the two. We've provided both solutions."
    },
    {
      "language":1,
      "title":"Staircase",
      "notes":"#markdown\n\nThis question combines a `for` loop and a series of turns - all 90 degrees. \n\nThe trick to making this question much easier is to *turn left first*, then build up the solution bit by bit. ",
      "updated_at":"2018-04-27T05:20:39.092689+00:00",
      "label":"aca-blockly-logo-staircase-simple-0",
      "content":"#markdown\n\nWrite a program that draws a staircase of **4 steps** that are **10 steps high** and **30 steps wide**.\n\nThe steps will go up and to the right of the screen, as shown in the example below.\n\n<pre class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"513f8b22-d648-11e7-b2eb-22000a07892b\"]\n[\"create_shape\",\"513f984c-d648-11e7-b2eb-22000a07892b\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pensize\":1,\"pencolor\":[0,0,0],\"filled\":true,\"fillcolor\":[0,0,0]}]\n[\"left\",1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"end_animation\"]\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Hint<\/h2>\n  <p>Think about what direction the turtle needs to face before you start drawing your steps.<\/p>\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"763f4445-04be-4f65-bbf9-ac74756e6c46\",\"content\":\"from turtle import *\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"math_number\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_backward\",\"turtle_turn_simple\"]",
      "teacher_notes":"#markdown\n\nThis question combines a `for` loop and a series of turns - all 90 degrees. \n\nThe trick to making this question much easier is to turn left *first*, then build up the solution bit by bit. "
    },
    {
      "language":1,
      "title":"Row of terraces",
      "notes":"#markdown\n\nTo solve this question, you need to make the code we gave you **repeat** 5 times. We can do this by wrapping it in a `for` loop, and making sure all the lines of code with the house instruction (`forward`, `left`, and `right` instructions) are indented inside the `for` command.",
      "updated_at":"2018-04-27T05:19:40.662094+00:00",
      "label":"aca-python-logo-houses-in-a-row-repeat",
      "content":"\n<p>\n  We've already drawn one house - now let's draw a whole row of houses!\n<\/p>\n\n<p>\n  We've given you the code to draw one house, and angled the turtle to the right spot for drawing the next house. Your task is to change the program so it draws 5 houses in a row!<\/p>\n\n<p>The result should look like this:<\/p>\n\n\n\n<pre class=\"js-logo-animation\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"84b9e1c2-d7f7-11e7-ba3f-22000af40496\"]\n[\"create_shape\",\"84b9edf2-d7f7-11e7-ba3f-22000af40496\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pensize\":1,\"filled\":true,\"fillcolor\":[0,0,0],\"pencolor\":[0,0,0]}]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-0.5235987755982988]\n[\"forward\",30]\n[\"left\",-2.0943951023931953]\n[\"forward\",30]\n[\"left\",1.0471975511965976]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-0.5235987755982988]\n[\"forward\",30]\n[\"left\",-2.0943951023931953]\n[\"forward\",30]\n[\"left\",1.0471975511965976]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-0.5235987755982988]\n[\"forward\",30]\n[\"left\",-2.0943951023931953]\n[\"forward\",30]\n[\"left\",1.0471975511965976]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-0.5235987755982988]\n[\"forward\",30]\n[\"left\",-2.0943951023931953]\n[\"forward\",30]\n[\"left\",1.0471975511965976]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-1.5707963267948966]\n[\"forward\",30]\n[\"left\",-0.5235987755982988]\n[\"forward\",30]\n[\"left\",-2.0943951023931953]\n[\"forward\",30]\n[\"left\",1.0471975511965976]\n[\"end_animation\"]\n\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Hint<\/h2>\n  <p>You only need to add one <code data-lang=\"py3\">for<\/code> loop and fix the indentation to solve this question!<\/p>\n<\/aside>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"from turtle import *\\n\\n\\nforward(30)\\nright(90)\\nforward(30)\\nright(90)\\nforward(30)\\nright(90)\\nforward(30)\\nright(30)\\nforward(30)\\nright(120)\\nforward(30)\\nleft(60)\",\"path\":\"program.py\",\"is_static\":false,\"uuid\":\"72e4cf9c-7d8d-4aaa-9be9-f0ec7a34369d\"}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"math_number\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_turn\"]",
      "teacher_notes":"#markdown\n\nTo solve this question, you need to make the code we gave you **repeat** 5 times. We can do this by wrapping it in a `for` loop, and making sure all the lines of code with the house instruction (`forward`, `left`, and `right` instructions) are indented inside the `for` command."
    },
    {
      "language":1,
      "title":"Back to Square One",
      "notes":"",
      "updated_at":"2018-04-27T05:17:53.451656+00:00",
      "label":"aca-python-logo-square-right-simple-repeat",
      "content":"#markdown\nWrite a program to draw a square below the turtle.\n\nTry using a `for` loop to make life easier!\n\nEach side should be **50 turtle steps** long.\n\n\n```lang:logo;logo-animation;\n\n[\"begin_animation\",400,300,10,\"f57a381a-3395-11e6-9b70-22000ae85508\"]\n[\"create_shape\",\"f57a4eae-3395-11e6-9b70-22000ae85508\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pensize\":1,\"pencolor\":[0,0,0],\"fillcolor\":[0,0,0],\"filled\":true}]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"end_animation\"]\n\n```\n\n> ## Hint\n>\n> Look for patterns that repeat themselves, and put those inside (*indented in*) the a `for` loop!",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"4ed62858-8e51-4beb-8e9b-f5a24df29f38\",\"content\":\"from turtle import *\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"math_number\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_turn_simple\"]",
      "teacher_notes":""
    },
    {
      "language":1,
      "title":"Step up",
      "notes":"",
      "updated_at":"2018-04-27T06:36:49.580834+00:00",
      "label":"aca-python-logo-step-up-how-many-steps",
      "content":"<p>\n  Write a program that draws steps. How many steps? That's the question!\n<\/p>\n<p>\n  Your program should ask the user how many steps to draw, and then draw them. Each step should be \n  <strong>10 Turtle steps tall<\/strong>, and \n  <strong>20 Turtle steps wide<\/strong>.\n<\/p>\n\n<p>\n  The steps will go up and to the right of the screen, as shown in the example below.\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Steps: <\/o><i>2<\/i>\n<o><\/o>\n<\/code><\/pre>\n<pre class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"9bd2176e-da43-11e7-ab60-819306ef41db\"]\n[\"create_shape\",\"9bd2251a-da43-11e7-ab60-819306ef41db\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"fillcolor\":[0,0,0],\"filled\":true,\"pensize\":1,\"pencolor\":[0,0,0]}]\n[\"input_begin\",\"Steps: \"]\n[\"input_end\"]\n[\"left\",1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"end_animation\"]\n<\/code><\/pre>\n\n<p>\n  Here's another example.\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Steps: <\/o><i>8<\/i>\n<o><\/o>\n<\/code><\/pre>\n<pre class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"af5c78c4-da43-11e7-81ce-974ad039852f\"]\n[\"create_shape\",\"af5c8c38-da43-11e7-81ce-974ad039852f\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"fillcolor\":[0,0,0],\"pencolor\":[0,0,0],\"pensize\":1,\"filled\":true}]\n[\"input_begin\",\"Steps: \"]\n[\"input_end\"]\n[\"left\",1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"end_animation\"]\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Hint<\/h2>\n  <p>How many steps you draw depends on the number you read in and save in a variable!<\/p>\n  <p>Don't forget to save that number as an <strong>integer<\/strong>!<\/p>\n\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"2cdb81c5-2640-4ad5-9977-c30a5bf0f22b\",\"content\":\"from turtle import *\\n\\n\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[
        "input"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"math_number\",\"io_ask_num\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_turn_simple\"]",
      "teacher_notes":""
    },
    {
      "language":1,
      "title":"Coloured Cards",
      "notes":"",
      "updated_at":"2018-04-27T06:29:36.429690+00:00",
      "label":"aca-python-logo-any-coloured-cards",
      "content":"#markdown\n\n  In many sports, coloured cards are used to let players know if a penalty has been awarded. For example, yellow cards are often a warning, and red cards send a player off.\n\nWrite a program which asks the user what colour card should be displayed, and draws it. The card should be <strong>80<\/strong> Turtle steps wide, and <strong>120<\/strong> Turtle steps tall.\n\nWe'll only test your program using valid `turtle` colours. \n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Colour: <\/o><i>red<\/i>\n<o><\/o>\n<\/code><\/pre>\n<pre class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"9c8a5b3e-d981-11e7-86aa-c9748b64d101\"]\n[\"create_shape\",\"9c8a67be-d981-11e7-86aa-c9748b64d101\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pensize\":1,\"fillcolor\":[0,0,0],\"pencolor\":[0,0,0],\"filled\":true}]\n[\"pen\",{\"pencolor\":[0,0,0],\"pendown\":true,\"speed\":3,\"fillcolor\":[255,0,0],\"tilt\":0.0,\"filled\":false,\"pensize\":1,\"shown\":true,\"heading\":0.0}]\n[\"begin_fill\"]\n[\"forward\",80]\n[\"left\",1.5707963267948966]\n[\"forward\",120]\n[\"left\",1.5707963267948966]\n[\"forward\",80]\n[\"left\",1.5707963267948966]\n[\"forward\",120]\n[\"left\",1.5707963267948966]\n[\"end_fill\"]\n[\"end_animation\"]\n<\/code><\/pre>\n\n\nThe bottom left corner should be in the center of the page, where the turtle starts.\n\n\n<p>\n  Here's an example with an unusual colour.\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Colour: <\/o><i>cornflowerblue<\/i>\n<o><\/o>\n<\/code><\/pre>\n<div class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"2b66fde4-d982-11e7-a7ce-096e0169fea3\"]\n[\"create_shape\",\"2b670b4a-d982-11e7-a7ce-096e0169fea3\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"filled\":true,\"fillcolor\":[0,0,0],\"pencolor\":[0,0,0],\"pensize\":1}]\n[\"input_begin\",\"Colour: \"]\n[\"input_end\"]\n[\"pen\",{\"tilt\":0.0,\"pensize\":1,\"pencolor\":[0,0,0],\"heading\":0.0,\"shown\":true,\"pendown\":true,\"filled\":false,\"fillcolor\":[100,149,237],\"speed\":3}]\n[\"begin_fill\"]\n[\"forward\",80]\n[\"left\",1.5707963267948966]\n[\"forward\",120]\n[\"left\",1.5707963267948966]\n[\"forward\",80]\n[\"left\",1.5707963267948966]\n[\"forward\",120]\n[\"left\",1.5707963267948966]\n[\"end_fill\"]\n[\"end_animation\"]\n<\/code><\/div>\n\n\n<aside class=\"info\">\n  <h2>Hint<\/h2>\n  <p>We will only test your code with colours that Turtle understands!<\/p>\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"from turtle import *\\n\",\"path\":\"program.py\",\"is_static\":false,\"undeletable\":true,\"uuid\":\"94a76f69-9d91-4cf9-a2c9-e00fca645493\"}]",
      "concepts":[
        "input"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"math_number\",\"io_ask_text\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_turn_simple\",\"turtle_pencolor_text\",\"turtle_fill_text\"]",
      "teacher_notes":""
    },
    {
      "language":1,
      "title":"Purple square",
      "notes":"",
      "updated_at":"2018-04-27T06:39:37.762412+00:00",
      "label":"aca-python-logo-any-square-purple",
      "content":"#markdown\nWrite a program which asks the user what size square to draw, then draws it and fills it with purple.\n\nThe user will type a side length, and your program should use that side length input (in turtle steps) to draw the square.\n\nWe've started you off with some code that will read in the user's answer, and convert it to an integer using `int`.\n\nThe square should be filled with the colour `'purple'`.\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Side length: <\/o><i>80<\/i>\n<o><\/o>\n<\/code><\/pre>\n<pre class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"468d8950-d97b-11e7-9645-37befb5ddb05\"]\n[\"create_shape\",\"468da340-d97b-11e7-9645-37befb5ddb05\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pensize\":1,\"pencolor\":[0,0,0],\"fillcolor\":[0,0,0],\"filled\":true}]\n[\"input_begin\",\"Side length: \"]\n[\"input_end\"]\n[\"pen\",{\"pensize\":1,\"pendown\":true,\"fillcolor\":[160,32,240],\"tilt\":0.0,\"shown\":true,\"speed\":3,\"filled\":false,\"heading\":0.0,\"pencolor\":[0,0,0]}]\n[\"begin_fill\"]\n[\"forward\",80]\n[\"left\",1.5707963267948966]\n[\"forward\",80]\n[\"left\",1.5707963267948966]\n[\"forward\",80]\n[\"left\",1.5707963267948966]\n[\"forward\",80]\n[\"end_fill\"]\n[\"end_animation\"]\n<\/code><\/pre>\n\n<p>\n  The bottom left corner should be in the centre of the page, where the turtle starts.\n<\/p>\n\n<p>\n  Here's an example where the user has chosen a much smaller side length.\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Side length: <\/o><i>30<\/i>\n<o><\/o>\n<\/code><\/pre>\n<div class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"646d1828-d97b-11e7-b5a7-6d7f3b48dfec\"]\n[\"create_shape\",\"646d2444-d97b-11e7-b5a7-6d7f3b48dfec\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pensize\":1,\"pencolor\":[0,0,0],\"filled\":true,\"fillcolor\":[0,0,0]}]\n[\"input_begin\",\"Side length: \"]\n[\"input_end\"]\n[\"pen\",{\"pencolor\":[0,0,0],\"pendown\":true,\"fillcolor\":[160,32,240],\"speed\":3,\"tilt\":0.0,\"pensize\":1,\"heading\":0.0,\"shown\":true,\"filled\":false}]\n[\"begin_fill\"]\n[\"forward\",30]\n[\"left\",1.5707963267948966]\n[\"forward\",30]\n[\"left\",1.5707963267948966]\n[\"forward\",30]\n[\"left\",1.5707963267948966]\n[\"forward\",30]\n[\"end_fill\"]\n[\"end_animation\"]\n<\/code><\/div>\n\n<p>\n  You should test your program with a whole range of different sizes!\n  How big can the square be before it goes off the edge of the page?\n<\/p>\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"6f80a968-2464-4aa2-94fa-9e723f6db067\",\"content\":\"from turtle import *\\nside_length = int(input('Side length: '))\\n\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[
        "input"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"math_number\",\"io_ask_num\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_turn_simple\",\"turtle_fill_dropdown\"]",
      "teacher_notes":""
    },
    {
      "language":1,
      "title":"Fallout Shelter",
      "notes":"#markdown\n\nIn the second solution here, we are embedding a `for` loop within a `for` loop. This *nested looping* is a more concise way of writing the same instructions as in solution 1. Both are perfectly correct, - it's up to the programmer as to what makes more sense to them.",
      "updated_at":"2018-04-27T05:41:18.620962+00:00",
      "label":"aca-python-logo-fallout-shelter",
      "content":"#markdown\nThe symbol for a fallout shelter is three **black** triangles on a **yellow** background. \n\nLet's draw this symbol with the turtle! \n\nSet the **pencolor** to **dimgrey** so the edges stand out.\n\nEach side of each triangle is **100 turtle steps** long and the triangles have all angles of **60 degrees**. The angle between each triangle is also **60 degrees**.\n  \nThe output of your program should look like this:\n\n<div class=\"js-logo-animation\" data-eg-id=\"\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"a6c45d56-dd51-11e7-a700-0502b534c177\"]\n[\"create_shape\",\"a6c4692c-dd51-11e7-a700-0502b534c177\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"filled\":true,\"pencolor\":[0,0,0],\"fillcolor\":[0,0,0],\"pensize\":1}]\n[\"bgcolor\",[255,255,0]]\n[\"pen\",{\"tilt\":0.0,\"pensize\":1,\"pendown\":true,\"filled\":false,\"fillcolor\":[0,0,0],\"shown\":true,\"speed\":3,\"heading\":0.0,\"pencolor\":[105,105,105]}]\n[\"begin_fill\"]\n[\"forward\",100]\n[\"left\",-2.0943951023931953]\n[\"forward\",100]\n[\"left\",-2.0943951023931953]\n[\"forward\",100]\n[\"left\",-2.0943951023931953]\n[\"left\",-2.0943951023931953]\n[\"forward\",100]\n[\"left\",-2.0943951023931953]\n[\"forward\",100]\n[\"left\",-2.0943951023931953]\n[\"forward\",100]\n[\"left\",-2.0943951023931953]\n[\"left\",-2.0943951023931953]\n[\"forward\",100]\n[\"left\",-2.0943951023931953]\n[\"forward\",100]\n[\"left\",-2.0943951023931953]\n[\"forward\",100]\n[\"left\",-2.0943951023931953]\n[\"left\",-2.0943951023931953]\n[\"end_fill\"]\n[\"end_animation\"]\n<\/code><\/div>\n\nThe *centre* of the symbol is where the turtle starts.\n\n> ## Hint\n> \n> You need to do an angle calculation to draw this shape!\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"858ffe69-4b33-4d0e-a815-ee09a5150590\",\"content\":\"from turtle import *\\n\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"math_number\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_backward\",\"turtle_turn_simple\",\"turtle_turn\",\"turtle_pencolor_text\",\"turtle_bgcolor_text\",\"turtle_fill_text\"]",
      "teacher_notes":"#markdown\n\nIn the second solution here, we are embedding a `for` loop within a `for` loop. This *nested looping* is a more concise way of writing the same instructions as in solution 1. Both are perfectly correct, - it's up to the programmer as to what makes more sense to them."
    },
    {
      "language":1,
      "title":"Swim between the flags!",
      "notes":"",
      "updated_at":"2018-04-27T05:41:41.388655+00:00",
      "label":"aca-turtle-logo-lifesaving-flag",
      "content":"#markdown\n\nIn Australia it's very important when we go to the beach to swim between the flags. The flags are a very specific colour pattern to make them easy to recognise. They have a red rectangle on the top and a golden yellow colour on the bottom. \n\nGet the turtle to draw a lifesaving flag. It should have one rectangle on the top that is **red** and one rectangle on the bottom that is **yellow**. The rectangles should be **120 turtle steps** long and **45 turtle steps** high. \n\nThe turtle should start on the left in the middle of the flag:\n\n<pre class=\"js-logo-animation\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"08345c04-dbd0-11e7-9faf-33ccbc726007\"]\n[\"create_shape\",\"083467c6-dbd0-11e7-9faf-33ccbc726007\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"fillcolor\":[0,0,0],\"pencolor\":[0,0,0],\"pensize\":1,\"filled\":true}]\n[\"pen\",{\"pencolor\":[0,0,0],\"speed\":3,\"pensize\":1,\"fillcolor\":[255,0,0],\"heading\":0.0,\"pendown\":true,\"tilt\":0.0,\"shown\":true,\"filled\":false}]\n[\"begin_fill\"]\n[\"forward\",120]\n[\"left\",1.5707963267948966]\n[\"forward\",45]\n[\"left\",1.5707963267948966]\n[\"forward\",120]\n[\"left\",1.5707963267948966]\n[\"forward\",45]\n[\"left\",1.5707963267948966]\n[\"end_fill\"]\n[\"pen\",{\"fillcolor\":[255,255,0]}]\n[\"begin_fill\"]\n[\"forward\",120]\n[\"left\",-1.5707963267948966]\n[\"forward\",45]\n[\"left\",-1.5707963267948966]\n[\"forward\",120]\n[\"left\",-1.5707963267948966]\n[\"forward\",45]\n[\"left\",-1.5707963267948966]\n[\"end_fill\"]\n[\"end_animation\"]\n\n\n\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"e84f58e1-2c83-431f-a397-d5588b1a826b\",\"content\":\"from turtle import *\\n\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"math_number\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_turn_simple\",\"turtle_pencolor_dropdown\",\"turtle_pensize\",\"turtle_fill_text\"]",
      "teacher_notes":"#markdown\n\nSolving this problem is easiest by breaking it down into two smaller problems: drawing a red rectangle, and then drawing a yellow rectangle. (Or the other way around!)\n\nThe tricky part is making sure the turtle is in the right position, all lined up for the second rectangle. Here, students are building on their spacial reasoning skills, and drawing on what they have learnt with the previous question on aligning boxes."
    },
    {
      "language":1,
      "title":"Square Pennant Flags",
      "notes":"#markdown\n\nThis question is very similar to a block stacking question in the previous module, but also adds in filling the blocks with colour. ",
      "updated_at":"2018-04-27T05:41:54.549158+00:00",
      "label":"aca-python-logo-square-pennant-flags",
      "content":"#markdown\n<h3>\n  Papel Picado\n<\/h3>\n\nIn Mexico decorations for parties and festivals often include [Papel picado](https:\/\/en.wikipedia.org\/wiki\/Papel_picado). These are very colourful squares of paper which have beautiful cut-out designs.\n\nYou're going to make the turtle draw a string of 5 simple colourful Papel picado.\n\nThe **five** flags should be squares that are **20 turtle steps long** on each side, there will need to be an **extra line** to join the flags together, this will also be 20 turtle steps long. To make it super colourful you need to get the turtle to fill with **hot pink**. \n\n\n```lang:logo;logo-animation;\n\n[\"begin_animation\",400,300,10,\"fabd3754-d8cc-11e7-a933-49fcb1da4e78\"]\n[\"create_shape\",\"fabd4488-d8cc-11e7-a933-49fcb1da4e78\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pencolor\":[0,0,0],\"pensize\":1,\"filled\":true,\"fillcolor\":[0,0,0]}]\n[\"pen\",{\"pencolor\":[0,0,0],\"pendown\":true,\"heading\":0.0,\"filled\":false,\"tilt\":0.0,\"speed\":3,\"pensize\":1,\"shown\":true,\"fillcolor\":[255,105,180]}]\n[\"begin_fill\"]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"end_fill\"]\n[\"forward\",40]\n[\"begin_fill\"]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"end_fill\"]\n[\"forward\",40]\n[\"begin_fill\"]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"end_fill\"]\n[\"forward\",40]\n[\"begin_fill\"]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"end_fill\"]\n[\"forward\",40]\n[\"begin_fill\"]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"forward\",20]\n[\"left\",-1.5707963267948966]\n[\"end_fill\"]\n[\"forward\",40]\n[\"end_animation\"]\n\n```\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"793c9c61-2363-4de2-8328-96a3de0b69c2\",\"content\":\"from turtle import *\\n\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"math_number\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_turn_simple\",\"turtle_pencolor_dropdown\",\"turtle_pensize\",\"turtle_fill_dropdown\"]",
      "teacher_notes":"#markdown\n\nThis question is very similar to a block stacking question in the previous module, but also adds in filling the blocks with colour. \n\nWe encourage students to go back and copy their previous solutions, and modify them to solve this question."
    },
    {
      "language":1,
      "title":"Build a sturdy house",
      "notes":"#markdown\n\nYou've solved the main part of this question before - drawing a house. If you wanted, you could flick back through the notes, and copy and paste that code into this question!\n\nThen, it's just a case of setting the colour of the pen, and the thickness of the lines.",
      "updated_at":"2018-04-27T05:43:00.561291+00:00",
      "label":"aca-python-logo-solid-thick-house",
      "content":"<p>\n  The house we drew earlier looks a bit flimsy. Let's draw one that looks more sturdy!\n<\/p>\n\n<p>\n  Draw an <strong>orange<\/strong> house with walls of <strong>pen size 4<\/strong>!\n<\/p>\n\n<p>\n  Each side should be <strong>60 turtle steps<\/strong> long.\n<\/p>\n\n<pre class=\"js-logo-animation\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"0f46ac4a-d8c9-11e7-b815-c9c694843db9\"]\n[\"create_shape\",\"0f46b942-d8c9-11e7-b815-c9c694843db9\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pensize\":1,\"pencolor\":[0,0,0],\"fillcolor\":[0,0,0],\"filled\":true}]\n[\"pen\",{\"heading\":0.0,\"speed\":3,\"tilt\":0.0,\"pencolor\":[0,0,0],\"fillcolor\":[0,0,0],\"filled\":false,\"shown\":true,\"pensize\":4,\"pendown\":true}]\n[\"pen\",{\"pencolor\":[255,165,0]}]\n[\"forward\",60]\n[\"left\",-1.5707963267948966]\n[\"forward\",60]\n[\"left\",-1.5707963267948966]\n[\"forward\",60]\n[\"left\",-1.5707963267948966]\n[\"forward\",60]\n[\"left\",-0.5235987755982988]\n[\"forward\",60]\n[\"left\",-2.0943951023931953]\n[\"forward\",60]\n[\"end_animation\"]\n<\/code><\/pre>\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"984219bc-b520-405f-b6cc-b7599af17929\",\"content\":\"from turtle import *\\n\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"math_number\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_turn_simple\",\"turtle_turn\",\"turtle_pencolor_dropdown\",\"turtle_pensize\"]",
      "teacher_notes":"#markdown\n\nStudents have solved the main part of this question before - drawing a house. We are happy for students to flick back through the notes, and copy and paste that code into this question! It's a bonus for reading the notes! \n\nThen, it's just a case of setting the colour of the pen, and the thickness of the lines."
    },
    {
      "language":1,
      "title":"Skyblue Square",
      "notes":"",
      "updated_at":"2018-04-27T05:32:00.848312+00:00",
      "label":"aca-python-logo-square-right-simple-skyblue",
      "content":"<p>\n  Let's add some colour to our square!\n<\/p>\n\n<p>\n  Write a program to draw a skyblue square using the turtle.\n<\/p>\n\n<p>\n  Each side should be <strong>80 turtle steps<\/strong> long.\n<\/p>\n\n<pre class=\"js-logo-animation\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"51b238e4-d8c2-11e7-b89f-6d5ea03e331a\"]\n[\"create_shape\",\"51b24500-d8c2-11e7-b89f-6d5ea03e331a\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"filled\":true,\"pencolor\":[0,0,0],\"pensize\":1,\"fillcolor\":[0,0,0]}]\n[\"pen\",{\"pensize\":1,\"speed\":3,\"pendown\":true,\"fillcolor\":[0,0,0],\"filled\":false,\"tilt\":0.0,\"heading\":0.0,\"shown\":true,\"pencolor\":[135,206,235]}]\n[\"forward\",80]\n[\"left\",-1.5707963267948966]\n[\"forward\",80]\n[\"left\",-1.5707963267948966]\n[\"forward\",80]\n[\"left\",-1.5707963267948966]\n[\"forward\",80]\n[\"left\",-1.5707963267948966]\n[\"end_animation\"]\n<\/code><\/pre>\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"0cb5607e-fc94-4dfc-8376-118472735d1b\",\"content\":\"from turtle import *\\n\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"math_number\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_turn_simple\",\"turtle_pencolor_dropdown\"]",
      "teacher_notes":""
    },
    {
      "language":1,
      "title":"The Three Little Pigs",
      "notes":"#markdown\nThis question has two parts. One, to ask what sort of house the user would like to build; and two, to actually draw the house. But remember that for every Turtle question, you should start your programs like this:\n\n```eg:three-little-pigs-house-soln-import;lang:py3;norun;\n\nfrom turtle import *\n\n```\n\nFor the first part, you'll need to ask the user what type of house they'd like: this determines the colour that you should draw with (see 'With flying colours!'). \nYou just have to ask the user for a string, using `input`.\nThen, you should check the possible materials, choosing a colour to draw with.\nYou can use `if` and `elif` to step through every possibility (remember, either *straw*, *stick* or *brick*).\n\n```eg:three-little-pigs-house-soln-materials;lang:py3;norun;\n\nmaterial = input('Material: ')\n\nif material == 'straw':\n  pencolor('gold')\nelif material == 'sticks':\n  pencolor('saddlebrown')\nelif material == 'bricks':\n  pencolor('dimgray')\n\n```\n\nWe also need to set the size of our turtle, as specified in the question:\n\n```eg:three-little-pigs-house-soln-pensize;lang:py3;norun;\n\npensize(10)\n\n```\n\nNow that you know what colour to draw the house, and how thick the lines are, we can start drawing! There's a few different ways to draw the same house, but we're going to draw the roof first.\n\nLet's make a plan! First, remember that the turtle starts facing to the right. Since we start at the left-most point of the roof, we need to rotate 60 degrees to the `left` (counter-clockwise) to point towards the peak. Move `forward` 100 steps, then rotate 120 degrees, move forward 100 steps, rotate 120 degrees, and move forward again. Your code should look like this:\n\n```eg:three-little-pigs-house-soln-draw;lang:py3;norun;\n\npensize(10)\nleft(60)\nforward(100)\nright(120)\nforward(100)\nright(120)\nforward(100)\n\n```\n\nIf you run the code now, you'll see that your turtle is facing to the left. We still need to add three more sides to our house. Let's rotate to the left, move forward, and repeat that step three times.\n\n```eg:three-little-pigs-house-soln-draw-more;lang:py3;norun;\n\nleft(90)\nforward(100)\nleft(90)\nforward(100)\nleft(90)\nforward(100)\n\n```\n",
      "updated_at":"2018-04-27T07:57:40.210528+00:00",
      "label":"aca-python-logo-three-little-pigs-house-loop",
      "content":"#markdown\nIn the fairytale [The Three Little Pigs](https:\/\/en.wikipedia.org\/wiki\/The_Three_Little_Pigs), the first pig builds a house out of straw, the second sticks, and the third bricks.\n\nWrite a program which asks the user whether they want to build using `straw`, `sticks`, or `bricks`, and then draws the house in the appropriate colour.\n  A straw house should be `orange`, a stick house should be `black`, and a brick house should be `slategray`.\n\n<table class=\"table table-bordered\">\n  <thead>\n  <tr><th>Material<\/th><th>Colour<\/th><\/tr>\n  <\/thead>\n  <tbody>\n  <tr><td><code data-lang=\"txt\">straw<\/code><\/td><td><code data-lang=\"txt\">orange<\/code><\/td><\/tr>\n  <tr><td><code data-lang=\"txt\">sticks<\/code><\/td><td><code data-lang=\"txt\">black<\/code><\/td><\/tr>\n  <tr><td><code data-lang=\"txt\">bricks<\/code><\/td><td><code data-lang=\"txt\">slategray<\/code><\/td><\/tr>\n  <\/tbody>\n<\/table>\n\nThe triangle at the top should have angles that are all 60\u00b0.\n\nThe triangle and square sides should all be **100 turtle steps** long and the `pensize` should be **10** for thick walls.\n\nHere's a straw house:\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>Material: <\/o><i>straw<\/i>\n<o><\/o>\n<\/code><\/pre>\n<pre class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"f569b0fe-5cac-11e6-93ca-22000af404a2\"]\n[\"create_shape\",\"f569cca6-5cac-11e6-93ca-22000af404a2\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"filled\":true,\"pencolor\":[0,0,0],\"fillcolor\":[0,0,0],\"pensize\":1}]\n[\"input_begin\",\"Material: \"]\n[\"input_end\"]\n[\"pen\",{\"heading\":0.0,\"pencolor\":[255,165,0],\"speed\":3,\"pendown\":true,\"filled\":false,\"tilt\":0.0,\"fillcolor\":[0,0,0],\"pensize\":1,\"shown\":true}]\n[\"pen\",{\"pensize\":10}]\n[\"left\",1.0471975511965976]\n[\"forward\",100]\n[\"left\",-2.0943951023931953]\n[\"forward\",100]\n[\"left\",-2.0943951023931953]\n[\"forward\",100]\n[\"left\",1.5707963267948966]\n[\"forward\",100]\n[\"left\",1.5707963267948966]\n[\"forward\",100]\n[\"left\",1.5707963267948966]\n[\"forward\",100]\n[\"end_animation\"]\n<\/code><\/pre>\n\nHere's a stick house:\n\n```lang:py3;terminal;eg:none;\nMaterial: sticks\n\n```\n\n```lang:logo;logo-final;\n\n{\"scaley\":1.0,\"zerox\":200,\"shapes\":[{\"filled\":false,\"kind\":\"line\",\"points\":[[0.0,0.0],[50.000000000000014,86.60254037844386],[100.00000000000003,0.0],[2.842170943040401e-14,-3.2162452993532734e-14],[1.005200744319371e-14,-100.00000000000003],[100.00000000000001,-100.00000000000003],[100.00000000000001,-2.842170943040401e-14]],\"id\":\"4eb5e2d6-5cad-11e6-b5e8-22000ae85508\",\"pencolor\":[0,0,0],\"pensize\":10}],\"scalex\":1.0,\"bgcolor\":[255,255,255],\"height\":300,\"width\":400,\"zeroy\":150}\n\n```\n\nAnd here's a brick house:\n\n```lang:py3;terminal;eg:none;\nMaterial: bricks\n\n```\n\n```lang:logo;logo-final;\n\n{\"width\":400,\"zerox\":200,\"bgcolor\":[255,255,255],\"scalex\":1.0,\"height\":300,\"scaley\":1.0,\"shapes\":[{\"kind\":\"line\",\"id\":\"58f80314-5cad-11e6-a8c9-22000a068b96\",\"pensize\":10,\"filled\":false,\"pencolor\":[112,128,144],\"points\":[[0.0,0.0],[50.000000000000014,86.60254037844386],[100.00000000000003,0.0],[2.842170943040401e-14,-3.2162452993532734e-14],[1.005200744319371e-14,-100.00000000000003],[100.00000000000001,-100.00000000000003],[100.00000000000001,-2.842170943040401e-14]]}],\"zeroy\":150}\n\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"956bd622-8843-4421-a2e8-422be26c48f0\",\"content\":\"from turtle import *\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[
        "input",
        "if-elif-else"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_ask_text\",\"decisions_if_elif_else_compare\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_turn_simple\",\"turtle_turn\",\"turtle_pencolor_dropdown\",\"turtle_pensize\"]",
      "teacher_notes":"#markdown\nThis question has two parts. One, to ask what sort of house the user would like to build; and two, to actually draw the house. But remember that for every Turtle question, you should start your programs like this:\n\n```eg:three-little-pigs-house-soln-import;lang:py3;norun;\n\nfrom turtle import *\n\n```\n\nFor the first part, you'll need to ask the user what type of house they'd like: this determines the colour that you should draw with (see 'With flying colours!'). \nYou just have to ask the user for a string, using `input`.\nThen, you should check the possible materials, choosing a colour to draw with.\nYou can use `if` and `elif` to step through every possibility (remember, either *straw*, *stick* or *brick*).\n\n```eg:three-little-pigs-house-soln-materials;lang:py3;norun;\n\nmaterial = input('Material: ')\n\nif material == 'straw':\n  pencolor('gold')\nelif material == 'sticks':\n  pencolor('saddlebrown')\nelif material == 'brick':\n  pencolor('dimgray')\n\n```\n\nWe also need to set the size of our turtle, as specified in the question:\n\n```eg:three-little-pigs-house-soln-pensize;lang:py3;norun;\n\npensize(10)\n\n```\n\nNow that you know what colour to draw the house, and how thick the lines are, we can start drawing! There's a few different ways to draw the same house, but we're going to draw the roof first.\n\nLet's make a plan! First, remember that the turtle starts facing to the right. Since we start at the left-most point of the roof, we need to rotate 60 degrees to the `left` (counter-clockwise) to point towards the peak. Move `forward` 100 steps, then rotate 120 degrees, move forward 100 steps, rotate 120 degrees, and move forward again. Your code should look like this:\n\n```eg:three-little-pigs-house-soln-draw;lang:py3;norun;\n\npensize(10)\nleft(60)\nforward(100)\nright(120)\nforward(100)\nright(120)\nforward(100)\n\n```\n\nIf you run the code now, you'll see that your turtle is facing to the left. We still need to add three more sides to our house. Let's rotate to the left, move forward, and repeat that step three times.\n\n```eg:three-little-pigs-house-soln-draw-more;lang:py3;norun;\n\nleft(90)\nforward(100)\nleft(90)\nforward(100)\nleft(90)\nforward(100)\n\n```\n"
    },
    {
      "language":1,
      "title":"Traffic light",
      "notes":"",
      "updated_at":"2018-04-27T07:03:24.492491+00:00",
      "label":"aca-python-logo-square-traffic-light",
      "content":"<p>\n  You're designing a traffic light system for robots! It's a square that is <strong>60 Turtle steps<\/strong> on each side.\n<\/p>\n<p>\n  Write a program that reads in whether it is safe to go. If it is safe, you should draw a square with <strong>green<\/strong> fill and lines of thickness <strong>8<\/strong>:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Is it safe to go? <\/o><i>yes<\/i>\n<o><\/o>\n<\/code><\/pre>\n<pre class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"e5c9e2a0-dc84-11e7-b9a9-f17fdba21ca5\"]\n[\"create_shape\",\"e5c9ee8a-dc84-11e7-b9a9-f17fdba21ca5\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pencolor\":[0,0,0],\"pensize\":1,\"fillcolor\":[0,0,0],\"filled\":true}]\n[\"input_begin\",\"Is it safe to go? \"]\n[\"input_end\"]\n[\"pen\",{\"pencolor\":[0,0,0],\"speed\":3,\"fillcolor\":[0,0,0],\"filled\":false,\"pensize\":8,\"tilt\":0.0,\"pendown\":true,\"heading\":0.0,\"shown\":true}]\n[\"pen\",{\"fillcolor\":[0,255,0]}]\n[\"begin_fill\"]\n[\"forward\",60]\n[\"left\",1.5707963267948966]\n[\"forward\",60]\n[\"left\",1.5707963267948966]\n[\"forward\",60]\n[\"left\",1.5707963267948966]\n[\"forward\",60]\n[\"left\",1.5707963267948966]\n[\"end_fill\"]\n[\"end_animation\"]\n<\/code><\/pre>\n\n<p>\n  If it's not safe, you should draw a <strong>red<\/strong> square with lines of thickness <strong>8<\/strong>:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Is it safe to go? <\/o><i>no<\/i>\n<o><\/o>\n<\/code><\/pre>\n<div class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"11895966-dc85-11e7-8862-1db0264e94dc\"]\n[\"create_shape\",\"118965dc-dc85-11e7-8862-1db0264e94dc\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pensize\":1,\"filled\":true,\"pencolor\":[0,0,0],\"fillcolor\":[0,0,0]}]\n[\"input_begin\",\"Is it safe to go? \"]\n[\"input_end\"]\n[\"pen\",{\"speed\":3,\"tilt\":0.0,\"shown\":true,\"pencolor\":[0,0,0],\"pensize\":8,\"filled\":false,\"pendown\":true,\"fillcolor\":[0,0,0],\"heading\":0.0}]\n[\"pen\",{\"fillcolor\":[255,0,0]}]\n[\"begin_fill\"]\n[\"forward\",60]\n[\"left\",1.5707963267948966]\n[\"forward\",60]\n[\"left\",1.5707963267948966]\n[\"forward\",60]\n[\"left\",1.5707963267948966]\n[\"forward\",60]\n[\"left\",1.5707963267948966]\n[\"end_fill\"]\n[\"end_animation\"]\n<\/code><\/div>\n\n<aside class=\"info\">\n  <h2>Hint<\/h2>\n  <p>One way to solve this question is to use two variables! One for the user's answer, and one for the colour you should use to draw!<\/p>\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"67be172b-3d3e-4a2a-8de4-9bffcd71b5cf\",\"content\":\"from turtle import *\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[
        "input"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_ask_text\",\"decisions_if_else\",\"loops_repeat_ext\",\"logic_compare\",\"turtle_forward\",\"turtle_turn_simple\",\"turtle_pensize\",\"turtle_fill_text\"]",
      "teacher_notes":""
    },
    {
      "language":1,
      "title":"Studybot - Highlighter or Pen",
      "notes":"",
      "updated_at":"2018-04-27T07:00:22.849186+00:00",
      "label":"aca-python-logo-highlighter-or-pen",
      "content":"#markdown\n\n<p>\n  You're building a virtual robot to help you study. You've got it reading books, - now for highlighting and underlining notes!\n<\/p>\n\n<p>\n  Write a program that asks the user <code data-lang=\"in\">Use a highlighter?<\/code> and either highlights or underlines for <strong>100 Turtle steps<\/strong>.\n<\/p>\n\nIf the user types in `yes`, you should make the pen `\"yellow\"`, and pen thickness <strong>15<\/strong>.\n\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Use a highlighter? <\/o><i>yes<\/i>\n<o><\/o>\n<\/code><\/pre>\n<pre class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"db815b0a-da56-11e7-b063-79225b8c75a8\"]\n[\"create_shape\",\"db816730-da56-11e7-b063-79225b8c75a8\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"filled\":true,\"pencolor\":[0,0,0],\"pensize\":1,\"fillcolor\":[0,0,0]}]\n[\"input_begin\",\"Use a pen or highlighter? \"]\n[\"input_end\"]\n[\"pen\",{\"filled\":false,\"heading\":0.0,\"pendown\":true,\"fillcolor\":[0,0,0],\"shown\":true,\"speed\":3,\"pencolor\":[0,0,0],\"tilt\":0.0,\"pensize\":15}]\n[\"pen\",{\"pencolor\":[255,255,0]}]\n[\"forward\",100]\n[\"end_animation\"]\n\n<\/code><\/pre>\n\n<p>Otherwise, no matter what the user types in, you should draw a black line 100 Turtle steps long.\n<\/p>\n\n<p>Here's how the program should work if the user types in <code data-lang=\"in\">no<\/code>:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Use a highlighter? <\/o><i>no<\/i>\n<o><\/o>\n<\/code><\/pre>\n<pre class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"943680fe-da56-11e7-bfd3-b939aa24c591\"]\n[\"create_shape\",\"94368d2e-da56-11e7-bfd3-b939aa24c591\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"fillcolor\":[0,0,0],\"pencolor\":[0,0,0],\"pensize\":1,\"filled\":true}]\n[\"input_begin\",\"Use a pen or highlighter? \"]\n[\"input_end\"]\n[\"pen\",{\"pensize\":1,\"shown\":true,\"heading\":0.0,\"speed\":3,\"pencolor\":[0,0,0],\"pendown\":true,\"tilt\":0.0,\"fillcolor\":[0,0,0],\"filled\":false}]\n[\"forward\",100]\n[\"end_animation\"]\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"9056860e-4435-4880-bd1e-6b6fb28e863b\",\"content\":\"from turtle import *\\n\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_ask_text\",\"decisions_if_else_compare\",\"turtle_forward\",\"turtle_turn\",\"turtle_pencolor_text\",\"turtle_pensize\"]",
      "teacher_notes":""
    },
    {
      "language":1,
      "title":"Domino",
      "notes":"#markdown \nThe domino is an adaption of the square so you can start with a basic square and then continue from there. \n\nThe fourth line of the bottom square is the first line of the top square so it can be one long line of 100 turtle steps.\n\n```eg:py3-turtle-left;lang:py3;\n\nfrom turtle import *\nforward(50)\nright(90)\nforward(50)\nright(90)\nforward(50)\nright(90)\nforward(100)\n```\n\n<pre class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"6e64d75a-34b4-11e8-bf41-cf1c6e645f6e\"]\n[\"create_shape\",\"6e64e6c8-34b4-11e8-bf41-cf1c6e645f6e\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pencolor\":[0,0,0],\"fillcolor\":[0,0,0],\"filled\":true,\"pensize\":1}]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"end_animation\"]\n\n<\/code><\/pre>\n\nNow we just need the turtle to complete the shape.",
      "updated_at":"2018-04-18T08:37:35.245306+00:00",
      "label":"aca-python-logo-domino",
      "content":"<p>\n  Write a program to draw a domino, made up of two squares on top of the other.\n<\/p>\n\n<p>\n  The turtle should start on the left in the middle of the domino:\n<\/p>\n\n<pre class=\"js-logo-animation\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"5ed6a6c4-ce4d-11e7-bcd2-22000af515f0\"]\n[\"create_shape\",\"5ed6b312-ce4d-11e7-bcd2-22000af515f0\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"fillcolor\":[0,0,0],\"pencolor\":[0,0,0],\"pensize\":1,\"filled\":true}]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"forward\",50]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"forward\",50]\n[\"end_animation\"]\n\n\n<\/code><\/pre>\n\n<p>\n  Each side of each square should be <strong>50 turtle steps<\/strong> long.\n<\/p>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"from turtle import *\\n\",\"path\":\"program.py\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"math_number\",\"turtle_forward\",\"turtle_turn_simple\"]",
      "teacher_notes":"#markdown \nThe domino is an adaption of the square so you can start with a basic square and then continue from there. \n\nThe fourth line of the bottom square is the first line of the top square so it can be one long line of 100 turtle steps.\n\n\n```eg:py3-turtle-left2;lang:py3;\n\nfrom turtle import *\nforward(50)\nright(90)\nforward(50)\nright(90)\nforward(50)\nright(90)\nforward(100)\n```\n\n<pre class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"6e64d75a-34b4-11e8-bf41-cf1c6e645f6e\"]\n[\"create_shape\",\"6e64e6c8-34b4-11e8-bf41-cf1c6e645f6e\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pencolor\":[0,0,0],\"fillcolor\":[0,0,0],\"filled\":true,\"pensize\":1}]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"forward\",50]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"end_animation\"]\n\n<\/code><\/pre>\nNow we just need the turtle to complete the shape.\n\n> ## The other left\n> It's also possible to make `left` turns instead of `right`, and the solution will still work."
    },
    {
      "language":1,
      "title":"Get rect!",
      "notes":"<p>The only difference between a rectangle and a square is the different height and width lengths. You need to use the correct values, and put them in the right order, starting with the width, then the height, then the width, and finally the height again.<\/p>\n\n<p>We've changed the position of the shape in this question too, so that you're still using a 90 degree turn, but this time you're turning <b>left<\/b>, not right.<\/p>",
      "updated_at":"2018-04-18T08:32:57.602255+00:00",
      "label":"aca-python-logo-rectangle",
      "content":"<p>\n  Write a Turtle program to draw a rectangle, with a <strong>width<\/strong> (top and bottom sides) of <strong>120 turtle steps<\/strong>, and <strong>height<\/strong> (the left and right sides) of <strong>50 turtle steps<\/strong>.\n  The output of your program should look like this:\n<\/p>\n\n<div class=\"js-logo-animation\" data-eg-id=\"\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"c8a5f2c0-6765-11e7-8b40-22000afc90c9\"]\n[\"create_shape\",\"c8a602f6-6765-11e7-8b40-22000afc90c9\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"filled\":true,\"fillcolor\":[0,0,0],\"pencolor\":[0,0,0],\"pensize\":1}]\n[\"forward\",120]\n[\"left\",1.5707963267948966]\n[\"forward\",50]\n[\"left\",1.5707963267948966]\n[\"forward\",120]\n[\"left\",1.5707963267948966]\n[\"forward\",50]\n[\"end_animation\"]\n<\/code><\/div>\n\n<p>The <em>bottom left corner<\/em> of the rectangle is where the turtle starts.<\/p>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"from turtle import *\",\"path\":\"program.py\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"math_number\",\"turtle_forward\",\"turtle_turn_simple\"]",
      "teacher_notes":"<p>The only difference between a rectangle and a square is the differing height and width lengths. You need to use the correct values, and put them in the right order, starting with the width, then the height, then the width, and finally the height again.<\/p>\n\n<p>We've changed the position of the shape in this question too, so that you're still using a 90 degree turn, but this time you're turning <b>left<\/b>, not right.<\/p>"
    },
    {
      "language":1,
      "title":"Starting from Square One",
      "notes":"To solve this question, continue the pattern of moving forward the side length, 100 steps, then turning right 90 degrees.\n\n<pre class=\"js-editor\" data-eg-id=\"all-squared-away-soln3\"><code data-lang=\"py3\">from turtle import *\nforward(100)\nright(90)\nforward(100)\nright(90)\n<\/code><\/pre>\n\n<p>From there, it's <code data-lang=\"py3\">forward(100)<\/code> and <code data-lang=\"py3\">right(90)<\/code>, <code data-lang=\"py3\">forward(100)<\/code> and <code data-lang=\"py3\">right(90)<\/code> until we make a square!<\/p>\n\n<p>PS: Don't forget to keep this line of code in! Otherwise Python doesn't know that we want to use Turtles!<\/p>\n<pre class=\"js-editor\" data-eg-id=\"all-squared-away-soln4\" data-runnable=\"false\"><code data-lang=\"py3\">\nfrom turtle import *\n<\/code><\/pre>",
      "updated_at":"2018-04-18T08:30:09.153498+00:00",
      "label":"aca-python-turtle-square",
      "content":"<p>We've given you part of a program which tells the turtle to draw a square, your task is to finish it!<\/p>\n\n<p>When it's finished, the turtle should draw a square like this:<\/p>\n\n<pre class=\"js-logo-animation\" data-eg-id=\"\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"1156e00a-55c1-11e5-8f8d-22000afe02fd\"]\n[\"create_shape\",\"1156f478-55c1-11e5-8f8d-22000afe02fd\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pencolor\":[0,0,0],\"pensize\":1,\"outline\":1,\"fillcolor\":[0,0,0],\"filled\":true}]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"end_animation\"]\n<\/code><\/pre>\n\n<p>All the sides of the square should be 100 turtle steps long.<\/p>\n\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"from turtle import *\\n\\nforward(100)\\nright(90)\\nforward(100)\",\"path\":\"program.py\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\n\nThis question requires students to combine the two concepts used so far, moving the turtle, and turning a corner. We've given students the beginnings of the solution to give them a head start.\n\nTo solve this question, continue the pattern of moving forward the side length, 100 steps, then turning right 90 degrees.\n\n<pre class=\"js-editor\" data-eg-id=\"all-squared-away-soln3\"><code data-lang=\"py3\">from turtle import *\nforward(100)\nright(90)\nforward(100)\nright(90)\n<\/code><\/pre>\n\n<p>From there, it's <code data-lang=\"py3\">forward(100)<\/code> and <code data-lang=\"py3\">right(90)<\/code>, <code data-lang=\"py3\">forward(100)<\/code> and <code data-lang=\"py3\">right(90)<\/code> until we make a square!<\/p>\n\n<p>One important thing is to keep this line of code in! Otherwise Python doesn't know that we want to use Turtles!<\/p>\n<pre class=\"js-editor\" data-eg-id=\"all-squared-away-soln4\" data-runnable=\"false\"><code data-lang=\"py3\">\nfrom turtle import *\n<\/code><\/pre>"
    },
    {
      "language":1,
      "title":"Make a move!",
      "notes":"<aside class=\"info\">\n  <h2>We automark the lines and shapes<\/h2>\n  <p>\n    Our intelligent automarker checks the shapes drawn by the turtle. <strong>It ignores the direction and order they are drawn in.<\/strong>\n  <\/p>\n  <p>\n    As long as the shapes are <em>where<\/em> they should be, you can draw them however you wish.  There are many correct answers! (Though not <strong>that<\/strong> many for this question!)\n  <\/p>\n<\/aside>",
      "updated_at":"2018-04-18T08:03:50.722756+00:00",
      "label":"aca-python-turtle-move-forward",
      "content":"<p>Now it's your turn to write your own Turtle program! Write a program to make the turtle move <strong>forward 100 turtle steps<\/strong>.<\/p>\n\n<p>It should look like this when you run it:<\/p>\n<pre class=\"js-logo-animation\" data-eg-id=\"\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"4bf34e3c-55c7-11e5-9049-22000afe02fd\"]\n[\"create_shape\",\"4bf362a0-55c7-11e5-9049-22000afe02fd\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pensize\":1,\"filled\":true,\"pencolor\":[0,0,0],\"outline\":1,\"fillcolor\":[0,0,0]}]\n[\"forward\",100]\n[\"end_animation\"]\n<\/code><\/pre>\n\n<p>If you're not sure how to start writing the program, go back a few pages and take another look at the notes.<\/p>\n\n<aside class=\"info\">\n  <h2>How do I submit?<\/h2>\n  <ol>\n    <li><p>Write your program (in the <code data-lang=\"txt\">program.py<\/code> file) in the editor<br>(large panel on the right);<\/p><\/li>\n    <li><p>Run your program by clicking <button class=\"action mark\" style=\"display: inline-block; background-color: white; padding: 6px 12px; border: 1px solid #e5e5e5; margin-right: 0px\" disabled><span class=\"icon icon-play4\"><\/span> Run<\/button>. The turtle will appear below. <strong>Check the program works correctly!<\/strong><\/p>\n    <li><p>Mark your program by clicking\n      <button class=\"action mark\" style=\"display: inline-block; background-color: #fb4251; color: #fff; min-width: 76px; padding: 6px 12px; border: none;\" disabled><span class=\"icon icon-star-full\"><\/span> Mark <span style=\"font-weight: bold\"><\/span><\/button> and we will automatically check if your program is correct, and if not, give you some hints to fix it up.<\/p><\/li>\n  <\/ol>\n<\/aside>\n  ",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"from turtle import *\",\"path\":\"program.py\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\n\n> ## Teacher Notes!\n> Lesson plans and support are available on the [Australian Computing Academy website](https:\/\/aca.edu.au\/challenges\/).\n\n\n<p>This question reinforces the concept of movement introduced on the previous slides.<\/p>\n\n<p>We want students to learn here that attention to detail is crucial for programs to work.<\/p>\n\n<p>\n  If some of your students are struggling with the precision required with typing, they might like to start off with the Blockly version of this course. The blocks are drag and drop, and Python code is generated as students clip blocks together, so your students will get familiar with Python syntax. \n<\/p>\n\n\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Statements are the building blocks of code. They are needed for implementation in Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a>, 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>, 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030\" target=\"_blank\">ACTDIP030<\/a>, and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP041\" target=\"_blank\">ACTDIP041<\/a> even though statements are not mentioned explicitly in the content descriptions.\n  <\/p>\n<\/aside>\n\n<aside class=\"info\">\n  <h2>We automark the lines and shapes<\/h2>\n  <p>\n    Our intelligent automarker checks the shapes drawn by the turtle. <strong>It ignores the direction and order they are drawn in.<\/strong>\n  <\/p>\n  <p>\n    As long as the shapes are <em>where<\/em> they should be, you can draw them however you wish.  There are many correct answers!\n  <\/p>\n<\/aside>\n"
    },
    {
      "language":1,
      "title":"Get your house in order",
      "notes":"",
      "updated_at":"2018-04-27T05:05:32.958134+00:00",
      "label":"aca-blockly-logo-house-no-variables-0",
      "content":"<p>\n  Use the turtle to draw a house!\n<\/p>\n\n<p>\n  The triangle at the top should have angles that are all 60\u00b0 and all sides of the house should be 100 turtle steps long.\n  The sides of the roof will also be 100 steps long.\n<\/p>\n\n<p>The result should look like this:<\/p>\n<pre class=\"js-logo-final\"><code data-lang=\"logo\">\n{\"width\":400,\"height\":300,\"zerox\":200,\"bgcolor\":[255,255,255],\"zeroy\":150,\"scalex\":1.0,\"shapes\":[{\"pencolor\":[0,0,0],\"pensize\":1,\"points\":[[0.0,0.0],[50.000000000000014,86.60254037844386],[100.00000000000003,0.0],[2.842170943040401e-14,-3.2162452993532734e-14],[1.005200744319371e-14,-100.00000000000003],[100.00000000000001,-100.00000000000003],[100.00000000000001,-2.842170943040401e-14]],\"id\":1,\"outline\":1,\"fillcolor\":[0,0,0]}],\"scaley\":1.0}\n<\/code><\/pre>\n\n<p>The top left corner of the square is where the turtle starts.<\/p>\n\n<aside class=\"info\">\n  <h2>Optional challenge!<\/h2>\n  <p>Try drawing the house in one line, without drawing over the same line twice. Think about the <em>order<\/em> you need to draw the lines in.<\/p>\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"0c4fe0e2-c8c1-405a-8b03-90163f14b9fb\",\"content\":\"from turtle import *\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"math_number\",\"turtle_forward\",\"turtle_backward\",\"turtle_turn_simple\",\"turtle_turn\"]",
      "teacher_notes":""
    },
    {
      "language":1,
      "title":"Equilateral triangle",
      "notes":"<p>\n  The tricky part of working with the turtle is imagining the instructions from the perspective of the turtle. To draw the triangle so that the angle between each side is 60\u00b0, the turtle actually needs to turn 120\u00b0.\n<\/p>\n\n",
      "updated_at":"2018-04-27T05:03:05.670291+00:00",
      "label":"aca-python-turtle-equilateral-triangle-no-variable",
      "content":"<p>\n  Write a Turtle program to draw an equilateral triangle, with the sides being 100 turtle steps long. All angles in an equilateral triangle are 60\u00b0.\n<\/p>\n<p>\n  The output of your program should look like this:\n<\/p>\n\n\n<div class=\"js-logo-animation\" data-eg-id=\"\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"763ecd40-dd99-11e7-86fa-b9ca68a86695\"]\n[\"create_shape\",\"763edc40-dd99-11e7-86fa-b9ca68a86695\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"filled\":true,\"fillcolor\":[0,0,0],\"pensize\":1,\"pencolor\":[0,0,0]}]\n[\"forward\",100]\n[\"left\",2.0943951023931953]\n[\"forward\",100]\n[\"left\",2.0943951023931953]\n[\"forward\",100]\n[\"end_animation\"]\n<\/code><\/div>\n\n\n<p>The <em>bottom left corner<\/em> of the triangle is where the turtle starts.<\/p>\n\n<aside class=\"info\">\n  <h2>Hint<\/h2>\n  <p>You need to do an angle calculation to draw this shape!<\/p>\n<\/aside>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"d8f47daf-14ab-414d-ad37-aafda4d88b18\",\"content\":\"from turtle import *\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"math_number\",\"turtle_forward\",\"turtle_turn_simple\",\"turtle_turn\"]",
      "teacher_notes":"<p>The tricky part of working with the turtle is imagining the instructions from the perspective of the turtle. To draw the triangle so that the angle between each side is 60\u00b0, the turtle actually needs to turn 120\u00b0.<\/p>\n"
    },
    {
      "language":1,
      "title":"Plate instead of bowl",
      "notes":"#markdown\nThe trick here is with the calculation of the angles. It's very important to realise that when the angle between the lines needs to be 135 degrees the turtle only needs to turn 180 degrees - 135 degrees = 45 degrees. This should become apparent as you attempt to turn 135 degrees.\n",
      "updated_at":"2018-04-27T05:01:32.043338+00:00",
      "label":"aca-python-turtle-plate-bowl",
      "content":"#markdown\nWrite a Turtle program to turn a very steep bowl shape into a plate.\n\nThe lines should all remain the length they are (i.e. 50 turtle steps, 100 turtle steps and 50 turtle steps), but you need to change the angles.\n\nCalculate the size of the turns you need to make. \n\n**The angle between the plate side and the plate base is 135\u02da**. \n\nThe turtle will start drawing from the top left corner:\n<pre class=\"js-logo-animation\"><code data-lang=\"logo\" style=\"display: none\">\n[\"begin_animation\",400,300,10,\"564dd098-19c3-11e7-9b77-22000af41c08\"]\n[\"create_shape\",\"564e0bee-19c3-11e7-9b77-22000af41c08\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pensize\":1,\"filled\":true,\"pencolor\":[0,0,0],\"fillcolor\":[0,0,0]}]\n[\"pen\",{\"speed\":3,\"heading\":0.0,\"tilt\":0.0,\"pendown\":true,\"pensize\":1,\"filled\":false,\"pencolor\":[0,0,0],\"fillcolor\":[0,0,0],\"shown\":true}]\n[\"pen\",{\"pencolor\":[0,0,0]}]\n[\"left\",-0.78539816339744830961566084581988]\n[\"forward\",50]\n[\"left\",0.78539816339744830961566084581988]\n[\"forward\",100]\n[\"left\",0.78539816339744830961566084581988]\n[\"forward\",50]\n[\"end_animation\"]\n<\/code><\/pre>\n\n> ## Hint\n> Try drawing the shape out on a piece of paper and calculating the angles you need before you start coding, and use the diagram below to help!\n<iframe src=\"https:\/\/static.groklearning-cdn.com\/static\/images\/interactive-svgs\/logo-angles-2.svg\" width=\"100%\" height=\"360\" style=\"border: none\"><\/iframe>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"5b28fc4a-95e2-40d9-870e-b6790bc75735\",\"content\":\"from turtle import *\\n\\nright(90)\\nforward(50)\\nleft(90)\\nforward(100)\\nleft(90)\\nforward(50)\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"math_number\",\"turtle_forward\",\"turtle_turn_simple\",\"turtle_turn\",\"turtle_pen\"]",
      "teacher_notes":"#markdown\nThe trick here is with the calculation of the angles. It's very important to realise that when the angle between the lines needs to be 135 degrees the turtle only needs to turn 180 degrees - 135 degrees = 45 degrees. This should become apparent as you attempt to turn 135 degrees.\n"
    },
    {
      "language":1,
      "title":"Wooden Fence",
      "notes":"<p>To solve this question, we'll need to use a <code data-lang=\"logo\">for<\/code> loop to draw each plank of wood. Writing the code to draw each one individually would be a lot of repetition!<\/p>\n\n<p>Let's break it down into steps. Before we start any of the steps to solve the problem, though, we'll need to remember our import statement!<\/p>\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">from turtle import *\n<\/code><\/pre>\n\n<p>\n  To start off, we'll need to read in the number of planks:<\/p>\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\"># Read in the number of planks.\nnplanks = int(input('How many planks? '))\n<\/code><\/pre>\n\n<p>And next, move to the very left of the screen. To do this, we'll need to pick the pen up, so we don't end up drawing a line:<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\n# Move to the left of the screen without drawing a line.\npenup()\nbackward(200)\npendown()\n<\/code><\/pre>\n\n<p>Now, we need to draw a number of planks, - the number being <code data-lang=\"logo\">nplanks<\/code> that we read in earlier, and finally we need to move into the position to draw the next plank. All this should happen <em>inside<\/em> the for loop that runs as many times as there are <code data-lang=\"logo\">nplanks<\/code>:<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\"># For each plank...\nfor i in range(nplanks):\n  # Draw the current plank.\n  forward(10)\n  right(90)\n  forward(100)\n  right(90)\n  forward(10)\n  right(90)\n  forward(100)\n  right(90)\n  \n  # Move into position to draw the next plank.\n  forward(10)\n<\/code><\/pre>",
      "updated_at":"2018-04-27T08:01:30.461457+00:00",
      "label":"aca-python-logo-build-a-fence",
      "content":"<p>\n  To build the whole fence it will take 40 planks of wood, but you don't have that many.\n  Write a program to see how much fence you can build with the planks that you have:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>How many planks? <\/o><i>11<\/i>\n<o><\/o>\n<\/code><\/pre>\n\n<pre class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"cea0bf7e-5d35-11e6-832d-22000a068b96\"]\n[\"create_shape\",\"cea0d798-5d35-11e6-832d-22000a068b96\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"pencolor\":[0,0,0],\"fillcolor\":[0,0,0],\"filled\":true,\"pensize\":1}]\n[\"input_begin\",\"How many planks? \"]\n[\"input_end\"]\n[\"pen\",{\"heading\":0.0,\"fillcolor\":[0,0,0],\"pendown\":false,\"pencolor\":[0,0,0],\"tilt\":0.0,\"speed\":3,\"shown\":true,\"filled\":false,\"pensize\":1}]\n[\"forward\",-200]\n[\"pen\",{\"pendown\":true}]\n[\"pen\",{\"pencolor\":[165,42,42],\"fillcolor\":[165,42,42]}]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"left\",-1.5707963267948966]\n[\"forward\",100]\n[\"left\",-1.5707963267948966]\n[\"forward\",10]\n[\"end_animation\"]\n<\/code><\/pre>\n\n<p>\n  Your program should start off by moving 200 turtle steps to the left so that it starts off at the left-edge of the screen.\n  Your program should work for any number up to 40 planks.\n<\/p>\n\n<p>Important things to note:<\/p>\n<ul>\n  <li>All lines should use pen colour <code data-lang=\"py3\">'brown'<\/code>.<\/li>\n  <li>Each plank should be 100 steps high and 10 steps wide.<\/li>\n  <li>The top of the fence should be the center of the space.<\/li>\n<\/ul>\n\n<p>\n  Here's another example:\n<\/p>\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>How many planks? <\/o><i>25<\/i>\n<o><\/o>\n<\/code><\/pre>\n<pre class=\"js-logo-final\" data-eg-id=\"\"><code data-lang=\"logo\" style=\"display: none\">\n{\"scaley\":1.0,\"shapes\":[{\"pencolor\":[165,42,42],\"points\":[[-200.0,0.0],[-190.0,0.0],[-190.00000000000003,-100.0],[-200.00000000000003,-100.0],[-200.00000000000003,0.0],[-190.00000000000003,0.0],[-180.00000000000003,0.0],[-180.00000000000006,-100.0],[-190.00000000000006,-100.0],[-190.00000000000006,0.0],[-180.00000000000006,0.0],[-170.00000000000006,0.0],[-170.00000000000009,-100.0],[-180.00000000000009,-100.0],[-180.00000000000009,0.0],[-170.00000000000009,0.0],[-160.00000000000009,0.0],[-160.0000000000001,-100.0],[-170.0000000000001,-100.0],[-170.0000000000001,0.0],[-160.0000000000001,0.0],[-150.0000000000001,0.0],[-150.00000000000014,-100.0],[-160.00000000000014,-100.0],[-160.00000000000014,0.0],[-150.00000000000014,0.0],[-140.00000000000014,0.0],[-140.00000000000017,-100.0],[-150.00000000000017,-100.0],[-150.00000000000017,0.0],[-140.00000000000017,0.0],[-130.00000000000017,0.0],[-130.0000000000002,-100.0],[-140.0000000000002,-100.0],[-140.0000000000002,0.0],[-130.0000000000002,0.0],[-120.0000000000002,0.0],[-120.00000000000021,-100.0],[-130.00000000000023,-100.0],[-130.00000000000023,0.0],[-120.00000000000023,0.0],[-110.00000000000023,0.0],[-110.00000000000024,-100.0],[-120.00000000000024,-100.0],[-120.00000000000024,0.0],[-110.00000000000024,0.0],[-100.00000000000024,0.0],[-100.00000000000026,-100.0],[-110.00000000000026,-100.0],[-110.00000000000026,0.0],[-100.00000000000026,0.0],[-90.00000000000026,0.0],[-90.00000000000027,-100.0],[-100.00000000000027,-100.0],[-100.00000000000027,0.0],[-90.00000000000027,0.0],[-80.00000000000027,0.0],[-80.00000000000028,-100.0],[-90.00000000000028,-100.0],[-90.00000000000028,0.0],[-80.00000000000028,0.0],[-70.00000000000028,0.0],[-70.0000000000003,-100.0],[-80.0000000000003,-100.0],[-80.0000000000003,0.0],[-70.0000000000003,0.0],[-60.0000000000003,0.0],[-60.00000000000032,-100.0],[-70.00000000000031,-100.0],[-70.00000000000031,0.0],[-60.00000000000031,0.0],[-50.00000000000031,0.0],[-50.000000000000334,-100.0],[-60.000000000000334,-100.0],[-60.00000000000033,0.0],[-50.00000000000033,0.0],[-40.00000000000033,0.0],[-40.00000000000035,-100.0],[-50.00000000000035,-100.0],[-50.00000000000034,0.0],[-40.00000000000034,0.0],[-30.00000000000034,0.0],[-30.00000000000036,-100.0],[-40.000000000000355,-100.0],[-40.00000000000035,0.0],[-30.000000000000348,0.0],[-20.000000000000348,0.0],[-20.000000000000366,-100.0],[-30.000000000000366,-100.0],[-30.00000000000036,0.0],[-20.00000000000036,0.0],[-10.000000000000359,0.0],[-10.000000000000377,-100.0],[-20.000000000000377,-100.0],[-20.00000000000037,0.0],[-10.00000000000037,0.0],[-3.694822225952521e-13,0.0],[-3.878519245824624e-13,-100.0],[-10.000000000000387,-100.0],[-10.000000000000382,0.0],[-3.8191672047105385e-13,0.0],[9.999999999999618,0.0],[9.9999999999996,-100.0],[-3.9968028886505635e-13,-100.0],[-3.935570548693196e-13,0.0],[9.999999999999606,0.0],[19.999999999999606,0.0],[19.999999999999588,-100.0],[9.999999999999588,-100.0],[9.999999999999593,0.0],[19.999999999999595,0.0],[29.999999999999595,0.0],[29.999999999999577,-100.0],[19.999999999999577,-100.0],[19.999999999999584,0.0],[29.999999999999584,0.0],[39.99999999999959,0.0],[39.99999999999957,-100.0],[29.999999999999567,-100.0],[29.999999999999574,0.0],[39.999999999999574,0.0],[49.999999999999574,0.0],[49.99999999999955,-100.0],[39.99999999999955,-100.0],[39.99999999999956,0.0],[49.99999999999956,0.0]],\"pensize\":1,\"filled\":false,\"kind\":\"line\",\"id\":\"2bca2d12-5d35-11e6-ad62-22000ae85508\"}],\"zerox\":200,\"height\":300,\"zeroy\":150,\"width\":400,\"scalex\":1.0,\"bgcolor\":[255,255,255]}\n<\/code><\/pre>",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"d236d917-683f-41c6-97ec-f03d43f88b81\",\"content\":\"from turtle import *\\n\\n\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>To solve this question, we'll need to use a <code data-lang=\"logo\">for<\/code> loop to draw each plank of wood. Writing the code to draw each one individually would be a lot of repetition!<\/p>\n\n<p>Let's break it down into steps. Before we start any of the steps to solve the problem, though, we'll need to remember our import statement!<\/p>\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">from turtle import *\n<\/code><\/pre>\n\n<p>\n  To start off, we'll need to read in the number of planks:<\/p>\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\"># Read in the number of planks.\nnplanks = int(input('How many planks? '))\n<\/code><\/pre>\n\n<p>And next, move to the very left of the screen. To do this, we'll need to pick the pen up, so we don't end up drawing a line:<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\n# Move to the left of the screen without drawing a line.\npenup()\nbackward(200)\npendown()\n<\/code><\/pre>\n\n<p>Now, we need to draw a number of planks, - the number being <code data-lang=\"logo\">nplanks<\/code> that we read in earlier, and finally we need to move into the position to draw the next plank. All this should happen <em>inside<\/em> the for loop that runs as many times as there are <code data-lang=\"logo\">nplanks<\/code>:<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\"># For each plank...\nfor i in range(nplanks):\n  # Draw the current plank.\n  forward(10)\n  right(90)\n  forward(100)\n  right(90)\n  forward(10)\n  right(90)\n  forward(100)\n  right(90)\n  \n  # Move into position to draw the next plank.\n  forward(10)\n<\/code><\/pre>"
    },
    {
      "language":1,
      "title":"Scaleable House",
      "notes":"",
      "updated_at":"2018-04-27T08:03:34.658743+00:00",
      "label":"aca-python-logo-variable-scaleable-house",
      "content":"#markdown\nLet's draw a house for ants, or for giants!\n\nWe can take any shape and scale it up by multiplying all of the sides by the same number. We'll use this transformation to draw a house of any size!\n\nWrite a program which asks the user what size the house floor is (in turtle steps), the scale they want the house to be transformed by, and then uses the turtle to draw the house.\n\nThe triangle at the top should have angles that are all 60\u00b0 and all sides of the house should be the same number of turtle steps.\n  Here's an example of a 50 turtle step house, scaled by 2 (so the sides all end up 50 \u00d7 2 = 100 steps long).\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>Size: <\/o><i>50<\/i>\n<o>Scale: <\/o><i>2<\/i>\n<o><\/o>\n<\/code><\/pre>\n<pre class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"35721502-7c42-11e5-ab3e-22000afaa3ca\"]\n[\"create_shape\",\"35722bb4-7c42-11e5-ab3e-22000afaa3ca\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"filled\":true,\"fillcolor\":[0,0,0],\"pensize\":1,\"pencolor\":[0,0,0]}]\n[\"input_begin\",\"Size: \"]\n[\"input_end\"]\n[\"left\",1.0471975511965976]\n[\"forward\",100]\n[\"left\",-2.0943951023931953]\n[\"forward\",100]\n[\"left\",-2.0943951023931953]\n[\"forward\",100]\n[\"left\",1.5707963267948966]\n[\"forward\",100]\n[\"left\",1.5707963267948966]\n[\"forward\",100]\n[\"left\",1.5707963267948966]\n[\"forward\",100]\n[\"end_animation\"]\n<\/code><\/pre>\n\n\nThe top left corner of the square is where the turtle starts.\n\nHere's another example of a much smaller house:\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>Size: <\/o><i>10<\/i>\n<o>Scale: <\/o><i>3<\/i>\n<o><\/o>\n<\/code><\/pre>\n<pre class=\"js-logo-final\"><code data-lang=\"logo\">\n{\"zeroy\":150,\"scalex\":1.0,\"scaley\":1.0,\"width\":400,\"height\":300,\"bgcolor\":[255,255,255],\"shapes\":[{\"points\":[[0.0,0.0],[15.000000000000004,25.980762113533157],[30.000000000000007,0.0],[7.105427357601002e-15,-9.64873589805982e-15],[1.594516761437913e-15,-30.00000000000001],[30.0,-30.00000000000001],[30.000000000000004,-1.0658141036401503e-14]],\"filled\":false,\"id\":\"cf5e8e96-77a3-11e5-b354-22000a06912f\",\"kind\":\"line\",\"pencolor\":[0,0,0],\"pensize\":1}],\"zerox\":200}\n<\/code><\/pre>\n\n> ## Copy Blocks\n> Did you know you can copy blocks you've already made? Just right-click on the block in your answer and choose Duplicate!\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"d83314fa-4536-4a88-8237-9646d4189f2b\",\"content\":\"from turtle import *\\n\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"math_number\",\"math_arithmetic\",\"io_ask_num\",\"turtle_forward\",\"turtle_backward\",\"turtle_turn_simple\",\"turtle_turn\"]",
      "teacher_notes":""
    },
    {
      "language":1,
      "title":"Heartbeat",
      "notes":"",
      "updated_at":"2018-04-27T07:31:42.696346+00:00",
      "label":"aca-python-logo-heartbeat",
      "content":"<p>\n  If you've ever seen a movie where someone is in a hospital bed, you would have seen their heartbeat appear as a line on a heart monitor. When a heartbeat is even, it repeats the same pattern over and over again like this:\n<\/p>\n\n<pre class=\"js-logo-animation\" data-io=\"false\"><code data-lang=\"logo\">\n[\"begin_animation\",400,300,10,\"5849b1da-d649-11e7-8d71-22000afc90e2\"]\n[\"create_shape\",\"5849bf2c-d649-11e7-8d71-22000afc90e2\",[[0,16],[-2,14],[-1,10],[-4,7],[-7,9],[-9,8],[-6,5],[-7,1],[-5,-3],[-8,-6],[-6,-8],[-4,-5],[0,-7],[4,-5],[6,-8],[8,-6],[5,-3],[7,1],[6,5],[9,8],[7,9],[4,7],[1,10],[2,14]],{\"filled\":true,\"pensize\":1,\"fillcolor\":[0,0,0],\"pencolor\":[0,0,0]}]\n[\"forward\",20]\n[\"left\",1.3962634015954636]\n[\"forward\",20]\n[\"left\",-2.792526803190927]\n[\"forward\",40]\n[\"left\",2.792526803190927]\n[\"forward\",20]\n[\"left\",-1.3962634015954636]\n[\"forward\",20]\n[\"forward\",20]\n[\"left\",1.3962634015954636]\n[\"forward\",20]\n[\"left\",-2.792526803190927]\n[\"forward\",40]\n[\"left\",2.792526803190927]\n[\"forward\",20]\n[\"left\",-1.3962634015954636]\n[\"forward\",20]\n[\"forward\",20]\n[\"left\",1.3962634015954636]\n[\"forward\",20]\n[\"left\",-2.792526803190927]\n[\"forward\",40]\n[\"left\",2.792526803190927]\n[\"forward\",20]\n[\"left\",-1.3962634015954636]\n[\"forward\",20]\n[\"end_animation\"]\n<\/code><\/pre>\n\n\n<p>\n  Create a heartbeat pattern of 3 pulses that:\n<\/p>\n\n<ul>\n  <li>Moves 20 steps forward before the start of the pulse;<\/li>\n  <li>Turns 80\u00b0 left to draw the start of the pulse;<\/li>\n  <li>Moves 20 steps up to draw the start of the pulse;<\/li>\n  <li>Turns 160\u00b0 right at the top of the pulse;<\/li>\n  <li>Moves 40 steps to draw the main part of the pulse;<\/li>\n  <li>Turns 160\u00b0 left at the bottom of the pulse;<\/li>\n  <li>Moves another 20 steps to draw the last part of the pulse;<\/li>\n  <li>Has a gap of 40 steps between each pulse (the hint will help with this).<\/li>\n<\/ul>\n\n<aside class=\"info\">\n  <h2>Hint<\/h2>\n  <p>For this to work your turtle will need to face the same direction at the start and end of the loop, and the first and last thing it does is move forward 20 steps.<\/p>\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"9f6846de-1345-4f47-83c9-128060bc3337\",\"content\":\"from turtle import *\\n\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"math_number\",\"math_angle_picker\",\"math_arithmetic\",\"io_ask_text\",\"io_ask_num\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_backward\",\"turtle_turn_simple\",\"turtle_turn\",\"turtle_turn_picker\",\"turtle_pen\",\"turtle_colormode_dropdown\",\"turtle_pencolor_dropdown\",\"turtle_pencolor_picker\",\"turtle_pencolor_rgb\",\"turtle_pencolor_text\",\"turtle_pensize\",\"turtle_bgcolor_dropdown\",\"turtle_bgcolor_picker\",\"turtle_bgcolor_rgb\",\"turtle_bgcolor_text\",\"turtle_goto\",\"turtle_fill_dropdown\",\"turtle_fillcolor_picker\",\"turtle_fillcolor_rgb\",\"turtle_fill_text\",\"turtle_speed\"]",
      "teacher_notes":""
    },
    {
      "language":1,
      "title":"Turtle Playground!",
      "notes":"",
      "updated_at":"2018-04-27T08:07:49.860692+00:00",
      "label":"aca-python-logo-playground-2",
      "content":"<p>\n  Why not have a go at creating your very own drawing! You can write whatever code you like in this question. Consider it your personal playground.\n<\/p>\n\n\n<aside class=\"info\">\n  <h2>Save or submit your code!<\/h2>\n  <p>There are no points to be earned for this question, so you can submit whatever code you like. Make sure you save programs that you want to keep! <\/p>\n<\/aside>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"baa6e320-11b3-4dec-92a4-572d5ca04285\",\"content\":\"from turtle import *\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"math_number\",\"math_angle_picker\",\"math_arithmetic\",\"io_ask_text\",\"io_ask_num\",\"decisions_if_compare\",\"decisions_if_else_compare\",\"decisions_if_elif_else_compare\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_backward\",\"turtle_turn_simple\",\"turtle_turn\",\"turtle_turn_picker\",\"turtle_pen\",\"turtle_pencolor_dropdown\",\"turtle_pencolor_picker\",\"turtle_pencolor_text\",\"turtle_pensize\",\"turtle_bgcolor_dropdown\",\"turtle_bgcolor_text\",\"turtle_fill_dropdown\",\"turtle_fill_text\",\"turtle_speed\"]",
      "teacher_notes":"<p>\n  There's no wrong answer in the playground! Have fun drawing!\n<\/p>"
    },
    {
      "language":1,
      "title":"Turtle Playground!",
      "notes":"",
      "updated_at":"2018-04-27T08:05:07.567247+00:00",
      "label":"aca-python-logo-playground-0",
      "content":"<p>\n  Why not have a go at creating your very own drawing! You can write whatever code you like in this question. Consider it your personal playground.\n<\/p>\n\n\n<aside class=\"info\">\n  <h2>Save or submit your code!<\/h2>\n  <p>There are no points to be earned for this question, so you can submit whatever code you like. Make sure you save programs that you want to keep! <\/p>\n<\/aside>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"baa6e320-11b3-4dec-92a4-572d5ca04285\",\"content\":\"from turtle import *\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"math_number\",\"math_angle_picker\",\"math_arithmetic\",\"io_ask_text\",\"io_ask_num\",\"decisions_if_compare\",\"decisions_if_else_compare\",\"decisions_if_elif_else_compare\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_backward\",\"turtle_turn_simple\",\"turtle_turn\",\"turtle_turn_picker\",\"turtle_pen\",\"turtle_pencolor_dropdown\",\"turtle_pencolor_picker\",\"turtle_pencolor_text\",\"turtle_pensize\",\"turtle_bgcolor_dropdown\",\"turtle_bgcolor_text\",\"turtle_fill_dropdown\",\"turtle_fill_text\",\"turtle_speed\"]",
      "teacher_notes":"<p>\n  There's no wrong answer in the playground! Have fun drawing!\n<\/p>"
    },
    {
      "language":1,
      "title":"Turtle Playground!",
      "notes":"",
      "updated_at":"2018-04-27T08:05:23.012503+00:00",
      "label":"aca-python-logo-playground-1",
      "content":"<p>\n  Why not have a go at creating your very own drawing! You can write whatever code you like in this question. Consider it your personal playground.\n<\/p>\n\n\n<aside class=\"info\">\n  <h2>Save or submit your code!<\/h2>\n  <p>There are no points to be earned for this question, so you can submit whatever code you like. Make sure you save programs that you want to keep! <\/p>\n<\/aside>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"uuid\":\"baa6e320-11b3-4dec-92a4-572d5ca04285\",\"content\":\"from turtle import *\",\"path\":\"program.py\",\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"math_number\",\"math_angle_picker\",\"math_arithmetic\",\"io_ask_text\",\"io_ask_num\",\"decisions_if_compare\",\"decisions_if_else_compare\",\"decisions_if_elif_else_compare\",\"loops_repeat_ext\",\"turtle_forward\",\"turtle_backward\",\"turtle_turn_simple\",\"turtle_turn\",\"turtle_turn_picker\",\"turtle_pen\",\"turtle_pencolor_dropdown\",\"turtle_pencolor_picker\",\"turtle_pencolor_text\",\"turtle_pensize\",\"turtle_bgcolor_dropdown\",\"turtle_bgcolor_text\",\"turtle_fill_dropdown\",\"turtle_fill_text\",\"turtle_speed\"]",
      "teacher_notes":"<p>\n  There's no wrong answer in the playground! Have fun drawing!\n<\/p>"
    }
  ],
  "lead_text":"Write code to control a turtle and draw fantastic pictures!",
  "short_title":"DT Python Turtle",
  "export_version":1,
  "slug":"aca-dt-78-py-turtle",
  "outline":""
}