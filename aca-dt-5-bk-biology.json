{
  "description":"Learn about the differences between animals, and how Biologists use programming to help them do science!\n\nWe'll learn about the features of animals, structural and behavioural adaptation, and how to use these properties in order to identify them. So hop in and learn some science!\n\nThis course is based on the Year 5 science and the 5-6 Digital Technologies curriculum.",
  "title":"DT Challenge Blockly - Year 5 Biology",
  "modules":[
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nSetting the contents of a variable is called *assigning* a value to the variable. Python creates variables by assignment.\n\nWhen you assign a new value to an existing variable, it replaces the old contents of the variable:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"L`OdoKnmUA!w+SU4lC}K\">species<\/variable>\n    <variable type=\"\" id=\"E@mP.Ycd)|*9e_9GsP^p\">organisms<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"AP.0p[|EZP_o%s~\/GB.V\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"L`OdoKnmUA!w+SU4lC}K\" variabletype=\"\">species<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"(K@$~?=R,Vlgc}TE}SSs\">\n        <field name=\"TEXT\">Homo Sapiens!<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"QG;HAw+JuU8zG_q=8R!B\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"t85I5$_7Vh[V@kJR6vUM\">\n            <field name=\"VAR\" id=\"L`OdoKnmUA!w+SU4lC}K\" variabletype=\"\">species<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"5`dzrYWtUbckuupOwS[M\">\n            <field name=\"VAR\" id=\"L`OdoKnmUA!w+SU4lC}K\" variabletype=\"\">species<\/field>\n            <value name=\"VALUE\">\n              <block type=\"text\" id=\"ZW_zo5R`DzxB6W}\/Kqwh\">\n                <field name=\"TEXT\">Human!<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"#d?$d4^PWV@eDw0{G0lT\">\n                <value name=\"ANY0\">\n                  <block type=\"variables_get\" id=\":6wY?BUnMr_7)M%Uaa@d\">\n                    <field name=\"VAR\" id=\"L`OdoKnmUA!w+SU4lC}K\" variabletype=\"\">species<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nThe old value in `species` - `'Homo Sapiens'` - is replaced with the new value - `'Human!'` - before the second `print` statement, producing:\n\n```eg:last;lang:py3;terminal;\nHomo Sapiens!\nHuman!\n```\n\n> ## Variables are like files\n> Variables are like files on your computer: they have a name and you can store data in them. You can look at the contents or overwrite the contents with new data.\n"
                }
              ],
              "layout":0,
              "title":"Assigning to a variable",
              "notes":[
                {
                  "left":"#markdown\nThis is one of the toughest concepts for new programmers to understand, so it's worth making sure you're comfortable with this concept yourself so you can assist students who get stuck.\n\nWhen a computer needs to store data, it does so by writing that data into memory. Each section of memory has an address - just like every house on a street does - so accessing data requires you to point to the address that the data was stored at. Unfortunately, the addresses used by computers are not very memorable and look something like `0x83fba73d`.\n\nWhen we create a variable, we are setting a human-readable version of the address. We can then use this in our program to access the data we have assigned to it. You can think of this as replacing the address of your house - something like `123 House Street` - with a name - perhaps `Castle`. Now, every time you use the term `Castle`, you are referring to your house without needing to use the whole address.\n\nWhen you assign to a variable you aren't just giving it a convenient label - you are also storing some new data into that piece of memory. Any reference to that variable later in your program goes to that address and retrieves the data you put there.\n\nVariable labels are reusable, so you can change the data you are referring to by assigning the same variable name to a new value."
                }
              ],
              "notes_rendered":"<p>This is one of the toughest concepts for new programmers to understand, so it's worth making sure you're comfortable with this concept yourself so you can assist students who get stuck.<\/p>\n<p>When a computer needs to store data, it does so by writing that data into memory. Each section of memory has an address - just like every house on a street does - so accessing data requires you to point to the address that the data was stored at. Unfortunately, the addresses used by computers are not very memorable and look something like <code data-lang=\"py3\">0x83fba73d<\/code>.<\/p>\n<p>When we create a variable, we are setting a human-readable version of the address. We can then use this in our program to access the data we have assigned to it. You can think of this as replacing the address of your house - something like <code data-lang=\"py3\">123 House Street<\/code> - with a name - perhaps <code data-lang=\"py3\">Castle<\/code>. Now, every time you use the term <code data-lang=\"py3\">Castle<\/code>, you are referring to your house without needing to use the whole address.<\/p>\n<p>When you assign to a variable you aren't just giving it a convenient label - you are also storing some new data into that piece of memory. Any reference to that variable later in your program goes to that address and retrieves the data you put there.<\/p>\n<p>Variable labels are reusable, so you can change the data you are referring to by assigning the same variable name to a new value.<\/p>",
              "content_rendered":"<p>Setting the contents of a variable is called <em>assigning<\/em> a value to the variable. Python creates variables by assignment.<\/p>\n<p>When you assign a new value to an existing variable, it replaces the old contents of the variable:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aca-bk-biology-yr5-input-0-0-0\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"L`OdoKnmUA!w+SU4lC}K\">species<\/variable>\n    <variable type=\"\" id=\"E@mP.Ycd)|*9e_9GsP^p\">organisms<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"AP.0p[|EZP_o%s~\/GB.V\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"L`OdoKnmUA!w+SU4lC}K\" variabletype=\"\">species<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"(K@$~?=R,Vlgc}TE}SSs\">\n        <field name=\"TEXT\">Homo Sapiens!<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"QG;HAw+JuU8zG_q=8R!B\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"t85I5$_7Vh[V@kJR6vUM\">\n            <field name=\"VAR\" id=\"L`OdoKnmUA!w+SU4lC}K\" variabletype=\"\">species<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"5`dzrYWtUbckuupOwS[M\">\n            <field name=\"VAR\" id=\"L`OdoKnmUA!w+SU4lC}K\" variabletype=\"\">species<\/field>\n            <value name=\"VALUE\">\n              <block type=\"text\" id=\"ZW_zo5R`DzxB6W}\/Kqwh\">\n                <field name=\"TEXT\">Human!<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"#d?$d4^PWV@eDw0{G0lT\">\n                <value name=\"ANY0\">\n                  <block type=\"variables_get\" id=\":6wY?BUnMr_7)M%Uaa@d\">\n                    <field name=\"VAR\" id=\"L`OdoKnmUA!w+SU4lC}K\" variabletype=\"\">species<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<p>The old value in <code data-lang=\"py3\">species<\/code> - <code data-lang=\"py3\">'Homo Sapiens'<\/code> - is replaced with the new value - <code data-lang=\"py3\">'Human!'<\/code> - before the second <code data-lang=\"py3\">print<\/code> statement, producing:<\/p>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-bk-biology-yr5-input-0-0-0\"><code data-lang=\"py3\"><o>Homo Sapiens!<\/o>\n<o>Human!<\/o>\n<o><\/o><\/code><\/pre>\n<aside class=\"info\">\n<h2>Variables are like files<\/h2>\n<p>Variables are like files on your computer: they have a name and you can store data in them. You can look at the contents or overwrite the contents with new data.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nLet's write a program that asks the user to name an animal:\n\n```eg:bk-input-name;lang:blockly;\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">animal<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"io_ask_text\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block id=\"3\" type=\"text\">\n            <field name=\"TEXT\">Can you name an animal?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"4\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"5\" type=\"variables_get\">\n          <field name=\"VAR\">animal<\/field>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n```\n\nRun this program. Even if you haven't run any so far, run this one!\n\n**You will need to type a name and press <kbd>Enter<\/kbd>**:\n\n```eg:last;lang:py3;terminal;\nCan you name an animal? @@@Duck\nDuck\n\n```\n\nThe <bk class=\"str\">ask<\/bk> block needs a question string to *ask the user*. It returns the user's answer to our program as a new string. Our program stores the answer in the <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> variable so we can print it later.\n\n**Run it again with a different animal. Then try changing the question.**\n"
                }
              ],
              "layout":0,
              "title":"Asking the user a question",
              "notes":[
                {
                  "left":"#markdown\n**Students really (really!) need to run this slide's example!** It is worth running it on a big screen so everyone sees it at least once.\n\nIt is their first *interactive* program \u2013&nbsp;i.e. it responds to their input.\n\nWhen the program runs, it waits for the user to answer:\n\n```lang:py3;terminal;eg:none;\nCan you name an animal? \n```\n\nIt won't keep going until the user enters an animal and presses <kbd>Enter<\/kbd>.\n\nThe text that the user enters is *returned* by the <bk class=\"str\">ask<\/bk> block. The <bk class=\"var\">set <bk class=\"inner\">animal<\/bk><\/bk> block stores that text in the <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> variable.  Finally, the <bk class=\"io\">print<\/bk> block then prints out this stored text.\n\n> ## type:curriculum;Australian Curriculum: Digital Technologies\n> Text and numbers are two important types of user input.\n>   AC:DT requires students to write programs involving *user input* from Years 3\u20134 [ACTDIP011](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011) and 5\u20136 [ACTDIP020](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020).\n>     Students must *predict output for a given input* in Years 7\u20138 [ACTDIP029](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029)."
                }
              ],
              "notes_rendered":"<p><strong>Students really (really!) need to run this slide's example!<\/strong> It is worth running it on a big screen so everyone sees it at least once.<\/p>\n<p>It is their first <em>interactive<\/em> program \u2013\u00a0i.e. it responds to their input.<\/p>\n<p>When the program runs, it waits for the user to answer:<\/p>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>Can you name an animal? <\/o>\n<o><\/o><\/code><\/pre>\n<p>It won't keep going until the user enters an animal and presses <kbd>Enter<\/kbd>.<\/p>\n<p>The text that the user enters is <em>returned<\/em> by the <bk class=\"str\">ask<\/bk> block. The <bk class=\"var\">set <bk class=\"inner\">animal<\/bk><\/bk> block stores that text in the <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> variable.  Finally, the <bk class=\"io\">print<\/bk> block then prints out this stored text.<\/p>\n<aside class=\"info curriculum\">\n<h2>Australian Curriculum: Digital Technologies<\/h2>\n<p>Text and numbers are two important types of user input.\nAC:DT requires students to write programs involving <em>user input<\/em> from Years 3\u20134 <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\">ACTDIP011<\/a> and 5\u20136 <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\">ACTDIP020<\/a>.\nStudents must <em>predict output for a given input<\/em> in Years 7\u20138 <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\">ACTDIP029<\/a>.<\/p>\n<\/aside>",
              "content_rendered":"<p>Let's write a program that asks the user to name an animal:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"bk-input-name\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">animal<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"io_ask_text\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block id=\"3\" type=\"text\">\n            <field name=\"TEXT\">Can you name an animal?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"4\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"5\" type=\"variables_get\">\n          <field name=\"VAR\">animal<\/field>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n<p>Run this program. Even if you haven't run any so far, run this one!<\/p>\n<p><strong>You will need to type a name and press <kbd>Enter<\/kbd><\/strong>:<\/p>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"bk-input-name\"><code data-lang=\"py3\"><o>Can you name an animal? <\/o><i>Duck<\/i>\n<o>Duck<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>The <bk class=\"str\">ask<\/bk> block needs a question string to <em>ask the user<\/em>. It returns the user's answer to our program as a new string. Our program stores the answer in the <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> variable so we can print it later.<\/p>\n<p><strong>Run it again with a different animal. Then try changing the question.<\/strong><\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Lyrebird mimic",
              "purpose":"",
              "problem":"aca-bk-bio-lyrebird-echo",
              "type":1,
              "problem_id":4439
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nNow we see why variables are called *variables*! When you run the program and ask the user for input, they could type anything:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"L]gjbhw6aR7qI\/E_zt71\">animal<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"0|}}fT?t{bS!V##@Yp,#\" x=\"10\" y=\"15\">\n    <field name=\"VAR\" id=\"L]gjbhw6aR7qI\/E_zt71\" variabletype=\"\">animal<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"Oc;c?N\/N|$i^Ku4^S9jY\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"gg)IN6=9wH\/kw`u=yr\/h\">\n            <field name=\"TEXT\">Favourite animal?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print3\" id=\"je7P!J4[O,GMI^?MP~#a\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"2{gbt{;x0qVAD$Ug1T\/,\">\n            <field name=\"TEXT\">I like<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"SJq0++u(bNETnnh`W]8p\">\n            <field name=\"VAR\" id=\"L]gjbhw6aR7qI\/E_zt71\" variabletype=\"\">animal<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY2\">\n          <block type=\"text\" id=\"H4j)[~OAqI+%nKJXYuwr\">\n            <field name=\"TEXT\">too!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\n```eg:last;terminal;\nFavourite animal? @@@tigers\nI like tigers too!\n\n```\n\nHere, the `animal` variable contains `'tigers'`, but if the user types in something else, it will contain something else:\n\n```lang:py3;terminal;eg:none;\nFavourite animal? @@@pineapples\nI like pineapples too!\n\n```\n\nThis time, the `animal` variable contains `'pineapples'`.\n\nVariables are *variable* because you may not know their value when you write the program, it could be *anything*!\n"
                }
              ],
              "layout":0,
              "title":"Variable variables!",
              "notes":[
                {
                  "left":"#markdown\nSome students struggle to see the parallels between variables used in programming and algebra - and that's actually quite normal! This is because we use variables in algebra to define something that is unknown but (for the purposes of most high school mathematics) has a fixed value we are trying to work out.\n\nIn programming, a variable is a reference that we use to refer to some data that may or may not be the same each time a program runs. Since we can read from and write to variables easily - including data input by the user - the variable doesn't have a particular value, even though it is still an unknown at the time the program is written."
                }
              ],
              "notes_rendered":"<p>Some students struggle to see the parallels between variables used in programming and algebra - and that's actually quite normal! This is because we use variables in algebra to define something that is unknown but (for the purposes of most high school mathematics) has a fixed value we are trying to work out.<\/p>\n<p>In programming, a variable is a reference that we use to refer to some data that may or may not be the same each time a program runs. Since we can read from and write to variables easily - including data input by the user - the variable doesn't have a particular value, even though it is still an unknown at the time the program is written.<\/p>",
              "content_rendered":"<p>Now we see why variables are called <em>variables<\/em>! When you run the program and ask the user for input, they could type anything:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aca-bk-biology-yr5-input-0-3-0\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"L]gjbhw6aR7qI\/E_zt71\">animal<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"0|}}fT?t{bS!V##@Yp,#\" x=\"10\" y=\"15\">\n    <field name=\"VAR\" id=\"L]gjbhw6aR7qI\/E_zt71\" variabletype=\"\">animal<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"Oc;c?N\/N|$i^Ku4^S9jY\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"gg)IN6=9wH\/kw`u=yr\/h\">\n            <field name=\"TEXT\">Favourite animal?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print3\" id=\"je7P!J4[O,GMI^?MP~#a\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"2{gbt{;x0qVAD$Ug1T\/,\">\n            <field name=\"TEXT\">I like<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"SJq0++u(bNETnnh`W]8p\">\n            <field name=\"VAR\" id=\"L]gjbhw6aR7qI\/E_zt71\" variabletype=\"\">animal<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY2\">\n          <block type=\"text\" id=\"H4j)[~OAqI+%nKJXYuwr\">\n            <field name=\"TEXT\">too!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-bk-biology-yr5-input-0-3-0\"><code data-lang=\"py3\"><o>Favourite animal? <\/o><i>tigers<\/i>\n<o>I like tigers too!<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>Here, the <code data-lang=\"py3\">animal<\/code> variable contains <code data-lang=\"py3\">'tigers'<\/code>, but if the user types in something else, it will contain something else:<\/p>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>Favourite animal? <\/o><i>pineapples<\/i>\n<o>I like pineapples too!<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>This time, the <code data-lang=\"py3\">animal<\/code> variable contains <code data-lang=\"py3\">'pineapples'<\/code>.<\/p>\n<p>Variables are <em>variable<\/em> because you may not know their value when you write the program, it could be <em>anything<\/em>!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: The animal is...",
              "purpose":"",
              "problem":"aca-bk-bio-the-animal-is",
              "type":1,
              "problem_id":4450
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: What we saw at the zoo",
              "purpose":"",
              "problem":"aca-bk-bio-join-strings-zoo",
              "type":1,
              "problem_id":4451
            }
          ],
          "title":"Reading user input"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nAnimals have structural features that help them survive in their environment.\n\nThese features can come in many different forms - it could be to help them regulate temperature in hot environments, or features that make it easier to get food, there are almost infinite possibilities!\n\nFor example, a koala has thick, waterproof fur that helps it keep warm and dry!\n\n<figure class=\"align-center\">\n  <img alt=\"A koala climbing a tree\" src=\"https:\/\/groklearning-cdn.com\/modules\/Y2zpSdxrXqtdSUjq5pQLZE\/Koala_climbing_tree.jpg\" width=\"60%\">\n  <figcaption>Photo by DAVID ILIFF. License: <a href=\"https:\/\/creativecommons.org\/licenses\/by-sa\/3.0\" target=\"_blank\">CC-BY-SA 3.0<\/a><\/figcaption>\n<\/figure>"
                }
              ],
              "layout":0,
              "title":"Structural Features",
              "notes_rendered":"",
              "content_rendered":"<p>Animals have structural features that help them survive in their environment.<\/p>\n<p>These features can come in many different forms - it could be to help them regulate temperature in hot environments, or features that make it easier to get food, there are almost infinite possibilities!<\/p>\n<p>For example, a koala has thick, waterproof fur that helps it keep warm and dry!<\/p>\n<figure class=\"align-center\">\n  <img alt=\"A koala climbing a tree\" src=\"https:\/\/groklearning-cdn.com\/modules\/Y2zpSdxrXqtdSUjq5pQLZE\/Koala_climbing_tree.jpg\" width=\"60%\">\n  <figcaption>Photo by DAVID ILIFF. License: <a href=\"https:\/\/creativecommons.org\/licenses\/by-sa\/3.0\" target=\"_blank\">CC-BY-SA 3.0<\/a><\/figcaption>\n<\/figure>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nWhen scientists use computers to store information about animals, they often need to store lots of different bits of information.\n\nTo do this they can create more variables! You can have as many as you like as long as each has a different name.\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"RxAS1L+i1O`;DYqxO%Nb\">feature<\/variable>\n    <variable type=\"\" id=\":UAUH0dnG`Jz}Dqm@Qf=\">animal<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"AGfMo,yy6)\/~V,KOEEK(\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\":UAUH0dnG`Jz}Dqm@Qf=\" variabletype=\"\">animal<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"fJ75q3}4H?@.0Aw)OVIX\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"\/`kAVmE%SsQ#8bO~2xyM\">\n            <field name=\"TEXT\">Name an animal?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"zVtbXh`+*Sc`QI0xU-NL\">\n        <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">feature<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"*G8Ioxn:^G{w2*\/|xO2-\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"b77v-X|R0~wd|p~Eb|C5\">\n                <field name=\"TEXT\">What feature helps them survive?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print4\" id=\"RzE($[3dEvxnTpY-tdG|\">\n            <value name=\"ANY0\">\n              <block type=\"variables_get\" id=\"ahCcv$gHr\/k)#nm;-9K#\">\n                <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">feature<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"text\" id=\"66?Ihn=c3rAILudi@\/lJ\">\n                <field name=\"TEXT\">helps the<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY2\">\n              <block type=\"variables_get\" id=\"cnBl*aDz]S!;?Qo-i)EP\">\n                <field name=\"VAR\" id=\":UAUH0dnG`Jz}Dqm@Qf=\" variabletype=\"\">animal<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY3\">\n              <block type=\"text\" id=\"0=P@I~W+(G~4#![SRlZq\">\n                <field name=\"TEXT\">survive.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nThe variable names make it very clear what is stored in each! \n\nHere we can tell what is stored in both the <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> and <bk class=\"var\"><bk class=\"inner\">feature<\/bk><\/bk> variables! \n\n```eg:last;terminal;\nName an animal? @@@koala\nWhat feature helps them survive? @@@Thick fur\nThick fur helps the koala survive.\n```\n\n**Good variable names help explain what the code does!**"
                }
              ],
              "layout":0,
              "title":"Using multiple variables",
              "notes":[
                {
                  "left":"#markdown\nThere are two things to take away from this slide:\n* It is good practice to use variable names that have meaning so you know what they actually contain. Make sure students use meaningful variable names in all of their code, all of the time.\n* You can create as many variables as you need to make your code simple to write and easy to read. The creation of the `highest_ranks` variable makes the `print` statement much easier to write, and is easier to debug if things go wrong.\n\nAs a general rule, for each step of your algorithm you should try to write a separate line of code, at least when you're starting out!"
                }
              ],
              "notes_rendered":"<p>There are two things to take away from this slide:<\/p>\n<ul>\n<li>It is good practice to use variable names that have meaning so you know what they actually contain. Make sure students use meaningful variable names in all of their code, all of the time.<\/li>\n<li>You can create as many variables as you need to make your code simple to write and easy to read. The creation of the <code data-lang=\"py3\">highest_ranks<\/code> variable makes the <code data-lang=\"py3\">print<\/code> statement much easier to write, and is easier to debug if things go wrong.<\/li>\n<\/ul>\n<p>As a general rule, for each step of your algorithm you should try to write a separate line of code, at least when you're starting out!<\/p>",
              "content_rendered":"<p>When scientists use computers to store information about animals, they often need to store lots of different bits of information.<\/p>\n<p>To do this they can create more variables! You can have as many as you like as long as each has a different name.<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aca-bk-biology-yr5-input-1-1-0\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"RxAS1L+i1O`;DYqxO%Nb\">feature<\/variable>\n    <variable type=\"\" id=\":UAUH0dnG`Jz}Dqm@Qf=\">animal<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"AGfMo,yy6)\/~V,KOEEK(\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\":UAUH0dnG`Jz}Dqm@Qf=\" variabletype=\"\">animal<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"fJ75q3}4H?@.0Aw)OVIX\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"\/`kAVmE%SsQ#8bO~2xyM\">\n            <field name=\"TEXT\">Name an animal?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"zVtbXh`+*Sc`QI0xU-NL\">\n        <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">feature<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"*G8Ioxn:^G{w2*\/|xO2-\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"b77v-X|R0~wd|p~Eb|C5\">\n                <field name=\"TEXT\">What feature helps them survive?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print4\" id=\"RzE($[3dEvxnTpY-tdG|\">\n            <value name=\"ANY0\">\n              <block type=\"variables_get\" id=\"ahCcv$gHr\/k)#nm;-9K#\">\n                <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">feature<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"text\" id=\"66?Ihn=c3rAILudi@\/lJ\">\n                <field name=\"TEXT\">helps the<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY2\">\n              <block type=\"variables_get\" id=\"cnBl*aDz]S!;?Qo-i)EP\">\n                <field name=\"VAR\" id=\":UAUH0dnG`Jz}Dqm@Qf=\" variabletype=\"\">animal<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY3\">\n              <block type=\"text\" id=\"0=P@I~W+(G~4#![SRlZq\">\n                <field name=\"TEXT\">survive.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<p>The variable names make it very clear what is stored in each!<\/p>\n<p>Here we can tell what is stored in both the <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> and <bk class=\"var\"><bk class=\"inner\">feature<\/bk><\/bk> variables!<\/p>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-bk-biology-yr5-input-1-1-0\"><code data-lang=\"py3\"><o>Name an animal? <\/o><i>koala<\/i>\n<o>What feature helps them survive? <\/o><i>Thick fur<\/i>\n<o>Thick fur helps the koala survive.<\/o>\n<o><\/o><\/code><\/pre>\n<p><strong>Good variable names help explain what the code does!<\/strong><\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Desert survival",
              "purpose":"",
              "problem":"aca-bk-bio-desert-survivial",
              "type":1,
              "problem_id":4452
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Surviving in different habitats",
              "purpose":"",
              "problem":"aca-bk-bio-habitat-survival",
              "type":1,
              "problem_id":4453
            }
          ],
          "title":"More with variables"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Structural features",
              "purpose":"",
              "problem":"aca-choices-bio-structural-feature",
              "type":1,
              "problem_id":4463
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Animal and habitat",
              "purpose":"",
              "problem":"aca-choices-bio-animal-and-habitat",
              "type":1,
              "problem_id":4464
            }
          ],
          "title":"Structural features"
        }
      ],
      "title":"Input",
      "label":"aca-bk-biology-yr5-input",
      "updated_at":"2018-05-14T06:56:12.754192+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nSo far in the challenge you've learned quite a lot about both Biology and Digital Technologies:\n\n## Biology\n* Animals can be identified by looking at their physical features\n* Animal features help them survive in their habitat\n\n## Digital Technologies\n* Computers perform their functions through code *written by people*\n* We can *display text* on the screen in Blockly using the <bk class=\"io\">print<\/bk> block\n* The user can *enter text* into our program via the <bk class=\"io\">input<\/bk> block\n* *Variables* are used to store data in a computer program\n* An <bk class=\"control\">if<\/bk> block is used for *branching* in Blockly. It runs instructions when a condition is `True`.\n* A block with an <bk class=\"control\">elif<\/bk> or <bk class=\"control\">else<\/bk> allows you to perform different instructions under different conditions.\n\nThis project guides you through the process of building your own animal identifier based on its features."
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"What's the project?",
              "content_rendered":"<p>So far in the challenge you've learned quite a lot about both Biology and Digital Technologies:<\/p>\n<h2>Biology<\/h2>\n<ul>\n<li>Animals can be identified by looking at their physical features<\/li>\n<li>Animal features help them survive in their habitat<\/li>\n<\/ul>\n<h2>Digital Technologies<\/h2>\n<ul>\n<li>Computers perform their functions through code <em>written by people<\/em><\/li>\n<li>We can <em>display text<\/em> on the screen in Blockly using the <bk class=\"io\">print<\/bk> block<\/li>\n<li>The user can <em>enter text<\/em> into our program via the <bk class=\"io\">input<\/bk> block<\/li>\n<li><em>Variables<\/em> are used to store data in a computer program<\/li>\n<li>An <bk class=\"control\">if<\/bk> block is used for <em>branching<\/em> in Blockly. It runs instructions when a condition is <code data-lang=\"py3\">True<\/code>.<\/li>\n<li>A block with an <bk class=\"control\">elif<\/bk> or <bk class=\"control\">else<\/bk> allows you to perform different instructions under different conditions.<\/li>\n<\/ul>\n<p>This project guides you through the process of building your own animal identifier based on its features.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nThe first step in constructing our classifier is to develop an algorithm that will allow us to correctly identify each of our animals using their features. The animals we will be classifying are:\n\n* Koala\n* Short-beaked echidna\n* Eastern blue-tongue\n* Laughing kookaburra\n\nYou can download a [set of trading cards](https:\/\/aca.edu.au\/public\/resources\/classifier-blockly.pdf) for these animals that gives you the information you need about their features to identify each animal uniquely."
                }
              ],
              "layout":0,
              "notes_rendered":"<p>A good way to complete this activity with students is to get the away from the computer when constructing their algorithm and working out the classification. To assist with this process and to give them some features to focus on, we've provided a <a target=\"_blank\" href=\"https:\/\/aca.edu.au\/public\/resources\/classifier-blockly.pdf\">set of trading cards<\/a> that can be downloaded and printed on a single A4 sheet of paper\/cardboard.<\/p>\n<p>Consider pre-making a set of these for each student or pair of students, and have them work through the project together. You may also want to make a large copy of each of the cards that can be laminated and\/or have magnets attached to them so that they can be used to model the construction of the algorithm on the whiteboard (particularly helpful for younger or lower literacy students).<\/p>\n<p>The cards also come with a key card that maps each of the icons representing a feature to specific features of each animal. The programs students write will be matching those features exactly, so they are a good reference for spelling as well as the features themselves.<\/p>",
              "notes":[
                {
                  "left":"#markdown\n\nA good way to complete this activity with students is to get the away from the computer when constructing their algorithm and working out the classification. To assist with this process and to give them some features to focus on, we've provided a [set of trading cards](https:\/\/aca.edu.au\/public\/resources\/classifier-blockly.pdf) that can be downloaded and printed on a single A4 sheet of paper\/cardboard.\n\nConsider pre-making a set of these for each student or pair of students, and have them work through the project together. You may also want to make a large copy of each of the cards that can be laminated and\/or have magnets attached to them so that they can be used to model the construction of the algorithm on the whiteboard (particularly helpful for younger or lower literacy students).\n\nThe cards also come with a key card that maps each of the icons representing a feature to specific features of each animal. The programs students write will be matching those features exactly, so they are a good reference for spelling as well as the features themselves."
                }
              ],
              "title":"Classifying animals",
              "content_rendered":"<p>The first step in constructing our classifier is to develop an algorithm that will allow us to correctly identify each of our animals using their features. The animals we will be classifying are:<\/p>\n<ul>\n<li>Koala<\/li>\n<li>Short-beaked echidna<\/li>\n<li>Eastern blue-tongue<\/li>\n<li>Laughing kookaburra<\/li>\n<\/ul>\n<p>You can download a <a target=\"_blank\" href=\"https:\/\/aca.edu.au\/public\/resources\/classifier-blockly.pdf\">set of trading cards<\/a> for these animals that gives you the information you need about their features to identify each animal uniquely.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Animal features",
              "purpose":"",
              "problem":"aca-choices-bio-classification-matrix-mini-year5",
              "type":1,
              "problem_id":4460
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nNow that you know which features belong to which animal, your next step is to work out an appropriate algorithm to identify them in your program. We used flowcharts to do this in our previous modules, but another way you can represent this is shown below:\n\n![Classifying fruit using their features](https:\/\/groklearning-cdn.com\/modules\/fVtoUNBzVGX7YgrysVvhzi\/fruit.png)\n\nThis example classifies the four different fruits based on their features using just two questions for each one. You'll be doing a similar thing with our four animals.\n\n[This template](https:\/\/aca.edu.au\/public\/resources\/classifier-template.pdf) will help you work out which questions you need to ask using the trading cards from the previous slides.\n\nThere are a few different solutions to this problem, but the best one will only require asking ***two questions*** to identify each animal uniquely.\n\nYou can check your solution with your teacher first, or progress to the next slide and write your program!"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>You can think of this as the capstone project for this course - it has students use all of the Digital Technologies knowledge we've introduced so far to build a simple classifier for the four species on the trading cards.<\/p>\n<p>Having them plan out their algorithm is the key to success when writing the program. The fruit example has been chosen here because it demonstrates the process students will follow, but is also far enough removed from the actual species they are using that no information about the ideal split of features is revealed.<\/p>\n<p>The <a target=\"_blank\" href=\"https:\/\/aca.edu.au\/public\/resources\/classifier-template.pdf\">downloadable template<\/a> for this representation of dichotomous keys could be a useful way to guide students to the more efficient solution for this problem, where all animals can be identified with two questions. The project marker will allow other combinations, but one of the skills we want students to develop in Digital Technologies is designing efficient solutions to problems.<\/p>\n<p>In a divide and conquer type algorithm like dichotomous keys, halving the number of animals at each step is the best way to sort by features. It also ensures that students only have to write their <code data-lang=\"py3\">if<\/code> and <code data-lang=\"py3\">else<\/code> statements nested to two levels deep, which they've seen before in previous questions.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nYou can think of this as the capstone project for this course - it has students use all of the Digital Technologies knowledge we've introduced so far to build a simple classifier for the four species on the trading cards.\n\nHaving them plan out their algorithm is the key to success when writing the program. The fruit example has been chosen here because it demonstrates the process students will follow, but is also far enough removed from the actual species they are using that no information about the ideal split of features is revealed.\n\nThe [downloadable template](https:\/\/aca.edu.au\/public\/resources\/classifier-template.pdf) for this representation of dichotomous keys could be a useful way to guide students to the more efficient solution for this problem, where all animals can be identified with two questions. The project marker will allow other combinations, but one of the skills we want students to develop in Digital Technologies is designing efficient solutions to problems.\n\nIn a divide and conquer type algorithm like dichotomous keys, halving the number of animals at each step is the best way to sort by features. It also ensures that students only have to write their `if` and `else` statements nested to two levels deep, which they've seen before in previous questions."
                }
              ],
              "title":"Dichotomous tree",
              "content_rendered":"<p>Now that you know which features belong to which animal, your next step is to work out an appropriate algorithm to identify them in your program. We used flowcharts to do this in our previous modules, but another way you can represent this is shown below:<\/p>\n<p><figure class=\"align-center\">\n<img src=\"https:\/\/groklearning-cdn.com\/modules\/fVtoUNBzVGX7YgrysVvhzi\/fruit.png\" title=\"Classifying fruit using their features\" alt=\"Classifying fruit using their features\" width=\"90%\">\n<figcaption>\nClassifying fruit using their features\n<\/figcaption>\n<\/figure>\n<\/p>\n<p>This example classifies the four different fruits based on their features using just two questions for each one. You'll be doing a similar thing with our four animals.<\/p>\n<p><a target=\"_blank\" href=\"https:\/\/aca.edu.au\/public\/resources\/classifier-template.pdf\">This template<\/a> will help you work out which questions you need to ask using the trading cards from the previous slides.<\/p>\n<p>There are a few different solutions to this problem, but the best one will only require asking <strong><em>two questions<\/em><\/strong> to identify each animal uniquely.<\/p>\n<p>You can check your solution with your teacher first, or progress to the next slide and write your program!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Biology classifier",
              "purpose":"",
              "problem":"aca-bk-bio-classifier-mini-year5",
              "type":1,
              "problem_id":4459
            }
          ],
          "title":"Project description"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nExcellent work on finishing the project! You've learnt a little bit about how biological organisms can be identified, as well as how to solve some interesting problems with code!\n\nIf you want to diver deeper into the programming concepts, check out our [Pirate Chatbot course](https:\/\/groklearning.com\/course\/aca-dt-56-bk-chatbot\/)!\n\n[![Pirate Chatbot](https:\/\/groklearning-cdn.com\/modules\/UamshEepDuUxBhfepjyHWJ\/pirate-ship.png)](https:\/\/groklearning.com\/course\/aca-dt-56-bk-chatbot\/)"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Congratulations!",
              "content_rendered":"<p>Excellent work on finishing the project! You've learnt a little bit about how biological organisms can be identified, as well as how to solve some interesting problems with code!<\/p>\n<p>If you want to diver deeper into the programming concepts, check out our <a target=\"_blank\" href=\"https:\/\/groklearning.com\/course\/aca-dt-56-bk-chatbot\/\">Pirate Chatbot course<\/a>!<\/p>\n<p><a target=\"_blank\" href=\"https:\/\/groklearning.com\/course\/aca-dt-56-bk-chatbot\/\"><figure class=\"align-center\">\n<img src=\"https:\/\/groklearning-cdn.com\/modules\/UamshEepDuUxBhfepjyHWJ\/pirate-ship.png\" title=\"Pirate Chatbot\" alt=\"Pirate Chatbot\" width=\"90%\">\n<figcaption>\nPirate Chatbot\n<\/figcaption>\n<\/figure>\n<\/a><\/p>",
              "purpose":"",
              "type":0
            }
          ],
          "title":"Project complete"
        }
      ],
      "title":"Mini project: Simple classifier",
      "label":"aca-bk-biology-yr5-mini-classifier",
      "updated_at":"2018-05-14T06:56:12.493577+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nIn this course you'll learn two things:\n\n* how animals have different features and adapt to their environment; and\n* writing computer programs with Blockly\n\n<figure class=\"align-center\">\n  <img alt=\"A biologist working at a computer\" src=\"https:\/\/groklearning-cdn.com\/modules\/koibbk9jMUYjQaQCd5cTfM\/biologist_1_0.jpg\" width=\"60%\">\n  <figcaption>Biologists use computers to analyse data. <a href=\"https:\/\/www.flickr.com\/photos\/64860478@N05\/38997905444\/\" target=\"_blank\">Daniel So\u00f1\u00e9 Photography, LLC<\/a> CC BY 2.0<\/figcaption>\n<\/figure>\n\nScientists rely on computers to do lots of data processing and analysis for them. This data processing is all performed with computer programs!"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>Thanks for giving the DT Challenge a go!<\/p>\n<p>Throughout the course the Teacher's Notes will include additional information about the programming concepts being introduced, including advice that will help you troubleshoot problems students are likely to have with each concept.<\/p>\n<aside class=\"info curriculum\">\n<h2>Biological sciences<\/h2>\n<p>The biology content for this course addresses the <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACSSU043\">ACSSU043<\/a> content description in Year 5 of the Australian Curriculum: Science.<\/p>\n<\/aside>\n<aside class=\"info\">\n  <h2>Creative Commons Attribution 4.0 licence<\/h2>\n  <p>All of the material in this Australian Digital Technologies Challenge has been licensed under Creative Commonts Attribution 4.0.  This means you can copy and adapt the material for any purpose, as long as you include an attribution for the Australian Computing Academy.<\/p>\n<\/aside>",
              "notes":[
                {
                  "left":"#markdown\nThanks for giving the DT Challenge a go!\n\nThroughout the course the Teacher's Notes will include additional information about the programming concepts being introduced, including advice that will help you troubleshoot problems students are likely to have with each concept.\n\n> ## type:curriculum;Biological sciences\n> The biology content for this course addresses the [ACSSU043](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACSSU043) content description in Year 5 of the Australian Curriculum: Science.\n\n\n<aside class=\"info\">\n  <h2>Creative Commons Attribution 4.0 licence<\/h2>\n  <p>All of the material in this Australian Digital Technologies Challenge has been licensed under Creative Commonts Attribution 4.0.  This means you can copy and adapt the material for any purpose, as long as you include an attribution for the Australian Computing Academy.<\/p>\n<\/aside>"
                }
              ],
              "title":"Why biology and Programming?",
              "content_rendered":"<p>In this course you'll learn two things:<\/p>\n<ul>\n<li>how animals have different features and adapt to their environment; and<\/li>\n<li>writing computer programs with Blockly<\/li>\n<\/ul>\n<figure class=\"align-center\">\n  <img alt=\"A biologist working at a computer\" src=\"https:\/\/groklearning-cdn.com\/modules\/koibbk9jMUYjQaQCd5cTfM\/biologist_1_0.jpg\" width=\"60%\">\n  <figcaption>Biologists use computers to analyse data. <a href=\"https:\/\/www.flickr.com\/photos\/64860478@N05\/38997905444\/\" target=\"_blank\">Daniel So\u00f1\u00e9 Photography, LLC<\/a> CC BY 2.0<\/figcaption>\n<\/figure>\n<p>Scientists rely on computers to do lots of data processing and analysis for them. This data processing is all performed with computer programs!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nNormally, the first program you write when learning a new programming language is [Hello, World!](https:\/\/en.wikipedia.org\/wiki\/Hello_world_program), but we're going to write a slightly different one instead:\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-print-hello-world\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Hello, Biology!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  You can run it by clicking the <span class=\"icon-play4\" style=\"font-size: 16px\"><\/span> button (above).\n<\/p>\n\n<p>\n  When you run the program, you can see that it writes a message. That's what the <bk class=\"io\">print<\/bk> block does, it prints messages.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Writing Blockly or Python?<\/h2>\n  <p>\n    Blockly uses <em>visual programming<\/em>, like <a href=\"https:\/\/scratch.mit.edu\/\" target=\"_blank\">Scratch<\/a>. The blocks are code, just like any real-world language, such as <a href=\"https:\/\/python.org\" target=\"_blank\">Python<\/a>.\n  <\/p>\n  <p>\n    You can see the Python version by clicking the <span class=\"icon-file-xml\" style=\"font-size: 16px\"><\/span> button.\n  <\/p>\n  <p>\n    If you want to learn Python, try the <a href=\"https:\/\/groklearning.com\/course\/aca-dt-7-py-biology\/\" target=\"_blank\">Python<\/a> version instead.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>The smallest piece of standalone code is called an <em>instruction<\/em> or more technically, a <em>statement<\/em>. A program is made up of a <em>sequence<\/em> of one or more statements.<\/p>\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Statements are the building blocks of code. They are needed for implementation in Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a>, 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>, 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030\" target=\"_blank\">ACTDIP030<\/a>, and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP041\" target=\"_blank\">ACTDIP041<\/a> even though statements are not mentioned explicitly in the content descriptions.\n  <\/p>\n<\/aside>",
              "notes":[
                {
                  "left":"#markdown\nThe smallest piece of standalone code is called an *instruction* or more technically, a *statement*. A program is made up of a *sequence* of one or more statements.\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Statements are the building blocks of code. They are needed for implementation in Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a>, 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>, 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030\" target=\"_blank\">ACTDIP030<\/a>, and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP041\" target=\"_blank\">ACTDIP041<\/a> even though statements are not mentioned explicitly in the content descriptions.\n  <\/p>\n<\/aside>"
                }
              ],
              "title":"Hello, Biology!",
              "content_rendered":"<p>Normally, the first program you write when learning a new programming language is <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/Hello_world_program\">Hello, World!<\/a>, but we're going to write a slightly different one instead:<\/p>\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-print-hello-world\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Hello, Biology!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n<p>\n  You can run it by clicking the <span class=\"icon-play4\" style=\"font-size: 16px\"><\/span> button (above).\n<\/p>\n<p>\n  When you run the program, you can see that it writes a message. That's what the <bk class=\"io\">print<\/bk> block does, it prints messages.\n<\/p>\n<aside class=\"info\">\n  <h2>Writing Blockly or Python?<\/h2>\n  <p>\n    Blockly uses <em>visual programming<\/em>, like <a href=\"https:\/\/scratch.mit.edu\/\" target=\"_blank\">Scratch<\/a>. The blocks are code, just like any real-world language, such as <a href=\"https:\/\/python.org\" target=\"_blank\">Python<\/a>.\n  <\/p>\n  <p>\n    You can see the Python version by clicking the <span class=\"icon-file-xml\" style=\"font-size: 16px\"><\/span> button.\n  <\/p>\n  <p>\n    If you want to learn Python, try the <a href=\"https:\/\/groklearning.com\/course\/aca-dt-7-py-biology\/\" target=\"_blank\">Python<\/a> version instead.\n  <\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nWhat do the coloured blocks mean?\n\n```lang:blockly;\n<blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n    <\/value>\n  <\/block>\n<\/blockly>\n\n```\n\nThe <bk class=\"io\">print<\/bk> block is an *instruction* for the computer to follow.  The hole in the block means it needs extra information to do its job.\n\nYou need to tell the computer what to print.  Here is a message:\n\n```eg:bk-no-print;lang:blockly;\n<blockly>\n  <block id=\"1\" type=\"text\" x=\"15\" y=\"10\" movable=\"false\">\n    <field name=\"TEXT\">Hello, Biology!<\/field>\n  <\/block>\n<\/blockly>\n\n```\n\nThis message block doesn't do anything by itself. It's just a message, not an *instruction*.  So if you press play, nothing happens!\n\nPut them together and you have an instruction that the computer can understand and run:\n\n```eg:bk-print-hello-world-3;lang:blockly;\n<blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n      <block type=\"text\">\n       <field name=\"TEXT\">Hello, Biology!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n\n```\n\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"How to write programs",
              "content_rendered":"<p>What do the coloured blocks mean?<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aca-bk-biology-yr5-output-0-2-0\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n    <\/value>\n  <\/block>\n<\/blockly>\n\n<\/code><\/pre>\n<p>The <bk class=\"io\">print<\/bk> block is an <em>instruction<\/em> for the computer to follow.  The hole in the block means it needs extra information to do its job.<\/p>\n<p>You need to tell the computer what to print.  Here is a message:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"bk-no-print\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><blockly>\n  <block id=\"1\" type=\"text\" x=\"15\" y=\"10\" movable=\"false\">\n    <field name=\"TEXT\">Hello, Biology!<\/field>\n  <\/block>\n<\/blockly>\n\n<\/code><\/pre>\n<p>This message block doesn't do anything by itself. It's just a message, not an <em>instruction<\/em>.  So if you press play, nothing happens!<\/p>\n<p>Put them together and you have an instruction that the computer can understand and run:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"bk-print-hello-world-3\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n      <block type=\"text\">\n       <field name=\"TEXT\">Hello, Biology!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Hello, Biology!",
              "purpose":"",
              "problem":"aca-bk-bio-hello-biology",
              "type":1,
              "problem_id":4437
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Do you know Mr DNA?",
              "purpose":"",
              "problem":"aca-bk-bio-mr-dna",
              "type":1,
              "problem_id":4454
            }
          ],
          "title":"Getting started"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nIn order to survive in their environments, plants and animals develop both *behavioural* and *structural* adaptations. This adaptation occurs over many generations.\n\n<figure class=\"align-center\">\n  <img alt=\"Migrating waders flying over the beach\" src=\"https:\/\/groklearning-cdn.com\/modules\/BzXRELasHubsLiFJMwL4jM\/waders_1_5.jpg\">\n  <figcaption>Migrating waders in Roebuck Bay, Western Australia<br>By Mdk572 (Own work) [<a href=\"https:\/\/creativecommons.org\/licenses\/by-sa\/3.0\" target=\"_blank\">CC BY-SA 3.0<\/a>], <a href=\"https:\/\/commons.wikimedia.org\/wiki\/File%3AWaders_in_flight_Roebuck_Bay.jpg\" target=\"_blank\">via Wikimedia Commons<\/a><\/figcaption>\n<\/figure>\n\nFor example, the migration of birds across countries is a *behavioural* adaptation.\n\nA camel storing fat in its hump allows it to survive for days without eating in the desert, and is an example of a *structural* adaptation."
                }
              ],
              "layout":0,
              "notes_rendered":"<p>The biology content of the first module concentrates primarily on terminology and definitions. This is because printing output to the screen restricts how much you can do with your program.<\/p>\n<p>All questions in this challenge will use biology as the context of the problem. This will become more apparent later in the course when students are equipped with more programming skills.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nThe biology content of the first module concentrates primarily on terminology and definitions. This is because printing output to the screen restricts how much you can do with your program.\n\nAll questions in this challenge will use biology as the context of the problem. This will become more apparent later in the course when students are equipped with more programming skills."
                }
              ],
              "title":"Adaptation",
              "content_rendered":"<p>In order to survive in their environments, plants and animals develop both <em>behavioural<\/em> and <em>structural<\/em> adaptations. This adaptation occurs over many generations.<\/p>\n<figure class=\"align-center\">\n  <img alt=\"Migrating waders flying over the beach\" src=\"https:\/\/groklearning-cdn.com\/modules\/BzXRELasHubsLiFJMwL4jM\/waders_1_5.jpg\">\n  <figcaption>Migrating waders in Roebuck Bay, Western Australia<br>By Mdk572 (Own work) [<a href=\"https:\/\/creativecommons.org\/licenses\/by-sa\/3.0\" target=\"_blank\">CC BY-SA 3.0<\/a>], <a href=\"https:\/\/commons.wikimedia.org\/wiki\/File%3AWaders_in_flight_Roebuck_Bay.jpg\" target=\"_blank\">via Wikimedia Commons<\/a><\/figcaption>\n<\/figure>\n<p>For example, the migration of birds across countries is a <em>behavioural<\/em> adaptation.<\/p>\n<p>A camel storing fat in its hump allows it to survive for days without eating in the desert, and is an example of a <em>structural<\/em> adaptation.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nWhen we want to print things out on the screen, we need to let the computer know how to understand it. We do this by using a *string*.\n\nThe green string block can contain any letters, numbers, punctuation and spaces that you want to use in a message:\n\n```eg:blockly-string-chars;lang:blockly;\n<blockly>\n  <block type=\"io_print1\" id=\"1\" inline=\"true\" x=\"15\" y=\"15\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"2\">\n        <field name=\"TEXT\">If they don't adapt, animals can become extinct!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n\n```\n\nThe individual letters, digits, symbols and spaces are called *characters* and the word string is short for *string of characters*."
                }
              ],
              "layout":0,
              "notes_rendered":"<p>In Blockly, we use a <bk class=\"str\">green<\/bk> <em>string<\/em> block to hold a message.<\/p>\n<p><strong>A <em>string<\/em> is the first <em>type of data<\/em> that students discover.<\/strong><\/p>",
              "notes":[
                {
                  "left":"#markdown\nIn Blockly, we use a <bk class=\"str\">green<\/bk> *string* block to hold a message.\n\n**A *string* is the first <em>type of data<\/em> that students discover.**\n"
                }
              ],
              "title":"A string of characters",
              "content_rendered":"<p>When we want to print things out on the screen, we need to let the computer know how to understand it. We do this by using a <em>string<\/em>.<\/p>\n<p>The green string block can contain any letters, numbers, punctuation and spaces that you want to use in a message:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"blockly-string-chars\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><blockly>\n  <block type=\"io_print1\" id=\"1\" inline=\"true\" x=\"15\" y=\"15\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"2\">\n        <field name=\"TEXT\">If they don't adapt, animals can become extinct!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n\n<\/code><\/pre>\n<p>The individual letters, digits, symbols and spaces are called <em>characters<\/em> and the word string is short for <em>string of characters<\/em>.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nOur programs would be pretty boring if they only printed one thing!\n\nWe can add multiple <bk class=\"io\">print<\/bk> statements to print multiple lines! Blockly will run the statements in order, so to print multiple lines you can use:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables><\/variables>\n  <block type=\"io_print1\" id=\"8k!F,Uo3fOGU?xOBe7L4\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"F8pewz(nW\/)C4`e!$|3!\">\n        <field name=\"TEXT\">Animals live in different environments.<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"[{iDWGyxrDiYxt0uQehe\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\".?}[:]my-h0XJ7krRG[B\">\n            <field name=\"TEXT\">Animals adapt for their survival.<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"~%J%qHQEouY0CKzZKPHG\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"[PMW\/w#+_zq2H18}{H%s\">\n                <field name=\"TEXT\">Adaptations take many generations.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nEach message will be printed on it's own line, **run the example to check**!"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Printing multiple times",
              "content_rendered":"<p>Our programs would be pretty boring if they only printed one thing!<\/p>\n<p>We can add multiple <bk class=\"io\">print<\/bk> statements to print multiple lines! Blockly will run the statements in order, so to print multiple lines you can use:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aca-bk-biology-yr5-output-1-2-0\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables><\/variables>\n  <block type=\"io_print1\" id=\"8k!F,Uo3fOGU?xOBe7L4\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"F8pewz(nW\/)C4`e!$|3!\">\n        <field name=\"TEXT\">Animals live in different environments.<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"[{iDWGyxrDiYxt0uQehe\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\".?}[:]my-h0XJ7krRG[B\">\n            <field name=\"TEXT\">Animals adapt for their survival.<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"~%J%qHQEouY0CKzZKPHG\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"[PMW\/w#+_zq2H18}{H%s\">\n                <field name=\"TEXT\">Adaptations take many generations.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<p>Each message will be printed on it's own line, <strong>run the example to check<\/strong>!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nWhat if you want to print more than one message on a line?\n\nBlockly has <bk class=\"io\">print<\/bk> blocks with more than one hole, e.g.:\n\n```eg:blockly-print-multi-args1;lang:blockly;norun;\n\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n <block type=\"io_print2\" id=\"79\" inline=\"true\" x=\"10\" y=\"10\"><\/block>\n<\/blockly>\n\n```\n\nYou can use these with multiple strings, like this:\n\n```eg:blockly-print-multi-args2;lang:blockly;\n\n<blockly>\n <block id=\"1\" type=\"io_print2\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n <value name=\"ANY0\">\n <block id=\"2\" type=\"text\">\n <field name=\"TEXT\">Homo<\/field>\n <\/block>\n <\/value>\n <value name=\"ANY1\">\n <block id=\"3\" type=\"text\">\n <field name=\"TEXT\">sapiens<\/field>\n <\/block>\n <\/value>\n <\/block>\n<\/blockly>\n```\n\nWhen you run it, notice that the output is not `lang:out;Homosapiens`.\n\n**The <bk class=\"io\">print<\/bk> automatically adds a space between the two strings.**\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>For each problem, we provide one or more <bk class=\"io\">print<\/bk> blocks to use.<\/p>\n<p>Rather than providing all of the <bk class=\"io\">print<\/bk> blocks (with 0\u20136 holes), we just provide the ones needed to solve the problem. This stops the block menus becoming overwhelming, especially on small screens.<\/p>\n<p>Often, a program can be written using different blocks, for example:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aca-bk-biology-yr5-output-1-3-0\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><blockly>\n <block type=\"io_print2\" id=\"10\" inline=\"true\" x=\"10\" y=\"10\">\n <value name=\"ANY0\">\n <block type=\"text\" id=\"15\">\n <field name=\"TEXT\">Homo<\/field>\n <\/block>\n <\/value>\n <value name=\"ANY1\">\n <block type=\"text\" id=\"16\">\n <field name=\"TEXT\">Sapiens<\/field>\n <\/block>\n <\/value>\n <\/block>\n<\/blockly>\n<\/code><\/pre>\n<p>produces exactly the same output as:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"teacher-print1-harry-potter\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><blockly>\n <block type=\"io_print1\" id=\"19\" inline=\"true\" x=\"10\" y=\"10\">\n <value name=\"ANY0\">\n <block type=\"text\" id=\"15\">\n <field name=\"TEXT\">Homo Sapiens<\/field>\n <\/block>\n <\/value>\n <\/block>\n<\/blockly>\n<\/code><\/pre>",
              "notes":[
                {
                  "left":"#markdown\nFor each problem, we provide one or more <bk class=\"io\">print<\/bk> blocks to use.\n\nRather than providing all of the <bk class=\"io\">print<\/bk> blocks (with 0\u20136 holes), we just provide the ones needed to solve the problem. This stops the block menus becoming overwhelming, especially on small screens.\n\nOften, a program can be written using different blocks, for example:\n\n```lang:blockly;\n<blockly>\n <block type=\"io_print2\" id=\"10\" inline=\"true\" x=\"10\" y=\"10\">\n <value name=\"ANY0\">\n <block type=\"text\" id=\"15\">\n <field name=\"TEXT\">Homo<\/field>\n <\/block>\n <\/value>\n <value name=\"ANY1\">\n <block type=\"text\" id=\"16\">\n <field name=\"TEXT\">Sapiens<\/field>\n <\/block>\n <\/value>\n <\/block>\n<\/blockly>\n```\n\nproduces exactly the same output as:\n\n```eg:teacher-print1-harry-potter;lang:blockly;\n<blockly>\n <block type=\"io_print1\" id=\"19\" inline=\"true\" x=\"10\" y=\"10\">\n <value name=\"ANY0\">\n <block type=\"text\" id=\"15\">\n <field name=\"TEXT\">Homo Sapiens<\/field>\n <\/block>\n <\/value>\n <\/block>\n<\/blockly>\n```\n"
                }
              ],
              "title":"More <bk class=\"io\">print<\/bk> blocks",
              "content_rendered":"<p>What if you want to print more than one message on a line?<\/p>\n<p>Blockly has <bk class=\"io\">print<\/bk> blocks with more than one hole, e.g.:<\/p>\n<pre style=\"\" data-runnable=\"false\" class=\"js-editor-blockly\" data-eg-id=\"blockly-print-multi-args1\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n <block type=\"io_print2\" id=\"79\" inline=\"true\" x=\"10\" y=\"10\"><\/block>\n<\/blockly>\n\n<\/code><\/pre>\n<p>You can use these with multiple strings, like this:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"blockly-print-multi-args2\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\">\n<blockly>\n <block id=\"1\" type=\"io_print2\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n <value name=\"ANY0\">\n <block id=\"2\" type=\"text\">\n <field name=\"TEXT\">Homo<\/field>\n <\/block>\n <\/value>\n <value name=\"ANY1\">\n <block id=\"3\" type=\"text\">\n <field name=\"TEXT\">sapiens<\/field>\n <\/block>\n <\/value>\n <\/block>\n<\/blockly>\n<\/code><\/pre>\n<p>When you run it, notice that the output is not <code data-lang=\"out\">Homosapiens<\/code>.<\/p>\n<p><strong>The <bk class=\"io\">print<\/bk> automatically adds a space between the two strings.<\/strong><\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nWriting out a long message many times is a pain. It would be great if we could just store the message somewhere and reuse it.\n\n**A *variable* is that place for storing a value so we can use it later.**\n\nEach variable has a *name* which we use to set and get its value. We create a new variable using a <bk class=\"var\">set<\/bk> block:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"RxAS1L+i1O`;DYqxO%Nb\">adaptation<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"NoEQ^UP4FY1CEMGI~|f`\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">adaptation<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"U}D%+cGA4NToBR~JRN?t\">\n        <field name=\"TEXT\">Animals and plants adapt to their environment.<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"5,T,RGJyNp12zGwj{jYq\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"Xa1%#7u65F,YoQV~GJjE\">\n            <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">adaptation<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"X^UWQWj4ttH{[VdS2_H@\">\n            <value name=\"ANY0\">\n              <block type=\"variables_get\" id=\"TWH`kOqu9B~eCiu2ssRH\">\n                <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">adaptation<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"+syyq#UF~^loL#Kv0).c\">\n                <value name=\"ANY0\">\n                  <block type=\"variables_get\" id=\"fVXGJFV!-:GRD64^G6Y=\">\n                    <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">adaptation<\/field>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print1\" id=\"H14*lbEYoiFy)K-z|xop\">\n                    <value name=\"ANY0\">\n                      <block type=\"variables_get\" id=\"]q~faOYulcr#BY*%MK;*\">\n                        <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">adaptation<\/field>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print1\" id=\";Q[u2o|Zf)n3qdpVyJmG\">\n                        <value name=\"ANY0\">\n                          <block type=\"variables_get\" id=\"ogJb6nf6!*PK^QP~w`fB\">\n                            <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">adaptation<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n```eg:last;terminal;\nAnimals and plants adapt to their environment.\nAnimals and plants adapt to their environment.\nAnimals and plants adapt to their environment.\nAnimals and plants adapt to their environment.\nAnimals and plants adapt to their environment.\n\n```\n\nThe <bk class=\"var\">set <bk class=\"inner\">adaptation<\/bk><\/bk> block creates a new variable called `adaptation`. It holds the message <bk class=\"str lit\"><bk class=\"inner\">Animals and plants adapt to their environment.<\/bk><\/bk>.\n  We can then use the <bk class=\"var\"><bk class=\"inner\">adaptation<\/bk><\/bk> variable to print that message as often as we want.\n\n> ## Creating a variable\n> To create a new variable, click the down arrow next to the variable name and select **New Variable...**\n\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Storing things in variables",
              "content_rendered":"<p>Writing out a long message many times is a pain. It would be great if we could just store the message somewhere and reuse it.<\/p>\n<p><strong>A <em>variable<\/em> is that place for storing a value so we can use it later.<\/strong><\/p>\n<p>Each variable has a <em>name<\/em> which we use to set and get its value. We create a new variable using a <bk class=\"var\">set<\/bk> block:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aca-bk-biology-yr5-output-1-4-0\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"RxAS1L+i1O`;DYqxO%Nb\">adaptation<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"NoEQ^UP4FY1CEMGI~|f`\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">adaptation<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"U}D%+cGA4NToBR~JRN?t\">\n        <field name=\"TEXT\">Animals and plants adapt to their environment.<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"5,T,RGJyNp12zGwj{jYq\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"Xa1%#7u65F,YoQV~GJjE\">\n            <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">adaptation<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"X^UWQWj4ttH{[VdS2_H@\">\n            <value name=\"ANY0\">\n              <block type=\"variables_get\" id=\"TWH`kOqu9B~eCiu2ssRH\">\n                <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">adaptation<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"+syyq#UF~^loL#Kv0).c\">\n                <value name=\"ANY0\">\n                  <block type=\"variables_get\" id=\"fVXGJFV!-:GRD64^G6Y=\">\n                    <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">adaptation<\/field>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print1\" id=\"H14*lbEYoiFy)K-z|xop\">\n                    <value name=\"ANY0\">\n                      <block type=\"variables_get\" id=\"]q~faOYulcr#BY*%MK;*\">\n                        <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">adaptation<\/field>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print1\" id=\";Q[u2o|Zf)n3qdpVyJmG\">\n                        <value name=\"ANY0\">\n                          <block type=\"variables_get\" id=\"ogJb6nf6!*PK^QP~w`fB\">\n                            <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">adaptation<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-bk-biology-yr5-output-1-4-0\"><code data-lang=\"py3\"><o>Animals and plants adapt to their environment.<\/o>\n<o>Animals and plants adapt to their environment.<\/o>\n<o>Animals and plants adapt to their environment.<\/o>\n<o>Animals and plants adapt to their environment.<\/o>\n<o>Animals and plants adapt to their environment.<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>The <bk class=\"var\">set <bk class=\"inner\">adaptation<\/bk><\/bk> block creates a new variable called <code data-lang=\"py3\">adaptation<\/code>. It holds the message <bk class=\"str lit\"><bk class=\"inner\">Animals and plants adapt to their environment.<\/bk><\/bk>.\nWe can then use the <bk class=\"var\"><bk class=\"inner\">adaptation<\/bk><\/bk> variable to print that message as often as we want.<\/p>\n<aside class=\"info\">\n<h2>Creating a variable<\/h2>\n<p>To create a new variable, click the down arrow next to the variable name and select <strong>New Variable...<\/strong><\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Organisms",
              "purpose":"",
              "problem":"aca-bk-bio-repeat-adaptations",
              "type":1,
              "problem_id":4455
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Non-living things",
              "purpose":"",
              "problem":"aca-bk-bio-non-living",
              "type":1,
              "problem_id":4456
            }
          ],
          "title":"Printing multiple times"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Adaptations",
              "purpose":"",
              "problem":"aca-choices-bio-behavioural-adaptations",
              "type":1,
              "problem_id":4462
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: The study of living organisms",
              "purpose":"",
              "problem":"aca-choices-bio-living-orgs-blocks",
              "type":1,
              "problem_id":4438
            }
          ],
          "title":"Adaptation"
        }
      ],
      "title":"Output",
      "label":"aca-bk-biology-yr5-output",
      "updated_at":"2018-05-14T06:56:07.391245+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nSo far our programs have been a simple sequence of steps.  The interpreter executes the statements from top to bottom, and so the program <em>runs the same way every time<\/em>.\n\nIn the real world, we **decide** to **take different steps** based on our situation. For example, if we were on a safari and wanted to take a photo of an animal - we might want to know if the animal not going to eat us (a *herbivore*), before moving closer.\n\nThis *flowchart* describes this process (or *algorithm*):\n\n<svg width=\"464px\" height=\"159px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 464 159\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>herbivore-photo<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-3\" points=\"50.7414365 0 100.741437 50 50.7414365 100 0.741436542 50\"><\/polygon>\n    <\/defs>\n    <g id=\"herbivore-photo\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"start\" transform=\"translate(0.000000, 73.000000)\">\n            <circle id=\"Oval\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n            <text id=\"See-an-animal\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"13.4935\" y=\"30\">See an<\/tspan>\n                <tspan x=\"13.567\" y=\"47\">animal<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"take-picture\" transform=\"translate(369.000000, 78.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"Take-the-picture\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"22.7325\" y=\"25\">Take the<\/tspan>\n                <tspan x=\"27.0725\" y=\"42\">picture<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"move-closer\" transform=\"translate(252.000000, 0.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"Move-closer\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"28.762\" y=\"25\">Move<\/tspan>\n                <tspan x=\"27.9395\" y=\"42\">closer<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"check-herbivore\" transform=\"translate(128.000000, 58.000000)\">\n            <g id=\"Rectangle-2\">\n                <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                <polygon points=\"50.7414365 0 100.741437 50 50.7414365 100 0.741436542 50\"><\/polygon>\n            <\/g>\n            <text id=\"Is-it-a-herbivore?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"33.6025\" y=\"40\">Is it a<\/tspan>\n                <tspan x=\"17.058\" y=\"57\">herbivore?<\/tspan>\n            <\/text>\n        <\/g>\n        <path d=\"M231.980011,108 L365.742717,108\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M365.742717,108 L354.942717,105 L354.942717,111 L365.742717,108 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M178.482446,30 L246.364294,30\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M246.364294,30 L235.564294,27 L235.564294,33 L246.364294,30 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M416.5,30 L350.019989,30\" id=\"Line-3\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M416.5,30 L416.5,75.4892969\" id=\"Line-2\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-2-decoration-1\" d=\"M416.5,75.4892969 L419.5,64.6892969 L413.5,64.6892969 L416.5,75.4892969 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M178.5,56.7632697 L178.5,30\" id=\"Line-4\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M73.1485435,108 L124.645118,108\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M124.645118,108 L113.845118,105 L113.845118,111 L124.645118,108 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <text id=\"yes\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"151.725\" y=\"49\">yes<\/tspan>\n        <\/text>\n        <text id=\"no\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"234.75\" y=\"122\">no<\/tspan>\n        <\/text>\n    <\/g>\n<\/svg>\n\nThe diamond requires a `yes` or `no` decision. The answer determines which line we follow. If the answer is `yes`, we do the extra step of moving closer. If the answer is no `no`, we skip it.\n\nWe can write this using an <bk class=\"control\">if<\/bk> block."
                }
              ],
              "layout":0,
              "notes_rendered":"<p>The Digital Technologies subject references the concept of decisions (or branching) throughout the processes and productions skills strand of the curriculum.<\/p>\n<p>Whether defining a problem, designing its solution or implementing that solution in code, understanding that how you progress is dependent on the data you are processing is absolutely critical for developing working computer programs.<\/p>\n<p>Flowcharts are a great way of visualising an algorithm, and can be used with students to design solutions to problems before they even sit at a computer to write their code. We recommend this for all but the simplest of algorithms!<\/p>\n<aside class=\"info curriculum\">\n<h2>Branching<\/h2>\n<p>Decisions and\/or branching is explicitly mentioned in the curriculum many times - in Years 3\u20134 (<a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP010\">ACTDIP010<\/a>, <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\">ACTDIP011<\/a>), 5\u20136 (<a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP019\">ACTDIP019<\/a>, <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\">ACTDIP020<\/a> ), and 7\u20138 (<a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030\">ACTDIP030<\/a>).<\/p>\n<\/aside>",
              "notes":[
                {
                  "left":"#markdown\n\nThe Digital Technologies subject references the concept of decisions (or branching) throughout the processes and productions skills strand of the curriculum.\n\nWhether defining a problem, designing its solution or implementing that solution in code, understanding that how you progress is dependent on the data you are processing is absolutely critical for developing working computer programs.\n\nFlowcharts are a great way of visualising an algorithm, and can be used with students to design solutions to problems before they even sit at a computer to write their code. We recommend this for all but the simplest of algorithms!\n\n> ## type:curriculum;Branching\n> Decisions and\/or branching is explicitly mentioned in the curriculum many times - in Years 3\u20134 ([ACTDIP010](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP010), [ACTDIP011](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011)), 5\u20136 ([ACTDIP019](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP019), [ACTDIP020](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020) ), and 7\u20138 ([ACTDIP030](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030))."
                }
              ],
              "title":"Why do we need decisions?",
              "content_rendered":"<p>So far our programs have been a simple sequence of steps.  The interpreter executes the statements from top to bottom, and so the program <em>runs the same way every time<\/em>.<\/p>\n<p>In the real world, we <strong>decide<\/strong> to <strong>take different steps<\/strong> based on our situation. For example, if we were on a safari and wanted to take a photo of an animal - we might want to know if the animal not going to eat us (a <em>herbivore<\/em>), before moving closer.<\/p>\n<p>This <em>flowchart<\/em> describes this process (or <em>algorithm<\/em>):<\/p>\n<svg width=\"464px\" height=\"159px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 464 159\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>herbivore-photo<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-3\" points=\"50.7414365 0 100.741437 50 50.7414365 100 0.741436542 50\"><\/polygon>\n    <\/defs>\n    <g id=\"herbivore-photo\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"start\" transform=\"translate(0.000000, 73.000000)\">\n            <circle id=\"Oval\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n            <text id=\"See-an-animal\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"13.4935\" y=\"30\">See an<\/tspan>\n                <tspan x=\"13.567\" y=\"47\">animal<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"take-picture\" transform=\"translate(369.000000, 78.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"Take-the-picture\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"22.7325\" y=\"25\">Take the<\/tspan>\n                <tspan x=\"27.0725\" y=\"42\">picture<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"move-closer\" transform=\"translate(252.000000, 0.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"Move-closer\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"28.762\" y=\"25\">Move<\/tspan>\n                <tspan x=\"27.9395\" y=\"42\">closer<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"check-herbivore\" transform=\"translate(128.000000, 58.000000)\">\n            <g id=\"Rectangle-2\">\n                <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                <polygon points=\"50.7414365 0 100.741437 50 50.7414365 100 0.741436542 50\"><\/polygon>\n            <\/g>\n            <text id=\"Is-it-a-herbivore?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"33.6025\" y=\"40\">Is it a<\/tspan>\n                <tspan x=\"17.058\" y=\"57\">herbivore?<\/tspan>\n            <\/text>\n        <\/g>\n        <path d=\"M231.980011,108 L365.742717,108\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M365.742717,108 L354.942717,105 L354.942717,111 L365.742717,108 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M178.482446,30 L246.364294,30\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M246.364294,30 L235.564294,27 L235.564294,33 L246.364294,30 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M416.5,30 L350.019989,30\" id=\"Line-3\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M416.5,30 L416.5,75.4892969\" id=\"Line-2\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-2-decoration-1\" d=\"M416.5,75.4892969 L419.5,64.6892969 L413.5,64.6892969 L416.5,75.4892969 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M178.5,56.7632697 L178.5,30\" id=\"Line-4\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M73.1485435,108 L124.645118,108\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M124.645118,108 L113.845118,105 L113.845118,111 L124.645118,108 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <text id=\"yes\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"151.725\" y=\"49\">yes<\/tspan>\n        <\/text>\n        <text id=\"no\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"234.75\" y=\"122\">no<\/tspan>\n        <\/text>\n    <\/g>\n<\/svg>\n<p>The diamond requires a <code data-lang=\"py3\">yes<\/code> or <code data-lang=\"py3\">no<\/code> decision. The answer determines which line we follow. If the answer is <code data-lang=\"py3\">yes<\/code>, we do the extra step of moving closer. If the answer is no <code data-lang=\"py3\">no<\/code>, we skip it.<\/p>\n<p>We can write this using an <bk class=\"control\">if<\/bk> block.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nThe computer decides what steps to run with an <bk class=\"control\">if<\/bk> block.\n\n*If* the two strings **are the same** then the message is printed:\n\n```eg:blockly-strings-are-equal;lang:blockly;\n\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"decisions_if\" id=\"227\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"228\" inline=\"true\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"text\" id=\"233\">\n            <field name=\"TEXT\">dog<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"230\">\n            <field name=\"TEXT\">dog<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"231\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"232\">\n            <field name=\"TEXT\">They are the same.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n\n```\n\n<bk class=\"str lit\"><bk class=\"inner\">dog<\/bk><\/bk> is *equal to* (the same as) <bk class=\"str lit\"><bk class=\"inner\">dog<\/bk><\/bk>, so the <bk class=\"io\">print<\/bk> is run.\n\nIf the strings are **not equal**, then the message is not printed:\n\n```eg:blockly-not-the-same;lang:blockly;\n\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"decisions_if\" id=\"227\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"228\" inline=\"true\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"text\" id=\"233\">\n            <field name=\"TEXT\">dog<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"230\">\n            <field name=\"TEXT\">cat<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"231\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"232\">\n            <field name=\"TEXT\">They are the same.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n\n```\n\nThe <bk class=\"io\">print<\/bk> is not run because <bk class=\"str lit\"><bk class=\"inner\">dog<\/bk><\/bk> is not *equal to* <bk class=\"str lit\"><bk class=\"inner\">cat<\/bk><\/bk>.\n\n> ## Huh, these run the same way each time!?\n> Yes, but we don't normally compare two string blocks. These examples just show you how <bk class=\"control\">if<\/bk> blocks work.\n >   **We normally use <bk class=\"control\">if<\/bk> blocks with variables.** The <bk class=\"control\">if<\/bk> runs the <bk class=\"control\">do<\/bk> part only if the value in the variable matches the string.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Are two strings the same?",
              "content_rendered":"<p>The computer decides what steps to run with an <bk class=\"control\">if<\/bk> block.<\/p>\n<p><em>If<\/em> the two strings <strong>are the same<\/strong> then the message is printed:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"blockly-strings-are-equal\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"decisions_if\" id=\"227\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"228\" inline=\"true\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"text\" id=\"233\">\n            <field name=\"TEXT\">dog<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"230\">\n            <field name=\"TEXT\">dog<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"231\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"232\">\n            <field name=\"TEXT\">They are the same.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n\n<\/code><\/pre>\n<p><bk class=\"str lit\"><bk class=\"inner\">dog<\/bk><\/bk> is <em>equal to<\/em> (the same as) <bk class=\"str lit\"><bk class=\"inner\">dog<\/bk><\/bk>, so the <bk class=\"io\">print<\/bk> is run.<\/p>\n<p>If the strings are <strong>not equal<\/strong>, then the message is not printed:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"blockly-not-the-same\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"decisions_if\" id=\"227\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"228\" inline=\"true\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"text\" id=\"233\">\n            <field name=\"TEXT\">dog<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"230\">\n            <field name=\"TEXT\">cat<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"231\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"232\">\n            <field name=\"TEXT\">They are the same.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n\n<\/code><\/pre>\n<p>The <bk class=\"io\">print<\/bk> is not run because <bk class=\"str lit\"><bk class=\"inner\">dog<\/bk><\/bk> is not <em>equal to<\/em> <bk class=\"str lit\"><bk class=\"inner\">cat<\/bk><\/bk>.<\/p>\n<aside class=\"info\">\n<h2>Huh, these run the same way each time!?<\/h2>\n<p>Yes, but we don't normally compare two string blocks. These examples just show you how <bk class=\"control\">if<\/bk> blocks work.\n<strong>We normally use <bk class=\"control\">if<\/bk> blocks with variables.<\/strong> The <bk class=\"control\">if<\/bk> runs the <bk class=\"control\">do<\/bk> part only if the value in the variable matches the string.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nLet's write our flowchart as a Python program:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">herbivore<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"XRYBeFgt}c;qP3D$LF!-\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">herbivore<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"SbE1o;_Q,iZTM]T`$O-|\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\".qG:TaRzYkQMl2;;}JX9\">\n            <field name=\"TEXT\">Is it a herbivore (yes\/no)?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"-X=df|slj@dwS9dD:uPn\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"gEH})bYHV@VG#cFSFw|X\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"4+cI7]U8jvwz:nqWlEl|\">\n                <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">herbivore<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"}qX%]z|5j^?#xUfqF=0N\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"^COO_1#St2G=^;?joIBY\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"LAY|@Zu6SXb$Iko[5!V@\">\n                <field name=\"TEXT\">Move a bit closer.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <next>\n          <block type=\"io_print1\" id=\"oc*}n_3~-}j=\/NJQj$@]\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"e#|6:p]A]4Y$r2GLV.vS\">\n                <field name=\"TEXT\">Take the photo.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\n**Try it! What happens when you say `yes`, `no`, or any other answer?**\n\nNotice that the first <bk class=\"io\">print<\/bk> is *inside* the <bk class=\"control\">if<\/bk> block. It only runs when the condition is `True`.\n\nIf the value stored in <bk class=\"var\"><bk class=\"inner\">herbivore<\/bk><\/bk> *is equal to* <bk class=\"str lit\"><bk class=\"inner\">yes<\/bk><\/bk>  (because the user entered `yes`), then the body is run. Otherwise, it is skipped.\n\nThe second <bk class=\"io\">print<\/bk> always runs, because it is not indented, and isn't controlled by the <bk class=\"control\">if<\/bk>.\n\n> ## An <bk class=\"control\">if<\/bk> block is a *control structure*\n> The <bk class=\"control\">if<\/bk> block *controls* how the program runs by deciding if the body is run or not.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>There's quite a bit of new terminology introduced in this slide. The structure of an <bk class=\"control\">if<\/bk> block.<\/p>\n<pre style=\"\" data-runnable=\"false\" class=\"js-editor\" data-eg-id=\"\"><code data-lang=\"py3\">if herbivore == 'yes':\n<\/code><\/pre>\n<p>feels quite natural - if the value of the variable <code data-lang=\"py3\">herbivore<\/code> is equal to <code data-lang=\"py3\">'yes'<\/code> then execute the body of the <code data-lang=\"py3\">if<\/code> statement.<\/p>\n<p>You can even think of the placement of the colon in control structures as being a bit like using the word &quot;then&quot; - if you are going to define some behaviour based on some condition, then the statement needs a colon at the end.<\/p>\n<p>Terms such as the <em>body<\/em> (also known as a code block) will make referring to the idea that you can write a block of code inside a control structure easier if students understand what these terms mean.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nThere's quite a bit of new terminology introduced in this slide. The structure of an <bk class=\"control\">if<\/bk> block.\n\n```lang:py3;eg:none;norun\nif herbivore == 'yes':\n```\n\nfeels quite natural - if the value of the variable `herbivore` is equal to `'yes'` then execute the body of the `if` statement.\n\nYou can even think of the placement of the colon in control structures as being a bit like using the word \"then\" - if you are going to define some behaviour based on some condition, then the statement needs a colon at the end.\n\nTerms such as the *body* (also known as a code block) will make referring to the idea that you can write a block of code inside a control structure easier if students understand what these terms mean."
                }
              ],
              "title":"Making decisions",
              "content_rendered":"<p>Let's write our flowchart as a Python program:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aca-bk-biology-yr5-decisions-0-2-0\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">herbivore<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"XRYBeFgt}c;qP3D$LF!-\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">herbivore<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"SbE1o;_Q,iZTM]T`$O-|\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\".qG:TaRzYkQMl2;;}JX9\">\n            <field name=\"TEXT\">Is it a herbivore (yes\/no)?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"-X=df|slj@dwS9dD:uPn\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"gEH})bYHV@VG#cFSFw|X\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"4+cI7]U8jvwz:nqWlEl|\">\n                <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">herbivore<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"}qX%]z|5j^?#xUfqF=0N\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"^COO_1#St2G=^;?joIBY\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"LAY|@Zu6SXb$Iko[5!V@\">\n                <field name=\"TEXT\">Move a bit closer.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <next>\n          <block type=\"io_print1\" id=\"oc*}n_3~-}j=\/NJQj$@]\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"e#|6:p]A]4Y$r2GLV.vS\">\n                <field name=\"TEXT\">Take the photo.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<p><strong>Try it! What happens when you say <code data-lang=\"py3\">yes<\/code>, <code data-lang=\"py3\">no<\/code>, or any other answer?<\/strong><\/p>\n<p>Notice that the first <bk class=\"io\">print<\/bk> is <em>inside<\/em> the <bk class=\"control\">if<\/bk> block. It only runs when the condition is <code data-lang=\"py3\">True<\/code>.<\/p>\n<p>If the value stored in <bk class=\"var\"><bk class=\"inner\">herbivore<\/bk><\/bk> <em>is equal to<\/em> <bk class=\"str lit\"><bk class=\"inner\">yes<\/bk><\/bk>  (because the user entered <code data-lang=\"py3\">yes<\/code>), then the body is run. Otherwise, it is skipped.<\/p>\n<p>The second <bk class=\"io\">print<\/bk> always runs, because it is not indented, and isn't controlled by the <bk class=\"control\">if<\/bk>.<\/p>\n<aside class=\"info\">\n<h2>An <bk class=\"control\">if<\/bk> block is a <em>control structure<\/em><\/h2>\n<p>The <bk class=\"control\">if<\/bk> block <em>controls<\/em> how the program runs by deciding if the body is run or not.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nYou can put as many blocks inside the <bk class=\"control\">if<\/bk> block as you want. The code *controlled* by the <bk class=\"control\">if<\/bk> (in the <bk class=\"control\">do<\/bk> part) is called its *body*:\n\n```eg:blockly-what-food;lang:blockly;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">animal<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"XRYBeFgt}c;qP3D$LF!-\" x=\"14\" y=\"16\">\n    <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">animal<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"SbE1o;_Q,iZTM]T`$O-|\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\".qG:TaRzYkQMl2;;}JX9\">\n            <field name=\"TEXT\">What is your favourite animal?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"-X=df|slj@dwS9dD:uPn\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"gEH})bYHV@VG#cFSFw|X\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"4+cI7]U8jvwz:nqWlEl|\">\n                <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">animal<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"}qX%]z|5j^?#xUfqF=0N\">\n                <field name=\"TEXT\">Tardigrade<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"^COO_1#St2G=^;?joIBY\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"LAY|@Zu6SXb$Iko[5!V@\">\n                <field name=\"TEXT\">A Tardigrade! My favourite too!<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"oc*}n_3~-}j=\/NJQj$@]\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"e#|6:p]A]4Y$r2GLV.vS\">\n                    <field name=\"TEXT\">I wish I could survive in outer space...<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n```\n\nHere, we ask the user what their favourite animal is.  If they answer `Tardigrade`, the value in <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> will be equal to <bk class=\"str lit\"><bk class=\"inner\">Tardigrade<\/bk><\/bk>, and *both* <bk class=\"io\">print<\/bk> blocks in the body will run.\n\nIf they answer anything else, both the <bk class=\"io\">print<\/bk> blocks will be skipped.\n\nMove a <bk class=\"io\">print<\/bk> outside of the <bk class=\"control\">if<\/bk> body to see the difference.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Controlling a block of code",
              "content_rendered":"<p>You can put as many blocks inside the <bk class=\"control\">if<\/bk> block as you want. The code <em>controlled<\/em> by the <bk class=\"control\">if<\/bk> (in the <bk class=\"control\">do<\/bk> part) is called its <em>body<\/em>:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"blockly-what-food\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">animal<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"XRYBeFgt}c;qP3D$LF!-\" x=\"14\" y=\"16\">\n    <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">animal<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"SbE1o;_Q,iZTM]T`$O-|\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\".qG:TaRzYkQMl2;;}JX9\">\n            <field name=\"TEXT\">What is your favourite animal?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"-X=df|slj@dwS9dD:uPn\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"gEH})bYHV@VG#cFSFw|X\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"4+cI7]U8jvwz:nqWlEl|\">\n                <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">animal<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"}qX%]z|5j^?#xUfqF=0N\">\n                <field name=\"TEXT\">Tardigrade<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"^COO_1#St2G=^;?joIBY\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"LAY|@Zu6SXb$Iko[5!V@\">\n                <field name=\"TEXT\">A Tardigrade! My favourite too!<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"oc*}n_3~-}j=\/NJQj$@]\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"e#|6:p]A]4Y$r2GLV.vS\">\n                    <field name=\"TEXT\">I wish I could survive in outer space...<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n<\/code><\/pre>\n<p>Here, we ask the user what their favourite animal is.  If they answer <code data-lang=\"py3\">Tardigrade<\/code>, the value in <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> will be equal to <bk class=\"str lit\"><bk class=\"inner\">Tardigrade<\/bk><\/bk>, and <em>both<\/em> <bk class=\"io\">print<\/bk> blocks in the body will run.<\/p>\n<p>If they answer anything else, both the <bk class=\"io\">print<\/bk> blocks will be skipped.<\/p>\n<p>Move a <bk class=\"io\">print<\/bk> outside of the <bk class=\"control\">if<\/bk> body to see the difference.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: I love marsupials!",
              "purpose":"",
              "problem":"aca-bk-bio-pouch",
              "type":1,
              "problem_id":4446
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: The \"bin chicken\"",
              "purpose":"",
              "problem":"aca-bk-bio-bin-chicken",
              "type":1,
              "problem_id":4447
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  An <bk class=\"control\">if<\/bk> block allows your program to make <em>yes or no<\/em> decisions. In programming, yes is called <code data-lang=\"txt\">True<\/code>, and no is called <code data-lang=\"txt\">False<\/code>.<\/p>\n\n<p>\n  The body of the <bk class=\"control\">if<\/bk> block runs when the comparison (the <bk class=\"logic\">=<\/bk> block) is <code data-lang=\"txt\">True<\/code>. It doesn't run if the comparison is <code data-lang=\"txt\">False<\/code>.\n<\/p>\n\n<p>\n  Calculations that result in <code data-lang=\"txt\">True<\/code> or <code data-lang=\"txt\">False<\/code> values are called <em>Boolean expressions<\/em>.  We can print their value directly:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-grok-true\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">animal<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Pig<\/field>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"3\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"4\" type=\"logic_compare\" inline=\"true\">\n          <field name=\"OP\">EQ<\/field>\n          <value name=\"A\">\n            <block id=\"5\" type=\"variables_get\">\n              <field name=\"VAR\">animal<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"B\">\n            <block id=\"6\" type=\"text\">\n              <field name=\"TEXT\">Pig<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>If we change <code data-lang=\"py3\">animal<\/code>, the conditional expression will be <code data-lang=\"py3\">False<\/code>:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-grok-false\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">animal<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Dog<\/field>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"3\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"4\" type=\"logic_compare\" inline=\"true\">\n          <field name=\"OP\">EQ<\/field>\n          <value name=\"A\">\n            <block id=\"5\" type=\"variables_get\">\n              <field name=\"VAR\">animal<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"B\">\n            <block id=\"6\" type=\"text\">\n              <field name=\"TEXT\">Pig<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>All conditions that need to be evaluated (in this course, the condition we focus on is that of equality, or <em>is equal to<\/em>) return a value of <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code>.<\/p>\n<p>When a value can only have two values, we call it a <em>boolean<\/em> value. Because digital systems are binary, all values can be represented using two-state booleans.<\/p>\n<p>People often refer to computers an binary as being <em>zeroes and ones<\/em>, but the reality is that the two values can be anything as long as they can be identified. Most programming languages have some concept of <code data-lang=\"py3\">True<\/code> and <code data-lang=\"py3\">False<\/code>, and some use the values <code data-lang=\"py3\">1<\/code> and <code data-lang=\"py3\">0<\/code> instead.<\/p>\n<p>When it comes to hardware, the two values may be different depending on how the hardware operates. For optical media (like CDs and DVDs), the drives work by measuring reflective light and read the values as <em>shiny<\/em> or <em>dull<\/em>. Magnetic drives use the polarities of <em>North<\/em> and <em>South<\/em>.<\/p>\n<p>The reason binary is important in computing is because of this concept. Computers use two states to store, read and process any type of data, and the way the data is structured determines the computer's response.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nAll conditions that need to be evaluated (in this course, the condition we focus on is that of equality, or *is equal to*) return a value of `True` or `False`.\n\nWhen a value can only have two values, we call it a *boolean* value. Because digital systems are binary, all values can be represented using two-state booleans.\n\nPeople often refer to computers an binary as being *zeroes and ones*, but the reality is that the two values can be anything as long as they can be identified. Most programming languages have some concept of `True` and `False`, and some use the values `1` and `0` instead.\n\nWhen it comes to hardware, the two values may be different depending on how the hardware operates. For optical media (like CDs and DVDs), the drives work by measuring reflective light and read the values as *shiny* or *dull*. Magnetic drives use the polarities of *North* and *South*.\n\nThe reason binary is important in computing is because of this concept. Computers use two states to store, read and process any type of data, and the way the data is structured determines the computer's response."
                }
              ],
              "title":"True or False?",
              "content_rendered":"<p>\n  An <bk class=\"control\">if<\/bk> block allows your program to make <em>yes or no<\/em> decisions. In programming, yes is called <code data-lang=\"txt\">True<\/code>, and no is called <code data-lang=\"txt\">False<\/code>.<\/p>\n\n<p>\n  The body of the <bk class=\"control\">if<\/bk> block runs when the comparison (the <bk class=\"logic\">=<\/bk> block) is <code data-lang=\"txt\">True<\/code>. It doesn't run if the comparison is <code data-lang=\"txt\">False<\/code>.\n<\/p>\n\n<p>\n  Calculations that result in <code data-lang=\"txt\">True<\/code> or <code data-lang=\"txt\">False<\/code> values are called <em>Boolean expressions<\/em>.  We can print their value directly:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-grok-true\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">animal<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Pig<\/field>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"3\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"4\" type=\"logic_compare\" inline=\"true\">\n          <field name=\"OP\">EQ<\/field>\n          <value name=\"A\">\n            <block id=\"5\" type=\"variables_get\">\n              <field name=\"VAR\">animal<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"B\">\n            <block id=\"6\" type=\"text\">\n              <field name=\"TEXT\">Pig<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>If we change <code data-lang=\"py3\">animal<\/code>, the conditional expression will be <code data-lang=\"py3\">False<\/code>:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-grok-false\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">animal<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Dog<\/field>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"3\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"4\" type=\"logic_compare\" inline=\"true\">\n          <field name=\"OP\">EQ<\/field>\n          <value name=\"A\">\n            <block id=\"5\" type=\"variables_get\">\n              <field name=\"VAR\">animal<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"B\">\n            <block id=\"6\" type=\"text\">\n              <field name=\"TEXT\">Pig<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            }
          ],
          "title":"Making decisions"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nIt's often useful to make decisions that have *two* options. Let's take a look at an example.\n\n<svg width=\"359px\" height=\"241px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 359 241\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>warm-cold-blooded<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-3\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"warm-cold-blooded\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"start\" transform=\"translate(0.000000, 85.000000)\">\n            <circle id=\"Oval\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n            <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"take-picture\" transform=\"translate(264.000000, 181.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"It-is-cold-blooded\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"37.363\" y=\"18\">It is<\/tspan>\n                <tspan x=\"32.8445\" y=\"35\">cold-<\/tspan>\n                <tspan x=\"23.062\" y=\"52\">blooded<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"move-closer\" transform=\"translate(264.000000, 0.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"It-is-warm-blooded\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"35.363\" y=\"19\">It is<\/tspan>\n                <tspan x=\"26.291\" y=\"36\">warm-<\/tspan>\n                <tspan x=\"21.062\" y=\"53\">blooded<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"regulate-temperature\" transform=\"translate(130.000000, 60.000000)\">\n            <g id=\"Rectangle-2\">\n                <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n            <\/g>\n            <text id=\"Can-it-regulate-its\" font-family=\"Lato-Bold, Lato\" font-size=\"12\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"45.388\" y=\"35\">Can it<\/tspan>\n                <tspan x=\"31.336\" y=\"50\">regulate its <\/tspan>\n                <tspan x=\"47.728\" y=\"65\">body <\/tspan>\n                <tspan x=\"25.171\" y=\"80\">temperature?<\/tspan>\n            <\/text>\n        <\/g>\n        <path d=\"M191,30 L258.881848,30\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M258.881848,30 L248.081848,27 L248.081848,33 L258.881848,30 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M191,210 L258.881848,210\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M258.881848,210 L248.081848,207 L248.081848,213 L258.881848,210 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M191,56.7632697 L191,30\" id=\"Line-4\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M191,209.76327 L191,183\" id=\"Line-4\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M74,120 L125.496575,120\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <text id=\"yes\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"163.725\" y=\"61\">yes<\/tspan>\n        <\/text>\n        <text id=\"no\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"167.75\" y=\"195\">no<\/tspan>\n        <\/text>\n    <\/g>\n<\/svg>\n\nA characteristic of all warm-blooded animals is their ability to regulate their own body temperature. This allows them to keep their body temperature the same even when the weather changes.\n\nCold-blooded animals become hotter and colder when the temperature outside changes. At night their bodies get cooler, and during the day when they are in the sun they warm up.\n\nWe could write a program that asks if the animal can regulate its body temperature. If the user says `'yes'` it can, then it tells the user it is warm-blooded. Otherwise it says it is cold-blooded.\n\nWhat we want is an extra part to the <bk class=\"control\">if<\/bk> block which is only run when the <bk class=\"logic\">condition<\/bk> is `False`."
                }
              ],
              "layout":0,
              "notes_rendered":"<p>Because dichotomous keys operate by checking for the presence of a feature they map perfectly to our <code data-lang=\"py3\">if-else<\/code> statements in python. All programming languages have some kind of branching construct like this.<\/p>\n<p>To use them effectively in a program, you need to frame your condition so that the statement is either <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code>, which is exactly what we do with a dichotomous key when we check the validity of a statement like &quot;The animal has a spine&quot;. If this is a correct or <code data-lang=\"py3\">True<\/code> statement, then we classify the animal one way (e.g. vertebrate), but if the statement is <code data-lang=\"py3\">False<\/code> then it is classified differently (e.g. invertebrate).<\/p>",
              "notes":[
                {
                  "left":"#markdown\nBecause dichotomous keys operate by checking for the presence of a feature they map perfectly to our `if-else` statements in python. All programming languages have some kind of branching construct like this.\n\nTo use them effectively in a program, you need to frame your condition so that the statement is either `True` or `False`, which is exactly what we do with a dichotomous key when we check the validity of a statement like \"The animal has a spine\". If this is a correct or `True` statement, then we classify the animal one way (e.g. vertebrate), but if the statement is `False` then it is classified differently (e.g. invertebrate).\n"
                }
              ],
              "title":"Two options",
              "content_rendered":"<p>It's often useful to make decisions that have <em>two<\/em> options. Let's take a look at an example.<\/p>\n<svg width=\"359px\" height=\"241px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 359 241\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>warm-cold-blooded<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-3\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"warm-cold-blooded\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"start\" transform=\"translate(0.000000, 85.000000)\">\n            <circle id=\"Oval\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n            <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"take-picture\" transform=\"translate(264.000000, 181.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"It-is-cold-blooded\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"37.363\" y=\"18\">It is<\/tspan>\n                <tspan x=\"32.8445\" y=\"35\">cold-<\/tspan>\n                <tspan x=\"23.062\" y=\"52\">blooded<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"move-closer\" transform=\"translate(264.000000, 0.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"It-is-warm-blooded\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"35.363\" y=\"19\">It is<\/tspan>\n                <tspan x=\"26.291\" y=\"36\">warm-<\/tspan>\n                <tspan x=\"21.062\" y=\"53\">blooded<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"regulate-temperature\" transform=\"translate(130.000000, 60.000000)\">\n            <g id=\"Rectangle-2\">\n                <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n            <\/g>\n            <text id=\"Can-it-regulate-its\" font-family=\"Lato-Bold, Lato\" font-size=\"12\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"45.388\" y=\"35\">Can it<\/tspan>\n                <tspan x=\"31.336\" y=\"50\">regulate its <\/tspan>\n                <tspan x=\"47.728\" y=\"65\">body <\/tspan>\n                <tspan x=\"25.171\" y=\"80\">temperature?<\/tspan>\n            <\/text>\n        <\/g>\n        <path d=\"M191,30 L258.881848,30\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M258.881848,30 L248.081848,27 L248.081848,33 L258.881848,30 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M191,210 L258.881848,210\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M258.881848,210 L248.081848,207 L248.081848,213 L258.881848,210 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M191,56.7632697 L191,30\" id=\"Line-4\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M191,209.76327 L191,183\" id=\"Line-4\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M74,120 L125.496575,120\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <text id=\"yes\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"163.725\" y=\"61\">yes<\/tspan>\n        <\/text>\n        <text id=\"no\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"167.75\" y=\"195\">no<\/tspan>\n        <\/text>\n    <\/g>\n<\/svg>\n<p>A characteristic of all warm-blooded animals is their ability to regulate their own body temperature. This allows them to keep their body temperature the same even when the weather changes.<\/p>\n<p>Cold-blooded animals become hotter and colder when the temperature outside changes. At night their bodies get cooler, and during the day when they are in the sun they warm up.<\/p>\n<p>We could write a program that asks if the animal can regulate its body temperature. If the user says <code data-lang=\"py3\">'yes'<\/code> it can, then it tells the user it is warm-blooded. Otherwise it says it is cold-blooded.<\/p>\n<p>What we want is an extra part to the <bk class=\"control\">if<\/bk> block which is only run when the <bk class=\"logic\">condition<\/bk> is <code data-lang=\"py3\">False<\/code>.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nLet's implement the two options in the new flowchart using a <bk class=\"control\">if<\/bk> block with an <bk class=\"control\">else<\/bk> part:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">animal<\/variable>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">regulate<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"*Lburwz3fd|:Gusyft#|\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">regulate<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"(_3;w^x@jW{:8J{XFMI~\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"li}#W=8KRjXi`0E8Wg.C\">\n            <field name=\"TEXT\">Can it regulate its body temperature?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"*[bx23%j5PCyg5aWFOnZ\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"kq-@H;nlLI51idHDJBl}\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"yD|m$$e.2\/uo8\/-KL9Iq\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">regulate<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"27i4.=IPFrmHILZwa|;O\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"*s94s2K!cwW4$s[!U$-9\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"zux=a?|UVs*$P;n7M3[p\">\n                <field name=\"TEXT\">It is warm-blooded.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"G_j!BO)vc*U[vk[Z^{E|\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"z5]hd`}.f197-=%rx\/Z^\">\n                <field name=\"TEXT\">It is cold-blooded.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nHere, either the first or second <bk class=\"io\">print<\/bk> block will be run, depending on the answer, **but not both.**"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Warm- or cold-blooded?",
              "content_rendered":"<p>Let's implement the two options in the new flowchart using a <bk class=\"control\">if<\/bk> block with an <bk class=\"control\">else<\/bk> part:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aca-bk-biology-yr5-decisions-1-1-0\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">animal<\/variable>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">regulate<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"*Lburwz3fd|:Gusyft#|\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">regulate<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"(_3;w^x@jW{:8J{XFMI~\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"li}#W=8KRjXi`0E8Wg.C\">\n            <field name=\"TEXT\">Can it regulate its body temperature?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"*[bx23%j5PCyg5aWFOnZ\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"kq-@H;nlLI51idHDJBl}\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"yD|m$$e.2\/uo8\/-KL9Iq\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">regulate<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"27i4.=IPFrmHILZwa|;O\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"*s94s2K!cwW4$s[!U$-9\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"zux=a?|UVs*$P;n7M3[p\">\n                <field name=\"TEXT\">It is warm-blooded.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"G_j!BO)vc*U[vk[Z^{E|\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"z5]hd`}.f197-=%rx\/Z^\">\n                <field name=\"TEXT\">It is cold-blooded.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<p>Here, either the first or second <bk class=\"io\">print<\/bk> block will be run, depending on the answer, <strong>but not both.<\/strong><\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Plant or animal?",
              "purpose":"",
              "problem":"aca-bk-bio-dichtomous-plant-animal",
              "type":1,
              "problem_id":4448
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Predator or prey",
              "purpose":"",
              "problem":"aca-bk-bio-predator-or-prey",
              "type":1,
              "problem_id":4465
            }
          ],
          "title":"Decisions with two options"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Is it a shark?",
              "purpose":"",
              "problem":"aca-choices-bio-is-it-a-shark-blocks",
              "type":1,
              "problem_id":4467
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Australia's favourite bird",
              "purpose":"",
              "problem":"aca-choices-bio-magpie-blocks",
              "type":1,
              "problem_id":4468
            }
          ],
          "title":"Decisions review"
        }
      ],
      "title":"Decisions",
      "label":"aca-bk-biology-yr5-decisions",
      "updated_at":"2018-05-14T06:56:12.619363+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nThe <bk class=\"control\">if<\/bk>\/<bk class=\"control\">else<\/bk> block is great for making decisions with only two options (warm or cold blooded, plant or animal, day or night). When there are more than two possibilities, it can get confusing.\n\nThis program tries to decide if you are a `lang:out;carnivore` or `lang:out;herbivore`:\n\n```eg:blockly-martian;lang:blockly;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">animal<\/variable>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">eats<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"*Lburwz3fd|:Gusyft#|\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"(_3;w^x@jW{:8J{XFMI~\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"li}#W=8KRjXi`0E8Wg.C\">\n            <field name=\"TEXT\">What type of animal are you?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"*[bx23%j5PCyg5aWFOnZ\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"kq-@H;nlLI51idHDJBl}\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"yD|m$$e.2\/uo8\/-KL9Iq\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"27i4.=IPFrmHILZwa|;O\">\n                <field name=\"TEXT\">carnivore<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"*s94s2K!cwW4$s[!U$-9\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"zux=a?|UVs*$P;n7M3[p\">\n                <field name=\"TEXT\">You only eat meat.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"G_j!BO)vc*U[vk[Z^{E|\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"z5]hd`}.f197-=%rx\/Z^\">\n                <field name=\"TEXT\">You only eat plants.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n```\n\nIf the user enters `lang:str;carnivore` or `lang:str;herbivore` the response is correct. But what if it is an `lang:str;omnivore`?\n\nThis isn't right! It's possible that the animal eats both meat and plants, which would make it an `'omnivore'`. We need a way for our program to deal with that!\n\n> ## <bk class=\"control\">else<\/bk> catches *everything* else!\n> Remember: the <bk class=\"control\">else<\/bk> runs whenever the <bk class=\"logic\">condition<\/bk> is `False`. Here, we were expecting `lang:str;carnivore` or `lang:str;herbivore`, but anything that is not `lang:str;carnivore` will also return `False`."
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"More difficult questions",
              "content_rendered":"<p>The <bk class=\"control\">if<\/bk>\/<bk class=\"control\">else<\/bk> block is great for making decisions with only two options (warm or cold blooded, plant or animal, day or night). When there are more than two possibilities, it can get confusing.<\/p>\n<p>This program tries to decide if you are a <code data-lang=\"out\">carnivore<\/code> or <code data-lang=\"out\">herbivore<\/code>:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"blockly-martian\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">animal<\/variable>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">eats<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"*Lburwz3fd|:Gusyft#|\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"(_3;w^x@jW{:8J{XFMI~\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"li}#W=8KRjXi`0E8Wg.C\">\n            <field name=\"TEXT\">What type of animal are you?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"*[bx23%j5PCyg5aWFOnZ\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"kq-@H;nlLI51idHDJBl}\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"yD|m$$e.2\/uo8\/-KL9Iq\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"27i4.=IPFrmHILZwa|;O\">\n                <field name=\"TEXT\">carnivore<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"*s94s2K!cwW4$s[!U$-9\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"zux=a?|UVs*$P;n7M3[p\">\n                <field name=\"TEXT\">You only eat meat.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"G_j!BO)vc*U[vk[Z^{E|\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"z5]hd`}.f197-=%rx\/Z^\">\n                <field name=\"TEXT\">You only eat plants.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n<\/code><\/pre>\n<p>If the user enters <code data-lang=\"str\">carnivore<\/code> or <code data-lang=\"str\">herbivore<\/code> the response is correct. But what if it is an <code data-lang=\"str\">omnivore<\/code>?<\/p>\n<p>This isn't right! It's possible that the animal eats both meat and plants, which would make it an <code data-lang=\"py3\">'omnivore'<\/code>. We need a way for our program to deal with that!<\/p>\n<aside class=\"info\">\n<h2><bk class=\"control\">else<\/bk> catches <em>everything<\/em> else!<\/h2>\n<p>Remember: the <bk class=\"control\">else<\/bk> runs whenever the <bk class=\"logic\">condition<\/bk> is <code data-lang=\"py3\">False<\/code>. Here, we were expecting <code data-lang=\"str\">carnivore<\/code> or <code data-lang=\"str\">herbivore<\/code>, but anything that is not <code data-lang=\"str\">carnivore<\/code> will also return <code data-lang=\"py3\">False<\/code>.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nIf we want to test if an animal is a *carnivore*, *herbivore* or *omnivore*, we need to add something extra to our <bk class=\"control\">if<\/bk> statement. Computers can only check one thing at a time and those statements always need to evaluate to `True` or `False`.\n\nThis means we need to check one condition first and, if that one is `False`, have the computer then check a different one. We use an <bk class=\"control\">else if<\/bk> to do this.\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">animal<\/variable>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">eats<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"*Lburwz3fd|:Gusyft#|\" x=\"16\" y=\"10\">\n    <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"(_3;w^x@jW{:8J{XFMI~\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"li}#W=8KRjXi`0E8Wg.C\">\n            <field name=\"TEXT\">What type of animal are you?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_elif_else\" id=\":dVf;kz3p2gsHdN9Jh8Z\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"kq-@H;nlLI51idHDJBl}\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"yD|m$$e.2\/uo8\/-KL9Iq\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"27i4.=IPFrmHILZwa|;O\">\n                <field name=\"TEXT\">carnivore<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"*s94s2K!cwW4$s[!U$-9\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"zux=a?|UVs*$P;n7M3[p\">\n                <field name=\"TEXT\">You only eat meat.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_compare\" id=\"?hd?MDXmqu_c,V4AV`r~\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\":8F,(5{)%BczsP3;Uub{\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"i_Rd1iGb0@e#fV8bjUgl\">\n                <field name=\"TEXT\">herbivore<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"G_j!BO)vc*U[vk[Z^{E|\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"z5]hd`}.f197-=%rx\/Z^\">\n                <field name=\"TEXT\">You only eat plants.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"].b8lbu@.9A$8?4^]B5S\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"Cg^d41cz)q^3cp)zIc.8\">\n                <field name=\"TEXT\">You eat both meat and plants.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>All decisions in computers are binary - they respond one way if a condition is <code data-lang=\"py3\">True<\/code> and another if that condition is <code data-lang=\"py3\">False<\/code>. The <bk class=\"control\">else if<\/bk> construct allows programmers to present a logical choice of more than two options while still performing binary comparisons.<\/p>\n<p>The <bk class=\"control\">else if<\/bk> is just a shorthand way of indicating that in the case where a condition is not met we should try a different condition which should be evaluated in the same way - as being <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code>.<\/p>\n<p>This <strong>only<\/strong> gets checked if the original test is <code data-lang=\"py3\">False<\/code> - it is treated like an <bk class=\"control\">else<\/bk> statement, in that it is only checked if the initial <bk class=\"control\">if<\/bk> condition is <code data-lang=\"py3\">False<\/code>.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nAll decisions in computers are binary - they respond one way if a condition is `True` and another if that condition is `False`. The <bk class=\"control\">else if<\/bk> construct allows programmers to present a logical choice of more than two options while still performing binary comparisons.\n\nThe <bk class=\"control\">else if<\/bk> is just a shorthand way of indicating that in the case where a condition is not met we should try a different condition which should be evaluated in the same way - as being `True` or `False`.\n\nThis **only** gets checked if the original test is `False` - it is treated like an <bk class=\"control\">else<\/bk> statement, in that it is only checked if the initial <bk class=\"control\">if<\/bk> condition is `False`."
                }
              ],
              "title":"More than two options",
              "content_rendered":"<p>If we want to test if an animal is a <em>carnivore<\/em>, <em>herbivore<\/em> or <em>omnivore<\/em>, we need to add something extra to our <bk class=\"control\">if<\/bk> statement. Computers can only check one thing at a time and those statements always need to evaluate to <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code>.<\/p>\n<p>This means we need to check one condition first and, if that one is <code data-lang=\"py3\">False<\/code>, have the computer then check a different one. We use an <bk class=\"control\">else if<\/bk> to do this.<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aca-bk-biology-yr5-decisions2-0-1-0\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">animal<\/variable>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">eats<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"*Lburwz3fd|:Gusyft#|\" x=\"16\" y=\"10\">\n    <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"(_3;w^x@jW{:8J{XFMI~\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"li}#W=8KRjXi`0E8Wg.C\">\n            <field name=\"TEXT\">What type of animal are you?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_elif_else\" id=\":dVf;kz3p2gsHdN9Jh8Z\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"kq-@H;nlLI51idHDJBl}\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"yD|m$$e.2\/uo8\/-KL9Iq\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"27i4.=IPFrmHILZwa|;O\">\n                <field name=\"TEXT\">carnivore<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"*s94s2K!cwW4$s[!U$-9\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"zux=a?|UVs*$P;n7M3[p\">\n                <field name=\"TEXT\">You only eat meat.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_compare\" id=\"?hd?MDXmqu_c,V4AV`r~\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\":8F,(5{)%BczsP3;Uub{\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"i_Rd1iGb0@e#fV8bjUgl\">\n                <field name=\"TEXT\">herbivore<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"G_j!BO)vc*U[vk[Z^{E|\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"z5]hd`}.f197-=%rx\/Z^\">\n                <field name=\"TEXT\">You only eat plants.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"].b8lbu@.9A$8?4^]B5S\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"Cg^d41cz)q^3cp)zIc.8\">\n                <field name=\"TEXT\">You eat both meat and plants.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nOur previous example assumed that if you weren't a `'carnivore'` or `'herbivore'` you had to be an `'omnivore'`, but it's possible the user might type something else in that isn't correct. To fix this, we want to also check if `'omnivore'` is typed in by the user, and we can do this with another <bk class=\"control\">else if<\/bk>:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">animal<\/variable>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">eats<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"*Lburwz3fd|:Gusyft#|\" x=\"16\" y=\"10\">\n    <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"(_3;w^x@jW{:8J{XFMI~\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"li}#W=8KRjXi`0E8Wg.C\">\n            <field name=\"TEXT\">What type of animal are you?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_elif_elif_else\" id=\"~9f,~:.;:\/=V;F;_7=hC\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"kq-@H;nlLI51idHDJBl}\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"yD|m$$e.2\/uo8\/-KL9Iq\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"27i4.=IPFrmHILZwa|;O\">\n                <field name=\"TEXT\">carnivore<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"*s94s2K!cwW4$s[!U$-9\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"zux=a?|UVs*$P;n7M3[p\">\n                <field name=\"TEXT\">You only eat meat.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_compare\" id=\"?hd?MDXmqu_c,V4AV`r~\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\":8F,(5{)%BczsP3;Uub{\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"i_Rd1iGb0@e#fV8bjUgl\">\n                <field name=\"TEXT\">herbivore<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"G_j!BO)vc*U[vk[Z^{E|\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"z5]hd`}.f197-=%rx\/Z^\">\n                <field name=\"TEXT\">You only eat plants.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF2\">\n          <block type=\"logic_compare\" id=\"]sa2ozA4(IU.)0K2WW4~\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"!nMnO2irD^,9StdOC.gz\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"4,vp@#be}f!-YjtJ%NwB\">\n                <field name=\"TEXT\">omnivore<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO2\">\n          <block type=\"io_print1\" id=\"].b8lbu@.9A$8?4^]B5S\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"Cg^d41cz)q^3cp)zIc.8\">\n                <field name=\"TEXT\">You eat both meat and plants.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"3sQDwoOQNXxe|.~XkSK:\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"HpDN{l9\/,KDv=WPoEJ]B\">\n                <field name=\"TEXT\">Are you an animal?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nRemember that an <bk class=\"control\">else<\/bk> can always be used to catch anything that isn't matched by **any** of the <bk class=\"control\">if<\/bk> or <bk class=\"control\">else if<\/bk> conditions - it's a good way to make sure that you only execute the right code for correct values."
                }
              ],
              "layout":0,
              "notes_rendered":"<p>When we're checking the value of a variable against some matching criteria, the <bk class=\"control\">else if<\/bk> block allows us to specify any number of conditions to check. This is particularly useful where we might want to respond differently in numerical ranges or where free text strings are involved.<\/p>\n<p>If you want to see some further examples of how <bk class=\"control\">else if<\/bk> can be used some of our other challenges explore this concept in much greater detail. It is used extensively in the <a target=\"_blank\" href=\"https:\/\/groklearning.com\/course\/aca-dt-56-bk-chatbot\/\">Chatbot Challenge<\/a> where the final project requires responding differently depending on the phrase typed in by the user.<\/p>\n<p>Because this challenge focuses on dichotomous keys and their usefulness in a biological context, we'll focus primarily on the <bk class=\"control\">if-else<\/bk> type cases.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nWhen we're checking the value of a variable against some matching criteria, the <bk class=\"control\">else if<\/bk> block allows us to specify any number of conditions to check. This is particularly useful where we might want to respond differently in numerical ranges or where free text strings are involved.\n\nIf you want to see some further examples of how <bk class=\"control\">else if<\/bk> can be used some of our other challenges explore this concept in much greater detail. It is used extensively in the [Chatbot Challenge](https:\/\/groklearning.com\/course\/aca-dt-56-bk-chatbot\/) where the final project requires responding differently depending on the phrase typed in by the user.\n\nBecause this challenge focuses on dichotomous keys and their usefulness in a biological context, we'll focus primarily on the <bk class=\"control\">if-else<\/bk> type cases."
                }
              ],
              "title":"Even more options",
              "content_rendered":"<p>Our previous example assumed that if you weren't a <code data-lang=\"py3\">'carnivore'<\/code> or <code data-lang=\"py3\">'herbivore'<\/code> you had to be an <code data-lang=\"py3\">'omnivore'<\/code>, but it's possible the user might type something else in that isn't correct. To fix this, we want to also check if <code data-lang=\"py3\">'omnivore'<\/code> is typed in by the user, and we can do this with another <bk class=\"control\">else if<\/bk>:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aca-bk-biology-yr5-decisions2-0-2-0\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">animal<\/variable>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">eats<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"*Lburwz3fd|:Gusyft#|\" x=\"16\" y=\"10\">\n    <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"(_3;w^x@jW{:8J{XFMI~\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"li}#W=8KRjXi`0E8Wg.C\">\n            <field name=\"TEXT\">What type of animal are you?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_elif_elif_else\" id=\"~9f,~:.;:\/=V;F;_7=hC\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"kq-@H;nlLI51idHDJBl}\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"yD|m$$e.2\/uo8\/-KL9Iq\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"27i4.=IPFrmHILZwa|;O\">\n                <field name=\"TEXT\">carnivore<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"*s94s2K!cwW4$s[!U$-9\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"zux=a?|UVs*$P;n7M3[p\">\n                <field name=\"TEXT\">You only eat meat.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_compare\" id=\"?hd?MDXmqu_c,V4AV`r~\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\":8F,(5{)%BczsP3;Uub{\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"i_Rd1iGb0@e#fV8bjUgl\">\n                <field name=\"TEXT\">herbivore<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"G_j!BO)vc*U[vk[Z^{E|\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"z5]hd`}.f197-=%rx\/Z^\">\n                <field name=\"TEXT\">You only eat plants.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF2\">\n          <block type=\"logic_compare\" id=\"]sa2ozA4(IU.)0K2WW4~\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"!nMnO2irD^,9StdOC.gz\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">eats<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"4,vp@#be}f!-YjtJ%NwB\">\n                <field name=\"TEXT\">omnivore<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO2\">\n          <block type=\"io_print1\" id=\"].b8lbu@.9A$8?4^]B5S\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"Cg^d41cz)q^3cp)zIc.8\">\n                <field name=\"TEXT\">You eat both meat and plants.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"3sQDwoOQNXxe|.~XkSK:\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"HpDN{l9\/,KDv=WPoEJ]B\">\n                <field name=\"TEXT\">Are you an animal?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<p>Remember that an <bk class=\"control\">else<\/bk> can always be used to catch anything that isn't matched by <strong>any<\/strong> of the <bk class=\"control\">if<\/bk> or <bk class=\"control\">else if<\/bk> conditions - it's a good way to make sure that you only execute the right code for correct values.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Feature to class",
              "purpose":"",
              "problem":"aca-bk-bio-feature-to-class",
              "type":1,
              "problem_id":4444
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Find the animal!",
              "purpose":"",
              "problem":"aca-bk-bio-find-the-animal",
              "type":1,
              "problem_id":4445
            }
          ],
          "title":"Decisions with more options"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nWe can use the structural and behavioural characteristics of animals to identify their likely habitat.\n\nLet's say we wanted to separate a [Fish](https:\/\/en.wikipedia.org\/wiki\/Fish), [Lizard](https:\/\/en.wikipedia.org\/wiki\/Lizard) and a [Bird](https:\/\/en.wikipedia.org\/wiki\/Bird). We can simplify things a bit and say that the only things we have information about are whether the animal can fly, and if it has gills.\n\nThis table summarises some simple facts about these three types:\n\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr>\n      <th><\/th>\n      <th>Fish<\/th>\n      <th>Lizard<\/th>\n      <th>Bird<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td><em>Can fly?<\/em><\/td>\n      <td>No<\/td>\n      <td>No<\/td>\n      <td><strong>Yes<\/strong><\/td>\n    <\/tr>\n    <tr>\n      <td><em>Has gills?<\/em><\/td>\n      <td><strong>Yes<\/strong><\/td>\n      <td>No<\/td>\n      <td>No<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n\nSo Birds can fly, Fish have gills, and lizards don't fly or have gills."
                }
              ],
              "layout":0,
              "notes_rendered":"<p>Animals generally exhibit many different adaptations that determine their likelihood to survive in a given habitat. Unlike the <bk class=\"control\">else if<\/bk> we just explored, we'll often want to capture this information in multiple variables rather than always asking for a single text string.<\/p>\n<p>This example is critical to the upcoming mini-project, so making sure students can understand and complete the questions in this part of the module will be important.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nAnimals generally exhibit many different adaptations that determine their likelihood to survive in a given habitat. Unlike the <bk class=\"control\">else if<\/bk> we just explored, we'll often want to capture this information in multiple variables rather than always asking for a single text string.\n\nThis example is critical to the upcoming mini-project, so making sure students can understand and complete the questions in this part of the module will be important."
                }
              ],
              "title":"Making complex decisions",
              "content_rendered":"<p>We can use the structural and behavioural characteristics of animals to identify their likely habitat.<\/p>\n<p>Let's say we wanted to separate a <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/Fish\">Fish<\/a>, <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/Lizard\">Lizard<\/a> and a <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/Bird\">Bird<\/a>. We can simplify things a bit and say that the only things we have information about are whether the animal can fly, and if it has gills.<\/p>\n<p>This table summarises some simple facts about these three types:<\/p>\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr>\n      <th><\/th>\n      <th>Fish<\/th>\n      <th>Lizard<\/th>\n      <th>Bird<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td><em>Can fly?<\/em><\/td>\n      <td>No<\/td>\n      <td>No<\/td>\n      <td><strong>Yes<\/strong><\/td>\n    <\/tr>\n    <tr>\n      <td><em>Has gills?<\/em><\/td>\n      <td><strong>Yes<\/strong><\/td>\n      <td>No<\/td>\n      <td>No<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<p>So Birds can fly, Fish have gills, and lizards don't fly or have gills.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nThe flowchart below demonstrates how we can use the properties of *can it fly?* and *does it have gills?* to determine which animal it is:\n\n<svg width=\"493px\" height=\"331px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 493 331\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>aves-mono-mammal<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-3\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-4\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n        <polygon id=\"path-5\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"aves-monotreme-mammal\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"aves-mono-mammal\">\n            <g id=\"start\" transform=\"translate(0.000000, 85.000000)\">\n                <circle id=\"oval_start\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n                <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n                <\/text>\n                <path d=\"M74,35 L125.496575,35\" id=\"start_line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"start_line-decoration-1\" d=\"M125.496575,35 L114.696575,32 L114.696575,38 L125.496575,35 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n            <\/g>\n            <g id=\"is-mammal\" transform=\"translate(398.000000, 271.000000)\">\n                <g id=\"mammal_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-mammal\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"31.068\" y=\"42\">lizard<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-monotreme\" transform=\"translate(398.000000, 90.000000)\">\n                <g id=\"mono_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-monotreme\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"35.2645\" y=\"42\">fish<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-bird\" transform=\"translate(264.000000, 0.000000)\">\n                <g id=\"bird_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-bird\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"35.2605\" y=\"42\">bird<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"can-fly\" transform=\"translate(130.000000, 60.000000)\">\n                <g id=\"fly_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-4\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"can-it-fly?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"28.8885\" y=\"62\">Can it fly?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_yes\" transform=\"translate(162.000000, 29.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"fly_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"fly_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_yes\" transform=\"translate(297.000000, 120.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"eggs_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"eggs_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_no\" transform=\"translate(166.000000, 183.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"fly_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"fly_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"lay-eggs\" transform=\"translate(266.000000, 150.000000)\">\n                <g id=\"eggs_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-5\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"lay-eggs?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"37.803\" y=\"54\">Does it<\/tspan>\n                    <tspan x=\"30.2905\" y=\"71\">have gills?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_no\" transform=\"translate(301.000000, 273.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"eggs_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"eggs_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n        <\/g>\n    <\/g>\n<\/svg>\n\nBecause only birds can fly, we can confidently say that a yes to our first question means we have a bird. \n\nWhether we ask the second question at all *depends* on the answer to the first!"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>The algorithms that we'll be presenting from this point on will often be easier to understand by having students draw flowcharts to clearly show how the program should behave in each case that is being tested.<\/p>\n<p>By asking questions with a yes\/no type answer, this flowchart presentation is similar in layout to what you might teach students when they're learning about representation of a dichotomous key for the first time. This feeds in nicely to the classification of species activities they will do in Year 7.<\/p>\n<p>If a student is struggling with an example of problem and they have not drawn a flowchart of how it is expected to behave, having them do so will usually get them back on track.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nThe algorithms that we'll be presenting from this point on will often be easier to understand by having students draw flowcharts to clearly show how the program should behave in each case that is being tested.\n\nBy asking questions with a yes\/no type answer, this flowchart presentation is similar in layout to what you might teach students when they're learning about representation of a dichotomous key for the first time. This feeds in nicely to the classification of species activities they will do in Year 7.\n\nIf a student is struggling with an example of problem and they have not drawn a flowchart of how it is expected to behave, having them do so will usually get them back on track."
                }
              ],
              "title":"Asking the right questions",
              "content_rendered":"<p>The flowchart below demonstrates how we can use the properties of <em>can it fly?<\/em> and <em>does it have gills?<\/em> to determine which animal it is:<\/p>\n<svg width=\"493px\" height=\"331px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 493 331\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>aves-mono-mammal<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-3\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-4\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n        <polygon id=\"path-5\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"aves-monotreme-mammal\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"aves-mono-mammal\">\n            <g id=\"start\" transform=\"translate(0.000000, 85.000000)\">\n                <circle id=\"oval_start\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n                <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n                <\/text>\n                <path d=\"M74,35 L125.496575,35\" id=\"start_line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"start_line-decoration-1\" d=\"M125.496575,35 L114.696575,32 L114.696575,38 L125.496575,35 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n            <\/g>\n            <g id=\"is-mammal\" transform=\"translate(398.000000, 271.000000)\">\n                <g id=\"mammal_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-mammal\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"31.068\" y=\"42\">lizard<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-monotreme\" transform=\"translate(398.000000, 90.000000)\">\n                <g id=\"mono_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-monotreme\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"35.2645\" y=\"42\">fish<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-bird\" transform=\"translate(264.000000, 0.000000)\">\n                <g id=\"bird_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-bird\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"35.2605\" y=\"42\">bird<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"can-fly\" transform=\"translate(130.000000, 60.000000)\">\n                <g id=\"fly_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-4\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"can-it-fly?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"28.8885\" y=\"62\">Can it fly?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_yes\" transform=\"translate(162.000000, 29.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"fly_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"fly_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_yes\" transform=\"translate(297.000000, 120.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"eggs_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"eggs_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_no\" transform=\"translate(166.000000, 183.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"fly_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"fly_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"lay-eggs\" transform=\"translate(266.000000, 150.000000)\">\n                <g id=\"eggs_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-5\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"lay-eggs?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"37.803\" y=\"54\">Does it<\/tspan>\n                    <tspan x=\"30.2905\" y=\"71\">have gills?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_no\" transform=\"translate(301.000000, 273.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"eggs_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"eggs_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n        <\/g>\n    <\/g>\n<\/svg>\n<p>Because only birds can fly, we can confidently say that a yes to our first question means we have a bird.<\/p>\n<p>Whether we ask the second question at all <em>depends<\/em> on the answer to the first!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nThe body of an <bk class=\"control\">if<\/bk>, <bk class=\"control\">else if<\/bk> or <bk class=\"control\">else<\/bk> blocks may contain another <bk class=\"control\">if<\/bk> block.\n\nThis is called *nesting*, and is how we represent our algorithm of a decision within a decision, in code.\n\nWhen using nesting **asking more questions *depends* on the previous answer!** If we have eliminated all possibilities, there is no need to ask any more questions.\n\nThis is the advantage of using nesting.\n\nIn the example from the previous slide, the second decision only happens inside the `'no'` case (or the <bk class=\"control\">else<\/bk> of our first question). Let's turn the flowchart into code!\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">gills<\/variable>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">fly<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"*Lburwz3fd|:Gusyft#|\" x=\"16\" y=\"10\">\n    <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">fly<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"(_3;w^x@jW{:8J{XFMI~\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"li}#W=8KRjXi`0E8Wg.C\">\n            <field name=\"TEXT\">Can it fly?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"^Y?L%`Bs4.N*tyGA79Vr\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"kq-@H;nlLI51idHDJBl}\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"yD|m$$e.2\/uo8\/-KL9Iq\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">fly<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"27i4.=IPFrmHILZwa|;O\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"*s94s2K!cwW4$s[!U$-9\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"zux=a?|UVs*$P;n7M3[p\">\n                <field name=\"TEXT\">Bird<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"variables_set\" id=\"{dKO!^,3P5k,*ET([$Ac\">\n            <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">gills<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\"^mnLoqq#l}#ZY^}$X\/2f\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\")4Qn+j?,8zlH`Y0zN)*)\">\n                    <field name=\"TEXT\">Does it have gills?<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"decisions_if_else\" id=\"\/^+H=aNM@sho]dh|Emw7\">\n                <value name=\"IF0\">\n                  <block type=\"logic_compare\" id=\"86YgbR*0m?X2{IK5STop\">\n                    <field name=\"OP\">EQ<\/field>\n                    <value name=\"A\">\n                      <block type=\"variables_get\" id=\"%B+Q~%\/Ggku%Tw)#)-|%\">\n                        <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">gills<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"B\">\n                      <block type=\"text\" id=\"?.`iDQsV9Ndnszx5RJi;\">\n                        <field name=\"TEXT\">yes<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <statement name=\"DO0\">\n                  <block type=\"io_print1\" id=\"8aZ4sV+E#~(qLqV:u-nm\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"s]XC++Jeq,9jok1t`Q4S\">\n                        <field name=\"TEXT\">Fish<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/statement>\n                <statement name=\"ELSE\">\n                  <block type=\"io_print1\" id=\"sv-^Nz|YcnS=76]AMf]i\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\";j7|~P2[(JP,2]reuu^M\">\n                        <field name=\"TEXT\">Lizard<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/statement>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\n```eg:last;terminal\nCan it fly? @@@no\nDoes it have gills? @@@no\nLizard\n\n```\n\nNotice how <bk class=\"var\">set <bk class=\"inner\">gills<\/bk><\/bk> is *inside* the <bk class=\"control\">else<\/bk> part of our <bk class=\"control\">if else<\/bk> block like the indentation of the rectangles in our flowchart? \n\n**Test the example by running the code above**. Try different answers to all of the questions. You'll also notice that if you answer `'yes'` to the first question, the second question won't get asked at all!"
                }
              ],
              "layout":0,
              "notes_rendered":"<p><strong><em>This is the most important slide in the module, possibly the whole challenge!<\/em><\/strong><\/p>\n<p>The nesting of <bk class=\"control\">if<\/bk> blocks is reflected exactly in the way dichotomous keys ask additional questions to classify species. This is also a critical process in narrowing down (or filtering) species as you learn more about its adaptations.<\/p>\n<p>Since we want students to be able to build their own classifier by the end of this course, it will rely heavily on students being able to nest <bk class=\"control\">if<\/bk> blocks in the correct order to ask the relevant questions.<\/p>\n<p>Encourage students to experiment with the sample code on this slide so that they understand exactly how the program works.<\/p>\n<p>The <em>second<\/em> <bk class=\"control\">if<\/bk> block is <em>inside<\/em> the <bk class=\"control\">else<\/bk> block. This is what does the nesting!<\/p>",
              "notes":[
                {
                  "left":"#markdown\n***This is the most important slide in the module, possibly the whole challenge!***\n\nThe nesting of <bk class=\"control\">if<\/bk> blocks is reflected exactly in the way dichotomous keys ask additional questions to classify species. This is also a critical process in narrowing down (or filtering) species as you learn more about its adaptations.\n\nSince we want students to be able to build their own classifier by the end of this course, it will rely heavily on students being able to nest <bk class=\"control\">if<\/bk> blocks in the correct order to ask the relevant questions.\n\nEncourage students to experiment with the sample code on this slide so that they understand exactly how the program works.\n\nThe *second* <bk class=\"control\">if<\/bk> block is *inside* the <bk class=\"control\">else<\/bk> block. This is what does the nesting!\n"
                }
              ],
              "title":"Decisions within decisions",
              "content_rendered":"<p>The body of an <bk class=\"control\">if<\/bk>, <bk class=\"control\">else if<\/bk> or <bk class=\"control\">else<\/bk> blocks may contain another <bk class=\"control\">if<\/bk> block.<\/p>\n<p>This is called <em>nesting<\/em>, and is how we represent our algorithm of a decision within a decision, in code.<\/p>\n<p>When using nesting <strong>asking more questions <em>depends<\/em> on the previous answer!<\/strong> If we have eliminated all possibilities, there is no need to ask any more questions.<\/p>\n<p>This is the advantage of using nesting.<\/p>\n<p>In the example from the previous slide, the second decision only happens inside the <code data-lang=\"py3\">'no'<\/code> case (or the <bk class=\"control\">else<\/bk> of our first question). Let's turn the flowchart into code!<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aca-bk-biology-yr5-decisions2-1-2-0\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">gills<\/variable>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">fly<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"*Lburwz3fd|:Gusyft#|\" x=\"16\" y=\"10\">\n    <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">fly<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"(_3;w^x@jW{:8J{XFMI~\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"li}#W=8KRjXi`0E8Wg.C\">\n            <field name=\"TEXT\">Can it fly?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"^Y?L%`Bs4.N*tyGA79Vr\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"kq-@H;nlLI51idHDJBl}\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"yD|m$$e.2\/uo8\/-KL9Iq\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">fly<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"27i4.=IPFrmHILZwa|;O\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"*s94s2K!cwW4$s[!U$-9\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"zux=a?|UVs*$P;n7M3[p\">\n                <field name=\"TEXT\">Bird<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"variables_set\" id=\"{dKO!^,3P5k,*ET([$Ac\">\n            <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">gills<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\"^mnLoqq#l}#ZY^}$X\/2f\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\")4Qn+j?,8zlH`Y0zN)*)\">\n                    <field name=\"TEXT\">Does it have gills?<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"decisions_if_else\" id=\"\/^+H=aNM@sho]dh|Emw7\">\n                <value name=\"IF0\">\n                  <block type=\"logic_compare\" id=\"86YgbR*0m?X2{IK5STop\">\n                    <field name=\"OP\">EQ<\/field>\n                    <value name=\"A\">\n                      <block type=\"variables_get\" id=\"%B+Q~%\/Ggku%Tw)#)-|%\">\n                        <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">gills<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"B\">\n                      <block type=\"text\" id=\"?.`iDQsV9Ndnszx5RJi;\">\n                        <field name=\"TEXT\">yes<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <statement name=\"DO0\">\n                  <block type=\"io_print1\" id=\"8aZ4sV+E#~(qLqV:u-nm\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"s]XC++Jeq,9jok1t`Q4S\">\n                        <field name=\"TEXT\">Fish<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/statement>\n                <statement name=\"ELSE\">\n                  <block type=\"io_print1\" id=\"sv-^Nz|YcnS=76]AMf]i\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\";j7|~P2[(JP,2]reuu^M\">\n                        <field name=\"TEXT\">Lizard<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/statement>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-bk-biology-yr5-decisions2-1-2-0\"><code data-lang=\"py3\"><o>Can it fly? <\/o><i>no<\/i>\n<o>Does it have gills? <\/o><i>no<\/i>\n<o>Lizard<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>Notice how <bk class=\"var\">set <bk class=\"inner\">gills<\/bk><\/bk> is <em>inside<\/em> the <bk class=\"control\">else<\/bk> part of our <bk class=\"control\">if else<\/bk> block like the indentation of the rectangles in our flowchart?<\/p>\n<p><strong>Test the example by running the code above<\/strong>. Try different answers to all of the questions. You'll also notice that if you answer <code data-lang=\"py3\">'yes'<\/code> to the first question, the second question won't get asked at all!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nChanging the order that you ask your questions can change your algorithm. Look what happens to the flowchart if we ask if the animal lays eggs first:\n\n<svg width=\"493px\" height=\"331px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 493 331\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>aves-mono-mammal<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-3\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-4\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n        <polygon id=\"path-5\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"aves-monotreme-mammal\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"aves-mono-mammal\">\n            <g id=\"start\" transform=\"translate(0.000000, 85.000000)\">\n                <circle id=\"oval_start\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n                <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n                <\/text>\n                <path d=\"M74,35 L125.496575,35\" id=\"start_line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"start_line-decoration-1\" d=\"M125.496575,35 L114.696575,32 L114.696575,38 L125.496575,35 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n            <\/g>\n            <g id=\"is-mammal\" transform=\"translate(398.000000, 271.000000)\">\n                <g id=\"mammal_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-mammal\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"31.068\" y=\"42\">lizard<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-monotreme\" transform=\"translate(398.000000, 90.000000)\">\n                <g id=\"mono_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-monotreme\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"35.2645\" y=\"42\">bird<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-bird\" transform=\"translate(264.000000, 0.000000)\">\n                <g id=\"bird_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-bird\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"35.2645\" y=\"42\">fish<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"can-fly\" transform=\"translate(130.000000, 60.000000)\">\n                <g id=\"fly_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-4\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"can-it-fly?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"37.803\" y=\"54\">Does it<\/tspan>\n                    <tspan x=\"30.2905\" y=\"71\">have gills?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_yes\" transform=\"translate(162.000000, 29.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"fly_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"fly_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_yes\" transform=\"translate(297.000000, 120.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"eggs_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"eggs_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_no\" transform=\"translate(166.000000, 183.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"fly_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"fly_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"lay-eggs\" transform=\"translate(266.000000, 150.000000)\">\n                <g id=\"eggs_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-5\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"lay-eggs?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"28.8885\" y=\"62\">Can it fly?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_no\" transform=\"translate(301.000000, 273.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"eggs_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"eggs_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n        <\/g>\n    <\/g>\n<\/svg>\n\nSee how we only need to ask one question to identify the fish this time? This changes how we nest our <bk class=\"control\">if<\/bk> statements, and changes the code to:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">gills<\/variable>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">fly<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"*Lburwz3fd|:Gusyft#|\" x=\"16\" y=\"10\">\n    <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">gills<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"(_3;w^x@jW{:8J{XFMI~\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"li}#W=8KRjXi`0E8Wg.C\">\n            <field name=\"TEXT\">Does it have gills?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"^Y?L%`Bs4.N*tyGA79Vr\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"kq-@H;nlLI51idHDJBl}\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"yD|m$$e.2\/uo8\/-KL9Iq\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">gills<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"27i4.=IPFrmHILZwa|;O\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"*s94s2K!cwW4$s[!U$-9\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"zux=a?|UVs*$P;n7M3[p\">\n                <field name=\"TEXT\">Fish<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"variables_set\" id=\"{dKO!^,3P5k,*ET([$Ac\">\n            <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">fly<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\"^mnLoqq#l}#ZY^}$X\/2f\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\")4Qn+j?,8zlH`Y0zN)*)\">\n                    <field name=\"TEXT\">Can it fly?<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"decisions_if_else\" id=\"\/^+H=aNM@sho]dh|Emw7\">\n                <value name=\"IF0\">\n                  <block type=\"logic_compare\" id=\"86YgbR*0m?X2{IK5STop\">\n                    <field name=\"OP\">EQ<\/field>\n                    <value name=\"A\">\n                      <block type=\"variables_get\" id=\"%B+Q~%\/Ggku%Tw)#)-|%\">\n                        <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">fly<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"B\">\n                      <block type=\"text\" id=\"?.`iDQsV9Ndnszx5RJi;\">\n                        <field name=\"TEXT\">yes<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <statement name=\"DO0\">\n                  <block type=\"io_print1\" id=\"8aZ4sV+E#~(qLqV:u-nm\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"s]XC++Jeq,9jok1t`Q4S\">\n                        <field name=\"TEXT\">Bird<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/statement>\n                <statement name=\"ELSE\">\n                  <block type=\"io_print1\" id=\"sv-^Nz|YcnS=76]AMf]i\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\";j7|~P2[(JP,2]reuu^M\">\n                        <field name=\"TEXT\">Lizard<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/statement>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nRun this program to see how it works, and try different answers to the questions.\n\nBoth algorithms are correct even though the programs are different!"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>When students begin working on their mini projects, they'll be given flexibility to design their own algorithm which may mean asking different questions, or asking them in a different order.<\/p>\n<p>As long as the program generates correct results for all required inputs (and the auto-marker tests this), then a student's algorithm is correct. Thus, if they have a different answer to their peers or would like to try coming up with their own solution, this should be encouraged.<\/p>\n<p>It is also worth spending some time looking at the two versions of the flowchart next to each other, especially with students who may find this difficult. The easiest way to do this is to have students on adjacent computers open each of the slides, and walking through the differences and how it has an impact on the program's output. You can then verify their understanding by running the example code.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nWhen students begin working on their mini projects, they'll be given flexibility to design their own algorithm which may mean asking different questions, or asking them in a different order.\n\nAs long as the program generates correct results for all required inputs (and the auto-marker tests this), then a student's algorithm is correct. Thus, if they have a different answer to their peers or would like to try coming up with their own solution, this should be encouraged.\n\nIt is also worth spending some time looking at the two versions of the flowchart next to each other, especially with students who may find this difficult. The easiest way to do this is to have students on adjacent computers open each of the slides, and walking through the differences and how it has an impact on the program's output. You can then verify their understanding by running the example code.\n"
                }
              ],
              "title":"Order matters!",
              "content_rendered":"<p>Changing the order that you ask your questions can change your algorithm. Look what happens to the flowchart if we ask if the animal lays eggs first:<\/p>\n<svg width=\"493px\" height=\"331px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 493 331\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>aves-mono-mammal<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-3\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-4\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n        <polygon id=\"path-5\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"aves-monotreme-mammal\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"aves-mono-mammal\">\n            <g id=\"start\" transform=\"translate(0.000000, 85.000000)\">\n                <circle id=\"oval_start\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n                <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n                <\/text>\n                <path d=\"M74,35 L125.496575,35\" id=\"start_line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"start_line-decoration-1\" d=\"M125.496575,35 L114.696575,32 L114.696575,38 L125.496575,35 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n            <\/g>\n            <g id=\"is-mammal\" transform=\"translate(398.000000, 271.000000)\">\n                <g id=\"mammal_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-mammal\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"31.068\" y=\"42\">lizard<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-monotreme\" transform=\"translate(398.000000, 90.000000)\">\n                <g id=\"mono_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-monotreme\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"35.2645\" y=\"42\">bird<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-bird\" transform=\"translate(264.000000, 0.000000)\">\n                <g id=\"bird_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-bird\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"35.2645\" y=\"42\">fish<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"can-fly\" transform=\"translate(130.000000, 60.000000)\">\n                <g id=\"fly_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-4\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"can-it-fly?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"37.803\" y=\"54\">Does it<\/tspan>\n                    <tspan x=\"30.2905\" y=\"71\">have gills?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_yes\" transform=\"translate(162.000000, 29.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"fly_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"fly_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_yes\" transform=\"translate(297.000000, 120.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"eggs_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"eggs_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_no\" transform=\"translate(166.000000, 183.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"fly_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"fly_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"lay-eggs\" transform=\"translate(266.000000, 150.000000)\">\n                <g id=\"eggs_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-5\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"lay-eggs?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"28.8885\" y=\"62\">Can it fly?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_no\" transform=\"translate(301.000000, 273.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"eggs_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"eggs_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n        <\/g>\n    <\/g>\n<\/svg>\n<p>See how we only need to ask one question to identify the fish this time? This changes how we nest our <bk class=\"control\">if<\/bk> statements, and changes the code to:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aca-bk-biology-yr5-decisions2-1-3-0\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">gills<\/variable>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">fly<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"*Lburwz3fd|:Gusyft#|\" x=\"16\" y=\"10\">\n    <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">gills<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"(_3;w^x@jW{:8J{XFMI~\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"li}#W=8KRjXi`0E8Wg.C\">\n            <field name=\"TEXT\">Does it have gills?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"^Y?L%`Bs4.N*tyGA79Vr\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"kq-@H;nlLI51idHDJBl}\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"yD|m$$e.2\/uo8\/-KL9Iq\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">gills<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"27i4.=IPFrmHILZwa|;O\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"*s94s2K!cwW4$s[!U$-9\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"zux=a?|UVs*$P;n7M3[p\">\n                <field name=\"TEXT\">Fish<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"variables_set\" id=\"{dKO!^,3P5k,*ET([$Ac\">\n            <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">fly<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\"^mnLoqq#l}#ZY^}$X\/2f\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\")4Qn+j?,8zlH`Y0zN)*)\">\n                    <field name=\"TEXT\">Can it fly?<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"decisions_if_else\" id=\"\/^+H=aNM@sho]dh|Emw7\">\n                <value name=\"IF0\">\n                  <block type=\"logic_compare\" id=\"86YgbR*0m?X2{IK5STop\">\n                    <field name=\"OP\">EQ<\/field>\n                    <value name=\"A\">\n                      <block type=\"variables_get\" id=\"%B+Q~%\/Ggku%Tw)#)-|%\">\n                        <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">fly<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"B\">\n                      <block type=\"text\" id=\"?.`iDQsV9Ndnszx5RJi;\">\n                        <field name=\"TEXT\">yes<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <statement name=\"DO0\">\n                  <block type=\"io_print1\" id=\"8aZ4sV+E#~(qLqV:u-nm\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"s]XC++Jeq,9jok1t`Q4S\">\n                        <field name=\"TEXT\">Bird<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/statement>\n                <statement name=\"ELSE\">\n                  <block type=\"io_print1\" id=\"sv-^Nz|YcnS=76]AMf]i\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\";j7|~P2[(JP,2]reuu^M\">\n                        <field name=\"TEXT\">Lizard<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/statement>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<p>Run this program to see how it works, and try different answers to the questions.<\/p>\n<p>Both algorithms are correct even though the programs are different!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Which animal?",
              "purpose":"",
              "problem":"aca-bk-bio-nesting-animal-features",
              "type":1,
              "problem_id":4441
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: What's my diet?",
              "purpose":"",
              "problem":"aca-bk-bio-nesting-eats",
              "type":1,
              "problem_id":4443
            }
          ],
          "title":"Decisions and algorithms"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Nesting or <bk class=\"control\">else if<\/bk>?",
              "purpose":"",
              "problem":"aca-choices-bio-nesting-elif-blocks",
              "type":1,
              "problem_id":4473
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Which is it?",
              "purpose":"",
              "problem":"aca-choices-bio-flowchart-eats-blocks",
              "type":1,
              "problem_id":4469
            }
          ],
          "title":"Decision review"
        }
      ],
      "title":"Complex decisions",
      "label":"aca-bk-biology-yr5-decisions2",
      "updated_at":"2018-05-14T06:56:12.789344+00:00",
      "concepts":[

      ]
    }
  ],
  "problems":[
    {
      "language":20,
      "title":"Animal and habitat",
      "notes":"#markdown\nGood job on getting that right. \n\nEach of the incorrect answers demonstrates a common mistake people make when using <bk class=\"str\">ask<\/bk> for the first time, so don't feel bad if you didn't get it right first time. Just remember that:\n\n* There is an <bk class=\"str\">ask<\/bk> block when asking the user a question\n* make sure the <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk> of the variable is correct\n* there is the right number of <bk class=\"io\">print<\/bk> holes.",
      "updated_at":"2018-03-06T00:26:31.841087+00:00",
      "label":"aca-choices-bio-animal-and-habitat",
      "content":"#markdown\n\n## Which of the following programs would correctly generate both outputs shown below?\n\n```lang:py3;eg:none;terminal\nName an animal: @@@cassowary\nHabitat: @@@tropics\nThe cassowary lives in the tropics\n\n```\n\n```lang:py3;eg:none;terminal\nName an animal: @@@emu\nHabitat: @@@savannah\nThe emu lives in the savannah\n\n```",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":2},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"ans-1\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"29Sb;?|S*^5=7MSwO76?\\\\\\\">animal<\\\/variable>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"T?YxbURgeNh.!Sn8|}N{\\\\\\\">habitat<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"#$Z$dpmcRkztUgvnj6`;\\\\\\\" x=\\\\\\\"7\\\\\\\" y=\\\\\\\"11\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"29Sb;?|S*^5=7MSwO76?\\\\\\\" variabletype=\\\\\\\"\\\\\\\">animal<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"%vQ=blu58fbU@V%|C.Tu\\\\\\\">\\\\n        <field name=\\\\\\\"TEXT\\\\\\\">Name an animal:<\\\/field>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"dU.U?Un6Nhj[YNfL{mIn\\\\\\\">\\\\n        <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"T?YxbURgeNh.!Sn8|}N{\\\\\\\" variabletype=\\\\\\\"\\\\\\\">habitat<\\\/field>\\\\n        <value name=\\\\\\\"VALUE\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"\\\/9S9g(o8e\\\/^87UYe#lY:\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">Habitat:<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <next>\\\\n          <block type=\\\\\\\"io_print4\\\\\\\" id=\\\\\\\"}p~_{IO8=5C+(y6j3-5j\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"~;a?!pj],41e]^N09Z6`\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">The<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"ANY1\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"pc`.n1\\\/NKoE3A~Z,[@z?\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"29Sb;?|S*^5=7MSwO76?\\\\\\\" variabletype=\\\\\\\"\\\\\\\">animal<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"ANY2\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"1@6[g{Qq1+P9xWh;V6yl\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">lives in the<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"ANY3\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"6)LP-u}:;\\\/C:l@39S+lf\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"T?YxbURgeNh.!Sn8|}N{\\\\\\\" variabletype=\\\\\\\"\\\\\\\">habitat<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/next>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"ans-2\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"29Sb;?|S*^5=7MSwO76?\\\\\\\">animal<\\\/variable>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"T?YxbURgeNh.!Sn8|}N{\\\\\\\">habitat<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"#$Z$dpmcRkztUgvnj6`;\\\\\\\" x=\\\\\\\"10\\\\\\\" y=\\\\\\\"10\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"29Sb;?|S*^5=7MSwO76?\\\\\\\" variabletype=\\\\\\\"\\\\\\\">animal<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"%vQ=blu58fbU@V%|C.Tu\\\\\\\">\\\\n        <field name=\\\\\\\"TEXT\\\\\\\">Name an animal:<\\\/field>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"dU.U?Un6Nhj[YNfL{mIn\\\\\\\">\\\\n        <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"T?YxbURgeNh.!Sn8|}N{\\\\\\\" variabletype=\\\\\\\"\\\\\\\">habitat<\\\/field>\\\\n        <value name=\\\\\\\"VALUE\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"\\\/9S9g(o8e\\\/^87UYe#lY:\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">Habitat:<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <next>\\\\n          <block type=\\\\\\\"io_print4\\\\\\\" id=\\\\\\\"}p~_{IO8=5C+(y6j3-5j\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"~;a?!pj],41e]^N09Z6`\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">The<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"ANY1\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"pc`.n1\\\/NKoE3A~Z,[@z?\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"T?YxbURgeNh.!Sn8|}N{\\\\\\\" variabletype=\\\\\\\"\\\\\\\">habitat<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"ANY2\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"1@6[g{Qq1+P9xWh;V6yl\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">lives in the<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"ANY3\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"6)LP-u}:;\\\/C:l@39S+lf\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"29Sb;?|S*^5=7MSwO76?\\\\\\\" variabletype=\\\\\\\"\\\\\\\">animal<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/next>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"ans-3\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"29Sb;?|S*^5=7MSwO76?\\\\\\\">animal<\\\/variable>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"T?YxbURgeNh.!Sn8|}N{\\\\\\\">habitat<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"#$Z$dpmcRkztUgvnj6`;\\\\\\\" x=\\\\\\\"10\\\\\\\" y=\\\\\\\"10\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"29Sb;?|S*^5=7MSwO76?\\\\\\\" variabletype=\\\\\\\"\\\\\\\">animal<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"|-Gd(fRm`H!=0q=grrw^\\\\\\\">\\\\n        <value name=\\\\\\\"TEXT\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"%vQ=blu58fbU@V%|C.Tu\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">Name an animal:<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"dU.U?Un6Nhj[YNfL{mIn\\\\\\\">\\\\n        <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"T?YxbURgeNh.!Sn8|}N{\\\\\\\" variabletype=\\\\\\\"\\\\\\\">habitat<\\\/field>\\\\n        <value name=\\\\\\\"VALUE\\\\\\\">\\\\n          <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"Gl:K+sa-u)d(Wfz{Lz,}\\\\\\\">\\\\n            <value name=\\\\\\\"TEXT\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"\\\/9S9g(o8e\\\/^87UYe#lY:\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">Habitat:<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <next>\\\\n          <block type=\\\\\\\"io_print4\\\\\\\" id=\\\\\\\"cx!a@^sEQAF]bir_Zvi{\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"6pwfSE764e)Hct}q(Rn2\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">The<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"ANY1\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"6)LP-u}:;\\\/C:l@39S+lf\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"29Sb;?|S*^5=7MSwO76?\\\\\\\" variabletype=\\\\\\\"\\\\\\\">animal<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"ANY2\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"1@6[g{Qq1+P9xWh;V6yl\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">lives in the<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"ANY3\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"pc`.n1\\\/NKoE3A~Z,[@z?\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"T?YxbURgeNh.!Sn8|}N{\\\\\\\" variabletype=\\\\\\\"\\\\\\\">habitat<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/next>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"ans-4\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"29Sb;?|S*^5=7MSwO76?\\\\\\\">animal<\\\/variable>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"T?YxbURgeNh.!Sn8|}N{\\\\\\\">habitat<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"#$Z$dpmcRkztUgvnj6`;\\\\\\\" x=\\\\\\\"10\\\\\\\" y=\\\\\\\"10\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"29Sb;?|S*^5=7MSwO76?\\\\\\\" variabletype=\\\\\\\"\\\\\\\">animal<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"|-Gd(fRm`H!=0q=grrw^\\\\\\\">\\\\n        <value name=\\\\\\\"TEXT\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"%vQ=blu58fbU@V%|C.Tu\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">Name an animal:<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"dU.U?Un6Nhj[YNfL{mIn\\\\\\\">\\\\n        <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"T?YxbURgeNh.!Sn8|}N{\\\\\\\" variabletype=\\\\\\\"\\\\\\\">habitat<\\\/field>\\\\n        <value name=\\\\\\\"VALUE\\\\\\\">\\\\n          <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"Gl:K+sa-u)d(Wfz{Lz,}\\\\\\\">\\\\n            <value name=\\\\\\\"TEXT\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"\\\/9S9g(o8e\\\/^87UYe#lY:\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">Habitat:<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <next>\\\\n          <block type=\\\\\\\"io_print3\\\\\\\" id=\\\\\\\"NGBrxgag!;yPdYm+yA.%\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"6)LP-u}:;\\\/C:l@39S+lf\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"29Sb;?|S*^5=7MSwO76?\\\\\\\" variabletype=\\\\\\\"\\\\\\\">animal<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"ANY1\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"1@6[g{Qq1+P9xWh;V6yl\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">lives in the<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"ANY2\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"pc`.n1\\\/NKoE3A~Z,[@z?\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"T?YxbURgeNh.!Sn8|}N{\\\\\\\" variabletype=\\\\\\\"\\\\\\\">habitat<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/next>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[
        "input",
        "print",
        "variables"
      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"ans-1\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"29Sb;?|S*^5=7MSwO76?\\\">animal<\/variable>\\n    <variable type=\\\"\\\" id=\\\"T?YxbURgeNh.!Sn8|}N{\\\">habitat<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"#$Z$dpmcRkztUgvnj6`;\\\" x=\\\"7\\\" y=\\\"11\\\">\\n    <field name=\\\"VAR\\\" id=\\\"29Sb;?|S*^5=7MSwO76?\\\" variabletype=\\\"\\\">animal<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"text\\\" id=\\\"%vQ=blu58fbU@V%|C.Tu\\\">\\n        <field name=\\\"TEXT\\\">Name an animal:<\/field>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"variables_set\\\" id=\\\"dU.U?Un6Nhj[YNfL{mIn\\\">\\n        <field name=\\\"VAR\\\" id=\\\"T?YxbURgeNh.!Sn8|}N{\\\" variabletype=\\\"\\\">habitat<\/field>\\n        <value name=\\\"VALUE\\\">\\n          <block type=\\\"text\\\" id=\\\"\/9S9g(o8e\/^87UYe#lY:\\\">\\n            <field name=\\\"TEXT\\\">Habitat:<\/field>\\n          <\/block>\\n        <\/value>\\n        <next>\\n          <block type=\\\"io_print4\\\" id=\\\"}p~_{IO8=5C+(y6j3-5j\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\"~;a?!pj],41e]^N09Z6`\\\">\\n                <field name=\\\"TEXT\\\">The<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"ANY1\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"pc`.n1\/NKoE3A~Z,[@z?\\\">\\n                <field name=\\\"VAR\\\" id=\\\"29Sb;?|S*^5=7MSwO76?\\\" variabletype=\\\"\\\">animal<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"ANY2\\\">\\n              <block type=\\\"text\\\" id=\\\"1@6[g{Qq1+P9xWh;V6yl\\\">\\n                <field name=\\\"TEXT\\\">lives in the<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"ANY3\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"6)LP-u}:;\/C:l@39S+lf\\\">\\n                <field name=\\\"VAR\\\" id=\\\"T?YxbURgeNh.!Sn8|}N{\\\" variabletype=\\\"\\\">habitat<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/next>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"no-ask\"\n    },\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"ans-2\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"29Sb;?|S*^5=7MSwO76?\\\">animal<\/variable>\\n    <variable type=\\\"\\\" id=\\\"T?YxbURgeNh.!Sn8|}N{\\\">habitat<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"#$Z$dpmcRkztUgvnj6`;\\\" x=\\\"10\\\" y=\\\"10\\\">\\n    <field name=\\\"VAR\\\" id=\\\"29Sb;?|S*^5=7MSwO76?\\\" variabletype=\\\"\\\">animal<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"text\\\" id=\\\"%vQ=blu58fbU@V%|C.Tu\\\">\\n        <field name=\\\"TEXT\\\">Name an animal:<\/field>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"variables_set\\\" id=\\\"dU.U?Un6Nhj[YNfL{mIn\\\">\\n        <field name=\\\"VAR\\\" id=\\\"T?YxbURgeNh.!Sn8|}N{\\\" variabletype=\\\"\\\">habitat<\/field>\\n        <value name=\\\"VALUE\\\">\\n          <block type=\\\"text\\\" id=\\\"\/9S9g(o8e\/^87UYe#lY:\\\">\\n            <field name=\\\"TEXT\\\">Habitat:<\/field>\\n          <\/block>\\n        <\/value>\\n        <next>\\n          <block type=\\\"io_print4\\\" id=\\\"}p~_{IO8=5C+(y6j3-5j\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\"~;a?!pj],41e]^N09Z6`\\\">\\n                <field name=\\\"TEXT\\\">The<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"ANY1\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"pc`.n1\/NKoE3A~Z,[@z?\\\">\\n                <field name=\\\"VAR\\\" id=\\\"T?YxbURgeNh.!Sn8|}N{\\\" variabletype=\\\"\\\">habitat<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"ANY2\\\">\\n              <block type=\\\"text\\\" id=\\\"1@6[g{Qq1+P9xWh;V6yl\\\">\\n                <field name=\\\"TEXT\\\">lives in the<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"ANY3\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"6)LP-u}:;\/C:l@39S+lf\\\">\\n                <field name=\\\"VAR\\\" id=\\\"29Sb;?|S*^5=7MSwO76?\\\" variabletype=\\\"\\\">animal<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/next>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"no-ask-swap-var\"\n    },\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"ans-3\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"29Sb;?|S*^5=7MSwO76?\\\">animal<\/variable>\\n    <variable type=\\\"\\\" id=\\\"T?YxbURgeNh.!Sn8|}N{\\\">habitat<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"#$Z$dpmcRkztUgvnj6`;\\\" x=\\\"10\\\" y=\\\"10\\\">\\n    <field name=\\\"VAR\\\" id=\\\"29Sb;?|S*^5=7MSwO76?\\\" variabletype=\\\"\\\">animal<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"io_ask_text\\\" id=\\\"|-Gd(fRm`H!=0q=grrw^\\\">\\n        <value name=\\\"TEXT\\\">\\n          <block type=\\\"text\\\" id=\\\"%vQ=blu58fbU@V%|C.Tu\\\">\\n            <field name=\\\"TEXT\\\">Name an animal:<\/field>\\n          <\/block>\\n        <\/value>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"variables_set\\\" id=\\\"dU.U?Un6Nhj[YNfL{mIn\\\">\\n        <field name=\\\"VAR\\\" id=\\\"T?YxbURgeNh.!Sn8|}N{\\\" variabletype=\\\"\\\">habitat<\/field>\\n        <value name=\\\"VALUE\\\">\\n          <block type=\\\"io_ask_text\\\" id=\\\"Gl:K+sa-u)d(Wfz{Lz,}\\\">\\n            <value name=\\\"TEXT\\\">\\n              <block type=\\\"text\\\" id=\\\"\/9S9g(o8e\/^87UYe#lY:\\\">\\n                <field name=\\\"TEXT\\\">Habitat:<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/value>\\n        <next>\\n          <block type=\\\"io_print4\\\" id=\\\"cx!a@^sEQAF]bir_Zvi{\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\"6pwfSE764e)Hct}q(Rn2\\\">\\n                <field name=\\\"TEXT\\\">The<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"ANY1\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"6)LP-u}:;\/C:l@39S+lf\\\">\\n                <field name=\\\"VAR\\\" id=\\\"29Sb;?|S*^5=7MSwO76?\\\" variabletype=\\\"\\\">animal<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"ANY2\\\">\\n              <block type=\\\"text\\\" id=\\\"1@6[g{Qq1+P9xWh;V6yl\\\">\\n                <field name=\\\"TEXT\\\">lives in the<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"ANY3\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"pc`.n1\/NKoE3A~Z,[@z?\\\">\\n                <field name=\\\"VAR\\\" id=\\\"T?YxbURgeNh.!Sn8|}N{\\\" variabletype=\\\"\\\">habitat<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/next>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"animal-habitat\"\n    },\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"ans-4\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"29Sb;?|S*^5=7MSwO76?\\\">animal<\/variable>\\n    <variable type=\\\"\\\" id=\\\"T?YxbURgeNh.!Sn8|}N{\\\">habitat<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"#$Z$dpmcRkztUgvnj6`;\\\" x=\\\"10\\\" y=\\\"10\\\">\\n    <field name=\\\"VAR\\\" id=\\\"29Sb;?|S*^5=7MSwO76?\\\" variabletype=\\\"\\\">animal<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"io_ask_text\\\" id=\\\"|-Gd(fRm`H!=0q=grrw^\\\">\\n        <value name=\\\"TEXT\\\">\\n          <block type=\\\"text\\\" id=\\\"%vQ=blu58fbU@V%|C.Tu\\\">\\n            <field name=\\\"TEXT\\\">Name an animal:<\/field>\\n          <\/block>\\n        <\/value>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"variables_set\\\" id=\\\"dU.U?Un6Nhj[YNfL{mIn\\\">\\n        <field name=\\\"VAR\\\" id=\\\"T?YxbURgeNh.!Sn8|}N{\\\" variabletype=\\\"\\\">habitat<\/field>\\n        <value name=\\\"VALUE\\\">\\n          <block type=\\\"io_ask_text\\\" id=\\\"Gl:K+sa-u)d(Wfz{Lz,}\\\">\\n            <value name=\\\"TEXT\\\">\\n              <block type=\\\"text\\\" id=\\\"\/9S9g(o8e\/^87UYe#lY:\\\">\\n                <field name=\\\"TEXT\\\">Habitat:<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/value>\\n        <next>\\n          <block type=\\\"io_print3\\\" id=\\\"NGBrxgag!;yPdYm+yA.%\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"6)LP-u}:;\/C:l@39S+lf\\\">\\n                <field name=\\\"VAR\\\" id=\\\"29Sb;?|S*^5=7MSwO76?\\\" variabletype=\\\"\\\">animal<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"ANY1\\\">\\n              <block type=\\\"text\\\" id=\\\"1@6[g{Qq1+P9xWh;V6yl\\\">\\n                <field name=\\\"TEXT\\\">lives in the<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"ANY2\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"pc`.n1\/NKoE3A~Z,[@z?\\\">\\n                <field name=\\\"VAR\\\" id=\\\"T?YxbURgeNh.!Sn8|}N{\\\" variabletype=\\\"\\\">habitat<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/next>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"wrong-print\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 2\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nAll of the incorrect answers are common mistakes made by students. \n\nWhen checking student code, always make sure that:\n\n* There is an <bk class=\"str\">ask<\/bk> block when asking the user a question\n* make sure the <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk> of the variable is correct\n* there is the right number of <bk class=\"io\">print<\/bk> holes."
    },
    {
      "language":20,
      "title":"Structural features",
      "notes":"#markdown\nRemember that structural adaptations are physical features that help an animal survive in its habitat.",
      "updated_at":"2018-03-06T00:26:06.302616+00:00",
      "label":"aca-choices-bio-structural-feature",
      "content":"#markdown\n\n\n## A *structural feature* of an animal is...",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":1},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nThe way it behaves\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nA physical feature\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nA characteristic\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nThe way an animal survives\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"#markdown\\n\\nThe way it behaves\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"behaviour\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nA physical feature\",\n      \"is_correct\": true,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"Physical feature\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nA characteristic\",\n      \"is_correct\": false,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"chacteristic\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nThe way an animal survives\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"survival\"\n    }\n  ],\n  \"answers\": [\n    \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 1\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":""
    },
    {
      "language":0,
      "title":"Desert survival",
      "notes":"#markdown\nThis question requires us to create *two* variables from the user:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"RxAS1L+i1O`;DYqxO%Nb\">feature<\/variable>\n    <variable type=\"\" id=\":UAUH0dnG`Jz}Dqm@Qf=\">animal<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"AGfMo,yy6)\/~V,KOEEK(\" x=\"10\" y=\"8\">\n    <field name=\"VAR\" id=\":UAUH0dnG`Jz}Dqm@Qf=\" variabletype=\"\">animal<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"fJ75q3}4H?@.0Aw)OVIX\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"\/`kAVmE%SsQ#8bO~2xyM\">\n            <field name=\"TEXT\">What is the living thing?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"zVtbXh`+*Sc`QI0xU-NL\">\n        <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">feature<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"*G8Ioxn:^G{w2*\/|xO2-\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"b77v-X|R0~wd|p~Eb|C5\">\n                <field name=\"TEXT\">What feature helps it survive?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\nOnce we have gotten information from the user, we can print out the desired result!\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"RxAS1L+i1O`;DYqxO%Nb\">feature<\/variable>\n    <variable type=\"\" id=\":UAUH0dnG`Jz}Dqm@Qf=\">animal<\/variable>\n  <\/variables>\n  <block type=\"io_print3\" id=\"{B9ivbtRRtLqN*XXy^H!\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"4Q]hsRMxk:I|-[4%e+z-\">\n        <field name=\"TEXT\">The<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"variables_get\" id=\"cnBl*aDz]S!;?Qo-i)EP\">\n        <field name=\"VAR\" id=\":UAUH0dnG`Jz}Dqm@Qf=\" variabletype=\"\">animal<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"text\" id=\"m,V)jNsXFq56::{cWkk;\">\n        <field name=\"TEXT\">lives in the desert.<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print2\" id=\"uA_TdC}WZCQh.Gv[#bSE\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"ahCcv$gHr\/k)#nm;-9K#\">\n            <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">feature<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"text\" id=\"66?Ihn=c3rAILudi@\/lJ\">\n            <field name=\"TEXT\">helps it survive.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nCombine the two for the final answer!",
      "updated_at":"2018-03-06T00:17:14.829634+00:00",
      "label":"aca-bk-bio-desert-survivial",
      "content":"#markdown\nIn harsh environments, plants and animals have developed lots of different structural features to help them survive.\n\nPart of your assignment is to list what types of animals are in the **desert** and what features have helped them adapt. \n\nWrite a program that asks for the *animal*, and the *feature* prints out how it helps them survive.\n\nHere is an example:\n\n```lang:py3;terminal;eg:none;\nWhat is the living thing? @@@cactus\nWhat feature helps it survive? @@@Storing water\nThe cactus lives in the desert.\nStoring water helps it survive.\n\n```\n\nHere's another example, the thorny devil has impervious skin to help it survive in the desert (that means it doesn't lose any water via its skin):\n\n```lang:py3;terminal;eg:none;\nWhat is the living thing? @@@thorny devil\nWhat feature helps it survive? @@@Impervious skin\nThe thorny devil lives in the desert.\nImpervious skin helps it survive.\n\n```\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print2\",\"io_print3\",\"io_ask_text\"]",
      "teacher_notes":"#markdown\nThis question requires us to create *two* variables from the user:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"RxAS1L+i1O`;DYqxO%Nb\">feature<\/variable>\n    <variable type=\"\" id=\":UAUH0dnG`Jz}Dqm@Qf=\">animal<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"AGfMo,yy6)\/~V,KOEEK(\" x=\"10\" y=\"8\">\n    <field name=\"VAR\" id=\":UAUH0dnG`Jz}Dqm@Qf=\" variabletype=\"\">animal<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"fJ75q3}4H?@.0Aw)OVIX\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"\/`kAVmE%SsQ#8bO~2xyM\">\n            <field name=\"TEXT\">What is the living thing?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"zVtbXh`+*Sc`QI0xU-NL\">\n        <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">feature<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"*G8Ioxn:^G{w2*\/|xO2-\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"b77v-X|R0~wd|p~Eb|C5\">\n                <field name=\"TEXT\">What feature helps it survive?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\nOnce we have gotten information from the user, we can print out the desired result!\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"RxAS1L+i1O`;DYqxO%Nb\">feature<\/variable>\n    <variable type=\"\" id=\":UAUH0dnG`Jz}Dqm@Qf=\">animal<\/variable>\n  <\/variables>\n  <block type=\"io_print3\" id=\"{B9ivbtRRtLqN*XXy^H!\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"4Q]hsRMxk:I|-[4%e+z-\">\n        <field name=\"TEXT\">The<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"variables_get\" id=\"cnBl*aDz]S!;?Qo-i)EP\">\n        <field name=\"VAR\" id=\":UAUH0dnG`Jz}Dqm@Qf=\" variabletype=\"\">animal<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"text\" id=\"m,V)jNsXFq56::{cWkk;\">\n        <field name=\"TEXT\">lives in the desert.<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print2\" id=\"uA_TdC}WZCQh.Gv[#bSE\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"ahCcv$gHr\/k)#nm;-9K#\">\n            <field name=\"VAR\" id=\"RxAS1L+i1O`;DYqxO%Nb\" variabletype=\"\">feature<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"text\" id=\"66?Ihn=c3rAILudi@\/lJ\">\n            <field name=\"TEXT\">helps it survive.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nCombine the two for the final answer!"
    },
    {
      "language":0,
      "title":"Surviving in different habitats",
      "notes":"#markdown\nThis question requires us to create *three* variables from the user:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"FeB@L!qDccy-}yHC)C=z\">feature 1<\/variable>\n    <variable type=\"\" id=\"{]9q9g;sZCN(vAx$1m^K\">feature 2<\/variable>\n    <variable type=\"\" id=\"h)gm`{F]Brn!MracMo8g\">habitat<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"nM+z64p\/GV$C8r~VsQs=\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"h)gm`{F]Brn!MracMo8g\" variabletype=\"\">habitat<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"v?O!.CF`@9_s5}k*h~4c\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\".`\/3(D~`VtJA23ifCZhK\">\n            <field name=\"TEXT\">Habitat?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"K$lrUcmE~_-M2X)V(Cc9\">\n        <field name=\"VAR\" id=\"FeB@L!qDccy-}yHC)C=z\" variabletype=\"\">feature 1<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"mW(^(M?#g2TW5z;WmU(i\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"POh0bE_]\/Y_VBPvInF+k\">\n                <field name=\"TEXT\">What is feature 1?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"s^NzPYk,-aQ}7S):kkhO\">\n            <field name=\"VAR\" id=\"{]9q9g;sZCN(vAx$1m^K\" variabletype=\"\">feature 2<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\"BXJ?g4efGmAg1:5OzJtO\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\"^4Y!@u?yxH=~gvor\/Rds\">\n                    <field name=\"TEXT\">What is feature 2?<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nOnce we have gotten information from the user, we can print out the desired result!\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"FeB@L!qDccy-}yHC)B=z\">feature 1<\/variable>\n    <variable type=\"\" id=\"{]9q9g;sZCN(vAD$1m^K\">feature 2<\/variable>\n    <variable type=\"\" id=\"h)gm`{F]Brn!Mr,cMo8g\">habitat<\/variable>\n  <\/variables>\n  <block type=\"io_print5\" id=\"OV8~v(rskku|X];1S*kD\">\n    <value name=\"ANY0\">\n      <block type=\"variables_get\" id=\"{o~a:keF7Ql+c{zOJ`Rx\">\n        <field name=\"VAR\" id=\"FeB@L!qDccy-}yHC)B=z\" variabletype=\"\">feature 1<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"text\" id=\"YJkCc^l06~J.cTnu)ym@\">\n        <field name=\"TEXT\">and<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"variables_get\" id=\"a*j@:sw.5t]1buQS}4T7\">\n        <field name=\"VAR\" id=\"{]9q9g;sZCN(vAD$1m^K\" variabletype=\"\">feature 2<\/field>\n          <\/block>\n        <\/value>\n      <value name=\"ANY3\">\n        <block type=\"text\" id=\".{b*C,UKdOD_8~1:E3K;\">\n          <field name=\"TEXT\">helps species survive in the<\/field>\n        <\/block>\n      <\/value>\n      <value name=\"ANY4\">\n        <block type=\"variables_get\" id=\"2z+K-Gp(J%.|-+XRuW-=\">\n          <field name=\"VAR\" id=\"h)gm`{F]Brn!Mr,cMo8g\" variabletype=\"\">habitat<\/field>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/block>\n<\/xml>\n```\n\nCombine the two for the final answer!",
      "updated_at":"2018-03-29T03:32:26.005460+00:00",
      "label":"aca-bk-bio-habitat-survival",
      "content":"#markdown\nThere are many different habitats that plants and animals live in. Some survive underwater, others live in rainforests, and everywhere in between!\n\nWrite a program to take in a habitat and *two* common features, from a user, that plants and animals use to survive in that habitat.\n\nHere is an example, where having gills and fins help creatures survive in the sea:\n\n```lang:py3;terminal;eg:none;\nHabitat? @@@sea\nWhat is feature 1? @@@Gills\nWhat is feature 2? @@@fins\nGills and fins helps species survive in the sea\n\n```\n\nHere's another example of Camoflage and Nocturnality (creatures sleeping during the day and being awake at night) being features that are often used to help animals survive in the rainforest.\n\n```lang:py3;terminal;eg:none;\nHabitat? @@@rainforest\nWhat is feature 1? @@@Camoflage\nWhat is feature 2? @@@nocturnality\nCamoflage and nocturnality helps species survive in the rainforest\n\n```\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print3\",\"io_print4\",\"io_print5\",\"io_ask_text\"]",
      "teacher_notes":"#markdown\nThis question requires us to create *three* variables from the user:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"FeB@L!qDccy-}yHC)C=z\">feature 1<\/variable>\n    <variable type=\"\" id=\"{]9q9g;sZCN(vAx$1m^K\">feature 2<\/variable>\n    <variable type=\"\" id=\"h)gm`{F]Brn!MracMo8g\">habitat<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"nM+z64p\/GV$C8r~VsQs=\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"h)gm`{F]Brn!MracMo8g\" variabletype=\"\">habitat<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"v?O!.CF`@9_s5}k*h~4c\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\".`\/3(D~`VtJA23ifCZhK\">\n            <field name=\"TEXT\">Habitat?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"K$lrUcmE~_-M2X)V(Cc9\">\n        <field name=\"VAR\" id=\"FeB@L!qDccy-}yHC)C=z\" variabletype=\"\">feature 1<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"mW(^(M?#g2TW5z;WmU(i\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"POh0bE_]\/Y_VBPvInF+k\">\n                <field name=\"TEXT\">What is feature 1?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"s^NzPYk,-aQ}7S):kkhO\">\n            <field name=\"VAR\" id=\"{]9q9g;sZCN(vAx$1m^K\" variabletype=\"\">feature 2<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\"BXJ?g4efGmAg1:5OzJtO\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\"^4Y!@u?yxH=~gvor\/Rds\">\n                    <field name=\"TEXT\">What is feature 2?<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nOnce we have gotten information from the user, we can print out the desired result!\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"FeB@L!qDccy-}yHC)B=z\">feature 1<\/variable>\n    <variable type=\"\" id=\"{]9q9g;sZCN(vAD$1m^K\">feature 2<\/variable>\n    <variable type=\"\" id=\"h)gm`{F]Brn!Mr,cMo8g\">habitat<\/variable>\n  <\/variables>\n  <block type=\"io_print5\" id=\"OV8~v(rskku|X];1S*kD\">\n    <value name=\"ANY0\">\n      <block type=\"variables_get\" id=\"{o~a:keF7Ql+c{zOJ`Rx\">\n        <field name=\"VAR\" id=\"FeB@L!qDccy-}yHC)B=z\" variabletype=\"\">feature 1<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"text\" id=\"YJkCc^l06~J.cTnu)ym@\">\n        <field name=\"TEXT\">and<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"variables_get\" id=\"a*j@:sw.5t]1buQS}4T7\">\n        <field name=\"VAR\" id=\"{]9q9g;sZCN(vAD$1m^K\" variabletype=\"\">feature 2<\/field>\n          <\/block>\n        <\/value>\n      <value name=\"ANY3\">\n        <block type=\"text\" id=\".{b*C,UKdOD_8~1:E3K;\">\n          <field name=\"TEXT\">helps species survive in the<\/field>\n        <\/block>\n      <\/value>\n      <value name=\"ANY4\">\n        <block type=\"variables_get\" id=\"2z+K-Gp(J%.|-+XRuW-=\">\n          <field name=\"VAR\" id=\"h)gm`{F]Brn!Mr,cMo8g\" variabletype=\"\">habitat<\/field>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/block>\n<\/xml>\n```\n\nCombine the two for the final answer!"
    },
    {
      "language":0,
      "title":"What we saw at the zoo",
      "notes":"#markdown\n\n<p>Here, the first step is to <bk class=\"str\">ask<\/bk> what we saw:<\/p>\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"#{.d]z9T(4an79;VtWG{\">animal<\/variable>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n    <variable type=\"\" id=\"{znN@=LcIfZEx!{T)ozv\">things<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\")lO%V=UKEnDpT^~p8ny:\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"{znN@=LcIfZEx!{T)ozv\" variabletype=\"\">things<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"yhHcEc.Jn+q[}rBB7hh(\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"%J*a(:tP*Be.{a.j,LPx\">\n            <field name=\"TEXT\">What did we see?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\n<p>\n  This prints out <code data-lang=\"out\">What did we see? <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <code data-lang=\"py3\">things<\/code>.\n<\/p>\n\n\nNext we need a triple print block:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print3\" id=\"|}XFk~jSyhD#y[AH`=z\/\" x=\"10\" y=\"10\"><\/block>\n<\/xml>\n```\nThe next step is to populate it with our message, putting the `things` variable in the middle.\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"{znN@=LcIfZEx!{T)ozv\">things<\/variable>\n  <\/variables>\n  <block type=\"io_print3\" id=\"|}XFk~jSyhD#y[AH`=z\/\" x=\"7\" y=\"14\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"Z.kCS9|v24tWAmUpk-`a\">\n        <field name=\"TEXT\">We saw<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"variables_get\" id=\"MLU+C5C2YY$eTwO+_,rV\">\n        <field name=\"VAR\" id=\"{znN@=LcIfZEx!{T)ozv\" variabletype=\"\">things<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"text\" id=\"Ww3[svS]-su|$ylFd40M\">\n        <field name=\"TEXT\">at the zoo!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n",
      "updated_at":"2018-03-06T00:14:46.780729+00:00",
      "label":"aca-bk-bio-join-strings-zoo",
      "content":"#markdown\nThere are lots of different things to see at the zoo and you want to remember all the things you saw! Write a program that prints out a sentence you can copy and paste into your diary for any of the things you saw.\n\n```eg:none;terminal\nWhat did we see? @@@elephants\nWe saw elephants at the zoo!\n\n```\n\nYour program should work with anything!\n\n```eg:none;terminal\nWhat did we see? @@@wombats\nWe saw wombats at the zoo!\n\n```\n\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "variables"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print2\",\"io_print3\",\"io_ask_text\"]",
      "teacher_notes":"#markdown\n\n<p>Here, the first step is to <bk class=\"str\">ask<\/bk> what we saw:<\/p>\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"#{.d]z9T(4an79;VtWG{\">animal<\/variable>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n    <variable type=\"\" id=\"{znN@=LcIfZEx!{T)ozv\">things<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\")lO%V=UKEnDpT^~p8ny:\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"{znN@=LcIfZEx!{T)ozv\" variabletype=\"\">things<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"yhHcEc.Jn+q[}rBB7hh(\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"%J*a(:tP*Be.{a.j,LPx\">\n            <field name=\"TEXT\">What did we see?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\n<p>\n  This prints out <code data-lang=\"out\">What did we see? <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <code data-lang=\"py3\">things<\/code>.\n<\/p>\n\n\nNext we need a triple print block:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print3\" id=\"|}XFk~jSyhD#y[AH`=z\/\" x=\"10\" y=\"10\"><\/block>\n<\/xml>\n```\nThe next step is to populate it with our message, putting the `things` variable in the middle.\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"{znN@=LcIfZEx!{T)ozv\">things<\/variable>\n  <\/variables>\n  <block type=\"io_print3\" id=\"|}XFk~jSyhD#y[AH`=z\/\" x=\"7\" y=\"14\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"Z.kCS9|v24tWAmUpk-`a\">\n        <field name=\"TEXT\">We saw<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"variables_get\" id=\"MLU+C5C2YY$eTwO+_,rV\">\n        <field name=\"VAR\" id=\"{znN@=LcIfZEx!{T)ozv\" variabletype=\"\">things<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"text\" id=\"Ww3[svS]-su|$ylFd40M\">\n        <field name=\"TEXT\">at the zoo!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n"
    },
    {
      "language":0,
      "title":"The animal is...",
      "notes":"#markdown\nThis solution is very similar to the discussion of <bk class=\"str\">ask<\/bk> in the notes.\n\n\nHere, the first step is to use the <bk class=\"str\">ask<\/bk> function to ask for the animal, and store it in a variable <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk>:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"#{.d]z9T(4an79;VtWG{\">animal<\/variable>\n    <variable type=\"\" id=\"{znN@=LcIfZEx!{T)ozv\">cell wall<\/variable>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\")lO%V=UKEnDpT^~p8ny:\" x=\"9\" y=\"9\">\n    <field name=\"VAR\" id=\"#{.d]z9T(4an79;VtWG{\" variabletype=\"\">animal<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"yhHcEc.Jn+q[}rBB7hh(\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"%J*a(:tP*Be.{a.j,LPx\">\n            <field name=\"TEXT\">Animal:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThis prints out `lang:out;Animal: ` and waits for the user to type something in. Once they have, it is saved in the variable <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> .\n\nThe second step was to print out `lang:out;The animal you wrote was: ` using the animal's name. To do this we need a *double print* block. You can see it in the final solution:\n\n",
      "updated_at":"2018-03-06T00:13:34.465057+00:00",
      "label":"aca-bk-bio-the-animal-is",
      "content":"#markdown\nWrite a program to take an input species, and say it back to us:\n\n```lang:py3;eg:none;terminal\nAnimal: @@@human\nThe animal you wrote was: human\n```\n\nYour program should work with any animal name:\n\n```lang:py3;eg:none;terminal\nAnimal: @@@pig\nThe animal you wrote was: pig\n```\n\nWhen you run your program, it should wait for you to type in the animal name, using <bk class=\"str\">ask<\/bk>, then use the same name that the user typed in when printing the message.\n\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "variables"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print2\",\"io_ask_text\"]",
      "teacher_notes":"#markdown\nThis solution is very similar to the discussion of <bk class=\"str\">ask<\/bk> in the notes.\n\n\nHere, the first step is to use the <bk class=\"str\">ask<\/bk> function to ask for the animal, and store it in a variable <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk>:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"#{.d]z9T(4an79;VtWG{\">animal<\/variable>\n    <variable type=\"\" id=\"{znN@=LcIfZEx!{T)ozv\">cell wall<\/variable>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\")lO%V=UKEnDpT^~p8ny:\" x=\"9\" y=\"9\">\n    <field name=\"VAR\" id=\"#{.d]z9T(4an79;VtWG{\" variabletype=\"\">animal<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"yhHcEc.Jn+q[}rBB7hh(\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"%J*a(:tP*Be.{a.j,LPx\">\n            <field name=\"TEXT\">Animal:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThis prints out `lang:out;Animal: ` and waits for the user to type something in. Once they have, it is saved in the variable <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> .\n\nThe second step was to print out `lang:out;The animal you wrote was: ` using the animal's name. To do this we need a *double print* block. You can see it in the final solution:\n"
    },
    {
      "language":0,
      "title":"Lyrebird mimic",
      "notes":"#markdown\nThis solution is very similar to the discussion of <bk class=\"str\">ask<\/bk> in the notes.\n\nHere, the first step is to create a new variable, <bk class=\"var\"><bk class=\"inner\">sound<\/bk><\/bk> inside the Variables tab.\n\nWe then use the <bk class=\"str\">ask<\/bk> block inside a <bk class=\"var\">set <bk class=\"inner\">sound<\/bk><\/bk> block to ask for the sound to repeat:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"F{I%ot(wc04O+~96S1!|\">sound<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"CnQ$=+]E]NpZZFg02elQ\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"F{I%ot(wc04O+~96S1!|\" variabletype=\"\">sound<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\")-Fn*NUEzw2VP7E?%#pH\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"]NYWzAojtlPS|=5!8\/_#\">\n            <field name=\"TEXT\">What sound do you want to make?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThis prints out <code data-lang=\"out\">What sound do you want to make? <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <bk class=\"var\"><bk class=\"inner\">sound<\/bk><\/bk>.\n\nThe second step was to print out exactly what was typed. To do this you needed to <bk class=\"io\">print<\/bk> out whatever was read in from the user.\n\n<p>Try running this to see how we built it up:<\/p>\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"F{I%ot(wc04O+~96S1!|\">sound<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"CnQ$=+]E]NpZZFg02elQ\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"F{I%ot(wc04O+~96S1!|\" variabletype=\"\">sound<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"]NYWzAojtlPS|=5!8\/_#\">\n        <field name=\"TEXT\">Squawk!<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"A|g`?4tj]](68\/,6;QU-\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"[|3(Zg5jq|!_udg2GC:F\">\n            <field name=\"VAR\" id=\"F{I%ot(wc04O+~96S1!|\" variabletype=\"\">sound<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nAnd that's it! So we can just piece these two steps together to form the final solution.\n\n",
      "updated_at":"2018-03-06T00:06:05.543064+00:00",
      "label":"aca-bk-bio-lyrebird-echo",
      "content":"#markdown\n\nThe [Lyrebird](https:\/\/en.wikipedia.org\/wiki\/Lyrebird) is an Australian bird that has the ability to mimic sounds it hears in its environment. It can mimic not only natural sounds but artifical ones too! It's also on the 10c coin.\n\n![Photo by Leon Wilson [CC-BY-2.0](https:\/\/creativecommons.org\/licenses\/by\/2.0\/)](https:\/\/groklearning-cdn.com\/problems\/rZYQ9vviu77fVsUR5FJ755\/lyrebird.jpg)\n\nWrite a program that simulates the lyrebird's mimic ability. You need to get input from the user and print back exactly what the user entered.\n\nYou are going to need a <bk class=\"var\"><bk class=\"inner\">variable<\/bk><\/bk> to store the words, an <bk class=\"str\">ask<\/bk> block to get the words from the user and a <bk class=\"io\">print<\/bk> block to make it appear on the screen.\n\n```eg:none;terminal\nWhat sound do you want to make? @@@Squawk!\nSquawk!\n\n```\n\nYour program should work with anything the user types:\n\n```eg:none;terminal\nWhat sound do you want to make? @@@Blurrgh!\nBlurrgh!\n\n```\n> ## Hint\n> Make sure you give <bk class=\"str\">ask<\/bk> the same prompt question that is used in the example above.",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_ask_text\"]",
      "teacher_notes":"#markdown\nThis solution is very similar to the discussion of <bk class=\"str\">ask<\/bk> in the notes.\n\nHere, the first step is to create a new variable, <bk class=\"var\"><bk class=\"inner\">sound<\/bk><\/bk> inside the Variables tab.\n\nWe then use the <bk class=\"str\">ask<\/bk> block inside a <bk class=\"var\">set <bk class=\"inner\">sound<\/bk><\/bk> block to ask for the sound to repeat:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"F{I%ot(wc04O+~96S1!|\">sound<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"CnQ$=+]E]NpZZFg02elQ\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"F{I%ot(wc04O+~96S1!|\" variabletype=\"\">sound<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\")-Fn*NUEzw2VP7E?%#pH\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"]NYWzAojtlPS|=5!8\/_#\">\n            <field name=\"TEXT\">What sound do you want to make?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThis prints out <code data-lang=\"out\">What sound do you want to make? <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <bk class=\"var\"><bk class=\"inner\">sound<\/bk><\/bk>.\n\nThe second step was to print out exactly what was typed. To do this you needed to <bk class=\"io\">print<\/bk> out whatever was read in from the user.\n\n<p>Try running this to see how we built it up:<\/p>\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"F{I%ot(wc04O+~96S1!|\">sound<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"CnQ$=+]E]NpZZFg02elQ\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"F{I%ot(wc04O+~96S1!|\" variabletype=\"\">sound<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"]NYWzAojtlPS|=5!8\/_#\">\n        <field name=\"TEXT\">Squawk!<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"A|g`?4tj]](68\/,6;QU-\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"[|3(Zg5jq|!_udg2GC:F\">\n            <field name=\"VAR\" id=\"F{I%ot(wc04O+~96S1!|\" variabletype=\"\">sound<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nAnd that's it! So we can just piece these two steps together to form the final solution."
    },
    {
      "language":20,
      "title":"Animal features",
      "notes":"#markdown\nExcellent! The features of each animal have been shown on the cards, and this table provides an easy to see summary of the ones that are common or distinct between animals.\n\n![Solution](https:\/\/groklearning-cdn.com\/problems\/QQUopmP74m5PnBeve6UMZb\/yr5_matrix_solution.png)\n\nRight-click, save image as to save it to use it in the next problem!",
      "updated_at":"2018-03-06T01:30:15.618606+00:00",
      "label":"aca-choices-bio-classification-matrix-mini-year5",
      "content":"#markdown\n\n## Using the information provided in the [set of trading cards](https:\/\/aca.edu.au\/public\/resources\/classifier-blockly.pdf), identify the features of each animal that will be used for identification.\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":2,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":2},\\\"boolean_table\\\":{\\\"columns\\\":[{\\\"name\\\":\\\"Fur\\\",\\\"uuid\\\":\\\"50048478-a425-46c4-b4a9-0ebe3504def4\\\"},{\\\"name\\\":\\\"Eggs\\\",\\\"uuid\\\":\\\"6f4e61e6-dde8-4fb2-bada-1a5d93d96b75\\\"},{\\\"name\\\":\\\"Claws\\\",\\\"uuid\\\":\\\"0bec5744-73c3-484f-bb82-247aa8853a1f\\\"},{\\\"name\\\":\\\"Scales\\\",\\\"uuid\\\":\\\"025bb1a2-a518-4849-9789-052d41c7d550\\\"},{\\\"name\\\":\\\"Spikes\\\",\\\"uuid\\\":\\\"ae9d0ee9-67af-4435-847d-3341ba085376\\\"}],\\\"rows\\\":[{\\\"uuid\\\":\\\"cbbe2312-4f57-44cc-bd6f-9a86dd0ec227\\\",\\\"name\\\":\\\"Koala\\\"},{\\\"uuid\\\":\\\"e4ebec0f-036b-4fae-92a4-ca2019edfcd9\\\",\\\"name\\\":\\\"Short-beaked echidna\\\"},{\\\"uuid\\\":\\\"bc0af7d6-3b3b-4b52-a909-71a4b171c53e\\\",\\\"name\\\":\\\"Eastern blue-tongue\\\"},{\\\"uuid\\\":\\\"38c268d2-9acd-4365-9dc5-21988d21fe09\\\",\\\"name\\\":\\\"Laughing kookaburra\\\"}]}}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"rows\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"{\n  \"type\": 2,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [],\n  \"answers\": [],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 2\n  },\n  \"boolean_table\": {\n    \"rows\": [\n      {\n        \"values\": [\n          true,\n          false,\n          true,\n          false,\n          false\n        ],\n        \"name\": \"Koala\",\n        \"uuid\": \"cbbe2312-4f57-44cc-bd6f-9a86dd0ec227\"\n      },\n      {\n        \"values\": [\n          true,\n          true,\n          true,\n          false,\n          true\n        ],\n        \"name\": \"Short-beaked echidna\",\n        \"uuid\": \"e4ebec0f-036b-4fae-92a4-ca2019edfcd9\"\n      },\n      {\n        \"values\": [\n          false,\n          true,\n          true,\n          true,\n          false\n        ],\n        \"name\": \"Eastern blue-tongue\",\n        \"uuid\": \"bc0af7d6-3b3b-4b52-a909-71a4b171c53e\"\n      },\n      {\n        \"values\": [\n          false,\n          true,\n          true,\n          false,\n          false\n        ],\n        \"name\": \"Laughing kookaburra\",\n        \"uuid\": \"38c268d2-9acd-4365-9dc5-21988d21fe09\"\n      }\n    ],\n    \"columns\": [\n      {\n        \"name\": \"Fur\",\n        \"uuid\": \"50048478-a425-46c4-b4a9-0ebe3504def4\"\n      },\n      {\n        \"name\": \"Eggs\",\n        \"uuid\": \"6f4e61e6-dde8-4fb2-bada-1a5d93d96b75\"\n      },\n      {\n        \"name\": \"Claws\",\n        \"uuid\": \"0bec5744-73c3-484f-bb82-247aa8853a1f\"\n      },\n      {\n        \"name\": \"Scales\",\n        \"uuid\": \"025bb1a2-a518-4849-9789-052d41c7d550\"\n      },\n      {\n        \"name\": \"Spikes\",\n        \"uuid\": \"ae9d0ee9-67af-4435-847d-3341ba085376\"\n      }\n    ]\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nA correct answer on this question gives students a simple, table reference (another representation of the data from the cards) they can use to construct the algorithm they'll use for their classifier.\n\n![Solution](https:\/\/groklearning-cdn.com\/problems\/QQUopmP74m5PnBeve6UMZb\/yr5_matrix_solution.png)\n\nRight-click, save image as to save it to use it in the next problem!\n\nThey should be able to identify features that can be used for their if-else blocks."
    },
    {
      "language":0,
      "title":"Biology classifier",
      "notes":"#markdown\n\nThe sample solution shows the alorithm you would use to evenly split the animals in half at each branch in your algorithm. The only feature that splits them into two pairs at the first step is whether or not the animal has Fur, so that should be our first question and condition:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\";OD,Sb8F]3uSh+l@4bTO\">fur<\/variable>\n    <variable type=\"\" id=\"1rauM{BiS2+YeZ8.j,+z\">scales<\/variable>\n    <variable type=\"\" id=\"o8(8f,!YL7FS$N1cS#]F\">spikes<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"BiM2PI?sbP7=WChMU~KN\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\";OD,Sb8F]3uSh+l@4bTO\" variabletype=\"\">fur<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"97nt9{]U2XPA@Kvz\/@}o\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"Z_Uk-REXb3R{X#$MJS4R\">\n            <field name=\"TEXT\">Fur:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"dF}Al_yn0qUMQP9AXH?R\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"h_HM\/67\/`]Uy[q=Q2{6)\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"miff]!EEia`8DhSO:3cn\">\n                <field name=\"VAR\" id=\";OD,Sb8F]3uSh+l@4bTO\" variabletype=\"\">fur<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"5nGR.b)A?QXEHr,-lQu8\">\n                <field name=\"TEXT\">y<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nNote that we use the <bk class=\"control\">if else<\/bk> block because there will be different instructions if the animal does not have fur.\n\nThe animals with fur are the koala and the short-beaked echidna, so now we need a feature that separates those. Since the echidna has spikes but the koala doesn't, we use that to identify each animal:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\";OD,Sb8F]3uSh+l@4bTO\">fur<\/variable>\n    <variable type=\"\" id=\"1rauM{BiS2+YeZ8.j,+z\">scales<\/variable>\n    <variable type=\"\" id=\"o8(8f,!YL7FS$N1cS#]F\">spikes<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"BiM2PI?sbP7=WChMU~KN\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\";OD,Sb8F]3uSh+l@4bTO\" variabletype=\"\">fur<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"97nt9{]U2XPA@Kvz\/@}o\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"Z_Uk-REXb3R{X#$MJS4R\">\n            <field name=\"TEXT\">Fur:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"dF}Al_yn0qUMQP9AXH?R\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"h_HM\/67\/`]Uy[q=Q2{6)\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"miff]!EEia`8DhSO:3cn\">\n                <field name=\"VAR\" id=\";OD,Sb8F]3uSh+l@4bTO\" variabletype=\"\">fur<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"5nGR.b)A?QXEHr,-lQu8\">\n                <field name=\"TEXT\">y<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"variables_set\" id=\"BfV*UQV5Ji!*giq38[v(\">\n            <field name=\"VAR\" id=\"o8(8f,!YL7FS$N1cS#]F\" variabletype=\"\">spikes<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\"5dE5fT1:i$y_?W7`Qo6I\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\"9`g:,:kcD%U@(!+EyR-l\">\n                    <field name=\"TEXT\">Spikes:<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"decisions_if_else\" id=\"86I%%b*Vv3%R8s:AJ@-5\">\n                <value name=\"IF0\">\n                  <block type=\"logic_compare\" id=\"X9PshHeUj7cWDn~IR)86\">\n                    <field name=\"OP\">EQ<\/field>\n                    <value name=\"A\">\n                      <block type=\"variables_get\" id=\"UyLf`dgfAjp]8z=R}:r5\">\n                        <field name=\"VAR\" id=\"o8(8f,!YL7FS$N1cS#]F\" variabletype=\"\">spikes<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"B\">\n                      <block type=\"text\" id=\"]cTp_xKm5kw?6I{JKr:*\">\n                        <field name=\"TEXT\">y<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <statement name=\"DO0\">\n                  <block type=\"io_print1\" id=\")Uar(4N62ZtN)!BIXFM!\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"\/;r2s2[*LcipE+aeq@`Y\">\n                        <field name=\"TEXT\">The species is short-beaked echidna.<\/field>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print1\" id=\"-bJP*A,MGx7\/2vs(R=2e\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"T}HxI17X(0Jpd](VvP+O\">\n                            <field name=\"TEXT\">It lives in bushland.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/statement>\n                <statement name=\"ELSE\">\n                  <block type=\"io_print1\" id=\"!K8Hmvh;kBbNVuk6.EV0\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"TSCYxqs|E.M8V,?Q=-)a\">\n                        <field name=\"TEXT\">The species is koala.<\/field>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print1\" id=\"e6t+j{$()-h.wrD.t-eB\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"3ed}?xJe(Q;Y4h}N_uY^\">\n                            <field name=\"TEXT\">It lives in bushland.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/statement>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nWe need two <bk class=\"io\">print<\/bk> blocks because we are printing the common name and the habitat outputs on separate lines.\n\nWe then need to deal with our remaining animals - the laughing kookaburra and the eastern blue-tongue - in the <bk class=\"control\">else<\/bk> part fo the block from the first question. The distinguishing feature for them is that the eastern blue-tongue has scales:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\";OD,Sb8F]3uSh+l@4bTO\">fur<\/variable>\n    <variable type=\"\" id=\"1rauM{BiS2+YeZ8.j,+z\">scales<\/variable>\n    <variable type=\"\" id=\"o8(8f,!YL7FS$N1cS#]F\">spikes<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"BiM2PI?sbP7=WChMU~KN\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\";OD,Sb8F]3uSh+l@4bTO\" variabletype=\"\">fur<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"97nt9{]U2XPA@Kvz\/@}o\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"Z_Uk-REXb3R{X#$MJS4R\">\n            <field name=\"TEXT\">Fur:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"dF}Al_yn0qUMQP9AXH?R\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"h_HM\/67\/`]Uy[q=Q2{6)\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"miff]!EEia`8DhSO:3cn\">\n                <field name=\"VAR\" id=\";OD,Sb8F]3uSh+l@4bTO\" variabletype=\"\">fur<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"5nGR.b)A?QXEHr,-lQu8\">\n                <field name=\"TEXT\">y<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"variables_set\" id=\"BfV*UQV5Ji!*giq38[v(\">\n            <field name=\"VAR\" id=\"o8(8f,!YL7FS$N1cS#]F\" variabletype=\"\">spikes<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\"5dE5fT1:i$y_?W7`Qo6I\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\"9`g:,:kcD%U@(!+EyR-l\">\n                    <field name=\"TEXT\">Spikes:<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"decisions_if_else\" id=\"86I%%b*Vv3%R8s:AJ@-5\">\n                <value name=\"IF0\">\n                  <block type=\"logic_compare\" id=\"X9PshHeUj7cWDn~IR)86\">\n                    <field name=\"OP\">EQ<\/field>\n                    <value name=\"A\">\n                      <block type=\"variables_get\" id=\"UyLf`dgfAjp]8z=R}:r5\">\n                        <field name=\"VAR\" id=\"o8(8f,!YL7FS$N1cS#]F\" variabletype=\"\">spikes<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"B\">\n                      <block type=\"text\" id=\"]cTp_xKm5kw?6I{JKr:*\">\n                        <field name=\"TEXT\">y<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <statement name=\"DO0\">\n                  <block type=\"io_print1\" id=\")Uar(4N62ZtN)!BIXFM!\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"\/;r2s2[*LcipE+aeq@`Y\">\n                        <field name=\"TEXT\">The species is short-beaked echidna.<\/field>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print1\" id=\".IUdip]~xJ}#B)(ld4RC\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"YA+5[kRQ2;TmN@s^RXV8\">\n                            <field name=\"TEXT\">It lives in bushland.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/statement>\n                <statement name=\"ELSE\">\n                  <block type=\"io_print1\" id=\"!K8Hmvh;kBbNVuk6.EV0\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"TSCYxqs|E.M8V,?Q=-)a\">\n                        <field name=\"TEXT\">The species is koala.<\/field>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print1\" id=\"_e;#~sg[V!-OnuOil@N:\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"KX)0%bYErJI1Un;(zvB^\">\n                            <field name=\"TEXT\">It lives in bushland.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/statement>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"variables_set\" id=\"}e6FYA_,7~@`)UQxn%ZV\">\n            <field name=\"VAR\" id=\"1rauM{BiS2+YeZ8.j,+z\" variabletype=\"\">scales<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\".wr87@50]36AQ@yt58Zx\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\"7l{cD]vcdq1z7M?#~|NX\">\n                    <field name=\"TEXT\">Scales:<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"decisions_if_else\" id=\"\/rv_%8RW)i6tB`Qf6euX\">\n                <value name=\"IF0\">\n                  <block type=\"logic_compare\" id=\"xhtH)V^3-kD#RRx}vff;\">\n                    <field name=\"OP\">EQ<\/field>\n                    <value name=\"A\">\n                      <block type=\"variables_get\" id=\"vS~o7#loh;[~s1lN~R1J\">\n                        <field name=\"VAR\" id=\"1rauM{BiS2+YeZ8.j,+z\" variabletype=\"\">scales<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"B\">\n                      <block type=\"text\" id=\"ip;sGA;98@cml4TA%%r)\">\n                        <field name=\"TEXT\">y<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <statement name=\"DO0\">\n                  <block type=\"io_print1\" id=\"$bfI7^(PXl0YO:dcT,AI\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"de{+?0#ugkT0hBq_3g9}\">\n                        <field name=\"TEXT\">The species is eastern blue-tongue.<\/field>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print1\" id=\"ZJj1$%!.]J_I:Zg:5ec#\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"fBAI9=TaBTr1BbosK]d[\">\n                            <field name=\"TEXT\">It lives in bushland.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/statement>\n                <statement name=\"ELSE\">\n                  <block type=\"io_print1\" id=\"O`kshG\/Ya.qV?PMN%]@G\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"5(5ag8`-sL4Oua}J\/Y#Q\">\n                        <field name=\"TEXT\">The species is laughing kookaburra.<\/field>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print1\" id=\"-bJP*A,MGx7\/2vs(R=2e\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"T}HxI17X(0Jpd](VvP+O\">\n                            <field name=\"TEXT\">It lives in bushland.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/statement>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nThis gives us a working solution.\n\nYou will notice that all of the animals share the same habitat (bushland), so there is one other change we can make to our program to simplify it. Rather than having a second <bk class=\"io\">print<\/bk> block, we can move this outside of the if statement and just print it at the end of our program, giving us the sample solution:\n",
      "updated_at":"2018-03-06T01:29:58.276242+00:00",
      "label":"aca-bk-bio-classifier-mini-year5",
      "content":"#markdown\nNow that you know a little bit about the features of our four animals, the final step is to write the code that identifies the animals for us. The program will use features and questions you worked out in your algorithm to print out the name and habitat of the selected animal.\n\nThe program will operate according to the following rules:\n\n* The input prompts specify just the feature being checked, followed by a colon, e.g. `lang:out;Fur:` or `lang:out;Eggs:`\n* Answers will be `\"y\"` or `\"n\"` for all features\n* Only features from the [trading cards](https:\/\/aca.edu.au\/public\/resources\/classifier-blockly.pdf) are allowed\n* The order of the questions does not matter as long as the correct answer is found\n* You don't have to use every feature if it is not required\n* The same program will work for every animal in the data\n\nOne example that correctly identifies a koala might be:\n\n```eg:none;terminal\nScales: @@@n\nClaws: @@@y\nFur: @@@y\nSpikes: @@@n\nThe species is koala.\nIt lives in bushland.\n\n```\n\nIt does not matter how many questions or features you use to identify each animal as long as you identify each one *uniquely* and *correctly*. **Challenge yourself and see if you can write a program that only asks two questions!**\n\nOnce the animal is identified, you should immediately print its common name and habitat to the screen. You must format the output of your program as shown in the example above.\n\n> ## Use your algorithm\n> If you've worked through the activities in each of the slides up to this point, you should be able to follow the same process we did in earlier modules to convert your algorithm into code.\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1_text\",\"io_print1\",\"io_print2\",\"io_print3\",\"io_ask_text\",\"decisions_if\",\"decisions_if_compare\",\"decisions_if_else\",\"decisions_if_else_compare\",\"decisions_if_elif_else\",\"decisions_if_elif_else_compare\",\"logic_compare\"]",
      "teacher_notes":"#markdown\n\nThe sample solution shows the alorithm you would use to evenly split the animals in half at each branch in your algorithm. The only feature that splits them into two pairs at the first step is whether or not the animal has Fur, so that should be our first question and condition:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\";OD,Sb8F]3uSh+l@4bTO\">fur<\/variable>\n    <variable type=\"\" id=\"1rauM{BiS2+YeZ8.j,+z\">scales<\/variable>\n    <variable type=\"\" id=\"o8(8f,!YL7FS$N1cS#]F\">spikes<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"BiM2PI?sbP7=WChMU~KN\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\";OD,Sb8F]3uSh+l@4bTO\" variabletype=\"\">fur<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"97nt9{]U2XPA@Kvz\/@}o\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"Z_Uk-REXb3R{X#$MJS4R\">\n            <field name=\"TEXT\">Fur:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"dF}Al_yn0qUMQP9AXH?R\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"h_HM\/67\/`]Uy[q=Q2{6)\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"miff]!EEia`8DhSO:3cn\">\n                <field name=\"VAR\" id=\";OD,Sb8F]3uSh+l@4bTO\" variabletype=\"\">fur<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"5nGR.b)A?QXEHr,-lQu8\">\n                <field name=\"TEXT\">y<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nNote that we use the <bk class=\"control\">if else<\/bk> block because there will be different instructions if the animal does not have fur.\n\nThe animals with fur are the koala and the short-beaked echidna, so now we need a feature that separates those. Since the echidna has spikes but the koala doesn't, we use that to identify each animal:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\";OD,Sb8F]3uSh+l@4bTO\">fur<\/variable>\n    <variable type=\"\" id=\"1rauM{BiS2+YeZ8.j,+z\">scales<\/variable>\n    <variable type=\"\" id=\"o8(8f,!YL7FS$N1cS#]F\">spikes<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"BiM2PI?sbP7=WChMU~KN\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\";OD,Sb8F]3uSh+l@4bTO\" variabletype=\"\">fur<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"97nt9{]U2XPA@Kvz\/@}o\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"Z_Uk-REXb3R{X#$MJS4R\">\n            <field name=\"TEXT\">Fur:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"dF}Al_yn0qUMQP9AXH?R\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"h_HM\/67\/`]Uy[q=Q2{6)\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"miff]!EEia`8DhSO:3cn\">\n                <field name=\"VAR\" id=\";OD,Sb8F]3uSh+l@4bTO\" variabletype=\"\">fur<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"5nGR.b)A?QXEHr,-lQu8\">\n                <field name=\"TEXT\">y<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"variables_set\" id=\"BfV*UQV5Ji!*giq38[v(\">\n            <field name=\"VAR\" id=\"o8(8f,!YL7FS$N1cS#]F\" variabletype=\"\">spikes<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\"5dE5fT1:i$y_?W7`Qo6I\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\"9`g:,:kcD%U@(!+EyR-l\">\n                    <field name=\"TEXT\">Spikes:<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"decisions_if_else\" id=\"86I%%b*Vv3%R8s:AJ@-5\">\n                <value name=\"IF0\">\n                  <block type=\"logic_compare\" id=\"X9PshHeUj7cWDn~IR)86\">\n                    <field name=\"OP\">EQ<\/field>\n                    <value name=\"A\">\n                      <block type=\"variables_get\" id=\"UyLf`dgfAjp]8z=R}:r5\">\n                        <field name=\"VAR\" id=\"o8(8f,!YL7FS$N1cS#]F\" variabletype=\"\">spikes<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"B\">\n                      <block type=\"text\" id=\"]cTp_xKm5kw?6I{JKr:*\">\n                        <field name=\"TEXT\">y<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <statement name=\"DO0\">\n                  <block type=\"io_print1\" id=\")Uar(4N62ZtN)!BIXFM!\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"\/;r2s2[*LcipE+aeq@`Y\">\n                        <field name=\"TEXT\">The species is short-beaked echidna.<\/field>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print1\" id=\"-bJP*A,MGx7\/2vs(R=2e\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"T}HxI17X(0Jpd](VvP+O\">\n                            <field name=\"TEXT\">It lives in bushland.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/statement>\n                <statement name=\"ELSE\">\n                  <block type=\"io_print1\" id=\"!K8Hmvh;kBbNVuk6.EV0\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"TSCYxqs|E.M8V,?Q=-)a\">\n                        <field name=\"TEXT\">The species is koala.<\/field>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print1\" id=\"e6t+j{$()-h.wrD.t-eB\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"3ed}?xJe(Q;Y4h}N_uY^\">\n                            <field name=\"TEXT\">It lives in bushland.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/statement>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nWe need two <bk class=\"io\">print<\/bk> blocks because we are printing the common name and the habitat outputs on separate lines.\n\nWe then need to deal with our remaining animals - the laughing kookaburra and the eastern blue-tongue - in the <bk class=\"control\">else<\/bk> part fo the block from the first question. The distinguishing feature for them is that the eastern blue-tongue has scales:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\";OD,Sb8F]3uSh+l@4bTO\">fur<\/variable>\n    <variable type=\"\" id=\"1rauM{BiS2+YeZ8.j,+z\">scales<\/variable>\n    <variable type=\"\" id=\"o8(8f,!YL7FS$N1cS#]F\">spikes<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"BiM2PI?sbP7=WChMU~KN\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\";OD,Sb8F]3uSh+l@4bTO\" variabletype=\"\">fur<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"97nt9{]U2XPA@Kvz\/@}o\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"Z_Uk-REXb3R{X#$MJS4R\">\n            <field name=\"TEXT\">Fur:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"dF}Al_yn0qUMQP9AXH?R\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"h_HM\/67\/`]Uy[q=Q2{6)\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"miff]!EEia`8DhSO:3cn\">\n                <field name=\"VAR\" id=\";OD,Sb8F]3uSh+l@4bTO\" variabletype=\"\">fur<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"5nGR.b)A?QXEHr,-lQu8\">\n                <field name=\"TEXT\">y<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"variables_set\" id=\"BfV*UQV5Ji!*giq38[v(\">\n            <field name=\"VAR\" id=\"o8(8f,!YL7FS$N1cS#]F\" variabletype=\"\">spikes<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\"5dE5fT1:i$y_?W7`Qo6I\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\"9`g:,:kcD%U@(!+EyR-l\">\n                    <field name=\"TEXT\">Spikes:<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"decisions_if_else\" id=\"86I%%b*Vv3%R8s:AJ@-5\">\n                <value name=\"IF0\">\n                  <block type=\"logic_compare\" id=\"X9PshHeUj7cWDn~IR)86\">\n                    <field name=\"OP\">EQ<\/field>\n                    <value name=\"A\">\n                      <block type=\"variables_get\" id=\"UyLf`dgfAjp]8z=R}:r5\">\n                        <field name=\"VAR\" id=\"o8(8f,!YL7FS$N1cS#]F\" variabletype=\"\">spikes<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"B\">\n                      <block type=\"text\" id=\"]cTp_xKm5kw?6I{JKr:*\">\n                        <field name=\"TEXT\">y<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <statement name=\"DO0\">\n                  <block type=\"io_print1\" id=\")Uar(4N62ZtN)!BIXFM!\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"\/;r2s2[*LcipE+aeq@`Y\">\n                        <field name=\"TEXT\">The species is short-beaked echidna.<\/field>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print1\" id=\".IUdip]~xJ}#B)(ld4RC\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"YA+5[kRQ2;TmN@s^RXV8\">\n                            <field name=\"TEXT\">It lives in bushland.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/statement>\n                <statement name=\"ELSE\">\n                  <block type=\"io_print1\" id=\"!K8Hmvh;kBbNVuk6.EV0\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"TSCYxqs|E.M8V,?Q=-)a\">\n                        <field name=\"TEXT\">The species is koala.<\/field>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print1\" id=\"_e;#~sg[V!-OnuOil@N:\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"KX)0%bYErJI1Un;(zvB^\">\n                            <field name=\"TEXT\">It lives in bushland.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/statement>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"variables_set\" id=\"}e6FYA_,7~@`)UQxn%ZV\">\n            <field name=\"VAR\" id=\"1rauM{BiS2+YeZ8.j,+z\" variabletype=\"\">scales<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\".wr87@50]36AQ@yt58Zx\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\"7l{cD]vcdq1z7M?#~|NX\">\n                    <field name=\"TEXT\">Scales:<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"decisions_if_else\" id=\"\/rv_%8RW)i6tB`Qf6euX\">\n                <value name=\"IF0\">\n                  <block type=\"logic_compare\" id=\"xhtH)V^3-kD#RRx}vff;\">\n                    <field name=\"OP\">EQ<\/field>\n                    <value name=\"A\">\n                      <block type=\"variables_get\" id=\"vS~o7#loh;[~s1lN~R1J\">\n                        <field name=\"VAR\" id=\"1rauM{BiS2+YeZ8.j,+z\" variabletype=\"\">scales<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"B\">\n                      <block type=\"text\" id=\"ip;sGA;98@cml4TA%%r)\">\n                        <field name=\"TEXT\">y<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <statement name=\"DO0\">\n                  <block type=\"io_print1\" id=\"$bfI7^(PXl0YO:dcT,AI\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"de{+?0#ugkT0hBq_3g9}\">\n                        <field name=\"TEXT\">The species is eastern blue-tongue.<\/field>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print1\" id=\"ZJj1$%!.]J_I:Zg:5ec#\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"fBAI9=TaBTr1BbosK]d[\">\n                            <field name=\"TEXT\">It lives in bushland.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/statement>\n                <statement name=\"ELSE\">\n                  <block type=\"io_print1\" id=\"O`kshG\/Ya.qV?PMN%]@G\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"5(5ag8`-sL4Oua}J\/Y#Q\">\n                        <field name=\"TEXT\">The species is laughing kookaburra.<\/field>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print1\" id=\"-bJP*A,MGx7\/2vs(R=2e\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"T}HxI17X(0Jpd](VvP+O\">\n                            <field name=\"TEXT\">It lives in bushland.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/statement>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nThis gives us a working solution.\n\nYou will notice that all of the animals share the same habitat (bushland), so there is one other change we can make to our program to simplify it. Rather than having a second <bk class=\"io\">print<\/bk> block, we can move this outside of the if statement and just print it at the end of our program, giving us the sample solution:\n"
    },
    {
      "language":20,
      "title":"The study of living organisms",
      "notes":"#markdown\nGreat work! \n\nThe `branch` variable is being used to store the correct branch of science. It is then added to the front of the rest of the message using the `{}` inside a format string, and output to the screen with the `lang:py3;print` function.",
      "updated_at":"2018-03-05T23:55:15.411255+00:00",
      "label":"aca-choices-bio-living-orgs-blocks",
      "content":"#markdown\n\n## Which of the following code snippets will correctly print the message below on the screen?\n\n```terminal;eg:none;lang:out\nBiology is the study of living organisms\n\n```\n\n",
      "options":"{}",
      "editor":1,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":2},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"orgs-blocks-1\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-workspace-lang=\\\\\\\"choices\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"NAjX\\\/pW%tnv?KAYsZBnx\\\\\\\">biology<\\\/variable>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"Mbr:W5V2V+5?F{R2MX%u\\\\\\\">branch<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"l2\\\/||%-@xr(CKy9|uZRx\\\\\\\" x=\\\\\\\"10\\\\\\\" y=\\\\\\\"10\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"Mbr:W5V2V+5?F{R2MX%u\\\\\\\" variabletype=\\\\\\\"\\\\\\\">branch<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"yzH|,SUgI$40,)*CYXh[\\\\\\\">\\\\n        <field name=\\\\\\\"TEXT\\\\\\\">Biology<\\\/field>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"SLZ]y3V(gl|~O~}iKIhj\\\\\\\">\\\\n        <value name=\\\\\\\"ANY0\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"$zw6$RzOY|KFgHHCd#\\\/\\\/\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">Physics is the study of living organisms<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"orgs-blocks-2\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-workspace-lang=\\\\\\\"choices\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"NAjX\\\/pW%tnv?KAYsZBnx\\\\\\\">biology<\\\/variable>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"Mbr:W5V2V+5?F{R2MX%u\\\\\\\">branch<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"l2\\\/||%-@xr(CKy9|uZRx\\\\\\\" x=\\\\\\\"10\\\\\\\" y=\\\\\\\"10\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"Mbr:W5V2V+5?F{R2MX%u\\\\\\\" variabletype=\\\\\\\"\\\\\\\">branch<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"yzH|,SUgI$40,)*CYXh[\\\\\\\">\\\\n        <field name=\\\\\\\"TEXT\\\\\\\">Biology<\\\/field>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"io_print2\\\\\\\" id=\\\\\\\"R;,M(-G)3Q(`c,{xQBQ6\\\\\\\">\\\\n        <value name=\\\\\\\"ANY0\\\\\\\">\\\\n          <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"Lrk=t7h2bB|?yWm]z[RB\\\\\\\">\\\\n            <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"NAjX\\\/pW%tnv?KAYsZBnx\\\\\\\" variabletype=\\\\\\\"\\\\\\\">biology<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <value name=\\\\\\\"ANY1\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"$zw6$RzOY|KFgHHCd#\\\/\\\/\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">is the study of living organisms<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"orgs-blocks-3-5\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-workspace-lang=\\\\\\\"choices\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n  <xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"Mbr:W5V2V+5?F{R2MX%u\\\\\\\">branch<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"l2\\\/||%-@xr(CKy9|uZRx\\\\\\\" x=\\\\\\\"10\\\\\\\" y=\\\\\\\"10\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"Mbr:W5V2V+5?F{R2MX%u\\\\\\\" variabletype=\\\\\\\"\\\\\\\">branch<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"yzH|,SUgI$40,)*CYXh[\\\\\\\">\\\\n        <field name=\\\\\\\"TEXT\\\\\\\">Biology<\\\/field>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"io_print2\\\\\\\" id=\\\\\\\"R;,M(-G)3Q(`c,{xQBQ6\\\\\\\">\\\\n        <value name=\\\\\\\"ANY0\\\\\\\">\\\\n          <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"KiE]y@+w3wo35xr*|Fmh\\\\\\\">\\\\n            <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"Mbr:W5V2V+5?F{R2MX%u\\\\\\\" variabletype=\\\\\\\"\\\\\\\">branch<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <value name=\\\\\\\"ANY1\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"$zw6$RzOY|KFgHHCd#\\\/\\\/\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">is the study of living organisms<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\\n\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"orgs-blocks-4\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-workspace-lang=\\\\\\\"choices\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"Mbr:W5V2V+5?F{R2MX%u\\\\\\\">branch<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"l2\\\/||%-@xr(CKy9|uZRx\\\\\\\" x=\\\\\\\"10\\\\\\\" y=\\\\\\\"10\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"Mbr:W5V2V+5?F{R2MX%u\\\\\\\" variabletype=\\\\\\\"\\\\\\\">branch<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"yzH|,SUgI$40,)*CYXh[\\\\\\\">\\\\n        <field name=\\\\\\\"TEXT\\\\\\\">Biology<\\\/field>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"io_print2\\\\\\\" id=\\\\\\\"R;,M(-G)3Q(`c,{xQBQ6\\\\\\\">\\\\n        <value name=\\\\\\\"ANY0\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"r;zg%Ah78ED6ZQS(vmTo\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">Bilogy<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <value name=\\\\\\\"ANY1\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"$zw6$RzOY|KFgHHCd#\\\/\\\/\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">is the study of living organisms<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[
        "print",
        "variables"
      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"orgs-blocks-1\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-workspace-lang=\\\"choices\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"NAjX\/pW%tnv?KAYsZBnx\\\">biology<\/variable>\\n    <variable type=\\\"\\\" id=\\\"Mbr:W5V2V+5?F{R2MX%u\\\">branch<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"l2\/||%-@xr(CKy9|uZRx\\\" x=\\\"10\\\" y=\\\"10\\\">\\n    <field name=\\\"VAR\\\" id=\\\"Mbr:W5V2V+5?F{R2MX%u\\\" variabletype=\\\"\\\">branch<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"text\\\" id=\\\"yzH|,SUgI$40,)*CYXh[\\\">\\n        <field name=\\\"TEXT\\\">Biology<\/field>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"io_print1\\\" id=\\\"SLZ]y3V(gl|~O~}iKIhj\\\">\\n        <value name=\\\"ANY0\\\">\\n          <block type=\\\"text\\\" id=\\\"$zw6$RzOY|KFgHHCd#\/\/\\\">\\n            <field name=\\\"TEXT\\\">Physics is the study of living organisms<\/field>\\n          <\/block>\\n        <\/value>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"print-physics\"\n    },\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"orgs-blocks-2\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-workspace-lang=\\\"choices\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"NAjX\/pW%tnv?KAYsZBnx\\\">biology<\/variable>\\n    <variable type=\\\"\\\" id=\\\"Mbr:W5V2V+5?F{R2MX%u\\\">branch<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"l2\/||%-@xr(CKy9|uZRx\\\" x=\\\"10\\\" y=\\\"10\\\">\\n    <field name=\\\"VAR\\\" id=\\\"Mbr:W5V2V+5?F{R2MX%u\\\" variabletype=\\\"\\\">branch<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"text\\\" id=\\\"yzH|,SUgI$40,)*CYXh[\\\">\\n        <field name=\\\"TEXT\\\">Biology<\/field>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"io_print2\\\" id=\\\"R;,M(-G)3Q(`c,{xQBQ6\\\">\\n        <value name=\\\"ANY0\\\">\\n          <block type=\\\"variables_get\\\" id=\\\"Lrk=t7h2bB|?yWm]z[RB\\\">\\n            <field name=\\\"VAR\\\" id=\\\"NAjX\/pW%tnv?KAYsZBnx\\\" variabletype=\\\"\\\">biology<\/field>\\n          <\/block>\\n        <\/value>\\n        <value name=\\\"ANY1\\\">\\n          <block type=\\\"text\\\" id=\\\"$zw6$RzOY|KFgHHCd#\/\/\\\">\\n            <field name=\\\"TEXT\\\">is the study of living organisms<\/field>\\n          <\/block>\\n        <\/value>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"unused-variable\"\n    },\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"orgs-blocks-3-5\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-workspace-lang=\\\"choices\\\" data-runnable=\\\"false\\\">\\n  <xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"Mbr:W5V2V+5?F{R2MX%u\\\">branch<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"l2\/||%-@xr(CKy9|uZRx\\\" x=\\\"10\\\" y=\\\"10\\\">\\n    <field name=\\\"VAR\\\" id=\\\"Mbr:W5V2V+5?F{R2MX%u\\\" variabletype=\\\"\\\">branch<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"text\\\" id=\\\"yzH|,SUgI$40,)*CYXh[\\\">\\n        <field name=\\\"TEXT\\\">Biology<\/field>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"io_print2\\\" id=\\\"R;,M(-G)3Q(`c,{xQBQ6\\\">\\n        <value name=\\\"ANY0\\\">\\n          <block type=\\\"variables_get\\\" id=\\\"KiE]y@+w3wo35xr*|Fmh\\\">\\n            <field name=\\\"VAR\\\" id=\\\"Mbr:W5V2V+5?F{R2MX%u\\\" variabletype=\\\"\\\">branch<\/field>\\n          <\/block>\\n        <\/value>\\n        <value name=\\\"ANY1\\\">\\n          <block type=\\\"text\\\" id=\\\"$zw6$RzOY|KFgHHCd#\/\/\\\">\\n            <field name=\\\"TEXT\\\">is the study of living organisms<\/field>\\n          <\/block>\\n        <\/value>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\\n\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"biology\"\n    },\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"orgs-blocks-4\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-workspace-lang=\\\"choices\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"Mbr:W5V2V+5?F{R2MX%u\\\">branch<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"l2\/||%-@xr(CKy9|uZRx\\\" x=\\\"10\\\" y=\\\"10\\\">\\n    <field name=\\\"VAR\\\" id=\\\"Mbr:W5V2V+5?F{R2MX%u\\\" variabletype=\\\"\\\">branch<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"text\\\" id=\\\"yzH|,SUgI$40,)*CYXh[\\\">\\n        <field name=\\\"TEXT\\\">Biology<\/field>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"io_print2\\\" id=\\\"R;,M(-G)3Q(`c,{xQBQ6\\\">\\n        <value name=\\\"ANY0\\\">\\n          <block type=\\\"text\\\" id=\\\"r;zg%Ah78ED6ZQS(vmTo\\\">\\n            <field name=\\\"TEXT\\\">Bilogy<\/field>\\n          <\/block>\\n        <\/value>\\n        <value name=\\\"ANY1\\\">\\n          <block type=\\\"text\\\" id=\\\"$zw6$RzOY|KFgHHCd#\/\/\\\">\\n            <field name=\\\"TEXT\\\">is the study of living organisms<\/field>\\n          <\/block>\\n        <\/value>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"spelling\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 2\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[\"io_print1_text\"]",
      "teacher_notes":"#markdown\nThis question reviews everything from this module - strings, `{}` in format strings, variables and the `lang:py3;print` function."
    },
    {
      "language":0,
      "title":"Hello, Biology!",
      "notes":"<p>This problem was designed to be simple, but there were a few things to trip you up. Common issues were:<\/p>\n<ul>\n  <li>not submitting a <em>complete program<\/em>, with a <code data-lang=\"py3\">print<\/code> block in it;<\/li>\n  <li>not <strong>reading the question carefully!<\/strong> and getting the words, capitals, spaces and punctuation exactly right.  This kind of attention to detail is critical to programming.<\/li>\n  <li>printing extra text: the marker only accepts exactly what is required. Nothing more, nothing less.<\/li>\n<\/ul>\n",
      "updated_at":"2018-03-05T23:53:17.684679+00:00",
      "label":"aca-bk-bio-hello-biology",
      "content":"<p>Time to solve your first problem! Write a program that prints out:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\">\n<o>Hello, Biology!<\/o>\n\n<\/code><\/pre>\n<p>What, again? <strong>Yes, now it's your turn to write it from scratch.<\/strong><\/p>\n\n<p>You need to put your blocks in the editor (the big area on the right).<\/p>\n\n<p>The <bk class=\"io\">print<\/bk> block is in the <strong style=\"color: #333; font-weight: bold\">Output<\/strong> menu.  Drag it into the editor.<\/p>\n\n<p>Add an empty <bk class=\"str lit\"><bk class=\"inner\">&nbsp;&nbsp;<\/bk><\/bk> string block from the <strong style=\"color: #333; font-weight: bold\">Strings<\/strong> menu. Drag it into the hole in the <bk class=\"io\">print<\/bk> block, and change the message.<\/p>\n\n<aside class=\"info\">\n  <h2>How do I submit?<\/h2>\n  <ol>\n    <li><p>Write your program in the editor (large panel on the right);<\/p><\/li>\n    <li><p>Run your program by clicking \n      <button type=\"button\" style=\"\n                                   display: inline-block;\n                                   background: #f0f0f0;\n                                   border: none;\n                                   overflow: visible;\n                                   color: #1b79bf;\n                                   height: 46px;\n                                   width: 40px;\n                                   text-align: center;\n                                   font-size: 12px;\n                                   min-width: 40px;\n                                   padding: 7px 5px 5px 3px;\n                                   outline: 0 !important;\">\n      <span class=\"icon icon-play4 hide-shell-icon\" style=\"font-size: 18px;\"><\/span><br>\n      <span class=\"icon icon-cog shell-icon\" style=\"display: none\"><\/span>\n      <span class=\"title\" style=\"font-size: 12px\">Run<\/span>\n    <\/button> in the top right-hand menu bar.\n    The output will appear below your code. <strong>Check the program works correctly!<\/strong><\/p><\/li>\n    <li><p>Mark your program by clicking\n      <button type=\"button\" style=\"\n                                   display: inline-block;\n                                   background: #f0f0f0;\n                                   border: none;\n                                   overflow: visible;\n                                   color: #fb4251;\n                                   height: 46px;\n                                   width: 40px;\n                                   text-align: center;\n                                   font-size: 12px;\n                                   min-width: 40px;\n                                   padding: 7px 5px 5px 3px;\n                                   outline: 0 !important;\">\n      <span class=\"icon icon-star-full hide-marking-icon\" style=\"font-size: 18px;\"><\/span><br>\n      <span class=\"icon icon-cog marking-icon\" style=\"display: none\"><\/span>\n      <span class=\"title\" style=\"font-size: 12px\">Mark<\/span>\n      <\/button> and we will automatically check if your program is correct, and if not, give you some hints to fix it up.<\/p>\n    <\/li>\n  <\/ol>\n<\/aside>\n",
      "options":"{\"variables\":false}",
      "editor":1,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print2\"]",
      "teacher_notes":"<p>\n  This problem is designed to be simple. Students just need to repeat the blocks from the first notes page.\n<\/p>\n\n<p>\n  You need to click on the Editor menu bar to find each type of block. Click or drag a block to add it to the workspace.\n<\/p>\n\n<figure class=\"align-center\">\n  <img alt=\"Blockly editor String menu\" src=\"https:\/\/groklearning-cdn.com\/problems\/bF8ACyqoHKqdvLXCHLvmoK\/blockly-string-menu.png\" width=\"50%\">\n  <figcaption>The string blocks appear under the String menu.<\/figcaption>\n<\/figure>\n\n<p>\n  Common errors identified by the automarker include:\n<\/p>\n\n<ul>\n  <li>not submitting a <em>complete program<\/em> with a <bk class=\"io\">print<\/bk> block. A <bk class=\"str lit\"><bk class=\"inner\">Hello, World!<\/bk><\/bk> string on its own prints nothing;<\/li>\n  <li>not <strong>reading the question carefully!<\/strong> and getting the words, capitals, spaces and punctuation exactly right.  This kind of attention to detail is critical in programming;<\/li>\n  <li>printing extra text: the marker will only accept exactly what is required. Nothing more, nothing less.<\/li>\n<\/ul>\n"
    },
    {
      "language":20,
      "title":"Adaptations",
      "notes":"<p>You'll be learning a heap of programming and biology terms throughout this challenge, so understanding what terms like *Adapations* means will help you understand what each problem wants you to solve.<\/p>",
      "updated_at":"2018-03-05T23:54:50.586892+00:00",
      "label":"aca-choices-bio-behavioural-adaptations",
      "content":"#markdown\n\n\n## When an animal adapts its *actions* to survive in its environment, this is known as...",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":1},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nVariables\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nTaxonomy\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nBehavioural adaptation\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nStructural adaptation\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"#markdown\\n\\nVariables\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"variables\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nTaxonomy\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"taxonomy\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nBehavioural adaptation\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"behavioural\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nStructural adaptation\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"structural\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 1\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>Throughout the challenge students will have their understanding of terminology and simple concepts tested through multiple-choice questions. These are intended to serve as reinforcement of ideas, and to help consolidate understanding of both biology and programming concepts.<\/p>"
    },
    {
      "language":0,
      "title":"Non-living things",
      "notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <bk class=\"var\"><bk class=\"inner\">non_living<\/bk><\/bk> to be <code data-lang=\"str\">rock<\/code> instead of <code data-lang=\"str\">zombie<\/code>, run it to check it works, and then mark it.<\/p>",
      "updated_at":"2018-03-05T23:54:35.337409+00:00",
      "label":"aca-bk-bio-non-living",
      "content":"#markdown\nIn Biology, there are three categories we can use to classify all things\n\n* living - alive\n* non-living - was never alive\n* dead - no longer alive.\n\nThere are lots of important non-living things, like sunlight, water and air. These are things that enable life to exist, but are not living things themselves.\n\nWe've put a program in the editor that has a variable, <bk class=\"var\"><bk class=\"inner\">non living<\/bk><\/bk>, that contains information to be printed.\n\n\nClick <button type=\"button\" style=\"\n                                   display: inline-block;\n                                   background: #f0f0f0;\n                                   border: none;\n                                   overflow: visible;\n                                   color: #1b79bf;\n                                   height: 46px;\n                                   width: 40px;\n                                   text-align: center;\n                                   font-size: 12px;\n                                   min-width: 40px;\n                                   padding: 7px 5px 5px 3px;\n                                   outline: 0 !important;\">\n      <span class=\"icon icon-play4 hide-shell-icon\" style=\"font-size: 18px;\"><\/span><br>\n      <span class=\"icon icon-cog shell-icon\" style=\"display: none\"><\/span>\n      <span class=\"title\" style=\"font-size: 12px\">Run<\/span>\n    <\/button> to see what it does.\n\n**Mistake!** The program is about a `zombie`, which is a fictional character that doesn't exist, and wouldn't be biologically correct even if it did. \n\n**Update the program** to bring it back to reality to work for a different object, a `rock`.\n  \nYour updated program should print the message:\n\n```lang:py3;eg:none;terminal\nA rock was never alive.\nIt's neither living nor dead, a rock is non-living.\n\n```\n\n> ## Only change the <bk class=\"var\"><bk class=\"inner\">non living<\/bk><\/bk> variable!\n> You just need to change the value of <bk class=\"var\"><bk class=\"inner\">non living<\/bk><\/bk> to be `rock` instead of `zombie`, run it to check it works, and then mark it.\n",
      "options":"{}",
      "editor":1,
      "workspace":"[{\"content\":\"<xml xmlns=\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"1zz%x=D1_Sgz0ki5qTQF\\\">non living<\\\/variable>\\n  <\\\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"gE(lJAJw_r2Grp5XGb:%\\\" x=\\\"4\\\" y=\\\"4\\\">\\n    <field name=\\\"VAR\\\" id=\\\"1zz%x=D1_Sgz0ki5qTQF\\\" variabletype=\\\"\\\">non living<\\\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"text\\\" id=\\\"0TL.=RLZ|9:UEhaI,[Gn\\\">\\n        <field name=\\\"TEXT\\\">zombie<\\\/field>\\n      <\\\/block>\\n    <\\\/value>\\n    <next>\\n      <block type=\\\"io_print3\\\" id=\\\"u:dG%VB0{$%IhbUEauL{\\\">\\n        <value name=\\\"ANY0\\\">\\n          <block type=\\\"text\\\" id=\\\"POTXWQhapAj?=ID);=a}\\\">\\n            <field name=\\\"TEXT\\\">A<\\\/field>\\n          <\\\/block>\\n        <\\\/value>\\n        <value name=\\\"ANY1\\\">\\n          <block type=\\\"variables_get\\\" id=\\\"4201-NN{ShuxqUlFG(2D\\\">\\n            <field name=\\\"VAR\\\" id=\\\"1zz%x=D1_Sgz0ki5qTQF\\\" variabletype=\\\"\\\">non living<\\\/field>\\n          <\\\/block>\\n        <\\\/value>\\n        <value name=\\\"ANY2\\\">\\n          <block type=\\\"text\\\" id=\\\")A*VZK+PVEBV@qgS44zE\\\">\\n            <field name=\\\"TEXT\\\">was never alive.<\\\/field>\\n          <\\\/block>\\n        <\\\/value>\\n        <next>\\n          <block type=\\\"io_print3\\\" id=\\\"G~-D[F$Veq@|eMv(--L2\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\"#[l24?xzdH?7k#GN#?aL\\\">\\n                <field name=\\\"TEXT\\\">It's neither living nor dead, a<\\\/field>\\n              <\\\/block>\\n            <\\\/value>\\n            <value name=\\\"ANY1\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"Xy4v,tUT`K@i`FBN9(PF\\\">\\n                <field name=\\\"VAR\\\" id=\\\"1zz%x=D1_Sgz0ki5qTQF\\\" variabletype=\\\"\\\">non living<\\\/field>\\n              <\\\/block>\\n            <\\\/value>\\n            <value name=\\\"ANY2\\\">\\n              <block type=\\\"text\\\" id=\\\"YRcPf-7i)J:iXDo^[J3u\\\">\\n                <field name=\\\"TEXT\\\">is non-living.<\\\/field>\\n              <\\\/block>\\n            <\\\/value>\\n          <\\\/block>\\n        <\\\/next>\\n      <\\\/block>\\n    <\\\/next>\\n  <\\\/block>\\n<\\\/xml>\\n\",\"path\":\"program.blockly\",\"is_static\":false}]",
      "concepts":[
        "print",
        "variables"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print2\",\"io_print3\"]",
      "teacher_notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <bk class=\"var\"><bk class=\"inner\">non_living<\/bk><\/bk> to be <code data-lang=\"str\">rock<\/code> instead of <code data-lang=\"str\">zombie<\/code>, run it to check it works, and then mark it.<\/p>\n\n<p>Again, it could be solved be rewriting the code to print each string explicitly, but discourage this solution and emphasise the importance of using variables.<\/p>"
    },
    {
      "language":0,
      "title":"Organisms",
      "notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <bk class=\"var\"><bk class=\"inner\">remember<\/bk><\/bk> variable to be <code data-lang=\"str\">Structural adaptations are physical features.<\/code> instead of <code data-lang=\"str\">Plants and animals adapt to survive.<\/code>, run it to check it works, and then mark it.<\/p>",
      "updated_at":"2018-03-05T23:54:07.752174+00:00",
      "label":"aca-bk-bio-repeat-adaptations",
      "content":"#markdown\nSometimes, it's hard to remember a fact or statement. One way to do it is to repeat it multiple times so that you can remember!\n\nWe've written a program in the editor that repeats a statement.\n\nClick  <button type=\"button\" style=\"\n                                   display: inline-block;\n                                   background: #f0f0f0;\n                                   border: none;\n                                   overflow: visible;\n                                   color: #1b79bf;\n                                   height: 46px;\n                                   width: 40px;\n                                   text-align: center;\n                                   font-size: 12px;\n                                   min-width: 40px;\n                                   padding: 7px 5px 5px 3px;\n                                   outline: 0 !important;\">\n      <span class=\"icon icon-play4 hide-shell-icon\" style=\"font-size: 18px;\"><\/span><br>\n      <span class=\"icon icon-cog shell-icon\" style=\"display: none\"><\/span>\n      <span class=\"title\" style=\"font-size: 12px\">Run<\/span>\n    <\/button>\nto see what it does.\n\nThe statement is stored in a variable called `remember`.\n\n**Update this program so that it works for a different statement:** `'Structural adaptations are physical features.'`\n  Your updated program should print the message:\n\n```lang:py3;terminal;eg:none;\nStructural adaptations are physical features.\nStructural adaptations are physical features.\nStructural adaptations are physical features.\nStructural adaptations are physical features.\nStructural adaptations are physical features.\nI will remember! Structural adaptations are physical features.\n\n```\n\n> ## Only change the <bk class=\"var\"><bk class=\"inner\">remember<\/bk><\/bk> variable!\n> You just need to change the value of <bk class=\"var\"><bk class=\"inner\">remember<\/bk><\/bk> to be `'Structural adaptations are physical features.'` instead of `'Plants and animals adapt to survive.'`, run it to check it works, and then mark it.\n\n",
      "options":"{}",
      "editor":1,
      "workspace":"[{\"content\":\"<xml xmlns=\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"2vy}jpZs7H`u~rmk[H(D\\\">remember<\\\/variable>\\n  <\\\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"47;P}Cr@kzZKcR-Dk{.=\\\" x=\\\"6\\\" y=\\\"9\\\">\\n    <field name=\\\"VAR\\\" id=\\\"2vy}jpZs7H`u~rmk[H(D\\\" variabletype=\\\"\\\">remember<\\\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"text\\\" id=\\\"C[Z5{L~bs54(9D_I+9lP\\\">\\n        <field name=\\\"TEXT\\\">Plants and animals adapt to survive.<\\\/field>\\n      <\\\/block>\\n    <\\\/value>\\n    <next>\\n      <block type=\\\"io_print1\\\" id=\\\"s5Lu{\\\/MJW=w:qAR.$ooq\\\">\\n        <value name=\\\"ANY0\\\">\\n          <block type=\\\"variables_get\\\" id=\\\"=\\\/8;xafKN~2Vl5a*72Ch\\\">\\n            <field name=\\\"VAR\\\" id=\\\"2vy}jpZs7H`u~rmk[H(D\\\" variabletype=\\\"\\\">remember<\\\/field>\\n          <\\\/block>\\n        <\\\/value>\\n        <next>\\n          <block type=\\\"io_print1\\\" id=\\\"btmDT:D7Kbmn4moYj@.$\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"%:6AWuoi-VTpgukf2U%g\\\">\\n                <field name=\\\"VAR\\\" id=\\\"2vy}jpZs7H`u~rmk[H(D\\\" variabletype=\\\"\\\">remember<\\\/field>\\n              <\\\/block>\\n            <\\\/value>\\n            <next>\\n              <block type=\\\"io_print1\\\" id=\\\"KUOh$0hv|E@k[[p3w={:\\\">\\n                <value name=\\\"ANY0\\\">\\n                  <block type=\\\"variables_get\\\" id=\\\"-m:`PbH6xyi)?2^UFvvm\\\">\\n                    <field name=\\\"VAR\\\" id=\\\"2vy}jpZs7H`u~rmk[H(D\\\" variabletype=\\\"\\\">remember<\\\/field>\\n                  <\\\/block>\\n                <\\\/value>\\n                <next>\\n                  <block type=\\\"io_print1\\\" id=\\\"}EAQr@z.*YCmg?s6`yW8\\\">\\n                    <value name=\\\"ANY0\\\">\\n                      <block type=\\\"variables_get\\\" id=\\\"G|M]^as-C_}K+6|48jY%\\\">\\n                        <field name=\\\"VAR\\\" id=\\\"2vy}jpZs7H`u~rmk[H(D\\\" variabletype=\\\"\\\">remember<\\\/field>\\n                      <\\\/block>\\n                    <\\\/value>\\n                    <next>\\n                      <block type=\\\"io_print1\\\" id=\\\"j5]~G:Vv-D6:fF(8-K(+\\\">\\n                        <value name=\\\"ANY0\\\">\\n                          <block type=\\\"variables_get\\\" id=\\\"w@bC~,fPb!W\\\/C9(+BApJ\\\">\\n                            <field name=\\\"VAR\\\" id=\\\"2vy}jpZs7H`u~rmk[H(D\\\" variabletype=\\\"\\\">remember<\\\/field>\\n                          <\\\/block>\\n                        <\\\/value>\\n                        <next>\\n                          <block type=\\\"io_print2\\\" id=\\\"(qxe8ioquWh#@ORLGA\\\/+\\\">\\n                            <value name=\\\"ANY0\\\">\\n                              <block type=\\\"text\\\" id=\\\"enX|ww}FcER*t^{-f[OO\\\">\\n                                <field name=\\\"TEXT\\\">I will remember!<\\\/field>\\n                              <\\\/block>\\n                            <\\\/value>\\n                            <value name=\\\"ANY1\\\">\\n                              <block type=\\\"variables_get\\\" id=\\\"rrwhf)kp2h-N`T:aZR68\\\">\\n                                <field name=\\\"VAR\\\" id=\\\"2vy}jpZs7H`u~rmk[H(D\\\" variabletype=\\\"\\\">remember<\\\/field>\\n                              <\\\/block>\\n                            <\\\/value>\\n                          <\\\/block>\\n                        <\\\/next>\\n                      <\\\/block>\\n                    <\\\/next>\\n                  <\\\/block>\\n                <\\\/next>\\n              <\\\/block>\\n            <\\\/next>\\n          <\\\/block>\\n        <\\\/next>\\n      <\\\/block>\\n    <\\\/next>\\n  <\\\/block>\\n<\\\/xml>\",\"path\":\"program.blockly\",\"is_static\":false}]",
      "concepts":[
        "print",
        "variables"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print2\"]",
      "teacher_notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <bk class=\"var\"><bk class=\"inner\">remember<\/bk><\/bk> variable to be <code data-lang=\"str\">Structural adaptations are physical features.<\/code> instead of <code data-lang=\"str\">Plants and animals adapt to survive.<\/code>, run it to check it works, and then mark it.<\/p>\n\n<p>It is possible for students to answer this question by printing the text out without any variables (by typing each string in separately), but if you do see this you should try to encourage them to this solution. Understanding variables is absolutely critical to being able to solve more challenging problems later on.<\/p>"
    },
    {
      "language":0,
      "title":"Do you know Mr DNA?",
      "notes":"<p>This solution is a way of trying some more complicated text in a print function. Great work getting it out!<\/p>",
      "updated_at":"2018-03-05T23:53:39.360968+00:00",
      "label":"aca-bk-bio-mr-dna",
      "content":"#markdown\nIn [Jurassic Park](http:\/\/www.imdb.com\/title\/tt0107290\/), the park scientists were able to re-create extinct animals using their [DNA](https:\/\/en.wikipedia.org\/wiki\/DNA).\n\n[Scientists don't believe this would actually be possible](http:\/\/www.iflscience.com\/technology\/could-jurassic-park-ever-come-true\/), but DNA does tell us how living things have changed over time.\n\n![DNA has a double-helix structure and contains your unique genetic code](https:\/\/groklearning-cdn.com\/problems\/Fy8wBtQDoe5inCMvvAsUGZ\/dna_1_7.jpg)\n\nIn the movie there is an educational video to explain how scientists used DNA to bring dinosaurs back to life. The video introduces Mr. DNA with the following phrase:\n\n```lang:py3;terminal;eg:none;\nOh, Mr. DNA! Where did you come from?\n\n```\n\nWrite a program that prints this same welcome to the screen.\n\nRemember that the marker is really picky about punctuation and spelling.\n\n> ## You don't have to type this out!\n> Remember what we said on the last slide about making sure your question meets the requirements exactly?",
      "options":"{\"variables\":false}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "strings",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print2\"]",
      "teacher_notes":"<p>This solution is a way of trying some more complicated text in a print function.<\/p>\n\n<p>The longer and more complicated text also serves as incentive to copy\/paste the expected output, reducing the likelihood students will fail tests due to mismatches of capitalisation or punctuation.<\/p>"
    },
    {
      "language":20,
      "title":"Australia's favourite bird",
      "notes":"#markdown\nGreat work! \n\nThe incorrect answers all had minor errors like missing quotes around strings, parentheses in print functions and incorrect variable names. They might seem annoying, but computers rely on our instructions being exactly right to execute our code correctly.",
      "updated_at":"2018-03-06T00:43:19.514967+00:00",
      "label":"aca-choices-bio-magpie-blocks",
      "content":"#markdown\n\n## Which of the following code snippets will produce the output?\n\n```lang:py3;eg:none;terminal\nName a bird? @@@magpie\nThat's Australia's favourite bird!\n```\n\n```lang:py3;eg:none;terminal\nName a bird? @@@swan\nI like that bird.\n```\n\n```lang:py3;eg:none;terminal\nName a bird? @@@tiger\nI like that bird.\n```\n\n\\* according to [The Guardian](https:\/\/www.theguardian.com\/environment\/live\/2017\/dec\/11\/bird-of-the-year-150000-votes-counted-as-ibis-fans-anxiously-await-results) poll, anyway.",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":2},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"bk-magpie-ans-1\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-workspace-lang=\\\\\\\"choices\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\";||!Y:~$to2*QtdOfg]U\\\\\\\">bird<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"J5N^5J3v%W)ae(y]!9MX\\\\\\\" x=\\\\\\\"11\\\\\\\" y=\\\\\\\"4\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\";||!Y:~$to2*QtdOfg]U\\\\\\\" variabletype=\\\\\\\"\\\\\\\">bird<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"Nr7VZ2YiCF9Qmb_xE4%l\\\\\\\">\\\\n        <value name=\\\\\\\"TEXT\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"0gBAc3r9{yNK2mxS{(Tu\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">Name a bird?<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"decisions_if\\\\\\\" id=\\\\\\\"choLVm;#$=Hhb+0;$l[e\\\\\\\">\\\\n        <value name=\\\\\\\"IF0\\\\\\\">\\\\n          <block type=\\\\\\\"logic_compare\\\\\\\" id=\\\\\\\"*[.r{%;%8Z=+BsCim]a6\\\\\\\">\\\\n            <field name=\\\\\\\"OP\\\\\\\">EQ<\\\/field>\\\\n            <value name=\\\\\\\"A\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"%(ZMG@SYE7Mg^s7k`gg,\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\";||!Y:~$to2*QtdOfg]U\\\\\\\" variabletype=\\\\\\\"\\\\\\\">bird<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"B\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"jsg7l;G55;=dKmQ6a+(,\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">magpie<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <statement name=\\\\\\\"DO0\\\\\\\">\\\\n          <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"rT{%+g;,rOik${4%a[NI\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"Pl]S2FKZ|`#$RSmc63u^\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">That's Australia's favourite bird!<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n        <next>\\\\n          <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"tv2`U(9`O2M9w3dkiS`X\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\".e7tWj-(9T0Xr;7h,ZGT\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">I like that bird.<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/next>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"bk-magpie-ans-2\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-workspace-lang=\\\\\\\"choices\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\";||!Y:~$to2*QtdOfg]U\\\\\\\">bird<\\\/variable>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"bu)GnsiXTwG])Z]6MT^p\\\\\\\">magpie<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"J5N^5J3v%W)ae(y]!9MX\\\\\\\" x=\\\\\\\"10\\\\\\\" y=\\\\\\\"10\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\";||!Y:~$to2*QtdOfg]U\\\\\\\" variabletype=\\\\\\\"\\\\\\\">bird<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"Nr7VZ2YiCF9Qmb_xE4%l\\\\\\\">\\\\n        <value name=\\\\\\\"TEXT\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"0gBAc3r9{yNK2mxS{(Tu\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">Name a bird?<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"decisions_if_else\\\\\\\" id=\\\\\\\"Tyk|}19Y?r3rpLqJTh1^\\\\\\\">\\\\n        <value name=\\\\\\\"IF0\\\\\\\">\\\\n          <block type=\\\\\\\"logic_compare\\\\\\\" id=\\\\\\\"*[.r{%;%8Z=+BsCim]a6\\\\\\\">\\\\n            <field name=\\\\\\\"OP\\\\\\\">EQ<\\\/field>\\\\n            <value name=\\\\\\\"A\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"\\\/ceQIR=wOadLds1\\\/D+YW\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"bu)GnsiXTwG])Z]6MT^p\\\\\\\" variabletype=\\\\\\\"\\\\\\\">magpie<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"B\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"jsg7l;G55;=dKmQ6a+(,\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">magpie<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <statement name=\\\\\\\"DO0\\\\\\\">\\\\n          <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"rT{%+g;,rOik${4%a[NI\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"Pl]S2FKZ|`#$RSmc63u^\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">That's Australia's favourite bird!<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n        <statement name=\\\\\\\"ELSE\\\\\\\">\\\\n          <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"tv2`U(9`O2M9w3dkiS`X\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\".e7tWj-(9T0Xr;7h,ZGT\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">I like that bird.<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"bk-magpie-ans-3\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-workspace-lang=\\\\\\\"choices\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\";||!Y:~$to2*QtdOfg]U\\\\\\\">bird<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"J5N^5J3v%W)ae(y]!9MX\\\\\\\" x=\\\\\\\"10\\\\\\\" y=\\\\\\\"10\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\";||!Y:~$to2*QtdOfg]U\\\\\\\" variabletype=\\\\\\\"\\\\\\\">bird<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"Nr7VZ2YiCF9Qmb_xE4%l\\\\\\\">\\\\n        <value name=\\\\\\\"TEXT\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"0gBAc3r9{yNK2mxS{(Tu\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">Name a bird?<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"decisions_if_else\\\\\\\" id=\\\\\\\"].]`m[oR]?@\\\/_G@D`[~e\\\\\\\">\\\\n        <value name=\\\\\\\"IF0\\\\\\\">\\\\n          <block type=\\\\\\\"logic_compare\\\\\\\" id=\\\\\\\"*[.r{%;%8Z=+BsCim]a6\\\\\\\">\\\\n            <field name=\\\\\\\"OP\\\\\\\">EQ<\\\/field>\\\\n            <value name=\\\\\\\"A\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"%(ZMG@SYE7Mg^s7k`gg,\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\";||!Y:~$to2*QtdOfg]U\\\\\\\" variabletype=\\\\\\\"\\\\\\\">bird<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"B\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"jsg7l;G55;=dKmQ6a+(,\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">magpie<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <statement name=\\\\\\\"DO0\\\\\\\">\\\\n          <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"rT{%+g;,rOik${4%a[NI\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"Pl]S2FKZ|`#$RSmc63u^\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">That's Australia's favourite bird!<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n        <statement name=\\\\\\\"ELSE\\\\\\\">\\\\n          <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"tv2`U(9`O2M9w3dkiS`X\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\".e7tWj-(9T0Xr;7h,ZGT\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">I like that bird.<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"bk-magpie-ans-4\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-workspace-lang=\\\\\\\"choices\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\";||!Y:~$to2*QtdOfg]U\\\\\\\">bird<\\\/variable>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"bu)GnsiXTwG])Z]6MT^p\\\\\\\">magpie<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"J5N^5J3v%W)ae(y]!9MX\\\\\\\" x=\\\\\\\"11\\\\\\\" y=\\\\\\\"4\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\";||!Y:~$to2*QtdOfg]U\\\\\\\" variabletype=\\\\\\\"\\\\\\\">bird<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"Nr7VZ2YiCF9Qmb_xE4%l\\\\\\\">\\\\n        <value name=\\\\\\\"TEXT\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"0gBAc3r9{yNK2mxS{(Tu\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">Name a bird?<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"decisions_if_else\\\\\\\" id=\\\\\\\"Tyk|}19Y?r3rpLqJTh1^\\\\\\\">\\\\n        <value name=\\\\\\\"IF0\\\\\\\">\\\\n          <block type=\\\\\\\"logic_compare\\\\\\\" id=\\\\\\\"*[.r{%;%8Z=+BsCim]a6\\\\\\\">\\\\n            <field name=\\\\\\\"OP\\\\\\\">EQ<\\\/field>\\\\n            <value name=\\\\\\\"A\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"\\\/ceQIR=wOadLds1\\\/D+YW\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\";||!Y:~$to2*QtdOfg]U\\\\\\\" variabletype=\\\\\\\"\\\\\\\">bird<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"B\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"jsg7l;G55;=dKmQ6a+(,\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">magpie<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <statement name=\\\\\\\"DO0\\\\\\\">\\\\n          <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"rT{%+g;,rOik${4%a[NI\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"Pl]S2FKZ|`#$RSmc63u^\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">A magpie!<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n        <statement name=\\\\\\\"ELSE\\\\\\\">\\\\n          <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"tv2`U(9`O2M9w3dkiS`X\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\".e7tWj-(9T0Xr;7h,ZGT\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">I like that bird.<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[
        "input",
        "if-else",
        "print",
        "variables"
      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"bk-magpie-ans-1\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-workspace-lang=\\\"choices\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\";||!Y:~$to2*QtdOfg]U\\\">bird<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"J5N^5J3v%W)ae(y]!9MX\\\" x=\\\"11\\\" y=\\\"4\\\">\\n    <field name=\\\"VAR\\\" id=\\\";||!Y:~$to2*QtdOfg]U\\\" variabletype=\\\"\\\">bird<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"io_ask_text\\\" id=\\\"Nr7VZ2YiCF9Qmb_xE4%l\\\">\\n        <value name=\\\"TEXT\\\">\\n          <block type=\\\"text\\\" id=\\\"0gBAc3r9{yNK2mxS{(Tu\\\">\\n            <field name=\\\"TEXT\\\">Name a bird?<\/field>\\n          <\/block>\\n        <\/value>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"decisions_if\\\" id=\\\"choLVm;#$=Hhb+0;$l[e\\\">\\n        <value name=\\\"IF0\\\">\\n          <block type=\\\"logic_compare\\\" id=\\\"*[.r{%;%8Z=+BsCim]a6\\\">\\n            <field name=\\\"OP\\\">EQ<\/field>\\n            <value name=\\\"A\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"%(ZMG@SYE7Mg^s7k`gg,\\\">\\n                <field name=\\\"VAR\\\" id=\\\";||!Y:~$to2*QtdOfg]U\\\" variabletype=\\\"\\\">bird<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"B\\\">\\n              <block type=\\\"text\\\" id=\\\"jsg7l;G55;=dKmQ6a+(,\\\">\\n                <field name=\\\"TEXT\\\">magpie<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/value>\\n        <statement name=\\\"DO0\\\">\\n          <block type=\\\"io_print1\\\" id=\\\"rT{%+g;,rOik${4%a[NI\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\"Pl]S2FKZ|`#$RSmc63u^\\\">\\n                <field name=\\\"TEXT\\\">That's Australia's favourite bird!<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/statement>\\n        <next>\\n          <block type=\\\"io_print1\\\" id=\\\"tv2`U(9`O2M9w3dkiS`X\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\".e7tWj-(9T0Xr;7h,ZGT\\\">\\n                <field name=\\\"TEXT\\\">I like that bird.<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/next>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"no-else\"\n    },\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"bk-magpie-ans-2\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-workspace-lang=\\\"choices\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\";||!Y:~$to2*QtdOfg]U\\\">bird<\/variable>\\n    <variable type=\\\"\\\" id=\\\"bu)GnsiXTwG])Z]6MT^p\\\">magpie<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"J5N^5J3v%W)ae(y]!9MX\\\" x=\\\"10\\\" y=\\\"10\\\">\\n    <field name=\\\"VAR\\\" id=\\\";||!Y:~$to2*QtdOfg]U\\\" variabletype=\\\"\\\">bird<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"io_ask_text\\\" id=\\\"Nr7VZ2YiCF9Qmb_xE4%l\\\">\\n        <value name=\\\"TEXT\\\">\\n          <block type=\\\"text\\\" id=\\\"0gBAc3r9{yNK2mxS{(Tu\\\">\\n            <field name=\\\"TEXT\\\">Name a bird?<\/field>\\n          <\/block>\\n        <\/value>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"decisions_if_else\\\" id=\\\"Tyk|}19Y?r3rpLqJTh1^\\\">\\n        <value name=\\\"IF0\\\">\\n          <block type=\\\"logic_compare\\\" id=\\\"*[.r{%;%8Z=+BsCim]a6\\\">\\n            <field name=\\\"OP\\\">EQ<\/field>\\n            <value name=\\\"A\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"\/ceQIR=wOadLds1\/D+YW\\\">\\n                <field name=\\\"VAR\\\" id=\\\"bu)GnsiXTwG])Z]6MT^p\\\" variabletype=\\\"\\\">magpie<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"B\\\">\\n              <block type=\\\"text\\\" id=\\\"jsg7l;G55;=dKmQ6a+(,\\\">\\n                <field name=\\\"TEXT\\\">magpie<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/value>\\n        <statement name=\\\"DO0\\\">\\n          <block type=\\\"io_print1\\\" id=\\\"rT{%+g;,rOik${4%a[NI\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\"Pl]S2FKZ|`#$RSmc63u^\\\">\\n                <field name=\\\"TEXT\\\">That's Australia's favourite bird!<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/statement>\\n        <statement name=\\\"ELSE\\\">\\n          <block type=\\\"io_print1\\\" id=\\\"tv2`U(9`O2M9w3dkiS`X\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\".e7tWj-(9T0Xr;7h,ZGT\\\">\\n                <field name=\\\"TEXT\\\">I like that bird.<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/statement>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"incorrect-variable\"\n    },\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"bk-magpie-ans-3\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-workspace-lang=\\\"choices\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\";||!Y:~$to2*QtdOfg]U\\\">bird<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"J5N^5J3v%W)ae(y]!9MX\\\" x=\\\"10\\\" y=\\\"10\\\">\\n    <field name=\\\"VAR\\\" id=\\\";||!Y:~$to2*QtdOfg]U\\\" variabletype=\\\"\\\">bird<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"io_ask_text\\\" id=\\\"Nr7VZ2YiCF9Qmb_xE4%l\\\">\\n        <value name=\\\"TEXT\\\">\\n          <block type=\\\"text\\\" id=\\\"0gBAc3r9{yNK2mxS{(Tu\\\">\\n            <field name=\\\"TEXT\\\">Name a bird?<\/field>\\n          <\/block>\\n        <\/value>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"decisions_if_else\\\" id=\\\"].]`m[oR]?@\/_G@D`[~e\\\">\\n        <value name=\\\"IF0\\\">\\n          <block type=\\\"logic_compare\\\" id=\\\"*[.r{%;%8Z=+BsCim]a6\\\">\\n            <field name=\\\"OP\\\">EQ<\/field>\\n            <value name=\\\"A\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"%(ZMG@SYE7Mg^s7k`gg,\\\">\\n                <field name=\\\"VAR\\\" id=\\\";||!Y:~$to2*QtdOfg]U\\\" variabletype=\\\"\\\">bird<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"B\\\">\\n              <block type=\\\"text\\\" id=\\\"jsg7l;G55;=dKmQ6a+(,\\\">\\n                <field name=\\\"TEXT\\\">magpie<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/value>\\n        <statement name=\\\"DO0\\\">\\n          <block type=\\\"io_print1\\\" id=\\\"rT{%+g;,rOik${4%a[NI\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\"Pl]S2FKZ|`#$RSmc63u^\\\">\\n                <field name=\\\"TEXT\\\">That's Australia's favourite bird!<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/statement>\\n        <statement name=\\\"ELSE\\\">\\n          <block type=\\\"io_print1\\\" id=\\\"tv2`U(9`O2M9w3dkiS`X\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\".e7tWj-(9T0Xr;7h,ZGT\\\">\\n                <field name=\\\"TEXT\\\">I like that bird.<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/statement>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"magpie\"\n    },\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"bk-magpie-ans-4\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-workspace-lang=\\\"choices\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\";||!Y:~$to2*QtdOfg]U\\\">bird<\/variable>\\n    <variable type=\\\"\\\" id=\\\"bu)GnsiXTwG])Z]6MT^p\\\">magpie<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"J5N^5J3v%W)ae(y]!9MX\\\" x=\\\"11\\\" y=\\\"4\\\">\\n    <field name=\\\"VAR\\\" id=\\\";||!Y:~$to2*QtdOfg]U\\\" variabletype=\\\"\\\">bird<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"io_ask_text\\\" id=\\\"Nr7VZ2YiCF9Qmb_xE4%l\\\">\\n        <value name=\\\"TEXT\\\">\\n          <block type=\\\"text\\\" id=\\\"0gBAc3r9{yNK2mxS{(Tu\\\">\\n            <field name=\\\"TEXT\\\">Name a bird?<\/field>\\n          <\/block>\\n        <\/value>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"decisions_if_else\\\" id=\\\"Tyk|}19Y?r3rpLqJTh1^\\\">\\n        <value name=\\\"IF0\\\">\\n          <block type=\\\"logic_compare\\\" id=\\\"*[.r{%;%8Z=+BsCim]a6\\\">\\n            <field name=\\\"OP\\\">EQ<\/field>\\n            <value name=\\\"A\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"\/ceQIR=wOadLds1\/D+YW\\\">\\n                <field name=\\\"VAR\\\" id=\\\";||!Y:~$to2*QtdOfg]U\\\" variabletype=\\\"\\\">bird<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"B\\\">\\n              <block type=\\\"text\\\" id=\\\"jsg7l;G55;=dKmQ6a+(,\\\">\\n                <field name=\\\"TEXT\\\">magpie<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/value>\\n        <statement name=\\\"DO0\\\">\\n          <block type=\\\"io_print1\\\" id=\\\"rT{%+g;,rOik${4%a[NI\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\"Pl]S2FKZ|`#$RSmc63u^\\\">\\n                <field name=\\\"TEXT\\\">A magpie!<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/statement>\\n        <statement name=\\\"ELSE\\\">\\n          <block type=\\\"io_print1\\\" id=\\\"tv2`U(9`O2M9w3dkiS`X\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\".e7tWj-(9T0Xr;7h,ZGT\\\">\\n                <field name=\\\"TEXT\\\">I like that bird.<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/statement>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"incorrect-print\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 2\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThis question checks that students are being careful with how they write their code, checking for common typos and mistakes made by beginning programmers."
    },
    {
      "language":20,
      "title":"Is it a shark?",
      "notes":"#markdown\nGreat job! Checking that the conditions we test in our `if` statements is the key to being able to confirm that your code matches your algorithm.",
      "updated_at":"2018-03-06T00:43:11.818482+00:00",
      "label":"aca-choices-bio-is-it-a-shark-blocks",
      "content":"#markdown\n\n## Choose the flowchart below that represents the following code snippet.\n\n```lang:blockly;norun\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"H_$x%H`F|bSf[~1HOeW\/\">shark<\/variable>\n  <\/variables>\n  <block type=\"io_print1\" id=\",[~Dq\/1l)|nUMJ6k^Z?l\" x=\"6\" y=\"8\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"21-GcuDEfzj1[}[Ay{Yd\">\n        <field name=\"TEXT\">Oh look! A fish!<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"l}me6T@73WaeStT7OrZZ\">\n        <field name=\"VAR\" id=\"H_$x%H`F|bSf[~1HOeW\/\" variabletype=\"\">shark<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"(@eX4v-,yExD5MjteLYz\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"Vsp[Hd8Zvn9j+@mm3H^|\">\n                <field name=\"TEXT\">Is it a shark (yes\/no)?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"decisions_if_else\" id=\"%s2-S%$|aqmtiFw.f(w^\">\n            <value name=\"IF0\">\n              <block type=\"logic_compare\" id=\"%:]||]rv2bN}bok%Hk].\">\n                <field name=\"OP\">EQ<\/field>\n                <value name=\"A\">\n                  <block type=\"variables_get\" id=\"y(,[af!72d^UuHgzpm@6\">\n                    <field name=\"VAR\" id=\"H_$x%H`F|bSf[~1HOeW\/\" variabletype=\"\">shark<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"text\" id=\"iMS|oJu_~r1u2_-)lf#9\">\n                    <field name=\"TEXT\">yes<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <statement name=\"DO0\">\n              <block type=\"io_print1\" id=\"2XAS%83a8mE^pKLD3Ra7\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"K+lWwAhGJ8mNJnOy_;o}\">\n                    <field name=\"TEXT\">Swim to shore!<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <statement name=\"ELSE\">\n              <block type=\"io_print1\" id=\"Ry|B+hRiAANZMoncE$;n\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"|kgTA`NrIES]g4.MQ~5$\">\n                    <field name=\"TEXT\">Keep swimming<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":2},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"<svg width=\\\\\\\"359px\\\\\\\" height=\\\\\\\"241px\\\\\\\" viewBox=\\\\\\\"0 0 359 241\\\\\\\" version=\\\\\\\"1.1\\\\\\\" xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/2000\\\/svg\\\\\\\" xmlns:xlink=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xlink\\\\\\\">\\\\n    <!-- Generator: Sketch 48.2 (47327) - http:\\\/\\\/www.bohemiancoding.com\\\/sketch -->\\\\n    <title>no-shark<\\\/title>\\\\n    <desc>Created with Sketch.<\\\/desc>\\\\n    <defs>\\\\n        <rect id=\\\\\\\"apath-1\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <rect id=\\\\\\\"apath-2\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <polygon id=\\\\\\\"apath-3\\\\\\\" points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n    <\\\/defs>\\\\n    <g id=\\\\\\\"muti-choice-shark\\\\\\\" stroke=\\\\\\\"none\\\\\\\" stroke-width=\\\\\\\"1\\\\\\\" fill=\\\\\\\"none\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\">\\\\n        <g id=\\\\\\\"ano-shark\\\\\\\">\\\\n            <g id=\\\\\\\"astart\\\\\\\" transform=\\\\\\\"translate(0.000000, 85.000000)\\\\\\\">\\\\n                <circle id=\\\\\\\"aOval\\\\\\\" fill=\\\\\\\"#7B188F\\\\\\\" cx=\\\\\\\"35\\\\\\\" cy=\\\\\\\"35\\\\\\\" r=\\\\\\\"35\\\\\\\"><\\\/circle>\\\\n                <text id=\\\\\\\"aStart\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"19.943\\\\\\\" y=\\\\\\\"39\\\\\\\">Start<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"akeep-swimming\\\\\\\" transform=\\\\\\\"translate(264.000000, 181.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"aRectangle3\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#apath-1\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"aKeep-swimming\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"31.5085\\\\\\\" y=\\\\\\\"25\\\\\\\">Keep<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"15.881\\\\\\\" y=\\\\\\\"42\\\\\\\">swimming<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"aswim-to-shore\\\\\\\" transform=\\\\\\\"translate(264.000000, 0.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"aRectangle\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#apath-2\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"aSwim-to-shore\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"30.511\\\\\\\" y=\\\\\\\"25\\\\\\\">Swim<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"21.908\\\\\\\" y=\\\\\\\"42\\\\\\\">to shore<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"asee-fish\\\\\\\" transform=\\\\\\\"translate(130.000000, 60.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"aRectangle-2\\\\\\\">\\\\n                    <use fill=\\\\\\\"#FF5900\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#apath-3\\\\\\\"><\\\/use>\\\\n                    <polygon points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"aSee-a-fish?\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"48.695\\\\\\\" y=\\\\\\\"46\\\\\\\">See<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"56.4475\\\\\\\" y=\\\\\\\"63\\\\\\\">a<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"45.72\\\\\\\" y=\\\\\\\"80\\\\\\\">fish?<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <path d=\\\\\\\"M191,30 L258.881848,30\\\\\\\" id=\\\\\\\"aLineb\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"aLineb-decoration-1\\\\\\\" d=\\\\\\\"M258.881848,30 L248.081848,27 L248.081848,33 L258.881848,30 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M191,210 L258.881848,210\\\\\\\" id=\\\\\\\"aLinea\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"aLinea-decoration-1\\\\\\\" d=\\\\\\\"M258.881848,210 L248.081848,207 L248.081848,213 L258.881848,210 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M191,56.7632697 L191,30\\\\\\\" id=\\\\\\\"aLine-4\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M191,209.76327 L191,183\\\\\\\" id=\\\\\\\"aLine-4a\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M74,120 L125.496575,120\\\\\\\" id=\\\\\\\"aLine\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"aLine-decoration-1\\\\\\\" d=\\\\\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <text id=\\\\\\\"ayes\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"163.725\\\\\\\" y=\\\\\\\"61\\\\\\\">yes<\\\/tspan>\\\\n            <\\\/text>\\\\n            <text id=\\\\\\\"ano\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"167.75\\\\\\\" y=\\\\\\\"195\\\\\\\">no<\\\/tspan>\\\\n            <\\\/text>\\\\n        <\\\/g>\\\\n    <\\\/g>\\\\n<\\\/svg>\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"<svg width=\\\\\\\"359px\\\\\\\" height=\\\\\\\"241px\\\\\\\" viewBox=\\\\\\\"0 0 359 241\\\\\\\" version=\\\\\\\"1.1\\\\\\\" xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/2000\\\/svg\\\\\\\" xmlns:xlink=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xlink\\\\\\\">\\\\n    <!-- Generator: Sketch 48.2 (47327) - http:\\\/\\\/www.bohemiancoding.com\\\/sketch -->\\\\n    <title>no-print<\\\/title>\\\\n    <desc>Created with Sketch.<\\\/desc>\\\\n    <defs>\\\\n        <rect id=\\\\\\\"bpath-1\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <rect id=\\\\\\\"bpath-2\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <polygon id=\\\\\\\"bpath-3\\\\\\\" points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n    <\\\/defs>\\\\n    <g id=\\\\\\\"muti-choice-shark\\\\\\\" stroke=\\\\\\\"none\\\\\\\" stroke-width=\\\\\\\"1\\\\\\\" fill=\\\\\\\"none\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\">\\\\n        <g id=\\\\\\\"bno-print\\\\\\\">\\\\n            <g id=\\\\\\\"bstart\\\\\\\" transform=\\\\\\\"translate(0.000000, 85.000000)\\\\\\\">\\\\n                <circle id=\\\\\\\"bOval\\\\\\\" fill=\\\\\\\"#7B188F\\\\\\\" cx=\\\\\\\"35\\\\\\\" cy=\\\\\\\"35\\\\\\\" r=\\\\\\\"35\\\\\\\"><\\\/circle>\\\\n                <text id=\\\\\\\"bStart\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"19.943\\\\\\\" y=\\\\\\\"39\\\\\\\">Start<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"bkeep-swimming\\\\\\\" transform=\\\\\\\"translate(264.000000, 181.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"bRectangle4\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#bpath-1\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"bKeep-swimming\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"31.5085\\\\\\\" y=\\\\\\\"25\\\\\\\">Keep<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"15.881\\\\\\\" y=\\\\\\\"42\\\\\\\">swimming<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"bswim-to-shore\\\\\\\" transform=\\\\\\\"translate(264.000000, 0.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"bRectangle3\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#bpath-2\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"bSwim-to-shore\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"30.511\\\\\\\" y=\\\\\\\"25\\\\\\\">Swim<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"21.908\\\\\\\" y=\\\\\\\"42\\\\\\\">to shore<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"bis-shark\\\\\\\" transform=\\\\\\\"translate(130.000000, 60.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"bRectangle-2\\\\\\\">\\\\n                    <use fill=\\\\\\\"#FF5900\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#bpath-3\\\\\\\"><\\\/use>\\\\n                    <polygon points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"bIs-it-a-shark?\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"54.939\\\\\\\" y=\\\\\\\"46\\\\\\\">Is<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"50.3645\\\\\\\" y=\\\\\\\"63\\\\\\\">it a<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"39.8505\\\\\\\" y=\\\\\\\"80\\\\\\\">shark?<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <path d=\\\\\\\"M191,30 L258.881848,30\\\\\\\" id=\\\\\\\"bLineb\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"bLineb-decoration-1\\\\\\\" d=\\\\\\\"M258.881848,30 L248.081848,27 L248.081848,33 L258.881848,30 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M191,210 L258.881848,210\\\\\\\" id=\\\\\\\"bLinea\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"bLinea-decoration-1\\\\\\\" d=\\\\\\\"M258.881848,210 L248.081848,207 L248.081848,213 L258.881848,210 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M191,56.7632697 L191,30\\\\\\\" id=\\\\\\\"bLine-4a\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M191,209.76327 L191,183\\\\\\\" id=\\\\\\\"bLine-4\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M74,120 L125.496575,120\\\\\\\" id=\\\\\\\"bLine\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"bLine-decoration-1\\\\\\\" d=\\\\\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <text id=\\\\\\\"byes\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"163.725\\\\\\\" y=\\\\\\\"61\\\\\\\">yes<\\\/tspan>\\\\n            <\\\/text>\\\\n            <text id=\\\\\\\"bno\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"167.75\\\\\\\" y=\\\\\\\"195\\\\\\\">no<\\\/tspan>\\\\n            <\\\/text>\\\\n        <\\\/g>\\\\n    <\\\/g>\\\\n<\\\/svg>\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"<svg width=\\\\\\\"517px\\\\\\\" height=\\\\\\\"241px\\\\\\\" viewBox=\\\\\\\"0 0 517 241\\\\\\\" version=\\\\\\\"1.1\\\\\\\" xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/2000\\\/svg\\\\\\\" xmlns:xlink=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xlink\\\\\\\">\\\\n    <!-- Generator: Sketch 48.2 (47327) - http:\\\/\\\/www.bohemiancoding.com\\\/sketch -->\\\\n    <title>correct<\\\/title>\\\\n    <desc>Created with Sketch.<\\\/desc>\\\\n    <defs>\\\\n        <rect id=\\\\\\\"dpath-1\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <rect id=\\\\\\\"dpath-2\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <rect id=\\\\\\\"dpath-3\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <polygon id=\\\\\\\"dpath-4\\\\\\\" points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n    <\\\/defs>\\\\n    <g id=\\\\\\\"muti-choice-shark\\\\\\\" stroke=\\\\\\\"none\\\\\\\" stroke-width=\\\\\\\"1\\\\\\\" fill=\\\\\\\"none\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\">\\\\n        <g id=\\\\\\\"dcorrect\\\\\\\">\\\\n            <g id=\\\\\\\"dstart\\\\\\\" transform=\\\\\\\"translate(0.000000, 85.000000)\\\\\\\">\\\\n                <circle id=\\\\\\\"dOval\\\\\\\" fill=\\\\\\\"#7B188F\\\\\\\" cx=\\\\\\\"35\\\\\\\" cy=\\\\\\\"35\\\\\\\" r=\\\\\\\"35\\\\\\\"><\\\/circle>\\\\n                <text id=\\\\\\\"dStart\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"19.943\\\\\\\" y=\\\\\\\"39\\\\\\\">Start<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"dkeep-swimming\\\\\\\" transform=\\\\\\\"translate(422.000000, 181.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"dRectangle4\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#dpath-1\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"dKeep-swimming\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"31.5085\\\\\\\" y=\\\\\\\"25\\\\\\\">Keep<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"15.881\\\\\\\" y=\\\\\\\"42\\\\\\\">swimming<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"dsee-fish\\\\\\\" transform=\\\\\\\"translate(131.000000, 89.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"dRectangle3\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#dpath-2\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"dSee-a-fish\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"18.0125\\\\\\\" y=\\\\\\\"34\\\\\\\">See a fish<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"dswim-to-shore\\\\\\\" transform=\\\\\\\"translate(422.000000, 0.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"dRectangle\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#dpath-3\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"dSwim-to-shore\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"30.511\\\\\\\" y=\\\\\\\"25\\\\\\\">Swim<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"21.908\\\\\\\" y=\\\\\\\"42\\\\\\\">to shore<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"dis-shark\\\\\\\" transform=\\\\\\\"translate(288.000000, 60.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"dRectangle-2\\\\\\\">\\\\n                    <use fill=\\\\\\\"#FF5900\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#dpath-4\\\\\\\"><\\\/use>\\\\n                    <polygon points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"dIs-it-a-shark?\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"54.939\\\\\\\" y=\\\\\\\"46\\\\\\\">Is<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"50.3645\\\\\\\" y=\\\\\\\"63\\\\\\\">it a<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"39.8505\\\\\\\" y=\\\\\\\"80\\\\\\\">shark?<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <path d=\\\\\\\"M349,30 L416.881848,30\\\\\\\" id=\\\\\\\"dLinec\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"dLinec-decoration-1\\\\\\\" d=\\\\\\\"M416.881848,30 L406.081848,27 L406.081848,33 L416.881848,30 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M349,210 L416.881848,210\\\\\\\" id=\\\\\\\"dLineb\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"dLineb-decoration-1\\\\\\\" d=\\\\\\\"M416.881848,210 L406.081848,207 L406.081848,213 L416.881848,210 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M349,56.7632697 L349,30\\\\\\\" id=\\\\\\\"dLine-4a\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M349,209.76327 L349,183\\\\\\\" id=\\\\\\\"dLine-4\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M74,120 L125.496575,120\\\\\\\" id=\\\\\\\"dLinea\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"dLinea-decoration-1\\\\\\\" d=\\\\\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M232,120 L283.496575,120\\\\\\\" id=\\\\\\\"dLine\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"dLine-decoration-1\\\\\\\" d=\\\\\\\"M283.496575,120 L272.696575,117 L272.696575,123 L283.496575,120 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <text id=\\\\\\\"dyes\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"321.725\\\\\\\" y=\\\\\\\"61\\\\\\\">yes<\\\/tspan>\\\\n            <\\\/text>\\\\n            <text id=\\\\\\\"dno\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"325.75\\\\\\\" y=\\\\\\\"195\\\\\\\">no<\\\/tspan>\\\\n            <\\\/text>\\\\n        <\\\/g>\\\\n    <\\\/g>\\\\n<\\\/svg>\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"<svg width=\\\\\\\"517px\\\\\\\" height=\\\\\\\"241px\\\\\\\" viewBox=\\\\\\\"0 0 517 241\\\\\\\" version=\\\\\\\"1.1\\\\\\\" xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/2000\\\/svg\\\\\\\" xmlns:xlink=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xlink\\\\\\\">\\\\n    <!-- Generator: Sketch 48.2 (47327) - http:\\\/\\\/www.bohemiancoding.com\\\/sketch -->\\\\n    <title>flip-yes-no<\\\/title>\\\\n    <desc>Created with Sketch.<\\\/desc>\\\\n    <defs>\\\\n        <rect id=\\\\\\\"path-1\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <rect id=\\\\\\\"path-2\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <rect id=\\\\\\\"path-3\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <polygon id=\\\\\\\"path-4\\\\\\\" points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n    <\\\/defs>\\\\n    <g id=\\\\\\\"muti-choice-shark\\\\\\\" stroke=\\\\\\\"none\\\\\\\" stroke-width=\\\\\\\"1\\\\\\\" fill=\\\\\\\"none\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\">\\\\n        <g id=\\\\\\\"cflip-yes-no\\\\\\\">\\\\n            <g id=\\\\\\\"cstart\\\\\\\" transform=\\\\\\\"translate(0.000000, 85.000000)\\\\\\\">\\\\n                <circle id=\\\\\\\"cOval\\\\\\\" fill=\\\\\\\"#7B188F\\\\\\\" cx=\\\\\\\"35\\\\\\\" cy=\\\\\\\"35\\\\\\\" r=\\\\\\\"35\\\\\\\"><\\\/circle>\\\\n                <text id=\\\\\\\"cStart\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"19.943\\\\\\\" y=\\\\\\\"39\\\\\\\">Start<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"cswim-to-shore\\\\\\\" transform=\\\\\\\"translate(422.000000, 181.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"cRectangle4\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#path-1\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"cSwim-to-shore\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"22.2125\\\\\\\" y=\\\\\\\"25\\\\\\\">Swim to <\\\/tspan>\\\\n                    <tspan x=\\\\\\\"30.2065\\\\\\\" y=\\\\\\\"42\\\\\\\">shore<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"csee-a-fish\\\\\\\" transform=\\\\\\\"translate(131.000000, 89.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"cRectangle3\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#path-2\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"cSee-a-fish\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"18.0125\\\\\\\" y=\\\\\\\"34\\\\\\\">See a fish<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"ckeep-swimming\\\\\\\" transform=\\\\\\\"translate(422.000000, 0.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"cRectangle\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#path-3\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"cKeep-swimming\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"31.5085\\\\\\\" y=\\\\\\\"25\\\\\\\">Keep<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"15.881\\\\\\\" y=\\\\\\\"42\\\\\\\">swimming<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"cis-shark\\\\\\\" transform=\\\\\\\"translate(288.000000, 60.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"cRectangle-2\\\\\\\">\\\\n                    <use fill=\\\\\\\"#FF5900\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#path-4\\\\\\\"><\\\/use>\\\\n                    <polygon points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"cIs-it-a-shark?\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"54.939\\\\\\\" y=\\\\\\\"46\\\\\\\">Is<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"50.3645\\\\\\\" y=\\\\\\\"63\\\\\\\">it a<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"39.8505\\\\\\\" y=\\\\\\\"80\\\\\\\">shark?<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <path d=\\\\\\\"M349,30 L416.881848,30\\\\\\\" id=\\\\\\\"cLinec\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"cLinec-decoration-1\\\\\\\" d=\\\\\\\"M416.881848,30 L406.081848,27 L406.081848,33 L416.881848,30 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M349,210 L416.881848,210\\\\\\\" id=\\\\\\\"cLineb\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"cLineb-decoration-1\\\\\\\" d=\\\\\\\"M416.881848,210 L406.081848,207 L406.081848,213 L416.881848,210 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M349,56.7632697 L349,30\\\\\\\" id=\\\\\\\"cLine-4a\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M349,209.76327 L349,183\\\\\\\" id=\\\\\\\"cLine-4\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M74,120 L125.496575,120\\\\\\\" id=\\\\\\\"cLinea\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"cLinea-decoration-1\\\\\\\" d=\\\\\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M232,120 L283.496575,120\\\\\\\" id=\\\\\\\"cLine\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"cLine-decoration-1\\\\\\\" d=\\\\\\\"M283.496575,120 L272.696575,117 L272.696575,123 L283.496575,120 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <text id=\\\\\\\"cyes\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"321.725\\\\\\\" y=\\\\\\\"61\\\\\\\">yes<\\\/tspan>\\\\n            <\\\/text>\\\\n            <text id=\\\\\\\"cno\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"325.75\\\\\\\" y=\\\\\\\"195\\\\\\\">no<\\\/tspan>\\\\n            <\\\/text>\\\\n        <\\\/g>\\\\n    <\\\/g>\\\\n<\\\/svg>\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"<svg width=\\\"359px\\\" height=\\\"241px\\\" viewBox=\\\"0 0 359 241\\\" version=\\\"1.1\\\" xmlns=\\\"http:\/\/www.w3.org\/2000\/svg\\\" xmlns:xlink=\\\"http:\/\/www.w3.org\/1999\/xlink\\\">\\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\\n    <title>no-shark<\/title>\\n    <desc>Created with Sketch.<\/desc>\\n    <defs>\\n        <rect id=\\\"apath-1\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <rect id=\\\"apath-2\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <polygon id=\\\"apath-3\\\" points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n    <\/defs>\\n    <g id=\\\"muti-choice-shark\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\\n        <g id=\\\"ano-shark\\\">\\n            <g id=\\\"astart\\\" transform=\\\"translate(0.000000, 85.000000)\\\">\\n                <circle id=\\\"aOval\\\" fill=\\\"#7B188F\\\" cx=\\\"35\\\" cy=\\\"35\\\" r=\\\"35\\\"><\/circle>\\n                <text id=\\\"aStart\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"19.943\\\" y=\\\"39\\\">Start<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"akeep-swimming\\\" transform=\\\"translate(264.000000, 181.000000)\\\">\\n                <g id=\\\"aRectangle3\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#apath-1\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"aKeep-swimming\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"31.5085\\\" y=\\\"25\\\">Keep<\/tspan>\\n                    <tspan x=\\\"15.881\\\" y=\\\"42\\\">swimming<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"aswim-to-shore\\\" transform=\\\"translate(264.000000, 0.000000)\\\">\\n                <g id=\\\"aRectangle\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#apath-2\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"aSwim-to-shore\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"30.511\\\" y=\\\"25\\\">Swim<\/tspan>\\n                    <tspan x=\\\"21.908\\\" y=\\\"42\\\">to shore<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"asee-fish\\\" transform=\\\"translate(130.000000, 60.000000)\\\">\\n                <g id=\\\"aRectangle-2\\\">\\n                    <use fill=\\\"#FF5900\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#apath-3\\\"><\/use>\\n                    <polygon points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n                <\/g>\\n                <text id=\\\"aSee-a-fish?\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"48.695\\\" y=\\\"46\\\">See<\/tspan>\\n                    <tspan x=\\\"56.4475\\\" y=\\\"63\\\">a<\/tspan>\\n                    <tspan x=\\\"45.72\\\" y=\\\"80\\\">fish?<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <path d=\\\"M191,30 L258.881848,30\\\" id=\\\"aLineb\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"aLineb-decoration-1\\\" d=\\\"M258.881848,30 L248.081848,27 L248.081848,33 L258.881848,30 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M191,210 L258.881848,210\\\" id=\\\"aLinea\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"aLinea-decoration-1\\\" d=\\\"M258.881848,210 L248.081848,207 L248.081848,213 L258.881848,210 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M191,56.7632697 L191,30\\\" id=\\\"aLine-4\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M191,209.76327 L191,183\\\" id=\\\"aLine-4a\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M74,120 L125.496575,120\\\" id=\\\"aLine\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"aLine-decoration-1\\\" d=\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <text id=\\\"ayes\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"163.725\\\" y=\\\"61\\\">yes<\/tspan>\\n            <\/text>\\n            <text id=\\\"ano\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"167.75\\\" y=\\\"195\\\">no<\/tspan>\\n            <\/text>\\n        <\/g>\\n    <\/g>\\n<\/svg>\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"no-shark\"\n    },\n    {\n      \"content\": \"<svg width=\\\"359px\\\" height=\\\"241px\\\" viewBox=\\\"0 0 359 241\\\" version=\\\"1.1\\\" xmlns=\\\"http:\/\/www.w3.org\/2000\/svg\\\" xmlns:xlink=\\\"http:\/\/www.w3.org\/1999\/xlink\\\">\\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\\n    <title>no-print<\/title>\\n    <desc>Created with Sketch.<\/desc>\\n    <defs>\\n        <rect id=\\\"bpath-1\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <rect id=\\\"bpath-2\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <polygon id=\\\"bpath-3\\\" points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n    <\/defs>\\n    <g id=\\\"muti-choice-shark\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\\n        <g id=\\\"bno-print\\\">\\n            <g id=\\\"bstart\\\" transform=\\\"translate(0.000000, 85.000000)\\\">\\n                <circle id=\\\"bOval\\\" fill=\\\"#7B188F\\\" cx=\\\"35\\\" cy=\\\"35\\\" r=\\\"35\\\"><\/circle>\\n                <text id=\\\"bStart\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"19.943\\\" y=\\\"39\\\">Start<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"bkeep-swimming\\\" transform=\\\"translate(264.000000, 181.000000)\\\">\\n                <g id=\\\"bRectangle4\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#bpath-1\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"bKeep-swimming\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"31.5085\\\" y=\\\"25\\\">Keep<\/tspan>\\n                    <tspan x=\\\"15.881\\\" y=\\\"42\\\">swimming<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"bswim-to-shore\\\" transform=\\\"translate(264.000000, 0.000000)\\\">\\n                <g id=\\\"bRectangle3\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#bpath-2\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"bSwim-to-shore\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"30.511\\\" y=\\\"25\\\">Swim<\/tspan>\\n                    <tspan x=\\\"21.908\\\" y=\\\"42\\\">to shore<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"bis-shark\\\" transform=\\\"translate(130.000000, 60.000000)\\\">\\n                <g id=\\\"bRectangle-2\\\">\\n                    <use fill=\\\"#FF5900\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#bpath-3\\\"><\/use>\\n                    <polygon points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n                <\/g>\\n                <text id=\\\"bIs-it-a-shark?\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"54.939\\\" y=\\\"46\\\">Is<\/tspan>\\n                    <tspan x=\\\"50.3645\\\" y=\\\"63\\\">it a<\/tspan>\\n                    <tspan x=\\\"39.8505\\\" y=\\\"80\\\">shark?<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <path d=\\\"M191,30 L258.881848,30\\\" id=\\\"bLineb\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"bLineb-decoration-1\\\" d=\\\"M258.881848,30 L248.081848,27 L248.081848,33 L258.881848,30 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M191,210 L258.881848,210\\\" id=\\\"bLinea\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"bLinea-decoration-1\\\" d=\\\"M258.881848,210 L248.081848,207 L248.081848,213 L258.881848,210 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M191,56.7632697 L191,30\\\" id=\\\"bLine-4a\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M191,209.76327 L191,183\\\" id=\\\"bLine-4\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M74,120 L125.496575,120\\\" id=\\\"bLine\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"bLine-decoration-1\\\" d=\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <text id=\\\"byes\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"163.725\\\" y=\\\"61\\\">yes<\/tspan>\\n            <\/text>\\n            <text id=\\\"bno\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"167.75\\\" y=\\\"195\\\">no<\/tspan>\\n            <\/text>\\n        <\/g>\\n    <\/g>\\n<\/svg>\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"no-print\"\n    },\n    {\n      \"content\": \"<svg width=\\\"517px\\\" height=\\\"241px\\\" viewBox=\\\"0 0 517 241\\\" version=\\\"1.1\\\" xmlns=\\\"http:\/\/www.w3.org\/2000\/svg\\\" xmlns:xlink=\\\"http:\/\/www.w3.org\/1999\/xlink\\\">\\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\\n    <title>correct<\/title>\\n    <desc>Created with Sketch.<\/desc>\\n    <defs>\\n        <rect id=\\\"dpath-1\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <rect id=\\\"dpath-2\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <rect id=\\\"dpath-3\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <polygon id=\\\"dpath-4\\\" points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n    <\/defs>\\n    <g id=\\\"muti-choice-shark\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\\n        <g id=\\\"dcorrect\\\">\\n            <g id=\\\"dstart\\\" transform=\\\"translate(0.000000, 85.000000)\\\">\\n                <circle id=\\\"dOval\\\" fill=\\\"#7B188F\\\" cx=\\\"35\\\" cy=\\\"35\\\" r=\\\"35\\\"><\/circle>\\n                <text id=\\\"dStart\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"19.943\\\" y=\\\"39\\\">Start<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"dkeep-swimming\\\" transform=\\\"translate(422.000000, 181.000000)\\\">\\n                <g id=\\\"dRectangle4\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#dpath-1\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"dKeep-swimming\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"31.5085\\\" y=\\\"25\\\">Keep<\/tspan>\\n                    <tspan x=\\\"15.881\\\" y=\\\"42\\\">swimming<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"dsee-fish\\\" transform=\\\"translate(131.000000, 89.000000)\\\">\\n                <g id=\\\"dRectangle3\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#dpath-2\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"dSee-a-fish\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"18.0125\\\" y=\\\"34\\\">See a fish<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"dswim-to-shore\\\" transform=\\\"translate(422.000000, 0.000000)\\\">\\n                <g id=\\\"dRectangle\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#dpath-3\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"dSwim-to-shore\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"30.511\\\" y=\\\"25\\\">Swim<\/tspan>\\n                    <tspan x=\\\"21.908\\\" y=\\\"42\\\">to shore<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"dis-shark\\\" transform=\\\"translate(288.000000, 60.000000)\\\">\\n                <g id=\\\"dRectangle-2\\\">\\n                    <use fill=\\\"#FF5900\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#dpath-4\\\"><\/use>\\n                    <polygon points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n                <\/g>\\n                <text id=\\\"dIs-it-a-shark?\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"54.939\\\" y=\\\"46\\\">Is<\/tspan>\\n                    <tspan x=\\\"50.3645\\\" y=\\\"63\\\">it a<\/tspan>\\n                    <tspan x=\\\"39.8505\\\" y=\\\"80\\\">shark?<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <path d=\\\"M349,30 L416.881848,30\\\" id=\\\"dLinec\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"dLinec-decoration-1\\\" d=\\\"M416.881848,30 L406.081848,27 L406.081848,33 L416.881848,30 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M349,210 L416.881848,210\\\" id=\\\"dLineb\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"dLineb-decoration-1\\\" d=\\\"M416.881848,210 L406.081848,207 L406.081848,213 L416.881848,210 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M349,56.7632697 L349,30\\\" id=\\\"dLine-4a\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M349,209.76327 L349,183\\\" id=\\\"dLine-4\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M74,120 L125.496575,120\\\" id=\\\"dLinea\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"dLinea-decoration-1\\\" d=\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M232,120 L283.496575,120\\\" id=\\\"dLine\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"dLine-decoration-1\\\" d=\\\"M283.496575,120 L272.696575,117 L272.696575,123 L283.496575,120 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <text id=\\\"dyes\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"321.725\\\" y=\\\"61\\\">yes<\/tspan>\\n            <\/text>\\n            <text id=\\\"dno\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"325.75\\\" y=\\\"195\\\">no<\/tspan>\\n            <\/text>\\n        <\/g>\\n    <\/g>\\n<\/svg>\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"see-shark\"\n    },\n    {\n      \"content\": \"<svg width=\\\"517px\\\" height=\\\"241px\\\" viewBox=\\\"0 0 517 241\\\" version=\\\"1.1\\\" xmlns=\\\"http:\/\/www.w3.org\/2000\/svg\\\" xmlns:xlink=\\\"http:\/\/www.w3.org\/1999\/xlink\\\">\\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\\n    <title>flip-yes-no<\/title>\\n    <desc>Created with Sketch.<\/desc>\\n    <defs>\\n        <rect id=\\\"path-1\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <rect id=\\\"path-2\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <rect id=\\\"path-3\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <polygon id=\\\"path-4\\\" points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n    <\/defs>\\n    <g id=\\\"muti-choice-shark\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\\n        <g id=\\\"cflip-yes-no\\\">\\n            <g id=\\\"cstart\\\" transform=\\\"translate(0.000000, 85.000000)\\\">\\n                <circle id=\\\"cOval\\\" fill=\\\"#7B188F\\\" cx=\\\"35\\\" cy=\\\"35\\\" r=\\\"35\\\"><\/circle>\\n                <text id=\\\"cStart\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"19.943\\\" y=\\\"39\\\">Start<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"cswim-to-shore\\\" transform=\\\"translate(422.000000, 181.000000)\\\">\\n                <g id=\\\"cRectangle4\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#path-1\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"cSwim-to-shore\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"22.2125\\\" y=\\\"25\\\">Swim to <\/tspan>\\n                    <tspan x=\\\"30.2065\\\" y=\\\"42\\\">shore<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"csee-a-fish\\\" transform=\\\"translate(131.000000, 89.000000)\\\">\\n                <g id=\\\"cRectangle3\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#path-2\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"cSee-a-fish\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"18.0125\\\" y=\\\"34\\\">See a fish<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"ckeep-swimming\\\" transform=\\\"translate(422.000000, 0.000000)\\\">\\n                <g id=\\\"cRectangle\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#path-3\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"cKeep-swimming\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"31.5085\\\" y=\\\"25\\\">Keep<\/tspan>\\n                    <tspan x=\\\"15.881\\\" y=\\\"42\\\">swimming<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"cis-shark\\\" transform=\\\"translate(288.000000, 60.000000)\\\">\\n                <g id=\\\"cRectangle-2\\\">\\n                    <use fill=\\\"#FF5900\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#path-4\\\"><\/use>\\n                    <polygon points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n                <\/g>\\n                <text id=\\\"cIs-it-a-shark?\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"54.939\\\" y=\\\"46\\\">Is<\/tspan>\\n                    <tspan x=\\\"50.3645\\\" y=\\\"63\\\">it a<\/tspan>\\n                    <tspan x=\\\"39.8505\\\" y=\\\"80\\\">shark?<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <path d=\\\"M349,30 L416.881848,30\\\" id=\\\"cLinec\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"cLinec-decoration-1\\\" d=\\\"M416.881848,30 L406.081848,27 L406.081848,33 L416.881848,30 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M349,210 L416.881848,210\\\" id=\\\"cLineb\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"cLineb-decoration-1\\\" d=\\\"M416.881848,210 L406.081848,207 L406.081848,213 L416.881848,210 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M349,56.7632697 L349,30\\\" id=\\\"cLine-4a\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M349,209.76327 L349,183\\\" id=\\\"cLine-4\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M74,120 L125.496575,120\\\" id=\\\"cLinea\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"cLinea-decoration-1\\\" d=\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M232,120 L283.496575,120\\\" id=\\\"cLine\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"cLine-decoration-1\\\" d=\\\"M283.496575,120 L272.696575,117 L272.696575,123 L283.496575,120 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <text id=\\\"cyes\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"321.725\\\" y=\\\"61\\\">yes<\/tspan>\\n            <\/text>\\n            <text id=\\\"cno\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"325.75\\\" y=\\\"195\\\">no<\/tspan>\\n            <\/text>\\n        <\/g>\\n    <\/g>\\n<\/svg>\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"flip-yes-no\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 2\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"Whenever an algorithm branches (represented by the orange diamond in the flowchart), it usually requires the use of an `if` statement in code. From there, the challenge is making sure you travel down the correct branch based on the variable's value, and that is what is being tested in this question."
    },
    {
      "language":0,
      "title":"Predator or prey",
      "notes":"#markdown\nThis solution is very similar to the last one. We start by creating a variable (<bk class=\"var\"><bk class=\"inner\">feature<\/bk><\/bk> is a good name) and <bk class=\"str\">ask<\/bk> the user <bk class=\"str lit\"><bk class=\"inner\">What is the feature?<\/bk><\/bk>:\n\n```lang:blockly;norun\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"YDzw\/?_Rn;AZG!MuYDC;\">feature<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"aXH7)NsWh%ZRQ$oeDYvV\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"YDzw\/?_Rn;AZG!MuYDC;\" variabletype=\"\">feature<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"6nTlmk?5gPiBR!9j;=Ui\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"ZOZd!s}`Mbz$FN7|!~rx\">\n            <field name=\"TEXT\">What is the feature?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThen we add our <bk class=\"control\">if else<\/bk> block:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"YDzw\/?_Rn;AZG!MuYDC;\">feature<\/variable>\n  <\/variables>\n  <block type=\"decisions_if_else\" id=\"2[liuEg5onRo|.u$XGF!\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"Y_4qH._M4GfoMMjLmsq$\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"|hE(X:ZdzT|[9X;IoNU(\">\n            <field name=\"VAR\" id=\"YDzw\/?_Rn;AZG!MuYDC;\" variabletype=\"\">feature<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"\/ZS^IH!]B`lX]LMFK`+U\">\n            <field name=\"TEXT\">claws<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"%1\/L$V3#TF4W5T{?aS8X\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"~\/`9zFdnW1dDdxQA`O6w\">\n            <field name=\"TEXT\">It is a predator.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <statement name=\"ELSE\">\n      <block type=\"io_print1\" id=\"qD,r1?U#(sa\/VtPoL*Mq\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"xSWiH!,]kYUgJeda^Zwk\">\n            <field name=\"TEXT\">It is prey.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n```\nCombine them together to get the solution:\n",
      "updated_at":"2018-03-06T00:40:50.110892+00:00",
      "label":"aca-bk-bio-predator-or-prey",
      "content":"#markdown\nOften, the *features* of an animal help us determine what type of animal it is. *Predators* are animals that hunt others, and *prey* are the animals they hunt.\n\nFor example, most *predators* don't have the ability to *camoflage*, but *prey* do. \n\nWrite a program to find out if the animal is predator or prey by asking for a feature. If the feature is `'claws'` then it is probably a predator, otherwise it is most likely prey.\n\nHere's an example:\n\n```terminal;eg:none;\nWhat is the feature? @@@claws\nIt is a predator.\n\n```\n\nIf they say *anything* else, you should say, `lang:out;It is prey.`\n\n```terminal;eg:none;\nWhat is the feature? @@@pouch\nIt is prey.\n\n```\n\nIf the answer is not *exactly* `claws`, you should still print out the other message. For example:\n\n```terminal;eg:none;\nWhat is the feature? @@@Claws\nIt is prey.\n\n```\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-else",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1_text\",\"io_print2\",\"io_ask_text\",\"decisions_if_compare\",\"decisions_if_else_compare\",\"logic_compare\"]",
      "teacher_notes":"#markdown\nThis solution is very similar to the last one. We start by creating a variable (<bk class=\"var\"><bk class=\"inner\">feature<\/bk><\/bk> is a good name) and <bk class=\"str\">ask<\/bk> the user <bk class=\"str lit\"><bk class=\"inner\">What is the feature?<\/bk><\/bk>:\n\n```lang:blockly;norun\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"YDzw\/?_Rn;AZG!MuYDC;\">feature<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"aXH7)NsWh%ZRQ$oeDYvV\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"YDzw\/?_Rn;AZG!MuYDC;\" variabletype=\"\">feature<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"6nTlmk?5gPiBR!9j;=Ui\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"ZOZd!s}`Mbz$FN7|!~rx\">\n            <field name=\"TEXT\">What is the feature?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThen we add our <bk class=\"control\">if else<\/bk> block:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"YDzw\/?_Rn;AZG!MuYDC;\">feature<\/variable>\n  <\/variables>\n  <block type=\"decisions_if_else\" id=\"2[liuEg5onRo|.u$XGF!\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"Y_4qH._M4GfoMMjLmsq$\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"|hE(X:ZdzT|[9X;IoNU(\">\n            <field name=\"VAR\" id=\"YDzw\/?_Rn;AZG!MuYDC;\" variabletype=\"\">feature<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"\/ZS^IH!]B`lX]LMFK`+U\">\n            <field name=\"TEXT\">claws<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"%1\/L$V3#TF4W5T{?aS8X\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"~\/`9zFdnW1dDdxQA`O6w\">\n            <field name=\"TEXT\">It is a predator.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <statement name=\"ELSE\">\n      <block type=\"io_print1\" id=\"qD,r1?U#(sa\/VtPoL*Mq\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"xSWiH!,]kYUgJeda^Zwk\">\n            <field name=\"TEXT\">It is prey.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n```\nCombine them together to get the solution:\n"
    },
    {
      "language":0,
      "title":"Plant or animal?",
      "notes":"#markdown\nYour program needs to *decide* which message to print based on user input. So you need an <bk class=\"str\">ask<\/bk> block and an <bk class=\"control\">if<\/bk> block.\n\nThe <bk class=\"str\">ask<\/bk> value should be stored in a variable, let's call it <bk class=\"var\"><bk class=\"inner\">cell_wall<\/bk><\/bk> (we shouldn't use spaces in our variable names, so we can use the underscore to indicate that it is two words):\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"#{.d]z9T(4an79;VtWG{\">animal<\/variable>\n    <variable type=\"\" id=\"{znN@=LcIfZEx!{T)ozv\">cell wall<\/variable>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"$r2LuvJEQG75whhz^~u_\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"{znN@=LcIfZEx!{T)ozv\" variabletype=\"\">cell wall<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\";{HTHB#Oc2*AXsbJN.b%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"g[\/VC.W2D~)3p_!#Qo,{\">\n            <field name=\"TEXT\">Does it have a cell wall?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nTo handle the plant case, the <bk class=\"control\">if<\/bk> checks that the value entered is equal to `'yes'`.  **Watch the spelling and remember that you have to type the whole word!**\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"#{.d]z9T(4an79;VtWG{\">animal<\/variable>\n    <variable type=\"\" id=\"{znN@=LcIfZEx!{T)ozv\">cell wall<\/variable>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"decisions_if_else\" id=\"GV$.DM@0+I|\/(Nv7x8tU\" x=\"5\" y=\"9\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"uO,6|cRh:U(og2|ih[zT\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"yKrRcQlue_1#*OmW^?Q^\">\n            <field name=\"VAR\" id=\"{znN@=LcIfZEx!{T)ozv\" variabletype=\"\">cell wall<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"df.G|;|pZ*4Dh72Tn9Lj\">\n            <field name=\"TEXT\">yes<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"IT(J.54Qea_-.Fu]a2r=\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"L(!]:lZm|s;\/@P8fOvjh\">\n            <field name=\"TEXT\">Then it's a plant!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <statement name=\"ELSE\">\n      <block type=\"io_print1\" id=\"VzE12(|DAba,w7N^,lMN\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"]m\/de(`v5@|v,[m7Yjx1\">\n            <field name=\"TEXT\">It's probably an animal.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n```\nJoin them together to get the final solution.",
      "updated_at":"2018-03-06T00:39:29.783875+00:00",
      "label":"aca-bk-bio-dichtomous-plant-animal",
      "content":"#markdown\nScientifically, the difference between a plant and animal is that plants have a cell wall, while animals do not. \n\nWrite to program to check if the organism is a plant or an animal, if the user types in `yes`, then it should say `lang:out;Then it's a plant!`.\n\nHere's an example:\n\n```terminal;eg:none;\nDoes it have a cell wall? @@@yes\nThen it's a plant!\n\n```\n\nIf they say *anything* else, you should say, `lang:out;It's probably an animal.` \n\n```lang:py3;terminal;eg:none;\nDoes it have a cell wall? @@@no\nIt's probably an animal.\n\n```\n\nIf the answer is not *exactly* `yes`, you should still print out the other message. For example, your programs does not understand slang:\n\n```terminal;eg:none;\nDoes it have a cell wall? @@@yesssss\nIt's probably an animal.\n\n```\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-else",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1_text\",\"io_print2\",\"io_ask_text\",\"decisions_if\",\"decisions_if_else\",\"logic_compare\"]",
      "teacher_notes":"#markdown\nYour program needs to *decide* which message to print based on user input. So you need an <bk class=\"str\">ask<\/bk> block and an <bk class=\"control\">if<\/bk> block.\n\nThe <bk class=\"str\">ask<\/bk> value should be stored in a variable, let's call it <bk class=\"var\"><bk class=\"inner\">cell_wall<\/bk><\/bk> (we shouldn't use spaces in our variable names, so we can use the underscore to indicate that it is two words):\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"#{.d]z9T(4an79;VtWG{\">animal<\/variable>\n    <variable type=\"\" id=\"{znN@=LcIfZEx!{T)ozv\">cell wall<\/variable>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"$r2LuvJEQG75whhz^~u_\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"{znN@=LcIfZEx!{T)ozv\" variabletype=\"\">cell wall<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\";{HTHB#Oc2*AXsbJN.b%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"g[\/VC.W2D~)3p_!#Qo,{\">\n            <field name=\"TEXT\">Does it have a cell wall?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nTo handle the plant case, the <bk class=\"control\">if<\/bk> checks that the value entered is equal to `'yes'`.  **Watch the spelling and remember that you have to type the whole word!**\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"#{.d]z9T(4an79;VtWG{\">animal<\/variable>\n    <variable type=\"\" id=\"{znN@=LcIfZEx!{T)ozv\">cell wall<\/variable>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"decisions_if_else\" id=\"GV$.DM@0+I|\/(Nv7x8tU\" x=\"5\" y=\"9\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"uO,6|cRh:U(og2|ih[zT\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"yKrRcQlue_1#*OmW^?Q^\">\n            <field name=\"VAR\" id=\"{znN@=LcIfZEx!{T)ozv\" variabletype=\"\">cell wall<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"df.G|;|pZ*4Dh72Tn9Lj\">\n            <field name=\"TEXT\">yes<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"IT(J.54Qea_-.Fu]a2r=\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"L(!]:lZm|s;\/@P8fOvjh\">\n            <field name=\"TEXT\">Then it's a plant!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <statement name=\"ELSE\">\n      <block type=\"io_print1\" id=\"VzE12(|DAba,w7N^,lMN\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"]m\/de(`v5@|v,[m7Yjx1\">\n            <field name=\"TEXT\">It's probably an animal.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n```\nJoin them together to get the final solution."
    },
    {
      "language":0,
      "title":"The \"bin chicken\"",
      "notes":"#markdown\nLike the last program, we *decide* which message to print based on user input.\n\nThe first thing we do is get the animal from the user, so a good variable name to store that is <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk>:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"#{.d]z9T(4an79;VtWG{\">animal<\/variable>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"C`UXv%}eq5#V6U#*Ob{D\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"#{.d]z9T(4an79;VtWG{\" variabletype=\"\">animal<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"X3:I9bR{{eb#br_n~w~]\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"Ssr,oMs~2CJ.sWyKR7B)\">\n            <field name=\"TEXT\">What animal is it?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThere are two possible lines of output, one <bk class=\"control\">if<\/bk> the <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> variable contains the string `'ibis'`, and another line that never changes.\n\nWe check if <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> is equal to `'ibis'` and if it is we <bk class=\"io\">print<\/bk> the excited response:\n\n```lang:blockly;norun\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"#{.d]z9T(4an79;VtWG{\">animal<\/variable>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"decisions_if\" id=\"dSJfU.|s-{M:-d.`pB,*\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"8XE(zn-5a~k|0ZSKUF;B\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"[ZqUsBgQG\/rW}TcD\/FTn\">\n            <field name=\"VAR\" id=\"#{.d]z9T(4an79;VtWG{\" variabletype=\"\">animal<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"CJ1p\/=%Ym0e=s!AGM=3z\">\n            <field name=\"TEXT\">ibis<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\".hNh*rzSVVjY,6r]Z^3y\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"zAMujME-$\/]IpcG%ve7v\">\n            <field name=\"TEXT\">A Bin Chicken!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n```\n\nAnd, since we always print the last message regardless of what the user types in, we add a <bk class=\"io\">print<\/bk> statement including the <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> in the output. We don't indent it because it is not part of the body of the <bk class=\"control\">if<\/bk> statement. \n\n```lang:blockly;norun\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"#{.d]z9T(4an79;VtWG{\">animal<\/variable>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"io_print3\" id=\"H]\/##CDdiT8)9%qwCZNZ\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"^r+a]?sWKir!J}5uFx)T\">\n        <field name=\"TEXT\">I hope the<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"variables_get\" id=\"sv5iTnFn8`!w:7+6LgB_\">\n        <field name=\"VAR\" id=\"#{.d]z9T(4an79;VtWG{\" variabletype=\"\">animal<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"text\" id=\")g~DVE7klULhsqCjvZC3\">\n        <field name=\"TEXT\">can survive out there...<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThis gives us our final solution:\n",
      "updated_at":"2018-03-06T00:35:51.821070+00:00",
      "label":"aca-bk-bio-bin-chicken",
      "content":"#markdown\nLots of animals native to Australia are now forced to live in cities because humans have altered their natural environments. This can make survival difficult for these species.\n\nAsk the user to type in an animal, and whatever they type your program should print `lang:out;I hope the <animal> can survive out there...`, **substituting the animal's name into the output**. For example:\n\n```eg:none;terminal;\nWhat animal is it? @@@bat\nI hope the bat can survive out there...\n\n```\n\nThere's a good chance in large cities you'll see an [ibis](https:\/\/en.wikipedia.org\/wiki\/Australian_white_ibis), which local residents refer to informally as the [Bin Chicken](http:\/\/www.nationalgeographic.com.au\/australia\/magpie-beats-bin-chicken-for-aus-bird-of-the-year.aspx).\n\n<figure class=\"align-center\">\n  <img alt=\"An ibis standing in the grass\" src=\"https:\/\/groklearning-cdn.com\/problems\/p77FrePhW2KBM98pNkusxB\/ibis_3_5.jpg\" width=\"60%\">\n  <figcaption>The Australian white ibis<\/figcaption>\n<\/figure>\n\nIf the animal is an `lang:in;ibis`, exclaim that you've seen `lang:out;A Bin Chicken!`.\n\n```eg:none;terminal;\nWhat animal is it? @@@ibis\nA Bin Chicken!\nI hope the ibis can survive out there...\n\n```\n\nAny answer other than `lang:in;ibis` should work the same way:\n\n```eg:none;terminal;\nWhat animal did you see? @@@quokka\nI hope the quokka can survive out there...\n\n```\n\n> ## The sad story of the Ibis\n> The *Australian White Ibis* has been [forced to live off rubbish in urban environments](https:\/\/www.gizmodo.com.au\/2017\/11\/in-defence-of-the-bin-chicken\/) due to human development gradually forcing it out of its natural habitat. Eating rubbish isn't good for them, and restoring their wetlands would go a long way to improving their long-term survival.",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "if",
        "string:eq",
        "variables"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print2\",\"io_print3\",\"io_ask_text\",\"decisions_if_compare\",\"logic_compare\"]",
      "teacher_notes":"#markdown\nLike the last program, we *decide* which message to print based on user input.\n\nThe first thing we do is get the animal from the user, so a good variable name to store that is <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk>:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"#{.d]z9T(4an79;VtWG{\">animal<\/variable>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"C`UXv%}eq5#V6U#*Ob{D\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"#{.d]z9T(4an79;VtWG{\" variabletype=\"\">animal<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"X3:I9bR{{eb#br_n~w~]\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"Ssr,oMs~2CJ.sWyKR7B)\">\n            <field name=\"TEXT\">What animal is it?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThere are two possible lines of output, one <bk class=\"control\">if<\/bk> the <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> variable contains the string `'ibis'`, and another line that never changes.\n\nWe check if <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> is equal to `'ibis'` and if it is we <bk class=\"io\">print<\/bk> the excited response:\n\n```lang:blockly;norun\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"#{.d]z9T(4an79;VtWG{\">animal<\/variable>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"decisions_if\" id=\"dSJfU.|s-{M:-d.`pB,*\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"8XE(zn-5a~k|0ZSKUF;B\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"[ZqUsBgQG\/rW}TcD\/FTn\">\n            <field name=\"VAR\" id=\"#{.d]z9T(4an79;VtWG{\" variabletype=\"\">animal<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"CJ1p\/=%Ym0e=s!AGM=3z\">\n            <field name=\"TEXT\">ibis<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\".hNh*rzSVVjY,6r]Z^3y\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"zAMujME-$\/]IpcG%ve7v\">\n            <field name=\"TEXT\">A Bin Chicken!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n```\n\nAnd, since we always print the last message regardless of what the user types in, we add a <bk class=\"io\">print<\/bk> statement including the <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> in the output. We don't indent it because it is not part of the body of the <bk class=\"control\">if<\/bk> statement. \n\n```lang:blockly;norun\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"#{.d]z9T(4an79;VtWG{\">animal<\/variable>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"io_print3\" id=\"H]\/##CDdiT8)9%qwCZNZ\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"^r+a]?sWKir!J}5uFx)T\">\n        <field name=\"TEXT\">I hope the<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"variables_get\" id=\"sv5iTnFn8`!w:7+6LgB_\">\n        <field name=\"VAR\" id=\"#{.d]z9T(4an79;VtWG{\" variabletype=\"\">animal<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"text\" id=\")g~DVE7klULhsqCjvZC3\">\n        <field name=\"TEXT\">can survive out there...<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThis gives us our final solution:"
    },
    {
      "language":0,
      "title":"I love marsupials!",
      "notes":"#markdown \n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"qT[H;1crQ\/hTn!h@c7sO\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"0#CC,=NE9jgh7:2u$ZF!\" variabletype=\"\">feature<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"[x:p[n8h.]yIih*@A5M+\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"#-@lp)Jmu24eq,:(SPR)\">\n            <field name=\"TEXT\">What is the feature?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nSince the `lang:out;That's a cool feature!` message is printed every time, we use no indentation, so our first <bk class=\"io\">print<\/bk> occurs straight after we ask for input:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"io_print1\" id=\"=d)CflBYD$8@=V?qHCTU\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"$T+y]3*wj3w~h]{9lM^L\">\n        <field name=\"TEXT\">That's a cool feature.<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThen, we check if <bk class=\"var\"><bk class=\"inner\">feature<\/bk><\/bk> is equal to `'pouch'`. If so, we <bk class=\"io\">print<\/bk> our optional message saying `'I love marsupials!'`.\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"decisions_if\" id=\"z=)cl-%}LV)O{qBk_=8:\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"QT*zH~WTH\/7U$t-7}Lv1\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"0I,raI84SPW^q}Dcc\/8X\">\n            <field name=\"VAR\" id=\"0#CC,=NE9jgh7:2u$ZF!\" variabletype=\"\">feature<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"rR-LBR_={r^M0ezB2=1!\">\n            <field name=\"TEXT\">pouch<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\",]4`WeJt~lH#k\/m0109L\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"}jNRE6^{)Lu}HIifWH^G\">\n            <field name=\"TEXT\">I love marsupials!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n```\nPut them together for our final solution.",
      "updated_at":"2018-03-06T00:31:04.206524+00:00",
      "label":"aca-bk-bio-pouch",
      "content":"#markdown\nYou're in science class and the teacher is teaching you different features of animals. \n\n[Marsupials](https:\/\/en.wikipedia.org\/wiki\/Marsupial) are animals that have pouches, like a kangaroo!\n\n<figure class=\"align-center\">\n  <img alt=\"A kangaroo with its joey in its pouch\" src=\"https:\/\/groklearning-cdn.com\/problems\/ezy28J3bVFGVmHb2LxPoYC\/kangaroo_joey_3_4.jpg\" width=\"60%\">\n  <figcaption>A kangaroo carries its young, or *joey*, in its pouch<\/figcaption>\n<\/figure>\n\nWrite a program to check the feature the teacher says. Since all animal features are pretty cool, no matter what feature it is your program still should print out `lang:out;That's a cool feature.`\n\n```eg:none;terminal;\nWhat is the feature? @@@feathers\nThat's a cool feature.\n```\n\nIf it's a <code data-lang=\"in\">pouch<\/code>, the program should also print <code data-lang=\"out\">I love marsupials!<\/code> For example:\n\n```eg:none;terminal;\nWhat is the feature? @@@pouch\nThat's a cool feature.\nI love marsupials!\n```\n\nHere is another example, with a different feature:\n\n```eg:none;terminal;\nWhat is the feature? @@@gills\nThat's a cool feature.\n```\n\nRemember that you should always print out `lang:out;That's a cool feature.`, whether that feature is a <code data-lang=\"in\">pouch<\/code> or not.\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "if",
        "string:eq"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1_text\",\"io_print1\",\"io_print2\",\"io_ask_text\",\"decisions_if\",\"logic_compare\"]",
      "teacher_notes":"#markdown \n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"qT[H;1crQ\/hTn!h@c7sO\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"0#CC,=NE9jgh7:2u$ZF!\" variabletype=\"\">feature<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"[x:p[n8h.]yIih*@A5M+\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"#-@lp)Jmu24eq,:(SPR)\">\n            <field name=\"TEXT\">What is the feature?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nSince the `lang:out;That's a cool feature!` message is printed every time, we use no indentation, so our first <bk class=\"io\">print<\/bk> occurs straight after we ask for input:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"io_print1\" id=\"=d)CflBYD$8@=V?qHCTU\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"$T+y]3*wj3w~h]{9lM^L\">\n        <field name=\"TEXT\">That's a cool feature.<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThen, we check if <bk class=\"var\"><bk class=\"inner\">feature<\/bk><\/bk> is equal to `'pouch'`. If so, we <bk class=\"io\">print<\/bk> our optional message saying `'I love marsupials!'`.\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"0#CC,=NE9jgh7:2u$ZF!\">feature<\/variable>\n  <\/variables>\n  <block type=\"decisions_if\" id=\"z=)cl-%}LV)O{qBk_=8:\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"QT*zH~WTH\/7U$t-7}Lv1\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"0I,raI84SPW^q}Dcc\/8X\">\n            <field name=\"VAR\" id=\"0#CC,=NE9jgh7:2u$ZF!\" variabletype=\"\">feature<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"rR-LBR_={r^M0ezB2=1!\">\n            <field name=\"TEXT\">pouch<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\",]4`WeJt~lH#k\/m0109L\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"}jNRE6^{)Lu}HIifWH^G\">\n            <field name=\"TEXT\">I love marsupials!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n```\nPut them together for our final solution."
    },
    {
      "language":20,
      "title":"Nesting or <bk class=\"control\">else if<\/bk>?",
      "notes":"#markdown\nIf you're only checking the value of a single variable for different options, it makes sense to use an <bk class=\"control\">else if<\/bk> because the variable can only be one of the possible values.\n\nIf you're checking more than one variable, then by checking them in order it is possible you can reduce the number of conditions you need to test to work out what your program should do. In this case, nesting is the best option.",
      "updated_at":"2018-03-06T01:27:06.614525+00:00",
      "label":"aca-choices-bio-nesting-elif-blocks",
      "content":"#markdown\n\n## When is it better to use nesting instead of an <bk class=\"control\">else if<\/bk>?\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":0},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nWhen there are more than two possible answers to a single question.\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nUsing `else if` is always the best option.\\\\n\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nWhen you want to check something that depends on a previous condition.\\\\n\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nUsing nesting is always the best option.\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"#markdown\\n\\nWhen there are more than two possible answers to a single question.\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"more-than-two-options\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nUsing `else if` is always the best option.\\n\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"always-elif\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nWhen you want to check something that depends on a previous condition.\\n\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"previous-condition\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nUsing nesting is always the best option.\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"always-nest\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 0\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nYou can often represent any algorithm using both of these constructs, but as a general rule nesting is the preferred approach when testing multiple variables in cases like the ones we've shown in this module.\n\nThere are other ways of testing multiple conditions at the same time using boolean operators, but it is beyond the scope of this challenge."
    },
    {
      "language":20,
      "title":"Which is it?",
      "notes":"#markdown\nWe call checking the correctness of our code without running it *tracing*. For algorithms like this, we should be checking the conditions in our <bk class=\"control\">if<\/bk> statements, and whether or not we print the correct output when we move down each branch.",
      "updated_at":"2018-03-06T01:23:02.897930+00:00",
      "label":"aca-choices-bio-flowchart-eats-blocks",
      "content":"#markdown\n\n## Which of the programs is the correct representation of the algorithm shown in the flowchart below?\n\n<svg width=\"494px\" height=\"331px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 494 331\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>nested-eats<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-3\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-4\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n        <polygon id=\"path-5\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"nested-eats\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g>\n            <g id=\"start\" transform=\"translate(0.000000, 175.000000)\">\n                <circle id=\"oval_start\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n                <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n                <\/text>\n                <path d=\"M74,35 L125.496575,35\" id=\"start_line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"start_line-decoration-1\" d=\"M125.496575,35 L114.696575,32 L114.696575,38 L125.496575,35 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n            <\/g>\n            <g id=\"is-herbi\" transform=\"translate(265.000000, 271.000000)\">\n                <g id=\"herbi_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"herbivore\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"15.6325\" y=\"42\">herbivore!<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-carni\" transform=\"translate(399.000000, 181.000000)\">\n                <g id=\"carni_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"carnivore\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"16.4165\" y=\"42\">carnivore!<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-omni\" transform=\"translate(399.000000, 0.000000)\">\n                <g id=\"omni_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"omnivore\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"29.258\" y=\"25\">It\u2019s an<\/tspan>\n                    <tspan x=\"16.07\" y=\"42\">omnivore!<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eat-plants\" transform=\"translate(265.000000, 60.000000)\">\n                <g id=\"plants_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-4\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"eat-plants?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"26.2565\" y=\"53\">Does it eat <\/tspan>\n                    <tspan x=\"38.0515\" y=\"70\">plants?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"plants_yes\" transform=\"translate(297.000000, 29.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"plants_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"plants_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"plants_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"meat_yes\" transform=\"translate(164.000000, 120.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"meat_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"meat_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"meat_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"plants_no\" transform=\"translate(301.000000, 183.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"plants_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"plants_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"plants_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eat-meat\" transform=\"translate(133.000000, 150.000000)\">\n                <g id=\"meat_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-5\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"eat-meat?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"37.803\" y=\"54\">Does it<\/tspan>\n                    <tspan x=\"29.5255\" y=\"71\">eat meat?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"meat_no\" transform=\"translate(168.000000, 273.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"meat_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"meat_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"meat_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n        <\/g>\n    <\/g>\n<\/svg>",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":2},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"choices-bk-eats-1\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"u}(_$ffBVUpP%EG}oGxR\\\\\\\">meat<\\\/variable>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"Gh7*W.S}mcY9~i,^W6XT\\\\\\\">plants<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"y;$M;;Pgo7sW=@2^jjJ)\\\\\\\" x=\\\\\\\"8\\\\\\\" y=\\\\\\\"7\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"u}(_$ffBVUpP%EG}oGxR\\\\\\\" variabletype=\\\\\\\"\\\\\\\">meat<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"B8WKvjv.KL]P^avKKT!V\\\\\\\">\\\\n        <value name=\\\\\\\"TEXT\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"Em{efnphK^NNrkghM8k@\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">Does it eat meat?<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"decisions_if_else\\\\\\\" id=\\\\\\\"mP8vo}(wD[--?z)~[5gm\\\\\\\">\\\\n        <value name=\\\\\\\"IF0\\\\\\\">\\\\n          <block type=\\\\\\\"logic_compare\\\\\\\" id=\\\\\\\"6ou=6HUXq|PkhAWL\\\/j2$\\\\\\\">\\\\n            <field name=\\\\\\\"OP\\\\\\\">EQ<\\\/field>\\\\n            <value name=\\\\\\\"A\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"d2mTqUZ3RnQ:{P,e]W.,\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"u}(_$ffBVUpP%EG}oGxR\\\\\\\" variabletype=\\\\\\\"\\\\\\\">meat<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"B\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"aTe^YS_,vX|@bCkmX1}}\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">yes<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <statement name=\\\\\\\"DO0\\\\\\\">\\\\n          <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"iNu*@17W;cS%d,F~-Bwg\\\\\\\">\\\\n            <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"Gh7*W.S}mcY9~i,^W6XT\\\\\\\" variabletype=\\\\\\\"\\\\\\\">plants<\\\/field>\\\\n            <value name=\\\\\\\"VALUE\\\\\\\">\\\\n              <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"Y~@jGO|6_2-\\\/3%T)^u7L\\\\\\\">\\\\n                <value name=\\\\\\\"TEXT\\\\\\\">\\\\n                  <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"c8o~^ak0=@LAM-?Hh*o|\\\\\\\">\\\\n                    <field name=\\\\\\\"TEXT\\\\\\\">Does it eat plants?<\\\/field>\\\\n                  <\\\/block>\\\\n                <\\\/value>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <next>\\\\n              <block type=\\\\\\\"decisions_if_else\\\\\\\" id=\\\\\\\"AI9PvYOJB+5Zzc0LE%P|\\\\\\\">\\\\n                <value name=\\\\\\\"IF0\\\\\\\">\\\\n                  <block type=\\\\\\\"logic_compare\\\\\\\" id=\\\\\\\"*GKNY;#X\\\/s0l,H!HdPBT\\\\\\\">\\\\n                    <field name=\\\\\\\"OP\\\\\\\">EQ<\\\/field>\\\\n                    <value name=\\\\\\\"A\\\\\\\">\\\\n                      <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"u0)kE4|p8Q)OtO~xS:nE\\\\\\\">\\\\n                        <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"Gh7*W.S}mcY9~i,^W6XT\\\\\\\" variabletype=\\\\\\\"\\\\\\\">plants<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                    <value name=\\\\\\\"B\\\\\\\">\\\\n                      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"Dq3CBq2Qz+rjBz8;[V4X\\\\\\\">\\\\n                        <field name=\\\\\\\"TEXT\\\\\\\">yes<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                  <\\\/block>\\\\n                <\\\/value>\\\\n                <statement name=\\\\\\\"DO0\\\\\\\">\\\\n                  <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"|R$_,2MzCP`EX\\\/%c.NG7\\\\\\\">\\\\n                    <value name=\\\\\\\"ANY0\\\\\\\">\\\\n                      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"jYhGf#N:giuObYmBaHDS\\\\\\\">\\\\n                        <field name=\\\\\\\"TEXT\\\\\\\">It's a carnivore!<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                  <\\\/block>\\\\n                <\\\/statement>\\\\n                <statement name=\\\\\\\"ELSE\\\\\\\">\\\\n                  <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\")LpW7D3_{n^p|ls?1@.b\\\\\\\">\\\\n                    <value name=\\\\\\\"ANY0\\\\\\\">\\\\n                      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"78.3qu=PMk5gbD!d?zb|\\\\\\\">\\\\n                        <field name=\\\\\\\"TEXT\\\\\\\">It's an omnivore!<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                  <\\\/block>\\\\n                <\\\/statement>\\\\n              <\\\/block>\\\\n            <\\\/next>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n        <statement name=\\\\\\\"ELSE\\\\\\\">\\\\n          <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"#K(p]ugf;^{e*[Br:6)k\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"n@wGQr#p{$I)1*R|%NC?\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">It's a herbivore!<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"choices-bk-eats-2\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"u}(_$ffBVUpP%EG}oGxR\\\\\\\">meat<\\\/variable>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"Gh7*W.S}mcY9~i,^W6XT\\\\\\\">plants<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"y;$M;;Pgo7sW=@2^jjJ)\\\\\\\" x=\\\\\\\"8\\\\\\\" y=\\\\\\\"7\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"u}(_$ffBVUpP%EG}oGxR\\\\\\\" variabletype=\\\\\\\"\\\\\\\">meat<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"B8WKvjv.KL]P^avKKT!V\\\\\\\">\\\\n        <value name=\\\\\\\"TEXT\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"Em{efnphK^NNrkghM8k@\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">Does it eat meat?<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"decisions_if_else\\\\\\\" id=\\\\\\\"mP8vo}(wD[--?z)~[5gm\\\\\\\">\\\\n        <value name=\\\\\\\"IF0\\\\\\\">\\\\n          <block type=\\\\\\\"logic_compare\\\\\\\" id=\\\\\\\"6ou=6HUXq|PkhAWL\\\/j2$\\\\\\\">\\\\n            <field name=\\\\\\\"OP\\\\\\\">EQ<\\\/field>\\\\n            <value name=\\\\\\\"A\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"d2mTqUZ3RnQ:{P,e]W.,\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"u}(_$ffBVUpP%EG}oGxR\\\\\\\" variabletype=\\\\\\\"\\\\\\\">meat<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"B\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"aTe^YS_,vX|@bCkmX1}}\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">no<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <statement name=\\\\\\\"DO0\\\\\\\">\\\\n          <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"iNu*@17W;cS%d,F~-Bwg\\\\\\\">\\\\n            <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"Gh7*W.S}mcY9~i,^W6XT\\\\\\\" variabletype=\\\\\\\"\\\\\\\">plants<\\\/field>\\\\n            <value name=\\\\\\\"VALUE\\\\\\\">\\\\n              <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"Y~@jGO|6_2-\\\/3%T)^u7L\\\\\\\">\\\\n                <value name=\\\\\\\"TEXT\\\\\\\">\\\\n                  <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"c8o~^ak0=@LAM-?Hh*o|\\\\\\\">\\\\n                    <field name=\\\\\\\"TEXT\\\\\\\">Does it eat plants?<\\\/field>\\\\n                  <\\\/block>\\\\n                <\\\/value>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <next>\\\\n              <block type=\\\\\\\"decisions_if_else\\\\\\\" id=\\\\\\\"AI9PvYOJB+5Zzc0LE%P|\\\\\\\">\\\\n                <value name=\\\\\\\"IF0\\\\\\\">\\\\n                  <block type=\\\\\\\"logic_compare\\\\\\\" id=\\\\\\\"*GKNY;#X\\\/s0l,H!HdPBT\\\\\\\">\\\\n                    <field name=\\\\\\\"OP\\\\\\\">EQ<\\\/field>\\\\n                    <value name=\\\\\\\"A\\\\\\\">\\\\n                      <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"u0)kE4|p8Q)OtO~xS:nE\\\\\\\">\\\\n                        <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"Gh7*W.S}mcY9~i,^W6XT\\\\\\\" variabletype=\\\\\\\"\\\\\\\">plants<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                    <value name=\\\\\\\"B\\\\\\\">\\\\n                      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"Dq3CBq2Qz+rjBz8;[V4X\\\\\\\">\\\\n                        <field name=\\\\\\\"TEXT\\\\\\\">yes<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                  <\\\/block>\\\\n                <\\\/value>\\\\n                <statement name=\\\\\\\"DO0\\\\\\\">\\\\n                  <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"#K(p]ugf;^{e*[Br:6)k\\\\\\\">\\\\n                    <value name=\\\\\\\"ANY0\\\\\\\">\\\\n                      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"n@wGQr#p{$I)1*R|%NC?\\\\\\\">\\\\n                        <field name=\\\\\\\"TEXT\\\\\\\">It's a herbivore!<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                  <\\\/block>\\\\n                <\\\/statement>\\\\n                <statement name=\\\\\\\"ELSE\\\\\\\">\\\\n                  <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\")LpW7D3_{n^p|ls?1@.b\\\\\\\">\\\\n                    <value name=\\\\\\\"ANY0\\\\\\\">\\\\n                      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"78.3qu=PMk5gbD!d?zb|\\\\\\\">\\\\n                        <field name=\\\\\\\"TEXT\\\\\\\">It's an omnivore!<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                  <\\\/block>\\\\n                <\\\/statement>\\\\n              <\\\/block>\\\\n            <\\\/next>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n        <statement name=\\\\\\\"ELSE\\\\\\\">\\\\n          <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"|R$_,2MzCP`EX\\\/%c.NG7\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"jYhGf#N:giuObYmBaHDS\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">It's a carnivore!<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"choices-bk-eats-3\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"u}(_$ffBVUpP%EG}oGxR\\\\\\\">meat<\\\/variable>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"Gh7*W.S}mcY9~i,^W6XT\\\\\\\">plants<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"y;$M;;Pgo7sW=@2^jjJ)\\\\\\\" x=\\\\\\\"8\\\\\\\" y=\\\\\\\"7\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"u}(_$ffBVUpP%EG}oGxR\\\\\\\" variabletype=\\\\\\\"\\\\\\\">meat<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"B8WKvjv.KL]P^avKKT!V\\\\\\\">\\\\n        <value name=\\\\\\\"TEXT\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"Em{efnphK^NNrkghM8k@\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">Does it eat meat?<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"decisions_if_else\\\\\\\" id=\\\\\\\"mP8vo}(wD[--?z)~[5gm\\\\\\\">\\\\n        <value name=\\\\\\\"IF0\\\\\\\">\\\\n          <block type=\\\\\\\"logic_compare\\\\\\\" id=\\\\\\\"6ou=6HUXq|PkhAWL\\\/j2$\\\\\\\">\\\\n            <field name=\\\\\\\"OP\\\\\\\">EQ<\\\/field>\\\\n            <value name=\\\\\\\"A\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"d2mTqUZ3RnQ:{P,e]W.,\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"u}(_$ffBVUpP%EG}oGxR\\\\\\\" variabletype=\\\\\\\"\\\\\\\">meat<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"B\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"aTe^YS_,vX|@bCkmX1}}\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">yes<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <statement name=\\\\\\\"DO0\\\\\\\">\\\\n          <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"iNu*@17W;cS%d,F~-Bwg\\\\\\\">\\\\n            <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"Gh7*W.S}mcY9~i,^W6XT\\\\\\\" variabletype=\\\\\\\"\\\\\\\">plants<\\\/field>\\\\n            <value name=\\\\\\\"VALUE\\\\\\\">\\\\n              <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"Y~@jGO|6_2-\\\/3%T)^u7L\\\\\\\">\\\\n                <value name=\\\\\\\"TEXT\\\\\\\">\\\\n                  <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"c8o~^ak0=@LAM-?Hh*o|\\\\\\\">\\\\n                    <field name=\\\\\\\"TEXT\\\\\\\">Does it eat plants?<\\\/field>\\\\n                  <\\\/block>\\\\n                <\\\/value>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <next>\\\\n              <block type=\\\\\\\"decisions_if_else\\\\\\\" id=\\\\\\\"AI9PvYOJB+5Zzc0LE%P|\\\\\\\">\\\\n                <value name=\\\\\\\"IF0\\\\\\\">\\\\n                  <block type=\\\\\\\"logic_compare\\\\\\\" id=\\\\\\\"*GKNY;#X\\\/s0l,H!HdPBT\\\\\\\">\\\\n                    <field name=\\\\\\\"OP\\\\\\\">EQ<\\\/field>\\\\n                    <value name=\\\\\\\"A\\\\\\\">\\\\n                      <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"u0)kE4|p8Q)OtO~xS:nE\\\\\\\">\\\\n                        <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"Gh7*W.S}mcY9~i,^W6XT\\\\\\\" variabletype=\\\\\\\"\\\\\\\">plants<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                    <value name=\\\\\\\"B\\\\\\\">\\\\n                      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"Dq3CBq2Qz+rjBz8;[V4X\\\\\\\">\\\\n                        <field name=\\\\\\\"TEXT\\\\\\\">yes<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                  <\\\/block>\\\\n                <\\\/value>\\\\n                <statement name=\\\\\\\"DO0\\\\\\\">\\\\n                  <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\")LpW7D3_{n^p|ls?1@.b\\\\\\\">\\\\n                    <value name=\\\\\\\"ANY0\\\\\\\">\\\\n                      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"78.3qu=PMk5gbD!d?zb|\\\\\\\">\\\\n                        <field name=\\\\\\\"TEXT\\\\\\\">It's an omnivore!<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                  <\\\/block>\\\\n                <\\\/statement>\\\\n                <statement name=\\\\\\\"ELSE\\\\\\\">\\\\n                  <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"|R$_,2MzCP`EX\\\/%c.NG7\\\\\\\">\\\\n                    <value name=\\\\\\\"ANY0\\\\\\\">\\\\n                      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"jYhGf#N:giuObYmBaHDS\\\\\\\">\\\\n                        <field name=\\\\\\\"TEXT\\\\\\\">It's a carnivore!<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                  <\\\/block>\\\\n                <\\\/statement>\\\\n              <\\\/block>\\\\n            <\\\/next>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n        <statement name=\\\\\\\"ELSE\\\\\\\">\\\\n          <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"#K(p]ugf;^{e*[Br:6)k\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"n@wGQr#p{$I)1*R|%NC?\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">It's a herbivore!<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"<pre class=\\\\\\\"js-editor-blockly\\\\\\\" data-eg-id=\\\\\\\"choices-bk-eats-4\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\"><code data-lang=\\\\\\\"blockly\\\\\\\" data-runnable=\\\\\\\"false\\\\\\\">\\\\n<xml xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\\\\\">\\\\n  <variables>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"u}(_$ffBVUpP%EG}oGxR\\\\\\\">meat<\\\/variable>\\\\n    <variable type=\\\\\\\"\\\\\\\" id=\\\\\\\"Gh7*W.S}mcY9~i,^W6XT\\\\\\\">plants<\\\/variable>\\\\n  <\\\/variables>\\\\n  <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"y;$M;;Pgo7sW=@2^jjJ)\\\\\\\" x=\\\\\\\"8\\\\\\\" y=\\\\\\\"7\\\\\\\">\\\\n    <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"u}(_$ffBVUpP%EG}oGxR\\\\\\\" variabletype=\\\\\\\"\\\\\\\">meat<\\\/field>\\\\n    <value name=\\\\\\\"VALUE\\\\\\\">\\\\n      <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"B8WKvjv.KL]P^avKKT!V\\\\\\\">\\\\n        <value name=\\\\\\\"TEXT\\\\\\\">\\\\n          <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"Em{efnphK^NNrkghM8k@\\\\\\\">\\\\n            <field name=\\\\\\\"TEXT\\\\\\\">Does it eat meat?<\\\/field>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n      <\\\/block>\\\\n    <\\\/value>\\\\n    <next>\\\\n      <block type=\\\\\\\"decisions_if_else\\\\\\\" id=\\\\\\\"mP8vo}(wD[--?z)~[5gm\\\\\\\">\\\\n        <value name=\\\\\\\"IF0\\\\\\\">\\\\n          <block type=\\\\\\\"logic_compare\\\\\\\" id=\\\\\\\"6ou=6HUXq|PkhAWL\\\/j2$\\\\\\\">\\\\n            <field name=\\\\\\\"OP\\\\\\\">EQ<\\\/field>\\\\n            <value name=\\\\\\\"A\\\\\\\">\\\\n              <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"d2mTqUZ3RnQ:{P,e]W.,\\\\\\\">\\\\n                <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"u}(_$ffBVUpP%EG}oGxR\\\\\\\" variabletype=\\\\\\\"\\\\\\\">meat<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <value name=\\\\\\\"B\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"aTe^YS_,vX|@bCkmX1}}\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">no<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/value>\\\\n        <statement name=\\\\\\\"DO0\\\\\\\">\\\\n          <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"#K(p]ugf;^{e*[Br:6)k\\\\\\\">\\\\n            <value name=\\\\\\\"ANY0\\\\\\\">\\\\n              <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"n@wGQr#p{$I)1*R|%NC?\\\\\\\">\\\\n                <field name=\\\\\\\"TEXT\\\\\\\">It's a herbivore!<\\\/field>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n        <statement name=\\\\\\\"ELSE\\\\\\\">\\\\n          <block type=\\\\\\\"variables_set\\\\\\\" id=\\\\\\\"iNu*@17W;cS%d,F~-Bwg\\\\\\\">\\\\n            <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"Gh7*W.S}mcY9~i,^W6XT\\\\\\\" variabletype=\\\\\\\"\\\\\\\">plants<\\\/field>\\\\n            <value name=\\\\\\\"VALUE\\\\\\\">\\\\n              <block type=\\\\\\\"io_ask_text\\\\\\\" id=\\\\\\\"Y~@jGO|6_2-\\\/3%T)^u7L\\\\\\\">\\\\n                <value name=\\\\\\\"TEXT\\\\\\\">\\\\n                  <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"c8o~^ak0=@LAM-?Hh*o|\\\\\\\">\\\\n                    <field name=\\\\\\\"TEXT\\\\\\\">Does it eat plants?<\\\/field>\\\\n                  <\\\/block>\\\\n                <\\\/value>\\\\n              <\\\/block>\\\\n            <\\\/value>\\\\n            <next>\\\\n              <block type=\\\\\\\"decisions_if_else\\\\\\\" id=\\\\\\\"AI9PvYOJB+5Zzc0LE%P|\\\\\\\">\\\\n                <value name=\\\\\\\"IF0\\\\\\\">\\\\n                  <block type=\\\\\\\"logic_compare\\\\\\\" id=\\\\\\\"*GKNY;#X\\\/s0l,H!HdPBT\\\\\\\">\\\\n                    <field name=\\\\\\\"OP\\\\\\\">EQ<\\\/field>\\\\n                    <value name=\\\\\\\"A\\\\\\\">\\\\n                      <block type=\\\\\\\"variables_get\\\\\\\" id=\\\\\\\"u0)kE4|p8Q)OtO~xS:nE\\\\\\\">\\\\n                        <field name=\\\\\\\"VAR\\\\\\\" id=\\\\\\\"Gh7*W.S}mcY9~i,^W6XT\\\\\\\" variabletype=\\\\\\\"\\\\\\\">plants<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                    <value name=\\\\\\\"B\\\\\\\">\\\\n                      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"Dq3CBq2Qz+rjBz8;[V4X\\\\\\\">\\\\n                        <field name=\\\\\\\"TEXT\\\\\\\">yes<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                  <\\\/block>\\\\n                <\\\/value>\\\\n                <statement name=\\\\\\\"DO0\\\\\\\">\\\\n                  <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\"|R$_,2MzCP`EX\\\/%c.NG7\\\\\\\">\\\\n                    <value name=\\\\\\\"ANY0\\\\\\\">\\\\n                      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"jYhGf#N:giuObYmBaHDS\\\\\\\">\\\\n                        <field name=\\\\\\\"TEXT\\\\\\\">It's a carnivore!<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                  <\\\/block>\\\\n                <\\\/statement>\\\\n                <statement name=\\\\\\\"ELSE\\\\\\\">\\\\n                  <block type=\\\\\\\"io_print1\\\\\\\" id=\\\\\\\")LpW7D3_{n^p|ls?1@.b\\\\\\\">\\\\n                    <value name=\\\\\\\"ANY0\\\\\\\">\\\\n                      <block type=\\\\\\\"text\\\\\\\" id=\\\\\\\"78.3qu=PMk5gbD!d?zb|\\\\\\\">\\\\n                        <field name=\\\\\\\"TEXT\\\\\\\">It's an omnivore!<\\\/field>\\\\n                      <\\\/block>\\\\n                    <\\\/value>\\\\n                  <\\\/block>\\\\n                <\\\/statement>\\\\n              <\\\/block>\\\\n            <\\\/next>\\\\n          <\\\/block>\\\\n        <\\\/statement>\\\\n      <\\\/block>\\\\n    <\\\/next>\\\\n  <\\\/block>\\\\n<\\\/xml>\\\\n<\\\/code><\\\/pre>\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"choices-bk-eats-1\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"u}(_$ffBVUpP%EG}oGxR\\\">meat<\/variable>\\n    <variable type=\\\"\\\" id=\\\"Gh7*W.S}mcY9~i,^W6XT\\\">plants<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"y;$M;;Pgo7sW=@2^jjJ)\\\" x=\\\"8\\\" y=\\\"7\\\">\\n    <field name=\\\"VAR\\\" id=\\\"u}(_$ffBVUpP%EG}oGxR\\\" variabletype=\\\"\\\">meat<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"io_ask_text\\\" id=\\\"B8WKvjv.KL]P^avKKT!V\\\">\\n        <value name=\\\"TEXT\\\">\\n          <block type=\\\"text\\\" id=\\\"Em{efnphK^NNrkghM8k@\\\">\\n            <field name=\\\"TEXT\\\">Does it eat meat?<\/field>\\n          <\/block>\\n        <\/value>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"decisions_if_else\\\" id=\\\"mP8vo}(wD[--?z)~[5gm\\\">\\n        <value name=\\\"IF0\\\">\\n          <block type=\\\"logic_compare\\\" id=\\\"6ou=6HUXq|PkhAWL\/j2$\\\">\\n            <field name=\\\"OP\\\">EQ<\/field>\\n            <value name=\\\"A\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"d2mTqUZ3RnQ:{P,e]W.,\\\">\\n                <field name=\\\"VAR\\\" id=\\\"u}(_$ffBVUpP%EG}oGxR\\\" variabletype=\\\"\\\">meat<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"B\\\">\\n              <block type=\\\"text\\\" id=\\\"aTe^YS_,vX|@bCkmX1}}\\\">\\n                <field name=\\\"TEXT\\\">yes<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/value>\\n        <statement name=\\\"DO0\\\">\\n          <block type=\\\"variables_set\\\" id=\\\"iNu*@17W;cS%d,F~-Bwg\\\">\\n            <field name=\\\"VAR\\\" id=\\\"Gh7*W.S}mcY9~i,^W6XT\\\" variabletype=\\\"\\\">plants<\/field>\\n            <value name=\\\"VALUE\\\">\\n              <block type=\\\"io_ask_text\\\" id=\\\"Y~@jGO|6_2-\/3%T)^u7L\\\">\\n                <value name=\\\"TEXT\\\">\\n                  <block type=\\\"text\\\" id=\\\"c8o~^ak0=@LAM-?Hh*o|\\\">\\n                    <field name=\\\"TEXT\\\">Does it eat plants?<\/field>\\n                  <\/block>\\n                <\/value>\\n              <\/block>\\n            <\/value>\\n            <next>\\n              <block type=\\\"decisions_if_else\\\" id=\\\"AI9PvYOJB+5Zzc0LE%P|\\\">\\n                <value name=\\\"IF0\\\">\\n                  <block type=\\\"logic_compare\\\" id=\\\"*GKNY;#X\/s0l,H!HdPBT\\\">\\n                    <field name=\\\"OP\\\">EQ<\/field>\\n                    <value name=\\\"A\\\">\\n                      <block type=\\\"variables_get\\\" id=\\\"u0)kE4|p8Q)OtO~xS:nE\\\">\\n                        <field name=\\\"VAR\\\" id=\\\"Gh7*W.S}mcY9~i,^W6XT\\\" variabletype=\\\"\\\">plants<\/field>\\n                      <\/block>\\n                    <\/value>\\n                    <value name=\\\"B\\\">\\n                      <block type=\\\"text\\\" id=\\\"Dq3CBq2Qz+rjBz8;[V4X\\\">\\n                        <field name=\\\"TEXT\\\">yes<\/field>\\n                      <\/block>\\n                    <\/value>\\n                  <\/block>\\n                <\/value>\\n                <statement name=\\\"DO0\\\">\\n                  <block type=\\\"io_print1\\\" id=\\\"|R$_,2MzCP`EX\/%c.NG7\\\">\\n                    <value name=\\\"ANY0\\\">\\n                      <block type=\\\"text\\\" id=\\\"jYhGf#N:giuObYmBaHDS\\\">\\n                        <field name=\\\"TEXT\\\">It's a carnivore!<\/field>\\n                      <\/block>\\n                    <\/value>\\n                  <\/block>\\n                <\/statement>\\n                <statement name=\\\"ELSE\\\">\\n                  <block type=\\\"io_print1\\\" id=\\\")LpW7D3_{n^p|ls?1@.b\\\">\\n                    <value name=\\\"ANY0\\\">\\n                      <block type=\\\"text\\\" id=\\\"78.3qu=PMk5gbD!d?zb|\\\">\\n                        <field name=\\\"TEXT\\\">It's an omnivore!<\/field>\\n                      <\/block>\\n                    <\/value>\\n                  <\/block>\\n                <\/statement>\\n              <\/block>\\n            <\/next>\\n          <\/block>\\n        <\/statement>\\n        <statement name=\\\"ELSE\\\">\\n          <block type=\\\"io_print1\\\" id=\\\"#K(p]ugf;^{e*[Br:6)k\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\"n@wGQr#p{$I)1*R|%NC?\\\">\\n                <field name=\\\"TEXT\\\">It's a herbivore!<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/statement>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"carni-omni\"\n    },\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"choices-bk-eats-2\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"u}(_$ffBVUpP%EG}oGxR\\\">meat<\/variable>\\n    <variable type=\\\"\\\" id=\\\"Gh7*W.S}mcY9~i,^W6XT\\\">plants<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"y;$M;;Pgo7sW=@2^jjJ)\\\" x=\\\"8\\\" y=\\\"7\\\">\\n    <field name=\\\"VAR\\\" id=\\\"u}(_$ffBVUpP%EG}oGxR\\\" variabletype=\\\"\\\">meat<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"io_ask_text\\\" id=\\\"B8WKvjv.KL]P^avKKT!V\\\">\\n        <value name=\\\"TEXT\\\">\\n          <block type=\\\"text\\\" id=\\\"Em{efnphK^NNrkghM8k@\\\">\\n            <field name=\\\"TEXT\\\">Does it eat meat?<\/field>\\n          <\/block>\\n        <\/value>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"decisions_if_else\\\" id=\\\"mP8vo}(wD[--?z)~[5gm\\\">\\n        <value name=\\\"IF0\\\">\\n          <block type=\\\"logic_compare\\\" id=\\\"6ou=6HUXq|PkhAWL\/j2$\\\">\\n            <field name=\\\"OP\\\">EQ<\/field>\\n            <value name=\\\"A\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"d2mTqUZ3RnQ:{P,e]W.,\\\">\\n                <field name=\\\"VAR\\\" id=\\\"u}(_$ffBVUpP%EG}oGxR\\\" variabletype=\\\"\\\">meat<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"B\\\">\\n              <block type=\\\"text\\\" id=\\\"aTe^YS_,vX|@bCkmX1}}\\\">\\n                <field name=\\\"TEXT\\\">no<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/value>\\n        <statement name=\\\"DO0\\\">\\n          <block type=\\\"variables_set\\\" id=\\\"iNu*@17W;cS%d,F~-Bwg\\\">\\n            <field name=\\\"VAR\\\" id=\\\"Gh7*W.S}mcY9~i,^W6XT\\\" variabletype=\\\"\\\">plants<\/field>\\n            <value name=\\\"VALUE\\\">\\n              <block type=\\\"io_ask_text\\\" id=\\\"Y~@jGO|6_2-\/3%T)^u7L\\\">\\n                <value name=\\\"TEXT\\\">\\n                  <block type=\\\"text\\\" id=\\\"c8o~^ak0=@LAM-?Hh*o|\\\">\\n                    <field name=\\\"TEXT\\\">Does it eat plants?<\/field>\\n                  <\/block>\\n                <\/value>\\n              <\/block>\\n            <\/value>\\n            <next>\\n              <block type=\\\"decisions_if_else\\\" id=\\\"AI9PvYOJB+5Zzc0LE%P|\\\">\\n                <value name=\\\"IF0\\\">\\n                  <block type=\\\"logic_compare\\\" id=\\\"*GKNY;#X\/s0l,H!HdPBT\\\">\\n                    <field name=\\\"OP\\\">EQ<\/field>\\n                    <value name=\\\"A\\\">\\n                      <block type=\\\"variables_get\\\" id=\\\"u0)kE4|p8Q)OtO~xS:nE\\\">\\n                        <field name=\\\"VAR\\\" id=\\\"Gh7*W.S}mcY9~i,^W6XT\\\" variabletype=\\\"\\\">plants<\/field>\\n                      <\/block>\\n                    <\/value>\\n                    <value name=\\\"B\\\">\\n                      <block type=\\\"text\\\" id=\\\"Dq3CBq2Qz+rjBz8;[V4X\\\">\\n                        <field name=\\\"TEXT\\\">yes<\/field>\\n                      <\/block>\\n                    <\/value>\\n                  <\/block>\\n                <\/value>\\n                <statement name=\\\"DO0\\\">\\n                  <block type=\\\"io_print1\\\" id=\\\"#K(p]ugf;^{e*[Br:6)k\\\">\\n                    <value name=\\\"ANY0\\\">\\n                      <block type=\\\"text\\\" id=\\\"n@wGQr#p{$I)1*R|%NC?\\\">\\n                        <field name=\\\"TEXT\\\">It's a herbivore!<\/field>\\n                      <\/block>\\n                    <\/value>\\n                  <\/block>\\n                <\/statement>\\n                <statement name=\\\"ELSE\\\">\\n                  <block type=\\\"io_print1\\\" id=\\\")LpW7D3_{n^p|ls?1@.b\\\">\\n                    <value name=\\\"ANY0\\\">\\n                      <block type=\\\"text\\\" id=\\\"78.3qu=PMk5gbD!d?zb|\\\">\\n                        <field name=\\\"TEXT\\\">It's an omnivore!<\/field>\\n                      <\/block>\\n                    <\/value>\\n                  <\/block>\\n                <\/statement>\\n              <\/block>\\n            <\/next>\\n          <\/block>\\n        <\/statement>\\n        <statement name=\\\"ELSE\\\">\\n          <block type=\\\"io_print1\\\" id=\\\"|R$_,2MzCP`EX\/%c.NG7\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\"jYhGf#N:giuObYmBaHDS\\\">\\n                <field name=\\\"TEXT\\\">It's a carnivore!<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/statement>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"no-answers\"\n    },\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"choices-bk-eats-3\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"u}(_$ffBVUpP%EG}oGxR\\\">meat<\/variable>\\n    <variable type=\\\"\\\" id=\\\"Gh7*W.S}mcY9~i,^W6XT\\\">plants<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"y;$M;;Pgo7sW=@2^jjJ)\\\" x=\\\"8\\\" y=\\\"7\\\">\\n    <field name=\\\"VAR\\\" id=\\\"u}(_$ffBVUpP%EG}oGxR\\\" variabletype=\\\"\\\">meat<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"io_ask_text\\\" id=\\\"B8WKvjv.KL]P^avKKT!V\\\">\\n        <value name=\\\"TEXT\\\">\\n          <block type=\\\"text\\\" id=\\\"Em{efnphK^NNrkghM8k@\\\">\\n            <field name=\\\"TEXT\\\">Does it eat meat?<\/field>\\n          <\/block>\\n        <\/value>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"decisions_if_else\\\" id=\\\"mP8vo}(wD[--?z)~[5gm\\\">\\n        <value name=\\\"IF0\\\">\\n          <block type=\\\"logic_compare\\\" id=\\\"6ou=6HUXq|PkhAWL\/j2$\\\">\\n            <field name=\\\"OP\\\">EQ<\/field>\\n            <value name=\\\"A\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"d2mTqUZ3RnQ:{P,e]W.,\\\">\\n                <field name=\\\"VAR\\\" id=\\\"u}(_$ffBVUpP%EG}oGxR\\\" variabletype=\\\"\\\">meat<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"B\\\">\\n              <block type=\\\"text\\\" id=\\\"aTe^YS_,vX|@bCkmX1}}\\\">\\n                <field name=\\\"TEXT\\\">yes<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/value>\\n        <statement name=\\\"DO0\\\">\\n          <block type=\\\"variables_set\\\" id=\\\"iNu*@17W;cS%d,F~-Bwg\\\">\\n            <field name=\\\"VAR\\\" id=\\\"Gh7*W.S}mcY9~i,^W6XT\\\" variabletype=\\\"\\\">plants<\/field>\\n            <value name=\\\"VALUE\\\">\\n              <block type=\\\"io_ask_text\\\" id=\\\"Y~@jGO|6_2-\/3%T)^u7L\\\">\\n                <value name=\\\"TEXT\\\">\\n                  <block type=\\\"text\\\" id=\\\"c8o~^ak0=@LAM-?Hh*o|\\\">\\n                    <field name=\\\"TEXT\\\">Does it eat plants?<\/field>\\n                  <\/block>\\n                <\/value>\\n              <\/block>\\n            <\/value>\\n            <next>\\n              <block type=\\\"decisions_if_else\\\" id=\\\"AI9PvYOJB+5Zzc0LE%P|\\\">\\n                <value name=\\\"IF0\\\">\\n                  <block type=\\\"logic_compare\\\" id=\\\"*GKNY;#X\/s0l,H!HdPBT\\\">\\n                    <field name=\\\"OP\\\">EQ<\/field>\\n                    <value name=\\\"A\\\">\\n                      <block type=\\\"variables_get\\\" id=\\\"u0)kE4|p8Q)OtO~xS:nE\\\">\\n                        <field name=\\\"VAR\\\" id=\\\"Gh7*W.S}mcY9~i,^W6XT\\\" variabletype=\\\"\\\">plants<\/field>\\n                      <\/block>\\n                    <\/value>\\n                    <value name=\\\"B\\\">\\n                      <block type=\\\"text\\\" id=\\\"Dq3CBq2Qz+rjBz8;[V4X\\\">\\n                        <field name=\\\"TEXT\\\">yes<\/field>\\n                      <\/block>\\n                    <\/value>\\n                  <\/block>\\n                <\/value>\\n                <statement name=\\\"DO0\\\">\\n                  <block type=\\\"io_print1\\\" id=\\\")LpW7D3_{n^p|ls?1@.b\\\">\\n                    <value name=\\\"ANY0\\\">\\n                      <block type=\\\"text\\\" id=\\\"78.3qu=PMk5gbD!d?zb|\\\">\\n                        <field name=\\\"TEXT\\\">It's an omnivore!<\/field>\\n                      <\/block>\\n                    <\/value>\\n                  <\/block>\\n                <\/statement>\\n                <statement name=\\\"ELSE\\\">\\n                  <block type=\\\"io_print1\\\" id=\\\"|R$_,2MzCP`EX\/%c.NG7\\\">\\n                    <value name=\\\"ANY0\\\">\\n                      <block type=\\\"text\\\" id=\\\"jYhGf#N:giuObYmBaHDS\\\">\\n                        <field name=\\\"TEXT\\\">It's a carnivore!<\/field>\\n                      <\/block>\\n                    <\/value>\\n                  <\/block>\\n                <\/statement>\\n              <\/block>\\n            <\/next>\\n          <\/block>\\n        <\/statement>\\n        <statement name=\\\"ELSE\\\">\\n          <block type=\\\"io_print1\\\" id=\\\"#K(p]ugf;^{e*[Br:6)k\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\"n@wGQr#p{$I)1*R|%NC?\\\">\\n                <field name=\\\"TEXT\\\">It's a herbivore!<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/statement>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"flowchart-algo\"\n    },\n    {\n      \"content\": \"<pre class=\\\"js-editor-blockly\\\" data-eg-id=\\\"choices-bk-eats-4\\\" data-runnable=\\\"false\\\"><code data-lang=\\\"blockly\\\" data-runnable=\\\"false\\\">\\n<xml xmlns=\\\"http:\/\/www.w3.org\/1999\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"u}(_$ffBVUpP%EG}oGxR\\\">meat<\/variable>\\n    <variable type=\\\"\\\" id=\\\"Gh7*W.S}mcY9~i,^W6XT\\\">plants<\/variable>\\n  <\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"y;$M;;Pgo7sW=@2^jjJ)\\\" x=\\\"8\\\" y=\\\"7\\\">\\n    <field name=\\\"VAR\\\" id=\\\"u}(_$ffBVUpP%EG}oGxR\\\" variabletype=\\\"\\\">meat<\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"io_ask_text\\\" id=\\\"B8WKvjv.KL]P^avKKT!V\\\">\\n        <value name=\\\"TEXT\\\">\\n          <block type=\\\"text\\\" id=\\\"Em{efnphK^NNrkghM8k@\\\">\\n            <field name=\\\"TEXT\\\">Does it eat meat?<\/field>\\n          <\/block>\\n        <\/value>\\n      <\/block>\\n    <\/value>\\n    <next>\\n      <block type=\\\"decisions_if_else\\\" id=\\\"mP8vo}(wD[--?z)~[5gm\\\">\\n        <value name=\\\"IF0\\\">\\n          <block type=\\\"logic_compare\\\" id=\\\"6ou=6HUXq|PkhAWL\/j2$\\\">\\n            <field name=\\\"OP\\\">EQ<\/field>\\n            <value name=\\\"A\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"d2mTqUZ3RnQ:{P,e]W.,\\\">\\n                <field name=\\\"VAR\\\" id=\\\"u}(_$ffBVUpP%EG}oGxR\\\" variabletype=\\\"\\\">meat<\/field>\\n              <\/block>\\n            <\/value>\\n            <value name=\\\"B\\\">\\n              <block type=\\\"text\\\" id=\\\"aTe^YS_,vX|@bCkmX1}}\\\">\\n                <field name=\\\"TEXT\\\">no<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/value>\\n        <statement name=\\\"DO0\\\">\\n          <block type=\\\"io_print1\\\" id=\\\"#K(p]ugf;^{e*[Br:6)k\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\"n@wGQr#p{$I)1*R|%NC?\\\">\\n                <field name=\\\"TEXT\\\">It's a herbivore!<\/field>\\n              <\/block>\\n            <\/value>\\n          <\/block>\\n        <\/statement>\\n        <statement name=\\\"ELSE\\\">\\n          <block type=\\\"variables_set\\\" id=\\\"iNu*@17W;cS%d,F~-Bwg\\\">\\n            <field name=\\\"VAR\\\" id=\\\"Gh7*W.S}mcY9~i,^W6XT\\\" variabletype=\\\"\\\">plants<\/field>\\n            <value name=\\\"VALUE\\\">\\n              <block type=\\\"io_ask_text\\\" id=\\\"Y~@jGO|6_2-\/3%T)^u7L\\\">\\n                <value name=\\\"TEXT\\\">\\n                  <block type=\\\"text\\\" id=\\\"c8o~^ak0=@LAM-?Hh*o|\\\">\\n                    <field name=\\\"TEXT\\\">Does it eat plants?<\/field>\\n                  <\/block>\\n                <\/value>\\n              <\/block>\\n            <\/value>\\n            <next>\\n              <block type=\\\"decisions_if_else\\\" id=\\\"AI9PvYOJB+5Zzc0LE%P|\\\">\\n                <value name=\\\"IF0\\\">\\n                  <block type=\\\"logic_compare\\\" id=\\\"*GKNY;#X\/s0l,H!HdPBT\\\">\\n                    <field name=\\\"OP\\\">EQ<\/field>\\n                    <value name=\\\"A\\\">\\n                      <block type=\\\"variables_get\\\" id=\\\"u0)kE4|p8Q)OtO~xS:nE\\\">\\n                        <field name=\\\"VAR\\\" id=\\\"Gh7*W.S}mcY9~i,^W6XT\\\" variabletype=\\\"\\\">plants<\/field>\\n                      <\/block>\\n                    <\/value>\\n                    <value name=\\\"B\\\">\\n                      <block type=\\\"text\\\" id=\\\"Dq3CBq2Qz+rjBz8;[V4X\\\">\\n                        <field name=\\\"TEXT\\\">yes<\/field>\\n                      <\/block>\\n                    <\/value>\\n                  <\/block>\\n                <\/value>\\n                <statement name=\\\"DO0\\\">\\n                  <block type=\\\"io_print1\\\" id=\\\"|R$_,2MzCP`EX\/%c.NG7\\\">\\n                    <value name=\\\"ANY0\\\">\\n                      <block type=\\\"text\\\" id=\\\"jYhGf#N:giuObYmBaHDS\\\">\\n                        <field name=\\\"TEXT\\\">It's a carnivore!<\/field>\\n                      <\/block>\\n                    <\/value>\\n                  <\/block>\\n                <\/statement>\\n                <statement name=\\\"ELSE\\\">\\n                  <block type=\\\"io_print1\\\" id=\\\")LpW7D3_{n^p|ls?1@.b\\\">\\n                    <value name=\\\"ANY0\\\">\\n                      <block type=\\\"text\\\" id=\\\"78.3qu=PMk5gbD!d?zb|\\\">\\n                        <field name=\\\"TEXT\\\">It's an omnivore!<\/field>\\n                      <\/block>\\n                    <\/value>\\n                  <\/block>\\n                <\/statement>\\n              <\/block>\\n            <\/next>\\n          <\/block>\\n        <\/statement>\\n      <\/block>\\n    <\/next>\\n  <\/block>\\n<\/xml>\\n<\/code><\/pre>\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"no-yes\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 2\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThis question tests the student's ability to *trace* their algorithm. This involves working through the code line by line without running it, and checking that the code does what you expect it to do at each stage by comparing it with your algorithm. Sometimes this process is referred to as *desk-checking*.\n\nFor algorithms like this, we should be checking the conditions in our <bk class=\"control\">if<\/bk> statements, and whether or not we print the correct output when we move down each branch."
    },
    {
      "language":0,
      "title":"Find the animal!",
      "notes":"#markdown\nThe key to this problem is to use an <bk class=\"control\">if - else if - else if - else<\/bk> block (take special care to choose the right number of if-elses). This is how we deal with the situation where we need to catch lots of words which are not known.\n\nWe start by getting the <bk class=\"var\"><bk class=\"inner\">characteristic<\/bk><\/bk>:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"zjht[EE~B(tQ0ysW8K;F\">characteristic<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"o-ngyLljjAuNw06c\/aNQ\" x=\"12\" y=\"13\">\n    <field name=\"VAR\" id=\"zjht[EE~B(tQ0ysW8K;F\" variabletype=\"\">characteristic<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"$M#^3yebvXClgtmXSXj]\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"]=]njBsvd_nGTF3E}B$-\">\n            <field name=\"TEXT\">Characteristic?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThen checking that input against the cases from the table, `'No spine'`, `'Lives in water'` and `'Flying'`, and match up to their corresponding output.\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"zjht[EE~B(tQ0ysW8K;F\">characteristic<\/variable>\n  <\/variables>\n    <block type=\"decisions_if_elif_elif_else\" id=\"3`W2A0pCeqf.0A@RV1?Z\">\n     <value name=\"IF0\">\n        <block type=\"logic_compare\" id=\"al$AEsn}-2(!%]htE+cI\">\n          <field name=\"OP\">EQ<\/field>\n          <value name=\"A\">\n            <block type=\"variables_get\" id=\"C~zS3\/t6z;L[*^u^=%OM\">\n              <field name=\"VAR\" id=\"zjht[EE~B(tQ0ysW8K;F\" variabletype=\"\">characteristic<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"B\">\n            <block type=\"text\" id=\"DOa^0sX:y$%z;;IOi[k2\">\n              <field name=\"TEXT\">Pouch<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n      <statement name=\"DO0\">\n        <block type=\"io_print1\" id=\"dc[i!oDa3u=.Tkggep8b\">\n          <value name=\"ANY0\">\n            <block type=\"text\" id=\"^@osvL\/*,%+~M!p6u_St\">\n              <field name=\"TEXT\">Kangaroo!<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/statement>\n      <value name=\"IF1\">\n        <block type=\"logic_compare\" id=\"*H-x}w|yi!pW,oflQRV,\">\n          <field name=\"OP\">EQ<\/field>\n          <value name=\"A\">\n            <block type=\"variables_get\" id=\"$BW.o,r{}59P6CKE:Aq~\">\n              <field name=\"VAR\" id=\"zjht[EE~B(tQ0ysW8K;F\" variabletype=\"\">characteristic<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"B\">\n            <block type=\"text\" id=\"9y8JU\/{iJjhROk2KWTu?\">\n              <field name=\"TEXT\">Casque<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n      <statement name=\"DO1\">\n        <block type=\"io_print1\" id=\"E*$Rn!LvbnAP^FQ!br1F\">\n          <value name=\"ANY0\">\n            <block type=\"text\" id=\"}b#dQ*g5Yn#=fddjeAfx\">\n              <field name=\"TEXT\">Cassowary!<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/statement>\n      <value name=\"IF2\">\n        <block type=\"logic_compare\" id=\"(C%Dn,6MKCN,AB`J@2-C\">\n          <field name=\"OP\">EQ<\/field>\n          <value name=\"A\">\n            <block type=\"variables_get\" id=\"0$4TOk)U:`\/%`%qzhA;d\">\n              <field name=\"VAR\" id=\"zjht[EE~B(tQ0ysW8K;F\" variabletype=\"\">characteristic<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"B\">\n            <block type=\"text\" id=\"*Q1q,1.P{\/%c01L?;~sP\">\n              <field name=\"TEXT\">Claws<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n      <statement name=\"DO2\">\n        <block type=\"io_print1\" id=\"m%sdvNm`.:#!N2cdgf$2\">\n          <value name=\"ANY0\">\n            <block type=\"text\" id=\"0GcjcA8$AZ48Y$[cB}(_\">\n              <field name=\"TEXT\">Goanna!<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/statement>\n      <statement name=\"ELSE\">\n        <block type=\"io_print1\" id=\"B@xEWrX4I:C^LDb:%R;\/\">\n          <value name=\"ANY0\">\n            <block type=\"text\" id=\"S_s@h`c1PR9zHP;!j+EW\">\n              <field name=\"TEXT\">I do not know.<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/statement>\n    <\/block>\n  <\/block>\n<\/xml>\n```\n\nRemembering to use the <bk class=\"control\">else<\/bk> to catch everything else. We then combine these blocks for our answer:\n",
      "updated_at":"2018-03-06T00:55:52.932338+00:00",
      "label":"aca-bk-bio-find-the-animal",
      "content":"#markdown\n\nIn Biology, we can use the *characteristics* of an animal to tell which one is feach.\n\nYour teacher has given you a list of Australian animals with a characteristic of each. Write a program to accept an `input` characteristic, and print out the correct animal from the table.\n\n<table class=\"table table-bordered\">\n  <thead>\n    <tr>\n      <th>Animal<\/th>\n      <th>Characteristic<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>Kangaroo<\/td>\n      <td>Pouch<\/td>\n    <\/tr>\n    <tr>\n      <td>Cassowary<\/td>\n      <td>Casque<\/td>\n    <\/tr>\n    <tr>\n      <td>Goanna<\/td>\n      <td>Claws<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n\nYour program should ask for the characteristic then print out the corresponding animal. For example:\n\n```lang:py3;terminal;eg:none;\nCharacteristic? @@@Pouch\nKangaroo!\n\n```\n\nNotice that there is an exclamation mark at the end of the output!\n\nHere is another example:\n\n```lang:py3;terminal;eg:none;\nCharacteristic? @@@Casque\nCassowary!\n\n```\n\nIf the feature isn't one of the three above, your program should print <code data-lang=\"out\">I do not know.<\/code> For example:\n\n```lang:py3;terminal;eg:none;\nCharacteristic? @@@Hooves\nI do not know.\n\n```",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-elif-else",
        "print",
        "variables"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1_text\",\"io_ask_text\",\"decisions_if_else\",\"decisions_if_elif_else\",\"decisions_if_elif_elif_else\",\"logic_compare\"]",
      "teacher_notes":"#markdown\nThe key to this problem is to use an <bk class=\"control\">if - else if - else if - else<\/bk> block (take special care to choose the right number of if-elses). This is how we deal with the situation where we need to catch lots of words which are not known.\n\nWe start by getting the <bk class=\"var\"><bk class=\"inner\">characteristic<\/bk><\/bk>:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"zjht[EE~B(tQ0ysW8K;F\">characteristic<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"o-ngyLljjAuNw06c\/aNQ\" x=\"12\" y=\"13\">\n    <field name=\"VAR\" id=\"zjht[EE~B(tQ0ysW8K;F\" variabletype=\"\">characteristic<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"$M#^3yebvXClgtmXSXj]\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"]=]njBsvd_nGTF3E}B$-\">\n            <field name=\"TEXT\">Characteristic?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThen checking that input against the cases from the table, `'No spine'`, `'Lives in water'` and `'Flying'`, and match up to their corresponding output.\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"zjht[EE~B(tQ0ysW8K;F\">characteristic<\/variable>\n  <\/variables>\n    <block type=\"decisions_if_elif_elif_else\" id=\"3`W2A0pCeqf.0A@RV1?Z\">\n     <value name=\"IF0\">\n        <block type=\"logic_compare\" id=\"al$AEsn}-2(!%]htE+cI\">\n          <field name=\"OP\">EQ<\/field>\n          <value name=\"A\">\n            <block type=\"variables_get\" id=\"C~zS3\/t6z;L[*^u^=%OM\">\n              <field name=\"VAR\" id=\"zjht[EE~B(tQ0ysW8K;F\" variabletype=\"\">characteristic<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"B\">\n            <block type=\"text\" id=\"DOa^0sX:y$%z;;IOi[k2\">\n              <field name=\"TEXT\">Pouch<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n      <statement name=\"DO0\">\n        <block type=\"io_print1\" id=\"dc[i!oDa3u=.Tkggep8b\">\n          <value name=\"ANY0\">\n            <block type=\"text\" id=\"^@osvL\/*,%+~M!p6u_St\">\n              <field name=\"TEXT\">Kangaroo!<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/statement>\n      <value name=\"IF1\">\n        <block type=\"logic_compare\" id=\"*H-x}w|yi!pW,oflQRV,\">\n          <field name=\"OP\">EQ<\/field>\n          <value name=\"A\">\n            <block type=\"variables_get\" id=\"$BW.o,r{}59P6CKE:Aq~\">\n              <field name=\"VAR\" id=\"zjht[EE~B(tQ0ysW8K;F\" variabletype=\"\">characteristic<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"B\">\n            <block type=\"text\" id=\"9y8JU\/{iJjhROk2KWTu?\">\n              <field name=\"TEXT\">Casque<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n      <statement name=\"DO1\">\n        <block type=\"io_print1\" id=\"E*$Rn!LvbnAP^FQ!br1F\">\n          <value name=\"ANY0\">\n            <block type=\"text\" id=\"}b#dQ*g5Yn#=fddjeAfx\">\n              <field name=\"TEXT\">Cassowary!<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/statement>\n      <value name=\"IF2\">\n        <block type=\"logic_compare\" id=\"(C%Dn,6MKCN,AB`J@2-C\">\n          <field name=\"OP\">EQ<\/field>\n          <value name=\"A\">\n            <block type=\"variables_get\" id=\"0$4TOk)U:`\/%`%qzhA;d\">\n              <field name=\"VAR\" id=\"zjht[EE~B(tQ0ysW8K;F\" variabletype=\"\">characteristic<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"B\">\n            <block type=\"text\" id=\"*Q1q,1.P{\/%c01L?;~sP\">\n              <field name=\"TEXT\">Claws<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n      <statement name=\"DO2\">\n        <block type=\"io_print1\" id=\"m%sdvNm`.:#!N2cdgf$2\">\n          <value name=\"ANY0\">\n            <block type=\"text\" id=\"0GcjcA8$AZ48Y$[cB}(_\">\n              <field name=\"TEXT\">Goanna!<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/statement>\n      <statement name=\"ELSE\">\n        <block type=\"io_print1\" id=\"B@xEWrX4I:C^LDb:%R;\/\">\n          <value name=\"ANY0\">\n            <block type=\"text\" id=\"S_s@h`c1PR9zHP;!j+EW\">\n              <field name=\"TEXT\">I do not know.<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/statement>\n    <\/block>\n  <\/block>\n<\/xml>\n```\n\nRemembering to use the <bk class=\"control\">else<\/bk> to catch everything else. We then combine these blocks for our answer:\n"
    },
    {
      "language":0,
      "title":"Feature to class",
      "notes":"#markdown\nThe key to this problem is to use an <bk class=\"control\">if - else if - else if - else<\/bk> block (take special care to choose the right number of if-elses). This is how we deal with the situation where we need to catch lots of words which are not known.\n\nWe start by getting the <bk class=\"var\"><bk class=\"inner\">feature<\/bk><\/bk>:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"EehZ\/[:XPi[YXePqoyq`\">feature<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"=-pOf6x9^0Hd5!|_eDnq\" x=\"23\" y=\"6\">\n    <field name=\"VAR\" id=\"EehZ\/[:XPi[YXePqoyq`\" variabletype=\"\">feature<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"iq;hC`bAnc12Apg_NZg\/\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"FyJ=(n`=Ju25V9$Ts\/_Z\">\n            <field name=\"TEXT\">What is the feature?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThen checking that input against the cases from the table, `'Fur'`, `'Gills'` and `'Wings'`, and match up to their corresponding output.\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"zjht[EE~B(tQ0ysW8K;F\">characteristic<\/variable>\n  <\/variables>\n      <block type=\"decisions_if_elif_elif_else\" id=\"%R8xc4%;4+C8t$3D1[u\/\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"Ear?Q#73VtziJ(x9YKne\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"QkeGOv,k#FcDqM~Fa!#2\">\n                <field name=\"VAR\" id=\"EehZ\/[:XPi[YXePqoyq`\" variabletype=\"\">feature<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"V4I;usl^qJ74V~#Wo**R\">\n                <field name=\"TEXT\">Fur<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"2fBL-64.14yJ~U?TgMi_\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"@~C5m}Kp23:Fso,6%4^u\">\n                <field name=\"TEXT\">Mammal<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_compare\" id=\";XJ4R4bs6EWpFVm(wmeC\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"\/p2NG.;A7[!BxT+A@JiI\">\n                <field name=\"VAR\" id=\"EehZ\/[:XPi[YXePqoyq`\" variabletype=\"\">feature<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"%l}JV*4+[DMGy+]G6Z8j\">\n                <field name=\"TEXT\">Gills<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"|$=!uALYuZ.2j}AG@?s_\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"(S#I!Rz2.ucE*poP_)-(\">\n                <field name=\"TEXT\">Fish<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF2\">\n          <block type=\"logic_compare\" id=\"Y\/4NINT5@`PpM5s32Uw7\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"#,ibVHDJPLuv?8mov1:Q\">\n                <field name=\"VAR\" id=\"EehZ\/[:XPi[YXePqoyq`\" variabletype=\"\">feature<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\".CCWlaQBY|eyDZNk6c^Z\">\n                <field name=\"TEXT\">Wings<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO2\">\n          <block type=\"io_print1\" id=\"5?sD41!peC35d_B5DKjb\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\",~+k_em(:ozC=G-*A:oF\">\n                <field name=\"TEXT\">Bird<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\":CDe,I6`)sy|KgU#axyH\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"{AW:|DijI7J^qYqygulY\">\n                <field name=\"TEXT\">I'm not sure.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n<\/xml>\n```\n\nRemembering to use the <bk class=\"control\">else<\/bk> to catch everything else. We then combine these blocks for our answer:\n",
      "updated_at":"2018-03-06T01:00:13.363262+00:00",
      "label":"aca-bk-bio-feature-to-class",
      "content":"#markdown\nThe **class** of an animal describes what general type of animal it is, such as *mammal*, *reptile* or *fish*.\n\nWrite a program to tell the difference between three *classes* of animal in the table below, based on the feature from the table:\n\n<table class=\"table table-bordered\">\n  <thead>\n    <tr>\n      <th>Class<\/th>\n      <th>Feature<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>Mammal<\/td>\n      <td>Fur<\/td>\n    <\/tr>\n    <tr>\n      <td>Fish<\/td>\n      <td>Gills<\/td>\n    <\/tr>\n    <tr>\n      <td>Bird<\/td>\n      <td>Wings<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n\nOsteichthyes are fish, and Aves are birds.\n\nYour program should ask for the feature then print out the type of animal that feature corresponds to. For example:\n\n```lang:py3;terminal;eg:none;\nWhat is the feature? @@@Fur\nMammal\n\n```\n\nHere is another example:\n\n```lang:py3;terminal;eg:none;\nWhat is the feature? @@@Gills\nFish\n\n```\n\nIf the feature isn't one of the three above, your program should print <code data-lang=\"out\">I'm not sure.<\/code> For example:\n\n```lang:py3;terminal;eg:none;\nWhat is the feature? @@@Scales\nI'm not sure.\n\n```",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-elif-else",
        "print",
        "variables"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1_text\",\"io_print1\",\"io_print2\",\"io_ask_text\",\"decisions_if_else\",\"decisions_if_elif_else\",\"decisions_if_elif_elif_else\",\"logic_compare\"]",
      "teacher_notes":"#markdown\nThe key to this problem is to use an <bk class=\"control\">if - else if - else if - else<\/bk> block (take special care to choose the right number of if-elses). This is how we deal with the situation where we need to catch lots of words which are not known.\n\nWe start by getting the <bk class=\"var\"><bk class=\"inner\">feature<\/bk><\/bk>:\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"EehZ\/[:XPi[YXePqoyq`\">feature<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"=-pOf6x9^0Hd5!|_eDnq\" x=\"23\" y=\"6\">\n    <field name=\"VAR\" id=\"EehZ\/[:XPi[YXePqoyq`\" variabletype=\"\">feature<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"iq;hC`bAnc12Apg_NZg\/\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"FyJ=(n`=Ju25V9$Ts\/_Z\">\n            <field name=\"TEXT\">What is the feature?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nThen checking that input against the cases from the table, `'Fur'`, `'Gills'` and `'Wings'`, and match up to their corresponding output.\n\n```lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"zjht[EE~B(tQ0ysW8K;F\">characteristic<\/variable>\n  <\/variables>\n      <block type=\"decisions_if_elif_elif_else\" id=\"%R8xc4%;4+C8t$3D1[u\/\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"Ear?Q#73VtziJ(x9YKne\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"QkeGOv,k#FcDqM~Fa!#2\">\n                <field name=\"VAR\" id=\"EehZ\/[:XPi[YXePqoyq`\" variabletype=\"\">feature<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"V4I;usl^qJ74V~#Wo**R\">\n                <field name=\"TEXT\">Fur<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"2fBL-64.14yJ~U?TgMi_\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"@~C5m}Kp23:Fso,6%4^u\">\n                <field name=\"TEXT\">Mammal<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_compare\" id=\";XJ4R4bs6EWpFVm(wmeC\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"\/p2NG.;A7[!BxT+A@JiI\">\n                <field name=\"VAR\" id=\"EehZ\/[:XPi[YXePqoyq`\" variabletype=\"\">feature<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"%l}JV*4+[DMGy+]G6Z8j\">\n                <field name=\"TEXT\">Gills<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"|$=!uALYuZ.2j}AG@?s_\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"(S#I!Rz2.ucE*poP_)-(\">\n                <field name=\"TEXT\">Fish<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF2\">\n          <block type=\"logic_compare\" id=\"Y\/4NINT5@`PpM5s32Uw7\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"#,ibVHDJPLuv?8mov1:Q\">\n                <field name=\"VAR\" id=\"EehZ\/[:XPi[YXePqoyq`\" variabletype=\"\">feature<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\".CCWlaQBY|eyDZNk6c^Z\">\n                <field name=\"TEXT\">Wings<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO2\">\n          <block type=\"io_print1\" id=\"5?sD41!peC35d_B5DKjb\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\",~+k_em(:ozC=G-*A:oF\">\n                <field name=\"TEXT\">Bird<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\":CDe,I6`)sy|KgU#axyH\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"{AW:|DijI7J^qYqygulY\">\n                <field name=\"TEXT\">I'm not sure.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n<\/xml>\n```\n\nRemembering to use the <bk class=\"control\">else<\/bk> to catch everything else. We then combine these blocks for our answer:\n"
    },
    {
      "language":0,
      "title":"What's my diet?",
      "notes":"#markdown\nThere are a few different approaches you can take to write your solution to this question. Here we'll describe one where you build up the final answer from the \"outside in\".\n\nThe first step is to ask the user the first question, `'Does it eat meat?'` with our <bk class=\"str\">ask<\/bk> block:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"sG\/IkY@cF,zirF]p4_rZ\">meat<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"ePVOLM*QuYB54}Ml1L*2\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"sG\/IkY@cF,zirF]p4_rZ\" variabletype=\"\">meat<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"n,4.J_^a.C80c1Qz!Iwy\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"NE$^:|mVcOa!P\/}B?G$U\">\n            <field name=\"TEXT\">Does it eat meat?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nNext, we know that if the user does not answer `'yes'` we <bk class=\"io\">print<\/bk> `\"It's a herbivore!\"`, so we can write the <bk class=\"control\">if<\/bk> statement for the <bk class=\"var\"><bk class=\"inner\">meat<\/bk><\/bk> condition:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"sG\/IkY@cF,zirF]p4_rZ\">meat<\/variable>\n  <\/variables>\n  <block type=\"decisions_if_else\" id=\"^Hnu6kJpF-rgR4hpt@=E\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"CnNjI7H@yYk0XD4]{AWO\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"7JBP:2?(A~4@W8[-4OjG\">\n            <field name=\"VAR\" id=\"sG\/IkY@cF,zirF]p4_rZ\" variabletype=\"\">meat<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"rZPko_~BUO%n%5LmCfJc\">\n            <field name=\"TEXT\">yes<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"ELSE\">\n      <block type=\"io_print1\" id=\"u?s}~:11\/?Ju_4GRnL7v\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"Y$h#=L]p^pN=8x4tdyc^\">\n            <field name=\"TEXT\">It's a herbivore!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n```\n\n\nWith that done, we add our second question and the second <bk class=\"control\">if<\/bk> statement, which gets you to the final solution. This strategy is an effective way of nesting statements such that you don't get confused about which <bk class=\"control\">else<\/bk> belongs to which <bk class=\"control\">if<\/bk> and keep your indentation correct.\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"sG\/IkY@cF,zirF]p4_rZ\">meat<\/variable>\n    <variable type=\"\" id=\"yNiec!A\/NH:lTu1%{t91\">plants<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"3vmiJth,~A$$$+65L`UQ\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"yNiec!A\/NH:lTu1%{t91\" variabletype=\"\">plants<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"gWydG,K;K5~A-\/5Z8u|u\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"jo=8aPB^k;zfA@J2L}Mn\">\n            <field name=\"TEXT\">Does it eat plants?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"^Hnu6kJpF-rgR4hpt@=E\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"CnNjI7H@yYk0XD4]{AWO\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"7JBP:2?(A~4@W8[-4OjG\">\n                <field name=\"VAR\" id=\"yNiec!A\/NH:lTu1%{t91\" variabletype=\"\">plants<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"rZPko_~BUO%n%5LmCfJc\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"u?s}~:11\/?Ju_4GRnL7v\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"Y$h#=L]p^pN=8x4tdyc^\">\n                <field name=\"TEXT\">It's an omnivore!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"`:JfnA3h[kOH5wbBui^E\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"|~VU*dis0~E.S7\/+PIa4\">\n                <field name=\"TEXT\">It's a carnivore!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nPut them together to get the final solution.\n",
      "updated_at":"2018-03-09T00:11:07.682058+00:00",
      "label":"aca-bk-bio-nesting-eats",
      "content":"#markdown\n\nIn our earlier notes we saw how we could use an `elif` statement to print different messages for animals that were `'carnivore'`, `'herbivore'` or `'omnivore'`. We'll use what we just learned about nesting to do this a little bit differently.\n\nWrite a program that asks the user if the animal eats meat or plants and depending on their answer identifies the diet of the animal. It should ask about meat first.\n\nYou must ask each question separately and in the correct order, and you should only ask the second question if it is required. Here is how the program behaves when you answer `'no'` to `'Does it eat meat?' `:\n\n```eg:none;terminal;\nDoes it eat meat? @@@no\nIt's a herbivore!\n\n```\n\nIf you answer `'yes'` to the first question, ask `'Does it eat plants? '`:\n\n```eg:none;terminal;\nDoes it eat meat? @@@yes\nDoes it eat plants? @@@no\nIt's a carnivore!\n\n```\n\nAnd `'yes'` to both questions:\n\n```eg:none;terminal;\nDoes it eat meat? @@@yes\nDoes it eat plants? @@@yes\nIt's an omnivore!\n\n```\n\n> ## Hint!\n> If you're having trouble with the nesting, a flowchart might help you work out how to nest your `if` statements.",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "nested-if"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_input\",\"decisions_if_else\",\"logic_compare\"]",
      "teacher_notes":"#markdown\nThere are a few different approaches you can take to write your solution to this question. Here we'll describe one where you build up the final answer from the \"outside in\".\n\nThe first step is to ask the user the first question, `'Does it eat meat?'` with our <bk class=\"str\">ask<\/bk> block:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"sG\/IkY@cF,zirF]p4_rZ\">meat<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"ePVOLM*QuYB54}Ml1L*2\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"sG\/IkY@cF,zirF]p4_rZ\" variabletype=\"\">meat<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"n,4.J_^a.C80c1Qz!Iwy\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"NE$^:|mVcOa!P\/}B?G$U\">\n            <field name=\"TEXT\">Does it eat meat?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nNext, we know that if the user does not answer `'yes'` we <bk class=\"io\">print<\/bk> `\"It's a herbivore!\"`, so we can write the <bk class=\"control\">if<\/bk> statement for the <bk class=\"var\"><bk class=\"inner\">meat<\/bk><\/bk> condition:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"sG\/IkY@cF,zirF]p4_rZ\">meat<\/variable>\n  <\/variables>\n  <block type=\"decisions_if_else\" id=\"^Hnu6kJpF-rgR4hpt@=E\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"CnNjI7H@yYk0XD4]{AWO\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"7JBP:2?(A~4@W8[-4OjG\">\n            <field name=\"VAR\" id=\"sG\/IkY@cF,zirF]p4_rZ\" variabletype=\"\">meat<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"rZPko_~BUO%n%5LmCfJc\">\n            <field name=\"TEXT\">yes<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"ELSE\">\n      <block type=\"io_print1\" id=\"u?s}~:11\/?Ju_4GRnL7v\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"Y$h#=L]p^pN=8x4tdyc^\">\n            <field name=\"TEXT\">It's a herbivore!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n```\n\n\nWith that done, we add our second question and the second <bk class=\"control\">if<\/bk> statement, which gets you to the final solution. This strategy is an effective way of nesting statements such that you don't get confused about which <bk class=\"control\">else<\/bk> belongs to which <bk class=\"control\">if<\/bk> and keep your indentation correct.\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"sG\/IkY@cF,zirF]p4_rZ\">meat<\/variable>\n    <variable type=\"\" id=\"yNiec!A\/NH:lTu1%{t91\">plants<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"3vmiJth,~A$$$+65L`UQ\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"yNiec!A\/NH:lTu1%{t91\" variabletype=\"\">plants<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"gWydG,K;K5~A-\/5Z8u|u\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"jo=8aPB^k;zfA@J2L}Mn\">\n            <field name=\"TEXT\">Does it eat plants?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"^Hnu6kJpF-rgR4hpt@=E\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"CnNjI7H@yYk0XD4]{AWO\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"7JBP:2?(A~4@W8[-4OjG\">\n                <field name=\"VAR\" id=\"yNiec!A\/NH:lTu1%{t91\" variabletype=\"\">plants<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"rZPko_~BUO%n%5LmCfJc\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"u?s}~:11\/?Ju_4GRnL7v\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"Y$h#=L]p^pN=8x4tdyc^\">\n                <field name=\"TEXT\">It's an omnivore!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"`:JfnA3h[kOH5wbBui^E\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"|~VU*dis0~E.S7\/+PIa4\">\n                <field name=\"TEXT\">It's a carnivore!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nPut them together to get the final solution.\n"
    },
    {
      "language":0,
      "title":"Which animal?",
      "notes":"#markdown\nWe start our program by asking the user the first question, `'Is it spiky? '` with our <bk class=\"str\">ask<\/bk> block:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">scales<\/variable>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">spiky<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"{dKO!^,3P5k,*ET([$Ac\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">spiky<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"^mnLoqq#l}#ZY^}$X\/2f\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\")4Qn+j?,8zlH`Y0zN)*)\">\n            <field name=\"TEXT\">Is it spiky?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nIf the user answers `'yes'` we print `\"It is an echidna.\"`, so we can write the <bk class=\"control\">if<\/bk> statement for when `spiky` is `'yes'`:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">scales<\/variable>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">spiky<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"{dKO!^,3P5k,*ET([$Ac\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">spiky<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"^mnLoqq#l}#ZY^}$X\/2f\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\")4Qn+j?,8zlH`Y0zN)*)\">\n            <field name=\"TEXT\">Is it spiky?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"\/^+H=aNM@sho]dh|Emw7\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"86YgbR*0m?X2{IK5STop\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"%B+Q~%\/Ggku%Tw)#)-|%\">\n                <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">spiky<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"?.`iDQsV9Ndnszx5RJi;\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"*s94s2K!cwW4$s[!U$-9\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"zux=a?|UVs*$P;n7M3[p\">\n                <field name=\"TEXT\">It is an echidna.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nWith that done, we can think about what needs to go into our <bk class=\"control\">else<\/bk> clause. Since we'll be asking another question, let's go ahead and do that:\n\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">scales<\/variable>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">spiky<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"*Lburwz3fd|:Gusyft#|\" x=\"6\" y=\"6\">\n    <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">scales<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"(_3;w^x@jW{:8J{XFMI~\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"li}#W=8KRjXi`0E8Wg.C\">\n            <field name=\"TEXT\">Does it have scales?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"^Y?L%`Bs4.N*tyGA79Vr\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"kq-@H;nlLI51idHDJBl}\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"yD|m$$e.2\/uo8\/-KL9Iq\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">scales<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"27i4.=IPFrmHILZwa|;O\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\".q,\/N_m%.yvLGP]8jYWE\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\",ut2@kHh2C64q4v!02|Q\">\n                <field name=\"TEXT\">It is a gecko.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"8aZ4sV+E#~(qLqV:u-nm\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"s]XC++Jeq,9jok1t`Q4S\">\n                <field name=\"TEXT\">It is an ibis.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nAll we need to do then is drop the second set of blocks into the <bk class=\"control\">else<\/bk> from our first question:\n",
      "updated_at":"2018-03-06T01:03:17.213413+00:00",
      "label":"aca-bk-bio-nesting-animal-features",
      "content":"#markdown\nWe want to tell apart the **echidna**, **ibis** and **gecko**.\n\nWrite a program that will identify each animal according to the algorithm shown below:\n\n<svg width=\"493px\" height=\"331px\" style=\"position: relative; display: block; margin: 10px auto; width: 90%\" viewBox=\"0 0 493 331\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>nested-classification<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-3\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-4\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n        <polygon id=\"path-5\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"nested-macropod\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g>\n            <g id=\"start\" transform=\"translate(0.000000, 85.000000)\">\n                <circle id=\"oval_start\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n                <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n                <\/text>\n                <path d=\"M74,35 L125.496575,35\" id=\"start_line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"start_line-decoration-1\" d=\"M125.496575,35 L114.696575,32 L114.696575,38 L125.496575,35 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n            <\/g>\n            <g id=\"macro\" transform=\"translate(398.000000, 271.000000)\">\n                <g id=\"macro_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"macropus\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"35.518\" y=\"33\">Ibis<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"onych\" transform=\"translate(398.000000, 90.000000)\">\n                <g id=\"onych_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"onychogalea\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"25.379\" y=\"34\">Gecko<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"petro\" transform=\"translate(264.000000, 0.000000)\">\n                <g id=\"petro_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"petrogale\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"22.7955\" y=\"35\">Echidna<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"nocturnal\" transform=\"translate(130.000000, 60.000000)\">\n                <g id=\"noct_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-4\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"is-nocturnal?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"48.856\" y=\"53\">Is it <\/tspan>\n                    <tspan x=\"40.0335\" y=\"70\">spiky?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"noct_yes\" transform=\"translate(162.000000, 29.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"noct_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"noct_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"noct_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"spur_yes\" transform=\"translate(297.000000, 120.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"spur_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"spur_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"spur_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"noct_no\" transform=\"translate(166.000000, 183.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"noct_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"noct_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"noct_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"has-spur\" transform=\"translate(266.000000, 150.000000)\">\n                <g id=\"spur_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-5\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"has-spur?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"21.3635\" y=\"56\">Does it have <\/tspan>\n                    <tspan x=\"40.452\" y=\"73\">scales? <\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"spur_no\" transform=\"translate(301.000000, 273.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"spur_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"spur_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"spur_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n        <\/g>\n    <\/g>\n<\/svg>\n\nThe first question is `'Is it spiky? '`. if it is, it is from genus `'echidna'`:\n\n```eg:none;terminal;\nIs it spiky? @@@yes\nIt is an echidna.\n\n```\n\nIf the answer to the first question is `'no'`, ask `'Does it have scales? '` to see if it is a `'gecko'`:\n\n```eg:none;terminal;\nIs it spiky? @@@no\nDoes it have scales? @@@yes\nIt is a gecko.\n\n```\n\nIf the answer to the spur question is `'no'`:\n\n```eg:none;terminal;\nIs it spiky? @@@no\nDoes it have scales? @@@no\nIt is an ibis.\n\n```\n\n> ## Hint!\n> Remember that the algorithm in the flowchart provides hints about how to nest your `if` statements.",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-else",
        "nested-if"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1_text\",\"io_print2\",\"io_ask_text\",\"decisions_if_else\",\"logic_compare\"]",
      "teacher_notes":"#markdown\nWe start our program by asking the user the first question, `'Is it spiky? '` with our <bk class=\"str\">ask<\/bk> block:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">scales<\/variable>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">spiky<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"{dKO!^,3P5k,*ET([$Ac\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">spiky<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"^mnLoqq#l}#ZY^}$X\/2f\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\")4Qn+j?,8zlH`Y0zN)*)\">\n            <field name=\"TEXT\">Is it spiky?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nIf the user answers `'yes'` we print `\"It is an echidna.\"`, so we can write the <bk class=\"control\">if<\/bk> statement for when `spiky` is `'yes'`:\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">scales<\/variable>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">spiky<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"{dKO!^,3P5k,*ET([$Ac\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">spiky<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"^mnLoqq#l}#ZY^}$X\/2f\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\")4Qn+j?,8zlH`Y0zN)*)\">\n            <field name=\"TEXT\">Is it spiky?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"\/^+H=aNM@sho]dh|Emw7\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"86YgbR*0m?X2{IK5STop\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"%B+Q~%\/Ggku%Tw)#)-|%\">\n                <field name=\"VAR\" id=\"XA1*dH-ZD#^xoDz)|oUD\" variabletype=\"\">spiky<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"?.`iDQsV9Ndnszx5RJi;\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"*s94s2K!cwW4$s[!U$-9\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"zux=a?|UVs*$P;n7M3[p\">\n                <field name=\"TEXT\">It is an echidna.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nWith that done, we can think about what needs to go into our <bk class=\"control\">else<\/bk> clause. Since we'll be asking another question, let's go ahead and do that:\n\n\n```norun;lang:blockly\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"gshQAp9b\/2x0RnAa5a.%\">scales<\/variable>\n    <variable type=\"\" id=\"XA1*dH-ZD#^xoDz)|oUD\">spiky<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"*Lburwz3fd|:Gusyft#|\" x=\"6\" y=\"6\">\n    <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">scales<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"(_3;w^x@jW{:8J{XFMI~\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"li}#W=8KRjXi`0E8Wg.C\">\n            <field name=\"TEXT\">Does it have scales?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"^Y?L%`Bs4.N*tyGA79Vr\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"kq-@H;nlLI51idHDJBl}\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"yD|m$$e.2\/uo8\/-KL9Iq\">\n                <field name=\"VAR\" id=\"gshQAp9b\/2x0RnAa5a.%\" variabletype=\"\">scales<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"27i4.=IPFrmHILZwa|;O\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\".q,\/N_m%.yvLGP]8jYWE\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\",ut2@kHh2C64q4v!02|Q\">\n                <field name=\"TEXT\">It is a gecko.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"8aZ4sV+E#~(qLqV:u-nm\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"s]XC++Jeq,9jok1t`Q4S\">\n                <field name=\"TEXT\">It is an ibis.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nAll we need to do then is drop the second set of blocks into the <bk class=\"control\">else<\/bk> from our first question:\n"
    }
  ],
  "lead_text":"Combine Biology and Digital Technologies to identify animals!",
  "short_title":"DT 5 Blockly + Biology",
  "export_version":1,
  "slug":"aca-dt-5-bk-biology",
  "outline":""
}