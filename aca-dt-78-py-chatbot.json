{
  "description":"Write programs to solve problems with code and create word games! In this DT Challenge, you'll learn how to play Mad Libs, Questions, Taboo, and Word Chain, and even write your very own Pirate Chatbot! Can you fool your friends into thinking they're talking to a real person?\n\nLearn how to create a series of word games with code. You'll start out with simple word games and work up to creating your very own Pirate Chatbot! Arrr, me hearties! So get cracking and we'll have you hacking like a pirate in no time!\n\nThis course is recommended for students in Years 7 and 8.",
  "title":"DT Challenge Python \u2013 Chatbot",
  "modules":[
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  If there's one thing computers are really good at, it's working with numbers.  They can do billions of calculations per second!\n<\/p>\n\n<p>\n  Speaking of seconds, let's calculate the number of seconds in a day:\n<\/p>\n\n<p class=\"text-center\"><b>60 seconds per minute &times; 60 minutes per hour &times; 24 hours per day<\/b><\/p>\n\n<p>\nin Python, numbers are numbers, and multiply is <code data-lang=\"py3\">*<\/code> (<em>asterisk<\/em>):\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-sec-per-day\"><code data-lang=\"py3\">\nprint(60*60*24)\n<\/code><\/pre>\n\n<p>so the number of seconds in a day is:<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-sec-per-day\"><code data-lang=\"py3\">\n<o>86400\n<\/o>\n<\/code><\/pre>\n\n<p>\n  Like most programming languages, Python uses <code data-lang=\"py3\">*<\/code> for multiply because <code data-lang=\"py3\">x<\/code> is a variable name.\n<\/p>\n\n<p><strong>Try calculating the number of seconds in a year!<\/strong><\/p>\n"
                }
              ],
              "layout":0,
              "title":"Python, the calculator",
              "notes_rendered":"",
              "content_rendered":"<p>\n  If there's one thing computers are really good at, it's working with numbers.  They can do billions of calculations per second!\n<\/p>\n\n<p>\n  Speaking of seconds, let's calculate the number of seconds in a day:\n<\/p>\n\n<p class=\"text-center\"><b>60 seconds per minute &times; 60 minutes per hour &times; 24 hours per day<\/b><\/p>\n\n<p>\nin Python, numbers are numbers, and multiply is <code data-lang=\"py3\">*<\/code> (<em>asterisk<\/em>):\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-sec-per-day\"><code data-lang=\"py3\">\nprint(60*60*24)\n<\/code><\/pre>\n\n<p>so the number of seconds in a day is:<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-sec-per-day\"><code data-lang=\"py3\">\n<o>86400\n<\/o>\n<\/code><\/pre>\n\n<p>\n  Like most programming languages, Python uses <code data-lang=\"py3\">*<\/code> for multiply because <code data-lang=\"py3\">x<\/code> is a variable name.\n<\/p>\n\n<p><strong>Try calculating the number of seconds in a year!<\/strong><\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Python is much better than a calculator, because it has variables!<\/p>\n\n<p>\n You can use variables to store numbers and calculations for later, and describe what the calculation does very clearly:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-secs-per-day-vars\"><code data-lang=\"py3\">\nsecs_min = 60\nmins_hour = 60\nhours_day = 24\nsecs_day = secs_min*mins_hour*hours_day\nprint(secs_day)\n<\/code><\/pre>\n\n<p>\n  We've followed a consistent variable naming pattern or <em>convention<\/em>: seconds per minute (<code data-lang=\"py3\">secs_min<\/code>), minutes per hour (<code data-lang=\"py3\">mins_hour<\/code>), hours per day (<code data-lang=\"py3\">hours_day<\/code>), and seconds per day (<code data-lang=\"py3\">secs_day<\/code>).\n<\/p>\n\n<p>\n  This makes the variables and code easier to understand.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Magic numbers are bad<\/h2>\n  <p>\n    Programmers hate to see strange numbers (like <code data-lang=\"py3\">86400<\/code>) in code.  We call them <em>magic numbers<\/em> because it isn't clear what they do.\n  <\/p>\n  <p>\n    Magic numbers should be put in variables that describe what they are, so they're not magical any more.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "title":"Python, the mega-calculator",
              "notes_rendered":"",
              "content_rendered":"<p>Python is much better than a calculator, because it has variables!<\/p>\n\n<p>\n You can use variables to store numbers and calculations for later, and describe what the calculation does very clearly:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-secs-per-day-vars\"><code data-lang=\"py3\">\nsecs_min = 60\nmins_hour = 60\nhours_day = 24\nsecs_day = secs_min*mins_hour*hours_day\nprint(secs_day)\n<\/code><\/pre>\n\n<p>\n  We've followed a consistent variable naming pattern or <em>convention<\/em>: seconds per minute (<code data-lang=\"py3\">secs_min<\/code>), minutes per hour (<code data-lang=\"py3\">mins_hour<\/code>), hours per day (<code data-lang=\"py3\">hours_day<\/code>), and seconds per day (<code data-lang=\"py3\">secs_day<\/code>).\n<\/p>\n\n<p>\n  This makes the variables and code easier to understand.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Magic numbers are bad<\/h2>\n  <p>\n    Programmers hate to see strange numbers (like <code data-lang=\"py3\">86400<\/code>) in code.  We call them <em>magic numbers<\/em> because it isn't clear what they do.\n  <\/p>\n  <p>\n    Magic numbers should be put in variables that describe what they are, so they're not magical any more.\n  <\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Python can do all the operations you expect from a calculator:\n<\/p>\n\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr><th>Name<\/th><th>Calculator<\/th><th>Python<\/th><\/tr>\n  <\/thead>\n  <tbody>\n    <tr><td>add<\/td><td>+<\/td><td><code data-lang=\"py3\">+<\/code><\/td><\/tr>\n    <tr><td>subtract<\/td><td>-<\/td><td><code data-lang=\"py3\">-<\/code><\/td><\/tr>\n    <tr><td>multiply<\/td><td>\u00d7<\/td><td><code data-lang=\"py3\">*<\/code><\/td><\/tr>\n    <tr><td>divide<\/td><td>\u00f7<\/td><td><code data-lang=\"py3\">\/<\/code><\/td><\/tr>\n<!--    <tr><td>to the power of<\/td><td>x<sup>y<\/sup> or x<sup>\u25a0<\/td><td><code data-lang=\"py3\">**<\/code><\/td><\/tr>-->\n  <\/tbody>\n<\/table>\n\n<p>\n  Python uses <code data-lang=\"py3\">\/<\/code> for division because \u00f7 isn't a key on most keyboards!\n<\/p>\n\n<p>\n  It uses the correct <em>order of operations<\/em>, so it will do multiply and divide before add and subtract, except if you use brackets. Let's calculate the hours in a leap year:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-hours-per-leap-year\"><code data-lang=\"py3\">\nhours_leap_year = (365 + 1)*24\nprint(hours_leap_year)\n<\/code><\/pre>\n\n<p><strong>Run it, then try it again without the brackets. What happens?<\/strong><\/p>\n\n<!--\n<p>The <em>power<\/em> operator (often called <em>index<\/em> or <em>exponent<\/em> in maths) is represented by a double asterisk (<code data-lang=\"py3\">**<\/code>) and works like this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"power1\"><code data-lang=\"py3\">\nn = 10\nprint(n**3)\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"power1\"><code data-lang=\"py3\">\n<o>1000\n<\/o>\n<\/code><\/pre>\n\n<p>In other words, 10 to the power of 3 (10 cubed) is 1000.<\/p>\n-->\n"
                }
              ],
              "layout":0,
              "title":"Mathematical operators",
              "notes_rendered":"",
              "content_rendered":"<p>\n  Python can do all the operations you expect from a calculator:\n<\/p>\n\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr><th>Name<\/th><th>Calculator<\/th><th>Python<\/th><\/tr>\n  <\/thead>\n  <tbody>\n    <tr><td>add<\/td><td>+<\/td><td><code data-lang=\"py3\">+<\/code><\/td><\/tr>\n    <tr><td>subtract<\/td><td>-<\/td><td><code data-lang=\"py3\">-<\/code><\/td><\/tr>\n    <tr><td>multiply<\/td><td>\u00d7<\/td><td><code data-lang=\"py3\">*<\/code><\/td><\/tr>\n    <tr><td>divide<\/td><td>\u00f7<\/td><td><code data-lang=\"py3\">\/<\/code><\/td><\/tr>\n<!--    <tr><td>to the power of<\/td><td>x<sup>y<\/sup> or x<sup>\u25a0<\/td><td><code data-lang=\"py3\">**<\/code><\/td><\/tr>-->\n  <\/tbody>\n<\/table>\n\n<p>\n  Python uses <code data-lang=\"py3\">\/<\/code> for division because \u00f7 isn't a key on most keyboards!\n<\/p>\n\n<p>\n  It uses the correct <em>order of operations<\/em>, so it will do multiply and divide before add and subtract, except if you use brackets. Let's calculate the hours in a leap year:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-hours-per-leap-year\"><code data-lang=\"py3\">\nhours_leap_year = (365 + 1)*24\nprint(hours_leap_year)\n<\/code><\/pre>\n\n<p><strong>Run it, then try it again without the brackets. What happens?<\/strong><\/p>\n\n<!--\n<p>The <em>power<\/em> operator (often called <em>index<\/em> or <em>exponent<\/em> in maths) is represented by a double asterisk (<code data-lang=\"py3\">**<\/code>) and works like this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"power1\"><code data-lang=\"py3\">\nn = 10\nprint(n**3)\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"power1\"><code data-lang=\"py3\">\n<o>1000\n<\/o>\n<\/code><\/pre>\n\n<p>In other words, 10 to the power of 3 (10 cubed) is 1000.<\/p>\n-->\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Let's ask the user for two numbers and then add them together:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-concat-numbers\"><code data-lang=\"py3\">\na = input('Enter a number: ')\nb = input('Enter another number: ')\nprint(a + b)\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-concat-numbers\"><code data-lang=\"py3\">\n<o>Enter a number: <\/o><i>5\n<\/i><o>Enter another number: <\/o><i>6\n<\/i><o>56\n<\/o>\n<\/code><\/pre>\n\n<p>\n  Crazy! It doesn't do what we want at all \u2013 the answer should be <code data-lang=\"out\">11<\/code>.\n<\/p>\n\n<p>\n  The reason is that <strong>numbers and strings are different types of data<\/strong>, and are treated differently in Python.\n<\/p>\n\n<p>\nThe problem here is that <code data-lang=\"py3\">input<\/code> always returns a <em>string<\/em> even if the user enters digits. Let's see that again without the <code data-lang=\"py3\">input<\/code> calls:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-string-5-plus-6\"><code data-lang=\"py3\">\nprint('5' + '6')\n<\/code><\/pre>\n\n<p>Remember, adding two strings together joins them (<em>concatenation<\/em>).<\/p>\n\n<p>So how do we convert the string from <code data-lang=\"py3\">input<\/code> into a number?<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Numbers and strings are different",
              "notes_rendered":"",
              "content_rendered":"<p>Let's ask the user for two numbers and then add them together:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-concat-numbers\"><code data-lang=\"py3\">\na = input('Enter a number: ')\nb = input('Enter another number: ')\nprint(a + b)\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-concat-numbers\"><code data-lang=\"py3\">\n<o>Enter a number: <\/o><i>5\n<\/i><o>Enter another number: <\/o><i>6\n<\/i><o>56\n<\/o>\n<\/code><\/pre>\n\n<p>\n  Crazy! It doesn't do what we want at all \u2013 the answer should be <code data-lang=\"out\">11<\/code>.\n<\/p>\n\n<p>\n  The reason is that <strong>numbers and strings are different types of data<\/strong>, and are treated differently in Python.\n<\/p>\n\n<p>\nThe problem here is that <code data-lang=\"py3\">input<\/code> always returns a <em>string<\/em> even if the user enters digits. Let's see that again without the <code data-lang=\"py3\">input<\/code> calls:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-string-5-plus-6\"><code data-lang=\"py3\">\nprint('5' + '6')\n<\/code><\/pre>\n\n<p>Remember, adding two strings together joins them (<em>concatenation<\/em>).<\/p>\n\n<p>So how do we convert the string from <code data-lang=\"py3\">input<\/code> into a number?<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  To treat a string as a number you must convert it first.  The <code data-lang=\"py3\">int<\/code> function converts a string to an <em>integer<\/em> (a whole number):\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-cast-str-to-int\"><code data-lang=\"py3\">\nprint(int('5') + int('6'))\n<\/code><\/pre>\n\n<p>\n  The <code data-lang=\"py3\">int('5')<\/code> call takes the string <code data-lang=\"py3\">'5'<\/code> and returns the integer <code data-lang=\"py3\">5<\/code>.  The <code data-lang=\"py3\">int('6')<\/code> does the same for <code data-lang=\"py3\">'6'<\/code>. Now we're adding numbers:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-cast-str-to-int\"><code data-lang=\"py3\">\n<o>11\n<\/o>\n<\/code><\/pre>\n\n<p>\n  So, now that we've discovered <code data-lang=\"py3\">int<\/code>, let's fix our original program:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-concat-numbers-fix1\"><code data-lang=\"py3\">\na = input('Enter a number: ')\nb = input('Enter another number: ')\nprint(int(a) + int(b))\n<\/code><\/pre>\n\n<p>\n  If we always want to treat the value from <code data-lang=\"py3\">input<\/code> as a number, we can read the string and convert it to an integer in one go:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-concat-numbers-fix2\"><code data-lang=\"py3\">\na = int(input('Enter a number: '))\nb = int(input('Enter another number: '))\nprint(a + b)\n<\/code><\/pre>\n\n<p>\n  When <code data-lang=\"in\">5<\/code> is entered, <code data-lang=\"py3\">input<\/code> returns <code data-lang=\"py3\">'5'<\/code> (a string).  This is given to <code data-lang=\"py3\">int<\/code>, which converts it to <code data-lang=\"py3\">5<\/code> (an integer). This is stored in variable <code data-lang=\"py3\">a<\/code>.\n<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Converting strings to numbers",
              "notes_rendered":"",
              "content_rendered":"<p>\n  To treat a string as a number you must convert it first.  The <code data-lang=\"py3\">int<\/code> function converts a string to an <em>integer<\/em> (a whole number):\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-cast-str-to-int\"><code data-lang=\"py3\">\nprint(int('5') + int('6'))\n<\/code><\/pre>\n\n<p>\n  The <code data-lang=\"py3\">int('5')<\/code> call takes the string <code data-lang=\"py3\">'5'<\/code> and returns the integer <code data-lang=\"py3\">5<\/code>.  The <code data-lang=\"py3\">int('6')<\/code> does the same for <code data-lang=\"py3\">'6'<\/code>. Now we're adding numbers:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-cast-str-to-int\"><code data-lang=\"py3\">\n<o>11\n<\/o>\n<\/code><\/pre>\n\n<p>\n  So, now that we've discovered <code data-lang=\"py3\">int<\/code>, let's fix our original program:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-concat-numbers-fix1\"><code data-lang=\"py3\">\na = input('Enter a number: ')\nb = input('Enter another number: ')\nprint(int(a) + int(b))\n<\/code><\/pre>\n\n<p>\n  If we always want to treat the value from <code data-lang=\"py3\">input<\/code> as a number, we can read the string and convert it to an integer in one go:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-concat-numbers-fix2\"><code data-lang=\"py3\">\na = int(input('Enter a number: '))\nb = int(input('Enter another number: '))\nprint(a + b)\n<\/code><\/pre>\n\n<p>\n  When <code data-lang=\"in\">5<\/code> is entered, <code data-lang=\"py3\">input<\/code> returns <code data-lang=\"py3\">'5'<\/code> (a string).  This is given to <code data-lang=\"py3\">int<\/code>, which converts it to <code data-lang=\"py3\">5<\/code> (an integer). This is stored in variable <code data-lang=\"py3\">a<\/code>.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Twice as big",
              "purpose":"",
              "problem":"aca-py3-twice-as-big",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Olympic Year",
              "purpose":"",
              "problem":"py3-next-olympics",
              "type":1
            }
          ],
          "title":"Numbers"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Most of what you write in a Python program are instructions to follow, like <code data-lang=\"py3\">print()<\/code>. But text inside quotes is not treated as instructions. It is treated a sequence of letters to be used just as is (e.g. as a message). This is called a <em>string<\/em>.<\/p>\n\n<p>This is how Python can tell the difference between printing the word <code data-lang=\"py3\">'message'<\/code> and printing the contents of the <code data-lang=\"py3\">message<\/code> variable.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"print-msg-hello-strings\"><code data-lang=\"py3\">\nmessage = 'hello'\nprint('message')\nprint(message)\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"print-msg-hello-strings\"><code data-lang=\"py3\">\n<o>message\nhello\n<\/o>\n<\/code><\/pre>\n\n<p>When there's no quotes, Python will try to interpret your words as instructions. Since the instructions don't make sense, Python will usually return an error.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"name-error-write\"><code data-lang=\"py3\">print(Hi there)\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"name-error-write\"><code data-lang=\"err\"><o>  File \"program.py\", line 1\n    print(hi there)\n                 ^\nSyntaxError: invalid syntax\n<\/o>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "title":"So why do strings need quotes?",
              "notes_rendered":"",
              "content_rendered":"<p>Most of what you write in a Python program are instructions to follow, like <code data-lang=\"py3\">print()<\/code>. But text inside quotes is not treated as instructions. It is treated a sequence of letters to be used just as is (e.g. as a message). This is called a <em>string<\/em>.<\/p>\n\n<p>This is how Python can tell the difference between printing the word <code data-lang=\"py3\">'message'<\/code> and printing the contents of the <code data-lang=\"py3\">message<\/code> variable.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"print-msg-hello-strings\"><code data-lang=\"py3\">\nmessage = 'hello'\nprint('message')\nprint(message)\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"print-msg-hello-strings\"><code data-lang=\"py3\">\n<o>message\nhello\n<\/o>\n<\/code><\/pre>\n\n<p>When there's no quotes, Python will try to interpret your words as instructions. Since the instructions don't make sense, Python will usually return an error.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"name-error-write\"><code data-lang=\"py3\">print(Hi there)\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"name-error-write\"><code data-lang=\"err\"><o>  File \"program.py\", line 1\n    print(hi there)\n                 ^\nSyntaxError: invalid syntax\n<\/o>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>As mentioned before, quoted bits of text like <code data-lang=\"py3\">'Hello, World'<\/code> are called <emph>strings<\/emph> (short for <emph>string of characters<\/emph>). Strings are used to store any text data in a program (letters, words or sentences). <\/p>\n\n<p>A string is a set of text characters enclosed by double (<code data-lang=\"py3\">\"<\/code>) or single quotes (<code data-lang=\"py3\">'<\/code>). You need to end the string using the same quotation mark as you start it. For example these are okay (try running them):\n<pre class=\"js-editor\" data-eg-id=\"hello-double-quote\"><code data-lang=\"py3\">\nprint(\"hello\")\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"hello-double-quote\"><code data-lang=\"py3\">\n<o>hello\n<\/o>\n<\/code><\/pre>\n<pre class=\"js-editor\" data-eg-id=\"hello-single-quote\"><code data-lang=\"py3\">\nprint('hello')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"hello-single-quote\"><code data-lang=\"py3\">\n<o>hello\n<\/o>\n<\/code><\/pre>\nHowever, the following example is incorrect because it starts with a double quote and ends with a single quote.\n<pre class=\"js-editor\" data-eg-id=\"hello-string-broken\"><code data-lang=\"py3\">\nprint(\"hello')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"hello-string-broken\"><code data-lang=\"py3\">\n<o>  File \"program.py\", line 1\n    print(\"hello')\n                 ^\nSyntaxError: EOL while scanning string literal\n<\/o>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "title":"Single and double quotes",
              "notes_rendered":"",
              "content_rendered":"<p>As mentioned before, quoted bits of text like <code data-lang=\"py3\">'Hello, World'<\/code> are called <emph>strings<\/emph> (short for <emph>string of characters<\/emph>). Strings are used to store any text data in a program (letters, words or sentences). <\/p>\n\n<p>A string is a set of text characters enclosed by double (<code data-lang=\"py3\">\"<\/code>) or single quotes (<code data-lang=\"py3\">'<\/code>). You need to end the string using the same quotation mark as you start it. For example these are okay (try running them):\n<pre class=\"js-editor\" data-eg-id=\"hello-double-quote\"><code data-lang=\"py3\">\nprint(\"hello\")\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"hello-double-quote\"><code data-lang=\"py3\">\n<o>hello\n<\/o>\n<\/code><\/pre>\n<pre class=\"js-editor\" data-eg-id=\"hello-single-quote\"><code data-lang=\"py3\">\nprint('hello')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"hello-single-quote\"><code data-lang=\"py3\">\n<o>hello\n<\/o>\n<\/code><\/pre>\nHowever, the following example is incorrect because it starts with a double quote and ends with a single quote.\n<pre class=\"js-editor\" data-eg-id=\"hello-string-broken\"><code data-lang=\"py3\">\nprint(\"hello')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"hello-string-broken\"><code data-lang=\"py3\">\n<o>  File \"program.py\", line 1\n    print(\"hello')\n                 ^\nSyntaxError: EOL while scanning string literal\n<\/o>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>You've already seen that we can do string addition:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"string-addition2\"><code data-lang=\"py3\">\nprint('ab' + 'ab')\n<\/code><\/pre>\n<p>but something you might not expect is that we can also do string multiplication! Given that <code data-lang=\"py3\">'ab' + 'ab'<\/code> is <code data-lang=\"py3\">'abab'<\/code>, what would you expect <code data-lang=\"py3\">'ab' * 5<\/code> to be? Try it yourself:\n<pre class=\"js-editor\" data-eg-id=\"string-multiplication\"><code data-lang=\"py3\">\nprint('ab' * 5)\n<\/code><\/pre>\n\n<p>The <code data-lang=\"py3\">*<\/code> operator repeats a string a given number of times. It also works the other way around:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"string-multiplication2\"><code data-lang=\"py3\">\nprint(5 * 'ab')\n<\/code><\/pre>\n\n<p>However, it only works with an integer and a string, it doesn't make sense to multiply two strings!<\/p>\n<pre class=\"js-editor\" data-eg-id=\"string-multiplication3\"><code data-lang=\"py3\">\nprint('ab' * 'ab')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"string-multiplication3\"><code data-lang=\"py3\">\n<o>Traceback (most recent call last):\n  File \"program.py\", line 1, in &lt;module>\n    print('ab' * 'ab')\nTypeError: can't multiply sequence by non-int of type 'str'\n<\/o><\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "title":"Multiplying strings",
              "notes_rendered":"",
              "content_rendered":"<p>You've already seen that we can do string addition:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"string-addition2\"><code data-lang=\"py3\">\nprint('ab' + 'ab')\n<\/code><\/pre>\n<p>but something you might not expect is that we can also do string multiplication! Given that <code data-lang=\"py3\">'ab' + 'ab'<\/code> is <code data-lang=\"py3\">'abab'<\/code>, what would you expect <code data-lang=\"py3\">'ab' * 5<\/code> to be? Try it yourself:\n<pre class=\"js-editor\" data-eg-id=\"string-multiplication\"><code data-lang=\"py3\">\nprint('ab' * 5)\n<\/code><\/pre>\n\n<p>The <code data-lang=\"py3\">*<\/code> operator repeats a string a given number of times. It also works the other way around:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"string-multiplication2\"><code data-lang=\"py3\">\nprint(5 * 'ab')\n<\/code><\/pre>\n\n<p>However, it only works with an integer and a string, it doesn't make sense to multiply two strings!<\/p>\n<pre class=\"js-editor\" data-eg-id=\"string-multiplication3\"><code data-lang=\"py3\">\nprint('ab' * 'ab')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"string-multiplication3\"><code data-lang=\"py3\">\n<o>Traceback (most recent call last):\n  File \"program.py\", line 1, in &lt;module>\n    print('ab' * 'ab')\nTypeError: can't multiply sequence by non-int of type 'str'\n<\/o><\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"py3-nooooo",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"py3-how-happy-emoji",
              "type":1
            }
          ],
          "title":"More on strings"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>You may have noticed that if you try to add a number and a string, you get an error:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"dont-add-str-and-int\"><code data-lang=\"py3\">\nanswer = 5\nprint('The answer is ' + answer)\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"dont-add-str-and-int\"><code data-lang=\"py3\">\nTraceback (most recent call last):\n  File \"program.py\", line 2, in &lt;module&gt;\n    print('The answer is ' + answer)\nTypeError: Can't convert 'int' object to str implicitly\n\n<\/code><\/pre>\n\n<p>The <code data-lang=\"py3\">+<\/code> operator is confused here because we cannot add a string and an integer.  When this happens, Python gives an error (in this case, a\n<code data-lang=\"py3\">TypeError<\/code> because strings and integers are different <em>types<\/em> of information).<\/p>\n\n<p>To fix it we need to use the <code data-lang=\"py3\">str<\/code> function to turn the integer back to a string:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"str-function-intro\"><code data-lang=\"py3\">\nanswer = 5\nprint('the answer is ' + str(answer))\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"str-function-intro\"><code data-lang=\"py3\">\n<o>the answer is 5\n<\/o>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "title":"Converting numbers to strings",
              "notes_rendered":"",
              "content_rendered":"<p>You may have noticed that if you try to add a number and a string, you get an error:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"dont-add-str-and-int\"><code data-lang=\"py3\">\nanswer = 5\nprint('The answer is ' + answer)\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"dont-add-str-and-int\"><code data-lang=\"py3\">\nTraceback (most recent call last):\n  File \"program.py\", line 2, in &lt;module&gt;\n    print('The answer is ' + answer)\nTypeError: Can't convert 'int' object to str implicitly\n\n<\/code><\/pre>\n\n<p>The <code data-lang=\"py3\">+<\/code> operator is confused here because we cannot add a string and an integer.  When this happens, Python gives an error (in this case, a\n<code data-lang=\"py3\">TypeError<\/code> because strings and integers are different <em>types<\/em> of information).<\/p>\n\n<p>To fix it we need to use the <code data-lang=\"py3\">str<\/code> function to turn the integer back to a string:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"str-function-intro\"><code data-lang=\"py3\">\nanswer = 5\nprint('the answer is ' + str(answer))\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"str-function-intro\"><code data-lang=\"py3\">\n<o>the answer is 5\n<\/o>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Now we can convert an input string into an integer using <code data-lang=\"py3\">int<\/code> and we can convert integers back to strings using <code data-lang=\"py3\">str<\/code>.<\/p>\n\n<p>Using both <code data-lang=\"py3\">int<\/code> and <code data-lang=\"py3\">str<\/code>, we can write a program to read in numbers, do a calculation and print the result:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"int-and-str-together\"><code data-lang=\"py3\">\nnumber = int(input(\"Enter a number: \"))\nanswer = number + 10\nprint(str(number) + ' plus ten is: ' + str(answer))\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"int-and-str-together\"><code data-lang=\"py3\">\n<o>Enter a number: <\/o><i>67<\/i>\n<o>67 plus ten is: 77<\/o>\n<\/code><\/pre>\n\nRun this yourself with another number \u2013 then experiment with removing the calls to <code data-lang=\"py3\">int<\/code> or <code data-lang=\"py3\">str<\/code> and watch it break!"
                }
              ],
              "layout":0,
              "title":"Working with numbers and strings",
              "notes_rendered":"",
              "content_rendered":"<p>Now we can convert an input string into an integer using <code data-lang=\"py3\">int<\/code> and we can convert integers back to strings using <code data-lang=\"py3\">str<\/code>.<\/p>\n\n<p>Using both <code data-lang=\"py3\">int<\/code> and <code data-lang=\"py3\">str<\/code>, we can write a program to read in numbers, do a calculation and print the result:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"int-and-str-together\"><code data-lang=\"py3\">\nnumber = int(input(\"Enter a number: \"))\nanswer = number + 10\nprint(str(number) + ' plus ten is: ' + str(answer))\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"int-and-str-together\"><code data-lang=\"py3\">\n<o>Enter a number: <\/o><i>67<\/i>\n<o>67 plus ten is: 77<\/o>\n<\/code><\/pre>\n\nRun this yourself with another number \u2013 then experiment with removing the calls to <code data-lang=\"py3\">int<\/code> or <code data-lang=\"py3\">str<\/code> and watch it break!",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nThere's an easier way to print out strings and integers, and all types of information: formatted string literals, or *\"f-strings\"*.\n\nTo use f-strings, we add the letter `f` **before** the start of string we want to use, and use curly braces `{` and `}` to use the values of variables in that string. \n\nHere's an example:\n```\ndogname = input(\"What is your dog's name? \")\nage = int(input('How old is your dog in years? '))\nprint(f'My dog {dogname} is {age} years old.')\n```\n\n```eg:last;terminal;\nWhat is your dog's name? @@@Fluffy\nHow old is your dog in years? @@@6\nMy dog Fluffy is 6 years old.\n\n```\n\n> ## Hint\n> Don't forget, you'll need to add an `f` to the string you want to print out *before* the opening quote! If you forget the `f`, this is what happens:\n> ```\n> dogname = input(\"What is your dog's name? \")\n> age = int(input('How old is your dog in years? '))\n> print('My dog {dogname} is {age} years old.')\n> ```\n> ```eg:last;terminal;\n> What is your dog's name? @@@Fluffy\n> How old is your dog in years? @@@6\n> My dog {dogname} is {age} years old.\n> \n> ```"
                }
              ],
              "layout":0,
              "title":"<em>F-strings<\/em>: Printing made easy",
              "notes_rendered":"",
              "content_rendered":"<p>There's an easier way to print out strings and integers, and all types of information: formatted string literals, or <em>&quot;f-strings&quot;<\/em>.<\/p>\n<p>To use f-strings, we add the letter <code data-lang=\"py3\">f<\/code> <strong>before<\/strong> the start of string we want to use, and use curly braces <code data-lang=\"py3\">{<\/code> and <code data-lang=\"py3\">}<\/code> to use the values of variables in that string.<\/p>\n<p>Here's an example:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-python-yr78-module2-calculating-things-2-2-0\"><code data-lang=\"py3\">dogname = input(&quot;What is your dog's name? &quot;)\nage = int(input('How old is your dog in years? '))\nprint(f'My dog {dogname} is {age} years old.')\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-python-yr78-module2-calculating-things-2-2-0\"><code data-lang=\"py3\"><o>What is your dog's name? <\/o><i>Fluffy<\/i>\n<o>How old is your dog in years? <\/o><i>6<\/i>\n<o>My dog Fluffy is 6 years old.<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<aside class=\"info\">\n<h2>Hint<\/h2>\n<p>Don't forget, you'll need to add an <code data-lang=\"py3\">f<\/code> to the string you want to print out <em>before<\/em> the opening quote! If you forget the <code data-lang=\"py3\">f<\/code>, this is what happens:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-python-yr78-module2-calculating-things-2-2-1\"><code data-lang=\"py3\">dogname = input(&quot;What is your dog's name? &quot;)\nage = int(input('How old is your dog in years? '))\nprint('My dog {dogname} is {age} years old.')\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-python-yr78-module2-calculating-things-2-2-1\"><code data-lang=\"py3\"><o>What is your dog's name? <\/o><i>Fluffy<\/i>\n<o>How old is your dog in years? <\/o><i>6<\/i>\n<o>My dog {dogname} is {age} years old.<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nYou can also modify the value that you want to print out from _inside_ the format string:\n\n```\ndogname = input(\"What is your dog's name? \")\nage = int(input('How old is your dog in years? '))\nprint(f'That makes {dogname} {age * 7} in dog years.')\n```\n```eg:last;terminal;\nWhat is your dog's name? @@@Fluffy\nHow old is your dog in years? @@@6\nThat makes Fluffy 42 in dog years.\n\n```\n\nThis doesn't change the value stored in the variable. It only changes what's printed out!"
                }
              ],
              "layout":0,
              "title":"The power of F-strings",
              "notes_rendered":"",
              "content_rendered":"<p>You can also modify the value that you want to print out from <em>inside<\/em> the format string:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-python-yr78-module2-calculating-things-2-3-0\"><code data-lang=\"py3\">dogname = input(&quot;What is your dog's name? &quot;)\nage = int(input('How old is your dog in years? '))\nprint(f'That makes {dogname} {age * 7} in dog years.')\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-python-yr78-module2-calculating-things-2-3-0\"><code data-lang=\"py3\"><o>What is your dog's name? <\/o><i>Fluffy<\/i>\n<o>How old is your dog in years? <\/o><i>6<\/i>\n<o>That makes Fluffy 42 in dog years.<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>This doesn't change the value stored in the variable. It only changes what's printed out!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"py3-letter-from-the-queen",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"py3-level-up-int",
              "type":1
            }
          ],
          "title":"Mixing numbers and strings"
        }
      ],
      "title":"Data types: numbers and strings",
      "label":"aca-python-yr78-module2-calculating-things",
      "updated_at":"2017-11-15T06:40:30.137652+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Using a <code data-lang=\"py3\">while<\/code> loop, we can repeat some code <em>while<\/em> a condition is true.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"while-loop-intro-eg1\"><code data-lang=\"py3\">\ncommand = input('First command: ')\nwhile command != 'stop':\n  print('You entered ' + command)\n  command = input('Command: ')\nprint('Stopped.')\n<\/code><\/pre>\n\n<p>Run it yourself and try it with several different inputs:<\/p>\n<pre class=\"js-terminal\" data-eg-id=\"while-loop-intro-eg1\"><code data-lang=\"py3\"><o>First command: <\/o><i>something<\/i>\n<o>You entered something<\/o>\n<o>Command: <\/o><i>something else<\/i>\n<o>You entered something else<\/o>\n<o>Command: <\/o><i>help me<\/i>\n<o>You entered help me<\/o>\n<o>Command: <\/o><i>stop<\/i>\n<o>Stopped.<\/o>\n\n<\/code><\/pre>\n\n<p>This program will keep repeating everything inside the loop <em>while<\/em> the last command entered was not <code data-lang=\"in\">stop<\/code>.<\/p> \n\n<p>If you never type in <code data-lang=\"txt\">stop<\/code> then the program will never finish!<\/p>"
                }
              ],
              "layout":0,
              "title":"Introducing the <code data-lang=\"py3\">while<\/code> loop!",
              "notes_rendered":"",
              "content_rendered":"<p>Using a <code data-lang=\"py3\">while<\/code> loop, we can repeat some code <em>while<\/em> a condition is true.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"while-loop-intro-eg1\"><code data-lang=\"py3\">\ncommand = input('First command: ')\nwhile command != 'stop':\n  print('You entered ' + command)\n  command = input('Command: ')\nprint('Stopped.')\n<\/code><\/pre>\n\n<p>Run it yourself and try it with several different inputs:<\/p>\n<pre class=\"js-terminal\" data-eg-id=\"while-loop-intro-eg1\"><code data-lang=\"py3\"><o>First command: <\/o><i>something<\/i>\n<o>You entered something<\/o>\n<o>Command: <\/o><i>something else<\/i>\n<o>You entered something else<\/o>\n<o>Command: <\/o><i>help me<\/i>\n<o>You entered help me<\/o>\n<o>Command: <\/o><i>stop<\/i>\n<o>Stopped.<\/o>\n\n<\/code><\/pre>\n\n<p>This program will keep repeating everything inside the loop <em>while<\/em> the last command entered was not <code data-lang=\"in\">stop<\/code>.<\/p> \n\n<p>If you never type in <code data-lang=\"txt\">stop<\/code> then the program will never finish!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Let's take a closer look at what's going on here:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-visualising-a-code-data-langpy3whilecode-loop-0\"><code data-lang=\"py3\">\ncommand = input('First command: ')\nwhile command != 'stop':\n  print('You entered ' + command)\n  command = input('Command: ')\nprint('Stopped.')\n<\/code><\/pre>\n\n<p>The <code data-lang=\"py3\">while<\/code> keyword in Python asks a question, just like an <code data-lang=\"py3\">if<\/code> statement. The big difference is that it keeps repeating the code <em>inside<\/em> the loop until that question (or <em>condition<\/em>) isn't <code data-lang=\"py3\">True<\/code> anymore.<\/p>\n\n<figure style=\"padding:5px 0px\" class=\"align-center\">\n  <img src=\"https:\/\/groklearning-cdn.com\/modules\/nNH9Dq2gW8yGK53Wr8pYSU\/while-diagram-1.png\" alt=\"Flowchart of while loop example.\" style=\"width: 100%;max-width:400px\">\n<\/figure>\n\n<p>Following the arrows in this flowchart, look how the loop will only end when the <em>condition<\/em> is not true anymore. In this example it will only finish when <code data-lang=\"py3\">command != 'stop'<\/code> is <code data-lang=\"py3\">False<\/code>. So long as the condition is <code data-lang=\"py3\">True<\/code> the program will just keep on repeating forever!<\/p>"
                }
              ],
              "layout":0,
              "title":"Visualising a <code data-lang=\"py3\">while<\/code> loop",
              "notes_rendered":"",
              "content_rendered":"<p>Let's take a closer look at what's going on here:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-visualising-a-code-data-langpy3whilecode-loop-0\"><code data-lang=\"py3\">\ncommand = input('First command: ')\nwhile command != 'stop':\n  print('You entered ' + command)\n  command = input('Command: ')\nprint('Stopped.')\n<\/code><\/pre>\n\n<p>The <code data-lang=\"py3\">while<\/code> keyword in Python asks a question, just like an <code data-lang=\"py3\">if<\/code> statement. The big difference is that it keeps repeating the code <em>inside<\/em> the loop until that question (or <em>condition<\/em>) isn't <code data-lang=\"py3\">True<\/code> anymore.<\/p>\n\n<figure style=\"padding:5px 0px\" class=\"align-center\">\n  <img src=\"https:\/\/groklearning-cdn.com\/modules\/nNH9Dq2gW8yGK53Wr8pYSU\/while-diagram-1.png\" alt=\"Flowchart of while loop example.\" style=\"width: 100%;max-width:400px\">\n<\/figure>\n\n<p>Following the arrows in this flowchart, look how the loop will only end when the <em>condition<\/em> is not true anymore. In this example it will only finish when <code data-lang=\"py3\">command != 'stop'<\/code> is <code data-lang=\"py3\">False<\/code>. So long as the condition is <code data-lang=\"py3\">True<\/code> the program will just keep on repeating forever!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>These loops can be pretty tricky to get right. Here are a few common mistakes when writing <code data-lang=\"py3\">while<\/code> loops:<\/p>\n\n<h3>Finished before you started!<\/h3>\n<p>In your code, before the <code data-lang=\"py3\">while<\/code> loop you have to set it up so that the <em>condition<\/em> is already <code data-lang=\"py3\">True<\/code> when it starts. Otherwise the whole <code data-lang=\"py3\">while<\/code> loop will be skipped. (Since it only runs while the condition is <code data-lang=\"py3\">True<\/code>!)<\/p>\n<pre class=\"js-editor\" data-eg-id=\"while-mistakes-eg2\"><code data-lang=\"py3\">\ncommand = 'stop'\nwhile command != 'stop':\n  print('You entered ' + command)\n  command = input('Command: ')\nprint('Stopped')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"while-mistakes-eg2\"><code data-lang=\"py3\"><o>Stopped<p><\/p>\n\n<\/o><\/code><\/pre>\n<p>Here the loop doesn't even start asking for input, because the <code data-lang=\"py3\">while<\/code> loop condition was already <code data-lang=\"py3\">False<\/code>!<\/p>\n\n<h3>Not setting up beforehand<\/h3>\n<p>In this example, the <code data-lang=\"py3\">while<\/code> loop is trying to ask the question 'Is the command variable not equal to stop?' but since the command variable hasn't been created yet, it doesn't know what to do!<\/p>\n<pre class=\"js-editor\" data-eg-id=\"while-mistakes-eg1\"><code data-lang=\"py3\">\nwhile command != 'stop':\n  print('You entered ' + command)\n  command = input('Command: ')\nprint('Stopped')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"while-mistakes-eg1\"><code data-lang=\"py3\">Traceback (most recent call last):\n  File \"program.py\", line 1, in &lt;module&gt;\n    while command != 'stop':\nNameError: name 'command' is not defined\n\n<\/code><\/pre>\n<p>See how it says \"<code data-lang=\"err\">name 'command' is not defined<\/code>\"? That means you're trying to use the <code data-lang=\"py3\">command<\/code> variable but it hasn't been created (defined) yet.<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Something is wrong?!",
              "notes_rendered":"",
              "content_rendered":"<p>These loops can be pretty tricky to get right. Here are a few common mistakes when writing <code data-lang=\"py3\">while<\/code> loops:<\/p>\n\n<h3>Finished before you started!<\/h3>\n<p>In your code, before the <code data-lang=\"py3\">while<\/code> loop you have to set it up so that the <em>condition<\/em> is already <code data-lang=\"py3\">True<\/code> when it starts. Otherwise the whole <code data-lang=\"py3\">while<\/code> loop will be skipped. (Since it only runs while the condition is <code data-lang=\"py3\">True<\/code>!)<\/p>\n<pre class=\"js-editor\" data-eg-id=\"while-mistakes-eg2\"><code data-lang=\"py3\">\ncommand = 'stop'\nwhile command != 'stop':\n  print('You entered ' + command)\n  command = input('Command: ')\nprint('Stopped')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"while-mistakes-eg2\"><code data-lang=\"py3\"><o>Stopped<p><\/p>\n\n<\/o><\/code><\/pre>\n<p>Here the loop doesn't even start asking for input, because the <code data-lang=\"py3\">while<\/code> loop condition was already <code data-lang=\"py3\">False<\/code>!<\/p>\n\n<h3>Not setting up beforehand<\/h3>\n<p>In this example, the <code data-lang=\"py3\">while<\/code> loop is trying to ask the question 'Is the command variable not equal to stop?' but since the command variable hasn't been created yet, it doesn't know what to do!<\/p>\n<pre class=\"js-editor\" data-eg-id=\"while-mistakes-eg1\"><code data-lang=\"py3\">\nwhile command != 'stop':\n  print('You entered ' + command)\n  command = input('Command: ')\nprint('Stopped')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"while-mistakes-eg1\"><code data-lang=\"py3\">Traceback (most recent call last):\n  File \"program.py\", line 1, in &lt;module&gt;\n    while command != 'stop':\nNameError: name 'command' is not defined\n\n<\/code><\/pre>\n<p>See how it says \"<code data-lang=\"err\">name 'command' is not defined<\/code>\"? That means you're trying to use the <code data-lang=\"py3\">command<\/code> variable but it hasn't been created (defined) yet.<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Another common mistake with <code data-lang=\"py3\">while<\/code> loops is making an <strong>infinite loop<\/strong>.<\/p>\n\n<p>Try running this example.<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-my-program-wont-stop-0\"><code data-lang=\"py3\">command = input('First command: ')\nwhile command != 'stop':\n  print('You entered ' + command)\nprint('Stopped.')\n<\/code><\/pre>\n\n<p>See how it just keeps going and going and going?<\/p>\n\n<p>The <code data-lang=\"py3\">while<\/code> loop will keep repeating <em>while<\/em> the condition is <code data-lang=\"py3\">True<\/code>. In this example, we ask the user for the first command, but then we never ask for the next command! <\/p>\n\n<p>Since we're never changing the <code data-lang=\"py3\">command<\/code> variable to anything else, it will <strong>never<\/strong> become equal to <code data-lang=\"py3\">'stop'<\/code> so the loop will never end.<\/p>\n\n<p>Here's a simple rule to avoid infinite loops:<\/p>\n<p><strong>There must always be something <em>inside<\/em> the <code data-lang=\"py3\">while<\/code> loop that might change the conditon to <code data-lang=\"py3\">False<\/code>.<\/strong><\/p>\n\n<p>And of course, don't worry if you get an infinite loop! You can always hit the stop button!<\/p>"
                }
              ],
              "layout":0,
              "title":"My program won't stop!",
              "notes_rendered":"",
              "content_rendered":"<p>Another common mistake with <code data-lang=\"py3\">while<\/code> loops is making an <strong>infinite loop<\/strong>.<\/p>\n\n<p>Try running this example.<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-my-program-wont-stop-0\"><code data-lang=\"py3\">command = input('First command: ')\nwhile command != 'stop':\n  print('You entered ' + command)\nprint('Stopped.')\n<\/code><\/pre>\n\n<p>See how it just keeps going and going and going?<\/p>\n\n<p>The <code data-lang=\"py3\">while<\/code> loop will keep repeating <em>while<\/em> the condition is <code data-lang=\"py3\">True<\/code>. In this example, we ask the user for the first command, but then we never ask for the next command! <\/p>\n\n<p>Since we're never changing the <code data-lang=\"py3\">command<\/code> variable to anything else, it will <strong>never<\/strong> become equal to <code data-lang=\"py3\">'stop'<\/code> so the loop will never end.<\/p>\n\n<p>Here's a simple rule to avoid infinite loops:<\/p>\n<p><strong>There must always be something <em>inside<\/em> the <code data-lang=\"py3\">while<\/code> loop that might change the conditon to <code data-lang=\"py3\">False<\/code>.<\/strong><\/p>\n\n<p>And of course, don't worry if you get an infinite loop! You can always hit the stop button!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Snooze No More!",
              "purpose":"",
              "problem":"py3-snooze-no-more",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Duck Duck Goose",
              "purpose":"",
              "problem":"aca-py3-duck-goose-while",
              "type":1
            }
          ],
          "title":"Looping with conditions"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>The <em>condition<\/em> of the <code data-lang=\"py3\">while<\/code> loop can be anything that is a <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code> question.<\/p>\n\n<p>Here's an example where we keep repeating the loop <em>while<\/em> the user is typing in uppercase:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"stop-shouting-isupper-eg\"><code data-lang=\"py3\">\nline = input('Enter a line: ')\nwhile line.isupper():\n  print('Please stop shouting!')\n  line = input('Enter a line: ')\nprint('Thank you.')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"stop-shouting-isupper-eg\"><code data-lang=\"py3\"><o>Enter a line: <\/o><i>HELLO<\/i>\n<o>Please stop shouting!<\/o>\n<o>Enter a line: <\/o><i>HOW ARE YOU?<\/i>\n<o>Please stop shouting!<\/o>\n<o>Enter a line: <\/o><i>oh, sorry.<\/i>\n<o>Thank you.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n"
                }
              ],
              "layout":0,
              "title":"Other conditions",
              "notes_rendered":"",
              "content_rendered":"<p>The <em>condition<\/em> of the <code data-lang=\"py3\">while<\/code> loop can be anything that is a <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code> question.<\/p>\n\n<p>Here's an example where we keep repeating the loop <em>while<\/em> the user is typing in uppercase:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"stop-shouting-isupper-eg\"><code data-lang=\"py3\">\nline = input('Enter a line: ')\nwhile line.isupper():\n  print('Please stop shouting!')\n  line = input('Enter a line: ')\nprint('Thank you.')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"stop-shouting-isupper-eg\"><code data-lang=\"py3\"><o>Enter a line: <\/o><i>HELLO<\/i>\n<o>Please stop shouting!<\/o>\n<o>Enter a line: <\/o><i>HOW ARE YOU?<\/i>\n<o>Please stop shouting!<\/o>\n<o>Enter a line: <\/o><i>oh, sorry.<\/i>\n<o>Thank you.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>A pattern that you'll need to use when writing programs is to read in multiple lines <strong>until a blank line is entered<\/strong>. Here's an example of how we can do this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"template-user-input-blank-line-stop\"><code data-lang=\"py3\">\nline = input('Enter line: ')\nwhile line:\n  print('Still running')\n  line = input('Enter line: ')\nprint('Stopped')\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"template-user-input-blank-line-stop\"><code data-lang=\"py3\"><o>Enter line: <\/o><i>line 1<\/i>\n<o>Still running<\/o>\n<o>Enter line: <\/o><i>line 2<\/i>\n<o>Still running<\/o>\n<o>Enter line: <\/o>\n<o>Stopped<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>We've used a shortcut for the comparison here. Rather than writing <code data-lang=\"py3\">while line != ''<\/code> we can just use <code data-lang=\"py3\">while line<\/code>, which means the same thing. The <code data-lang=\"py3\">line<\/code> variable will be <code data-lang=\"py3\">True<\/code> if the string is not empty, and <code data-lang=\"py3\">False<\/code> otherwise.<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Looking for blank lines",
              "notes_rendered":"",
              "content_rendered":"<p>A pattern that you'll need to use when writing programs is to read in multiple lines <strong>until a blank line is entered<\/strong>. Here's an example of how we can do this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"template-user-input-blank-line-stop\"><code data-lang=\"py3\">\nline = input('Enter line: ')\nwhile line:\n  print('Still running')\n  line = input('Enter line: ')\nprint('Stopped')\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"template-user-input-blank-line-stop\"><code data-lang=\"py3\"><o>Enter line: <\/o><i>line 1<\/i>\n<o>Still running<\/o>\n<o>Enter line: <\/o><i>line 2<\/i>\n<o>Still running<\/o>\n<o>Enter line: <\/o>\n<o>Stopped<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>We've used a shortcut for the comparison here. Rather than writing <code data-lang=\"py3\">while line != ''<\/code> we can just use <code data-lang=\"py3\">while line<\/code>, which means the same thing. The <code data-lang=\"py3\">line<\/code> variable will be <code data-lang=\"py3\">True<\/code> if the string is not empty, and <code data-lang=\"py3\">False<\/code> otherwise.<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Now that we can read multiple lines of input, we can do extra things each loop!<\/p>\n\n<p>Remember, everything that should be repeated must be <em>inside<\/em> the <code data-lang=\"py3\">while<\/code> loop. You must indent all the lines of code which are <em>inside<\/em> by adding spaces at the beginning of the line.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g1-doing-extra-things-each-loop-0\"><code data-lang=\"py3\">\nline = input('Enter a line: ')\nwhile line:\n  print('Original: ' + line)\n  print('Uppercase version: ' + line.upper())\n  print('Lowercase version: ' + line.lower())\n  line = input('Enter a line: ')\nprint('Finished')\n<\/code><\/pre>\n\n<p>Like the previous example, this program will finish only when a blank line is entered by the user.<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Doing extra things each loop",
              "notes_rendered":"",
              "content_rendered":"<p>Now that we can read multiple lines of input, we can do extra things each loop!<\/p>\n\n<p>Remember, everything that should be repeated must be <em>inside<\/em> the <code data-lang=\"py3\">while<\/code> loop. You must indent all the lines of code which are <em>inside<\/em> by adding spaces at the beginning of the line.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g1-doing-extra-things-each-loop-0\"><code data-lang=\"py3\">\nline = input('Enter a line: ')\nwhile line:\n  print('Original: ' + line)\n  print('Uppercase version: ' + line.upper())\n  print('Lowercase version: ' + line.lower())\n  line = input('Enter a line: ')\nprint('Finished')\n<\/code><\/pre>\n\n<p>Like the previous example, this program will finish only when a blank line is entered by the user.<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: That's Unamerican (spelling)!",
              "purpose":"",
              "problem":"py3-unamerican-spelling",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: I know you are...",
              "purpose":"",
              "problem":"aca-py3-i-know-you-are-but-what-am-i",
              "type":1
            }
          ],
          "title":"More while loops"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Sometimes, you want to keep track of how many times a <code data-lang=\"py3\">while<\/code> loop repeats.<\/p>\n\n<p>We can use a <em>counter<\/em>, which is a variable that starts at <code data-lang=\"py3\">0<\/code> (or <code data-lang=\"py3\">1<\/code> in this case, as we are guessing once before we enter the loop) and counts up inside the loop.<\/p>\n\n<p>Once we have this variable we can increase it by one each time through the loop by doing this:<\/p>\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\ncounter = counter + 1\n<\/code><\/pre>\n<p>This takes the number that was in <code data-lang=\"py3\">counter<\/code> before, adds 1 to it, then saves it back into the variable <code data-lang=\"py3\">counter<\/code> (and overwriting the old number). We can use this to count how many times a <code data-lang=\"py3\">while<\/code> loop repeats:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-counter\"><code data-lang=\"py3\">\ncounter = 1\nguess = input('Guess my favourite colour: ')\nwhile guess.lower() != 'yellow':\n  counter = counter + 1  # Adds 1 to the counter.\n  guess = input('Try again: ')\nprint('You got it in', counter, 'tries.')\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-counter\"><code data-lang=\"py3\"><o>Guess my favourite colour: <\/o><i>red\n<\/i><o>Try again: <\/o><i>blue\n<\/i><o>Try again: <\/o><i>orange\n<\/i><o>Try again: <\/o><i>yellow\n<\/i><o>You got it in 4 tries.\n<\/o>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "title":"Counters",
              "notes_rendered":"",
              "content_rendered":"<p>Sometimes, you want to keep track of how many times a <code data-lang=\"py3\">while<\/code> loop repeats.<\/p>\n\n<p>We can use a <em>counter<\/em>, which is a variable that starts at <code data-lang=\"py3\">0<\/code> (or <code data-lang=\"py3\">1<\/code> in this case, as we are guessing once before we enter the loop) and counts up inside the loop.<\/p>\n\n<p>Once we have this variable we can increase it by one each time through the loop by doing this:<\/p>\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\ncounter = counter + 1\n<\/code><\/pre>\n<p>This takes the number that was in <code data-lang=\"py3\">counter<\/code> before, adds 1 to it, then saves it back into the variable <code data-lang=\"py3\">counter<\/code> (and overwriting the old number). We can use this to count how many times a <code data-lang=\"py3\">while<\/code> loop repeats:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-counter\"><code data-lang=\"py3\">\ncounter = 1\nguess = input('Guess my favourite colour: ')\nwhile guess.lower() != 'yellow':\n  counter = counter + 1  # Adds 1 to the counter.\n  guess = input('Try again: ')\nprint('You got it in', counter, 'tries.')\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-counter\"><code data-lang=\"py3\"><o>Guess my favourite colour: <\/o><i>red\n<\/i><o>Try again: <\/o><i>blue\n<\/i><o>Try again: <\/o><i>orange\n<\/i><o>Try again: <\/o><i>yellow\n<\/i><o>You got it in 4 tries.\n<\/o>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Just like we were adding 1 to the counter each time through the loop, we can also add to a string each time the loop repeats.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"while-ees\"><code data-lang=\"py3\">\nmessage = 'e'\nwhile message != 'eeeee':\n  print(message)\n  message = message + 'e'\n<\/code><\/pre>\n\n<p>This loop keeps running until the <code data-lang=\"py3\">message<\/code> string is equal to <code data-lang=\"py3\">'eeeee'<\/code> (5 <code data-lang=\"str\">e<\/code>'s). Notice that as soon as it is equal, the loop stops, so it never ends up printing out <code data-lang=\"py3\">'eeeee'<\/code>.<\/p>\n\n<p>If we wanted the program to print out <code data-lang=\"py3\">'eeeee'<\/code> we could add a final <code data-lang=\"py3\">print<\/code> statement like this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"while-ees2\"><code data-lang=\"py3\">\nmessage = 'e'\nwhile message != 'eeeee':\n  print(message)\n  message = message + 'e'\nprint(message)\n<\/code><\/pre>\n<p>The final <code data-lang=\"py3\">print<\/code> statement runs after the loop has terminated. Experiment to see what happens.<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Building a string",
              "notes_rendered":"",
              "content_rendered":"<p>Just like we were adding 1 to the counter each time through the loop, we can also add to a string each time the loop repeats.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"while-ees\"><code data-lang=\"py3\">\nmessage = 'e'\nwhile message != 'eeeee':\n  print(message)\n  message = message + 'e'\n<\/code><\/pre>\n\n<p>This loop keeps running until the <code data-lang=\"py3\">message<\/code> string is equal to <code data-lang=\"py3\">'eeeee'<\/code> (5 <code data-lang=\"str\">e<\/code>'s). Notice that as soon as it is equal, the loop stops, so it never ends up printing out <code data-lang=\"py3\">'eeeee'<\/code>.<\/p>\n\n<p>If we wanted the program to print out <code data-lang=\"py3\">'eeeee'<\/code> we could add a final <code data-lang=\"py3\">print<\/code> statement like this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"while-ees2\"><code data-lang=\"py3\">\nmessage = 'e'\nwhile message != 'eeeee':\n  print(message)\n  message = message + 'e'\nprint(message)\n<\/code><\/pre>\n<p>The final <code data-lang=\"py3\">print<\/code> statement runs after the loop has terminated. Experiment to see what happens.<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Michael's Medals",
              "purpose":"",
              "problem":"py3-michaels-medals-most",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: What's the time Mr Wolf",
              "purpose":"",
              "problem":"aca-py3-mr-wolf",
              "type":1
            }
          ],
          "title":"Counters"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Using <code data-lang=\"py3\">if<\/code> statements, we can write this short program:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"if-inside-while-eg1\"><code data-lang=\"py3\">line = input('Enter a line: ')\nif 'cat' in line:\n  print('I see a cat!')\nelse:\n  print('No cat.')\n<\/code><\/pre>\n\n<p>But instead of using this <code data-lang=\"py3\">if<\/code> statement just once, we want to repeatedly ask for another line and check it for cats too.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"if-inside-while-eg2\"><code data-lang=\"py3\">line = input('Enter a line: ')\nwhile line:\n  if 'cat' in line:\n    print('I see a cat!')\n  else:\n    print('No cat.')\n  line = input('Enter a line: ')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"if-inside-while-eg2\"><code data-lang=\"py3\"><o>Enter a line: <\/o><i>the cat is asleep<\/i>\n<o>I see a cat!<\/o>\n<o>Enter a line: <\/o><i>cats are everywhere!<\/i>\n<o>I see a cat!<\/o>\n<o>Enter a line: <\/o><i>something about a dog<\/i>\n<o>No cat.<\/o>\n<o>Enter a line: <\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>In this example we've put our <code data-lang=\"py3\">if<\/code> and <code data-lang=\"py3\">else<\/code> <em>inside<\/em> a <code data-lang=\"py3\">while<\/code> loop so that we can use it many times.<\/p>"
                }
              ],
              "layout":0,
              "title":"Making decisions inside a loop",
              "notes_rendered":"",
              "content_rendered":"<p>Using <code data-lang=\"py3\">if<\/code> statements, we can write this short program:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"if-inside-while-eg1\"><code data-lang=\"py3\">line = input('Enter a line: ')\nif 'cat' in line:\n  print('I see a cat!')\nelse:\n  print('No cat.')\n<\/code><\/pre>\n\n<p>But instead of using this <code data-lang=\"py3\">if<\/code> statement just once, we want to repeatedly ask for another line and check it for cats too.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"if-inside-while-eg2\"><code data-lang=\"py3\">line = input('Enter a line: ')\nwhile line:\n  if 'cat' in line:\n    print('I see a cat!')\n  else:\n    print('No cat.')\n  line = input('Enter a line: ')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"if-inside-while-eg2\"><code data-lang=\"py3\"><o>Enter a line: <\/o><i>the cat is asleep<\/i>\n<o>I see a cat!<\/o>\n<o>Enter a line: <\/o><i>cats are everywhere!<\/i>\n<o>I see a cat!<\/o>\n<o>Enter a line: <\/o><i>something about a dog<\/i>\n<o>No cat.<\/o>\n<o>Enter a line: <\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>In this example we've put our <code data-lang=\"py3\">if<\/code> and <code data-lang=\"py3\">else<\/code> <em>inside<\/em> a <code data-lang=\"py3\">while<\/code> loop so that we can use it many times.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Look very closely at the spaces at the beginning of the lines in this example:<\/p>\n\n<p>The <code data-lang=\"py3\">if<\/code> and <code data-lang=\"py3\">else<\/code> blocks are indented because they are <em>inside<\/em> the <code data-lang=\"py3\">while<\/code> block.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g1-indenting-is-important-0\"><code data-lang=\"py3\">line = input('Enter a line: ')\nwhile line:\n  if 'cat' in line:\n    print('I see a cat!')\n  else:\n    print('No cat.')\n  line = input('Enter a line: ')\n<\/code><\/pre>\n\n<p>For the <code data-lang=\"py3\">print<\/code> lines which are <em>inside<\/em> both the <code data-lang=\"py3\">while<\/code> loop and the <code data-lang=\"py3\">if<\/code> statement, we have to indent them again one more time.<\/p>\n\n<p>Notice how the second <code data-lang=\"py3\">input<\/code> line is only indented once? That's because it's inside the <code data-lang=\"py3\">while<\/code> block, but is not inside the <code data-lang=\"py3\">else<\/code> block. This means it doesn't matter if there is or isn't a cat in the line, the program will ask for the next line anyway.<\/p>"
                }
              ],
              "layout":0,
              "title":"Indenting is important",
              "notes_rendered":"",
              "content_rendered":"<p>Look very closely at the spaces at the beginning of the lines in this example:<\/p>\n\n<p>The <code data-lang=\"py3\">if<\/code> and <code data-lang=\"py3\">else<\/code> blocks are indented because they are <em>inside<\/em> the <code data-lang=\"py3\">while<\/code> block.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g1-indenting-is-important-0\"><code data-lang=\"py3\">line = input('Enter a line: ')\nwhile line:\n  if 'cat' in line:\n    print('I see a cat!')\n  else:\n    print('No cat.')\n  line = input('Enter a line: ')\n<\/code><\/pre>\n\n<p>For the <code data-lang=\"py3\">print<\/code> lines which are <em>inside<\/em> both the <code data-lang=\"py3\">while<\/code> loop and the <code data-lang=\"py3\">if<\/code> statement, we have to indent them again one more time.<\/p>\n\n<p>Notice how the second <code data-lang=\"py3\">input<\/code> line is only indented once? That's because it's inside the <code data-lang=\"py3\">while<\/code> block, but is not inside the <code data-lang=\"py3\">else<\/code> block. This means it doesn't matter if there is or isn't a cat in the line, the program will ask for the next line anyway.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: TL;DR",
              "purpose":"",
              "problem":"py3-too-long-didnt-read",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Will the name fit?",
              "purpose":"",
              "problem":"aca-py3-will-the-name-fit",
              "type":1
            }
          ],
          "title":"Making decisions inside a loop"
        }
      ],
      "title":"Repeating things",
      "label":"aca-python-yr78-loops-while",
      "updated_at":"2017-11-15T06:41:24.199016+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  So far our programs have been a simple sequence of steps.  The interpreter executes the statements from top to bottom, and so the program <em>runs the same way every time<\/em>.\n<\/p>\n\n<p>\n  In the real world, we <strong>decide<\/strong> to <strong>take different steps<\/strong> based on our situation. For example, if it's raining, we do an <em>extra step<\/em> of taking an umbrella before leaving the house.\n<\/p>\n\n<p>\n  This <em>flowchart<\/em> describes this process (or <em>algorithm<\/em>):\n<\/p>\n\n<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xl=\"http:\/\/www.w3.org\/1999\/xlink\" version=\"1.1\" viewBox=\"-2 -2 344 134\" width=\"344pt\" height=\"134pt\" style=\"position: relative; display: block; margin: 0 auto; width: 90%\">\n<defs><marker orient=\"auto\" overflow=\"visible\" markerUnits=\"strokeWidth\" id=\"FilledArrow_Marker\" viewBox=\"-1 -3 7 6\" markerWidth=\"7\" markerHeight=\"6\" color=\"black\"><g><path d=\"M 4.8000002 0 L 0 -1.8000001 L 0 1.8000001 Z\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\"\/><\/g><\/marker><font-face font-family=\"Lato\" font-size=\"12\" panose-1=\"2 15 5 2 2 2 4 3 2 3\" units-per-em=\"1000\" underline-position=\"-51.5\" underline-thickness=\"97\" slope=\"0\" x-height=\"514\" cap-height=\"724\" ascent=\"986.9995\" descent=\"-212.99744\" font-weight=\"500\"><font-face-src><font-face-name name=\"Lato-Regular\"\/><\/font-face-src><\/font-face><\/defs><g stroke=\"none\" stroke-opacity=\"1\" stroke-dasharray=\"none\" fill=\"none\" fill-opacity=\"1\"><g><line x1=\"50.500013\" y1=\"90\" x2=\"66.1\" y2=\"90\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><path d=\"M 120 50 L 120 25 L 157.1 25\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(94.5 30.04491)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"black\" x=\".62619825\" y=\"12\" textLength=\"6.186\">y<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"black\" x=\"6.6441982\" y=\"12\" textLength=\"11.5319996\">es<\/tspan><\/text><path d=\"M 250 25 L 301.5 25 L 301.5 51.5\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><line x1=\"160\" y1=\"90\" x2=\"246.1\" y2=\"90\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(163 95)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".25\" y=\"12\" textLength=\"13.5\">no<\/tspan><\/text><rect x=\"170\" y=\"0\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"170\" y=\"0\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(175 10)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.248\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"20.966\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"32.684\" y=\"12\" textLength=\"22.068001\">e an<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"12.317\" y=\"27\" textLength=\"27.648\">umbr<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"39.719\" y=\"27\" textLength=\"17.964001\">ella<\/tspan><\/text><path d=\"M 120 50 L 160 90 L 120 130 L 80 90 Z\" fill=\"#ff5900\"\/><path d=\"M 120 50 L 160 90 L 120 130 L 80 90 Z\" stroke=\"#ff5900\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(95.8 71)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.685\" y=\"12\" textLength=\"3.3599999\">I<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"18.865\" y=\"12\" textLength=\"18.521999\">s it <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"4.501\" y=\"27\" textLength=\"4.368\">r<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.773\" y=\"27\" textLength=\"36.726002\">aining?<\/tspan><\/text><rect x=\"260\" y=\"65\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"260\" y=\"65\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(265 75)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"9.302\" y=\"12\" textLength=\"54.468\">Leave the <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"19.139\" y=\"27\" textLength=\"31.722\">house<\/tspan><\/text><circle cx=\"25\" cy=\"90\" r=\"25.00004\" fill=\"#7b188f\"\/><circle cx=\"25\" cy=\"90\" r=\"25.00004\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\"\/><text transform=\"translate(10 82.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"2.412\" y=\"12\" textLength=\"6.5100002\">S<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.652\" y=\"12\" textLength=\"18.936001\">tart<\/tspan><\/text><\/g><\/g><\/svg>\n\n<p>\n  The diamond requires a <code data-lang=\"in\">yes<\/code> or <code data-lang=\"in\">no<\/code> decision.  The answer determines which line we follow.  If the answer is <code data-lang=\"in\">yes<\/code>, we do the extra step of taking an umbrella. If the answer is no <code data-lang=\"in\">no<\/code>, we skip it.\n<\/p>\n\n<p>\n  We can write this in Python using an <code data-lang=\"py3\">if<\/code> statement.\n<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Why do we need decisions?",
              "notes_rendered":"",
              "content_rendered":"<p>\n  So far our programs have been a simple sequence of steps.  The interpreter executes the statements from top to bottom, and so the program <em>runs the same way every time<\/em>.\n<\/p>\n\n<p>\n  In the real world, we <strong>decide<\/strong> to <strong>take different steps<\/strong> based on our situation. For example, if it's raining, we do an <em>extra step<\/em> of taking an umbrella before leaving the house.\n<\/p>\n\n<p>\n  This <em>flowchart<\/em> describes this process (or <em>algorithm<\/em>):\n<\/p>\n\n<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xl=\"http:\/\/www.w3.org\/1999\/xlink\" version=\"1.1\" viewBox=\"-2 -2 344 134\" width=\"344pt\" height=\"134pt\" style=\"position: relative; display: block; margin: 0 auto; width: 90%\">\n<defs><marker orient=\"auto\" overflow=\"visible\" markerUnits=\"strokeWidth\" id=\"FilledArrow_Marker\" viewBox=\"-1 -3 7 6\" markerWidth=\"7\" markerHeight=\"6\" color=\"black\"><g><path d=\"M 4.8000002 0 L 0 -1.8000001 L 0 1.8000001 Z\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\"\/><\/g><\/marker><font-face font-family=\"Lato\" font-size=\"12\" panose-1=\"2 15 5 2 2 2 4 3 2 3\" units-per-em=\"1000\" underline-position=\"-51.5\" underline-thickness=\"97\" slope=\"0\" x-height=\"514\" cap-height=\"724\" ascent=\"986.9995\" descent=\"-212.99744\" font-weight=\"500\"><font-face-src><font-face-name name=\"Lato-Regular\"\/><\/font-face-src><\/font-face><\/defs><g stroke=\"none\" stroke-opacity=\"1\" stroke-dasharray=\"none\" fill=\"none\" fill-opacity=\"1\"><g><line x1=\"50.500013\" y1=\"90\" x2=\"66.1\" y2=\"90\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><path d=\"M 120 50 L 120 25 L 157.1 25\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(94.5 30.04491)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"black\" x=\".62619825\" y=\"12\" textLength=\"6.186\">y<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"black\" x=\"6.6441982\" y=\"12\" textLength=\"11.5319996\">es<\/tspan><\/text><path d=\"M 250 25 L 301.5 25 L 301.5 51.5\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><line x1=\"160\" y1=\"90\" x2=\"246.1\" y2=\"90\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(163 95)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".25\" y=\"12\" textLength=\"13.5\">no<\/tspan><\/text><rect x=\"170\" y=\"0\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"170\" y=\"0\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(175 10)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.248\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"20.966\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"32.684\" y=\"12\" textLength=\"22.068001\">e an<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"12.317\" y=\"27\" textLength=\"27.648\">umbr<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"39.719\" y=\"27\" textLength=\"17.964001\">ella<\/tspan><\/text><path d=\"M 120 50 L 160 90 L 120 130 L 80 90 Z\" fill=\"#ff5900\"\/><path d=\"M 120 50 L 160 90 L 120 130 L 80 90 Z\" stroke=\"#ff5900\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(95.8 71)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.685\" y=\"12\" textLength=\"3.3599999\">I<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"18.865\" y=\"12\" textLength=\"18.521999\">s it <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"4.501\" y=\"27\" textLength=\"4.368\">r<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.773\" y=\"27\" textLength=\"36.726002\">aining?<\/tspan><\/text><rect x=\"260\" y=\"65\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"260\" y=\"65\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(265 75)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"9.302\" y=\"12\" textLength=\"54.468\">Leave the <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"19.139\" y=\"27\" textLength=\"31.722\">house<\/tspan><\/text><circle cx=\"25\" cy=\"90\" r=\"25.00004\" fill=\"#7b188f\"\/><circle cx=\"25\" cy=\"90\" r=\"25.00004\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\"\/><text transform=\"translate(10 82.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"2.412\" y=\"12\" textLength=\"6.5100002\">S<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.652\" y=\"12\" textLength=\"18.936001\">tart<\/tspan><\/text><\/g><\/g><\/svg>\n\n<p>\n  The diamond requires a <code data-lang=\"in\">yes<\/code> or <code data-lang=\"in\">no<\/code> decision.  The answer determines which line we follow.  If the answer is <code data-lang=\"in\">yes<\/code>, we do the extra step of taking an umbrella. If the answer is no <code data-lang=\"in\">no<\/code>, we skip it.\n<\/p>\n\n<p>\n  We can write this in Python using an <code data-lang=\"py3\">if<\/code> statement.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Let's write our flowchart as a Python program:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-what-if-it-is-raining-0\"><code data-lang=\"py3\">raining = input('Is it raining (yes\/no)? ')\nif raining == 'yes':\n  print('Take an umbrella.')\nprint('Leave the house.')\n<\/code><\/pre>\n\n<p>\n  <strong>Try it! What happens when you say <code data-lang=\"in\">yes<\/code>, <code data-lang=\"in\">no<\/code>, or any other answer?<\/strong>\n<\/p>\n\n<p>\n  Notice that the first <code data-lang=\"py3\">print<\/code> is <em>indented<\/em> (by two spaces).  This is the <em>body<\/em> of the <code data-lang=\"py3\">if<\/code> statement.  The body must be indented.\n<\/p>\n\n<p>\n  If the value stored in <code data-lang=\"py3\">raining<\/code> <em>is equal to<\/em> <code data-lang=\"py3\">'yes'<\/code> (because the user entered <code data-lang=\"in\">yes<\/code>), then the body is run. Otherwise, it is skipped.\n<\/p>\n\n<p>\n  The second <code data-lang=\"py3\">print<\/code> always runs, because it is not indented, and isn't controlled by the <code data-lang=\"py3\">if<\/code> statement.\n<\/p>\n\n<aside class=\"info\">\n  <h2>An <code data-lang=\"py3\">if<\/code> statement is a <em>control structure<\/em><\/h2>\n  <p>\n    The <code data-lang=\"py3\">if<\/code> statement <em>controls<\/em> how the program runs by deciding if the body is run or not.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "title":"What if it is raining?",
              "notes_rendered":"",
              "content_rendered":"<p>Let's write our flowchart as a Python program:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-what-if-it-is-raining-0\"><code data-lang=\"py3\">raining = input('Is it raining (yes\/no)? ')\nif raining == 'yes':\n  print('Take an umbrella.')\nprint('Leave the house.')\n<\/code><\/pre>\n\n<p>\n  <strong>Try it! What happens when you say <code data-lang=\"in\">yes<\/code>, <code data-lang=\"in\">no<\/code>, or any other answer?<\/strong>\n<\/p>\n\n<p>\n  Notice that the first <code data-lang=\"py3\">print<\/code> is <em>indented<\/em> (by two spaces).  This is the <em>body<\/em> of the <code data-lang=\"py3\">if<\/code> statement.  The body must be indented.\n<\/p>\n\n<p>\n  If the value stored in <code data-lang=\"py3\">raining<\/code> <em>is equal to<\/em> <code data-lang=\"py3\">'yes'<\/code> (because the user entered <code data-lang=\"in\">yes<\/code>), then the body is run. Otherwise, it is skipped.\n<\/p>\n\n<p>\n  The second <code data-lang=\"py3\">print<\/code> always runs, because it is not indented, and isn't controlled by the <code data-lang=\"py3\">if<\/code> statement.\n<\/p>\n\n<aside class=\"info\">\n  <h2>An <code data-lang=\"py3\">if<\/code> statement is a <em>control structure<\/em><\/h2>\n  <p>\n    The <code data-lang=\"py3\">if<\/code> statement <em>controls<\/em> how the program runs by deciding if the body is run or not.\n  <\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  An <code data-lang=\"py3\">if<\/code> statement can control more than one statement in its body.\n<\/p>\n\n<p>\n  These statements must have the same indentation, like this:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-controlling-a-block-of-code-0\"><code data-lang=\"py3\">\nname = input('What is your name? ')\nif name == 'Eliza':\n  print('Nice name!')\n  print('That is my name too!')\nprint('Pleased to meet you.')\n<\/code><\/pre>\n\n<p>If the name matches <code data-lang=\"py3\">'Eliza'<\/code> then all the indented lines (the <em>block<\/em>) will be executed first, then continue on with the rest of the program.<\/p>\n\n<p>If it's anything else, those lines will be skipped and the next not-indented line will be executed next.<\/p>\n\n<aside class=\"info\">\n  <h2>Careful with spaces!<\/h2>\n  <p> The number of spaces of indent must be to the same depth for every statement in the block. This example is broken because the indentation of the two lines is different:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-controlling-a-block-of-code-1\"><code data-lang=\"py3\">food = input('What food do you like? ')\nif food == 'cake':\n  print('Wow, I love cake too!')\n    print('Did I tell you I like cake?')\n<\/code><\/pre>\n  <p>You can fix it by making both <code data-lang=\"py3\">print<\/code> statements indented by the same number of spaces (usually 2 or 4).<\/p>  \n<\/aside>"
                }
              ],
              "layout":0,
              "title":"Controlling a block of code",
              "notes_rendered":"",
              "content_rendered":"<p>\n  An <code data-lang=\"py3\">if<\/code> statement can control more than one statement in its body.\n<\/p>\n\n<p>\n  These statements must have the same indentation, like this:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-controlling-a-block-of-code-0\"><code data-lang=\"py3\">\nname = input('What is your name? ')\nif name == 'Eliza':\n  print('Nice name!')\n  print('That is my name too!')\nprint('Pleased to meet you.')\n<\/code><\/pre>\n\n<p>If the name matches <code data-lang=\"py3\">'Eliza'<\/code> then all the indented lines (the <em>block<\/em>) will be executed first, then continue on with the rest of the program.<\/p>\n\n<p>If it's anything else, those lines will be skipped and the next not-indented line will be executed next.<\/p>\n\n<aside class=\"info\">\n  <h2>Careful with spaces!<\/h2>\n  <p> The number of spaces of indent must be to the same depth for every statement in the block. This example is broken because the indentation of the two lines is different:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-controlling-a-block-of-code-1\"><code data-lang=\"py3\">food = input('What food do you like? ')\nif food == 'cake':\n  print('Wow, I love cake too!')\n    print('Did I tell you I like cake?')\n<\/code><\/pre>\n  <p>You can fix it by making both <code data-lang=\"py3\">print<\/code> statements indented by the same number of spaces (usually 2 or 4).<\/p>  \n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  You will notice in our examples that we are using two equals signs to check whether the variable is equal to a particular value:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-assignment-vs-comparison-0\"><code data-lang=\"py3\">name = 'Amanda'\nif name == 'Amanda':\n  print('Hello, friend')\n<\/code><\/pre>\n<p>\n  This can be very confusing for beginner programmers.\n<\/p>\n<p>\n  A single <code data-lang=\"py3\">=<\/code> is used for <em>assignment<\/em>.\n  This is what we do to set variables.\n  The first line of the program above is setting the variable <code data-lang=\"py3\">name<\/code> to the value <code data-lang=\"py3\">\"Amanda\"<\/code> using a single equals sign.\n<\/p> \n<p>\n  A double <code data-lang=\"py3\">==<\/code> is used for <em>comparison<\/em>.\n  This is what we do to check whether two things are equal.\n  The second line of the program above is checking whether the variable <code data-lang=\"py3\">name<\/code> is equal to <code data-lang=\"py3\">\"Amanda\"<\/code> using a double equals sign.<\/p> \n<p>\n  If you do accidentally mix these up, Amanda will help by giving you a <code data-lang=\"py3\">SyntaxError<\/code>.\n  For example, try running this program:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"assignment-ve-comparison-eg1\"><code data-lang=\"py3\">name = 'Amanda'\nif name = 'Amanda':\n  print('Hello, friend')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"assignment-ve-comparison-eg1\"><code data-lang=\"py3\">  File \"program.py\", line 2\n    if name = 'Amanda':\n            ^\nSyntaxError: invalid syntax\n<\/code><\/pre>\n<p>\n  Notice the second line only has one equals sign where it should have two.\n<\/p>"
                }
              ],
              "layout":0,
              "title":"Assignment vs. comparison",
              "notes_rendered":"",
              "content_rendered":"<p>\n  You will notice in our examples that we are using two equals signs to check whether the variable is equal to a particular value:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-assignment-vs-comparison-0\"><code data-lang=\"py3\">name = 'Amanda'\nif name == 'Amanda':\n  print('Hello, friend')\n<\/code><\/pre>\n<p>\n  This can be very confusing for beginner programmers.\n<\/p>\n<p>\n  A single <code data-lang=\"py3\">=<\/code> is used for <em>assignment<\/em>.\n  This is what we do to set variables.\n  The first line of the program above is setting the variable <code data-lang=\"py3\">name<\/code> to the value <code data-lang=\"py3\">\"Amanda\"<\/code> using a single equals sign.\n<\/p> \n<p>\n  A double <code data-lang=\"py3\">==<\/code> is used for <em>comparison<\/em>.\n  This is what we do to check whether two things are equal.\n  The second line of the program above is checking whether the variable <code data-lang=\"py3\">name<\/code> is equal to <code data-lang=\"py3\">\"Amanda\"<\/code> using a double equals sign.<\/p> \n<p>\n  If you do accidentally mix these up, Amanda will help by giving you a <code data-lang=\"py3\">SyntaxError<\/code>.\n  For example, try running this program:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"assignment-ve-comparison-eg1\"><code data-lang=\"py3\">name = 'Amanda'\nif name = 'Amanda':\n  print('Hello, friend')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"assignment-ve-comparison-eg1\"><code data-lang=\"py3\">  File \"program.py\", line 2\n    if name = 'Amanda':\n            ^\nSyntaxError: invalid syntax\n<\/code><\/pre>\n<p>\n  Notice the second line only has one equals sign where it should have two.\n<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Cheap Tuesdays",
              "purpose":"",
              "problem":"py3-cheap-tuesdays-1",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Get in the game!",
              "purpose":"",
              "problem":"aca-py3-favourite-boardgame",
              "type":1
            }
          ],
          "title":"Making decisions"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  <code data-lang=\"py3\">if<\/code> statements allow you to make <em>yes<\/em> or <em>no<\/em> decisions.\n  In Python these are called <code data-lang=\"py3\">True<\/code> and <code data-lang=\"py3\">False<\/code>.\n<\/p>\n<p>\n  When you use an <code data-lang=\"py3\">if<\/code> statement Python works out if the condition is <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code>.\n  If the condition is <code data-lang=\"py3\">True<\/code> then the block controlled by the <code data-lang=\"py3\">if<\/code> statement will be run:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"if-basic1\"><code data-lang=\"py3\">name = 'Sam'\nif name == 'Sam':\n  print('Hello, I think I know you?')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"if-basic1\"><code data-lang=\"py3\"><o>Hello, I think I know you?<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If we change <code data-lang=\"py3\">name<\/code> the expression will evaluate to <code data-lang=\"py3\">False<\/code> and the block of code will be skipped:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"if-basic2\"><code data-lang=\"py3\">name = 'Frodo'\nif name == 'Sam':\n  print('Hello, I think I know you?')\n<\/code><\/pre>\n<p>(note that when you run the program there is no output!)<\/p>\n\n<aside class=\"info\">\n  <h2>Hint!<\/h2>\n  <p>You can check whether the conditional expression is evaluating to <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code> by testing it directly:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"if-basic3\"><code data-lang=\"py3\">name = 'Sam'\nprint(name == 'Sam')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"if-basic3\"><code data-lang=\"py3\"><o>True<\/o>\n<o><\/o>\n<\/code><\/pre>\n<p>Try changing the name and seeing what happens.<\/p>\n<\/aside>"
                }
              ],
              "layout":0,
              "title":"True or False?",
              "notes_rendered":"",
              "content_rendered":"<p>\n  <code data-lang=\"py3\">if<\/code> statements allow you to make <em>yes<\/em> or <em>no<\/em> decisions.\n  In Python these are called <code data-lang=\"py3\">True<\/code> and <code data-lang=\"py3\">False<\/code>.\n<\/p>\n<p>\n  When you use an <code data-lang=\"py3\">if<\/code> statement Python works out if the condition is <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code>.\n  If the condition is <code data-lang=\"py3\">True<\/code> then the block controlled by the <code data-lang=\"py3\">if<\/code> statement will be run:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"if-basic1\"><code data-lang=\"py3\">name = 'Sam'\nif name == 'Sam':\n  print('Hello, I think I know you?')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"if-basic1\"><code data-lang=\"py3\"><o>Hello, I think I know you?<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If we change <code data-lang=\"py3\">name<\/code> the expression will evaluate to <code data-lang=\"py3\">False<\/code> and the block of code will be skipped:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"if-basic2\"><code data-lang=\"py3\">name = 'Frodo'\nif name == 'Sam':\n  print('Hello, I think I know you?')\n<\/code><\/pre>\n<p>(note that when you run the program there is no output!)<\/p>\n\n<aside class=\"info\">\n  <h2>Hint!<\/h2>\n  <p>You can check whether the conditional expression is evaluating to <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code> by testing it directly:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"if-basic3\"><code data-lang=\"py3\">name = 'Sam'\nprint(name == 'Sam')\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"if-basic3\"><code data-lang=\"py3\"><o>True<\/o>\n<o><\/o>\n<\/code><\/pre>\n<p>Try changing the name and seeing what happens.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>All of the examples so far have done something when a condition is <code data-lang=\"py3\">True<\/code>, but nothing when the condition is <code data-lang=\"py3\">False<\/code>.\nIn the real world we often want to do one thing when a condition is <code data-lang=\"py3\">True<\/code> and do something different when a condition is <code data-lang=\"py3\">False<\/code>.<\/p>\n\n<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xl=\"http:\/\/www.w3.org\/1999\/xlink\" version=\"1.1\" viewBox=\"-2 248 344 184\" width=\"344pt\" height=\"184pt\" style=\"position: relative; display: block; margin: 0 auto; width: 90%\"><defs><marker orient=\"auto\" overflow=\"visible\" markerUnits=\"strokeWidth\" id=\"FilledArrow_Marker\" viewBox=\"-1 -3 7 6\" markerWidth=\"7\" markerHeight=\"6\" color=\"black\"><g><path d=\"M 4.8000002 0 L 0 -1.8000001 L 0 1.8000001 Z\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\"\/><\/g><\/marker><font-face font-family=\"Lato\" font-size=\"12\" panose-1=\"2 15 5 2 2 2 4 3 2 3\" units-per-em=\"1000\" underline-position=\"-51.5\" underline-thickness=\"97\" slope=\"0\" x-height=\"514\" cap-height=\"724\" ascent=\"986.9995\" descent=\"-212.99744\" font-weight=\"500\"><font-face-src><font-face-name name=\"Lato-Regular\"\/><\/font-face-src><\/font-face><\/defs><g stroke=\"none\" stroke-opacity=\"1\" stroke-dasharray=\"none\" fill=\"none\" fill-opacity=\"1\"><g><path d=\"M 120 380 L 120 405 L 157.5 405\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><line x1=\"50.500013\" y1=\"340\" x2=\"66.1\" y2=\"340\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><path d=\"M 120 300 L 120 275 L 157.1 275\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(94.5 280.04491)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".62619825\" y=\"12\" textLength=\"6.186\">y<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\"6.6441982\" y=\"12\" textLength=\"11.5319996\">es<\/tspan><\/text><path d=\"M 250 275 L 300 275 L 300 300\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><rect x=\"170\" y=\"250\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"170\" y=\"250\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(175 260)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.248\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"20.966\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"32.684\" y=\"12\" textLength=\"22.068001\">e an<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"12.317\" y=\"27\" textLength=\"27.648\">umbr<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"39.719\" y=\"27\" textLength=\"17.964001\">ella<\/tspan><\/text><path d=\"M 120 300 L 160 340 L 120 380 L 80 340 Z\" fill=\"#ff5900\"\/><path d=\"M 120 300 L 160 340 L 120 380 L 80 340 Z\" stroke=\"#ff5900\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(95.8 321)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.685\" y=\"12\" textLength=\"3.3599999\">I<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"18.865\" y=\"12\" textLength=\"18.521999\">s it <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"4.501\" y=\"27\" textLength=\"4.368\">r<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.773\" y=\"27\" textLength=\"36.726002\">aining?<\/tspan><\/text><rect x=\"260\" y=\"315\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"260\" y=\"315\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(265 325)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"9.302\" y=\"12\" textLength=\"54.468\">Leave the <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"19.139\" y=\"27\" textLength=\"31.722\">house<\/tspan><\/text><circle cx=\"25\" cy=\"340\" r=\"25.00004\" fill=\"#7b188f\"\/><circle cx=\"25\" cy=\"340\" r=\"25.00004\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\"\/><text transform=\"translate(10 332.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"2.412\" y=\"12\" textLength=\"6.5100002\">S<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.652\" y=\"12\" textLength=\"18.936001\">tart<\/tspan><\/text><rect x=\"170\" y=\"380\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"170\" y=\"380\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(175 397.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.618\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"14.336\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"26.054\" y=\"12\" textLength=\"31.104\">e a ha<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"57.08\" y=\"12\" textLength=\"4.302\">t<\/tspan><\/text><text transform=\"translate(96.9012 382.9551)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".25\" y=\"12\" textLength=\"13.5\">no<\/tspan><\/text><path d=\"M 250 405 L 300 404.91018 L 300 378.9\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><\/g><\/g><\/svg>\n\n<p>If the user says <code data-lang=\"txt\">yes<\/code> it is raining, then the program should say to take an umbrella, but otherwise it should say to put on a hat.<\/p>\n\n<p>What we want is an extra part to the <code data-lang=\"py3\">if<\/code> statement which is only run when the <em>condition<\/em> is <code data-lang=\"py3\">False<\/code>.<\/p>\n\n\n"
                }
              ],
              "layout":0,
              "title":"Decisions with two options",
              "notes_rendered":"",
              "content_rendered":"<p>All of the examples so far have done something when a condition is <code data-lang=\"py3\">True<\/code>, but nothing when the condition is <code data-lang=\"py3\">False<\/code>.\nIn the real world we often want to do one thing when a condition is <code data-lang=\"py3\">True<\/code> and do something different when a condition is <code data-lang=\"py3\">False<\/code>.<\/p>\n\n<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xl=\"http:\/\/www.w3.org\/1999\/xlink\" version=\"1.1\" viewBox=\"-2 248 344 184\" width=\"344pt\" height=\"184pt\" style=\"position: relative; display: block; margin: 0 auto; width: 90%\"><defs><marker orient=\"auto\" overflow=\"visible\" markerUnits=\"strokeWidth\" id=\"FilledArrow_Marker\" viewBox=\"-1 -3 7 6\" markerWidth=\"7\" markerHeight=\"6\" color=\"black\"><g><path d=\"M 4.8000002 0 L 0 -1.8000001 L 0 1.8000001 Z\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\"\/><\/g><\/marker><font-face font-family=\"Lato\" font-size=\"12\" panose-1=\"2 15 5 2 2 2 4 3 2 3\" units-per-em=\"1000\" underline-position=\"-51.5\" underline-thickness=\"97\" slope=\"0\" x-height=\"514\" cap-height=\"724\" ascent=\"986.9995\" descent=\"-212.99744\" font-weight=\"500\"><font-face-src><font-face-name name=\"Lato-Regular\"\/><\/font-face-src><\/font-face><\/defs><g stroke=\"none\" stroke-opacity=\"1\" stroke-dasharray=\"none\" fill=\"none\" fill-opacity=\"1\"><g><path d=\"M 120 380 L 120 405 L 157.5 405\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><line x1=\"50.500013\" y1=\"340\" x2=\"66.1\" y2=\"340\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><path d=\"M 120 300 L 120 275 L 157.1 275\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(94.5 280.04491)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".62619825\" y=\"12\" textLength=\"6.186\">y<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\"6.6441982\" y=\"12\" textLength=\"11.5319996\">es<\/tspan><\/text><path d=\"M 250 275 L 300 275 L 300 300\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><rect x=\"170\" y=\"250\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"170\" y=\"250\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(175 260)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.248\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"20.966\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"32.684\" y=\"12\" textLength=\"22.068001\">e an<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"12.317\" y=\"27\" textLength=\"27.648\">umbr<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"39.719\" y=\"27\" textLength=\"17.964001\">ella<\/tspan><\/text><path d=\"M 120 300 L 160 340 L 120 380 L 80 340 Z\" fill=\"#ff5900\"\/><path d=\"M 120 300 L 160 340 L 120 380 L 80 340 Z\" stroke=\"#ff5900\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(95.8 321)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.685\" y=\"12\" textLength=\"3.3599999\">I<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"18.865\" y=\"12\" textLength=\"18.521999\">s it <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"4.501\" y=\"27\" textLength=\"4.368\">r<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.773\" y=\"27\" textLength=\"36.726002\">aining?<\/tspan><\/text><rect x=\"260\" y=\"315\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"260\" y=\"315\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(265 325)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"9.302\" y=\"12\" textLength=\"54.468\">Leave the <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"19.139\" y=\"27\" textLength=\"31.722\">house<\/tspan><\/text><circle cx=\"25\" cy=\"340\" r=\"25.00004\" fill=\"#7b188f\"\/><circle cx=\"25\" cy=\"340\" r=\"25.00004\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\"\/><text transform=\"translate(10 332.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"2.412\" y=\"12\" textLength=\"6.5100002\">S<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.652\" y=\"12\" textLength=\"18.936001\">tart<\/tspan><\/text><rect x=\"170\" y=\"380\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"170\" y=\"380\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(175 397.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.618\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"14.336\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"26.054\" y=\"12\" textLength=\"31.104\">e a ha<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"57.08\" y=\"12\" textLength=\"4.302\">t<\/tspan><\/text><text transform=\"translate(96.9012 382.9551)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".25\" y=\"12\" textLength=\"13.5\">no<\/tspan><\/text><path d=\"M 250 405 L 300 404.91018 L 300 378.9\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><\/g><\/g><\/svg>\n\n<p>If the user says <code data-lang=\"txt\">yes<\/code> it is raining, then the program should say to take an umbrella, but otherwise it should say to put on a hat.<\/p>\n\n<p>What we want is an extra part to the <code data-lang=\"py3\">if<\/code> statement which is only run when the <em>condition<\/em> is <code data-lang=\"py3\">False<\/code>.<\/p>\n\n\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>In Python the <code data-lang=\"py3\">else<\/code> keyword specifies the steps to follow if the condition is <code data-lang=\"py3\">False<\/code> (in this case if it's <strong>not<\/strong> raining).<\/p>\n\n<p>If the user says <code data-lang=\"txt\">yes<\/code> it is raining then the first <em>block<\/em> is executed, otherwise, the second <em>block<\/em> is executed instead:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g1-if-it-isnt-raining-0\"><code data-lang=\"py3\">\nraining = input('Is it raining? ')\nif raining == 'yes':\n  print('Pick up an umbrella.')\nelse:\n  print('Put on a hat.')\n<\/code><\/pre>\n<p>Here, either the first or second <code data-lang=\"py3\">print<\/code> statement will be executed but not both. Notice the <code data-lang=\"py3\">else<\/code> keyword must be followed by a <code data-lang=\"py3\">:<\/code> character, just like the <code data-lang=\"py3\">if<\/code> statement.<\/p>\n"
                }
              ],
              "layout":0,
              "title":"If it isn't raining...",
              "notes_rendered":"",
              "content_rendered":"<p>In Python the <code data-lang=\"py3\">else<\/code> keyword specifies the steps to follow if the condition is <code data-lang=\"py3\">False<\/code> (in this case if it's <strong>not<\/strong> raining).<\/p>\n\n<p>If the user says <code data-lang=\"txt\">yes<\/code> it is raining then the first <em>block<\/em> is executed, otherwise, the second <em>block<\/em> is executed instead:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g1-if-it-isnt-raining-0\"><code data-lang=\"py3\">\nraining = input('Is it raining? ')\nif raining == 'yes':\n  print('Pick up an umbrella.')\nelse:\n  print('Put on a hat.')\n<\/code><\/pre>\n<p>Here, either the first or second <code data-lang=\"py3\">print<\/code> statement will be executed but not both. Notice the <code data-lang=\"py3\">else<\/code> keyword must be followed by a <code data-lang=\"py3\">:<\/code> character, just like the <code data-lang=\"py3\">if<\/code> statement.<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Problem: Preferred Pokemon",
              "purpose":"",
              "problem":"py3-preferred-pokemon-favourite",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Protect Your Eyes",
              "purpose":"",
              "problem":"aca-py3-light-sensitivity",
              "type":1
            }
          ],
          "title":"Decisions with two options"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>So far we have only checked whether two things are equal. However, there are other ways to compare things (particularly when we are using numbers). We can use the following <em>comparison operators<\/em> in <code data-lang=\"py3\">if<\/code> statements:<\/p>\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr><th>Operation<\/th><th>Operator<\/th><\/tr>\n  <\/thead>\n  <tbody>\n    <tr><td>equal to<\/td><td><code data-lang=\"py3\">==<\/code><\/td><\/tr>\n    <tr><td>not equal to<\/td><td><code data-lang=\"py3\">!=<\/code><\/td><\/tr>\n    <tr><td>less than<\/td><td><code data-lang=\"py3\">&lt;<\/code><\/td><\/tr>\n    <tr><td>less than or equal to<\/td><td><code data-lang=\"py3\">&lt;=<\/code><\/td><\/tr>\n    <tr><td>greater than<\/td><td><code data-lang=\"py3\">&gt;<\/code><\/td><\/tr>\n    <tr><td>greater than or equal to<\/td><td><code data-lang=\"py3\">&gt;=<\/code><\/td><\/tr>\n  <\/tbody>\n<\/table>\n\n<p>You can use a <code data-lang=\"py3\">print<\/code> statement to test these operators in conditional expressions:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"boolean-testing-for-control1\"><code data-lang=\"py3\">\nx = 3\nprint(x &lt; 10)\n<\/code><\/pre>\n\n<p>This prints <code data-lang=\"py3\">True<\/code> because 3 is less than 10.<\/p>\n<pre class=\"js-editor\" data-eg-id=\"boolean-testing-for-control2\"><code data-lang=\"py3\">\nx = 3\nprint(x &gt; 10)\n<\/code><\/pre>\n<p>This prints <code data-lang=\"py3\">False<\/code> because 3 is not greater than 10.<\/p>"
                }
              ],
              "layout":0,
              "title":"How do we compare things?",
              "notes_rendered":"",
              "content_rendered":"<p>So far we have only checked whether two things are equal. However, there are other ways to compare things (particularly when we are using numbers). We can use the following <em>comparison operators<\/em> in <code data-lang=\"py3\">if<\/code> statements:<\/p>\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr><th>Operation<\/th><th>Operator<\/th><\/tr>\n  <\/thead>\n  <tbody>\n    <tr><td>equal to<\/td><td><code data-lang=\"py3\">==<\/code><\/td><\/tr>\n    <tr><td>not equal to<\/td><td><code data-lang=\"py3\">!=<\/code><\/td><\/tr>\n    <tr><td>less than<\/td><td><code data-lang=\"py3\">&lt;<\/code><\/td><\/tr>\n    <tr><td>less than or equal to<\/td><td><code data-lang=\"py3\">&lt;=<\/code><\/td><\/tr>\n    <tr><td>greater than<\/td><td><code data-lang=\"py3\">&gt;<\/code><\/td><\/tr>\n    <tr><td>greater than or equal to<\/td><td><code data-lang=\"py3\">&gt;=<\/code><\/td><\/tr>\n  <\/tbody>\n<\/table>\n\n<p>You can use a <code data-lang=\"py3\">print<\/code> statement to test these operators in conditional expressions:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"boolean-testing-for-control1\"><code data-lang=\"py3\">\nx = 3\nprint(x &lt; 10)\n<\/code><\/pre>\n\n<p>This prints <code data-lang=\"py3\">True<\/code> because 3 is less than 10.<\/p>\n<pre class=\"js-editor\" data-eg-id=\"boolean-testing-for-control2\"><code data-lang=\"py3\">\nx = 3\nprint(x &gt; 10)\n<\/code><\/pre>\n<p>This prints <code data-lang=\"py3\">False<\/code> because 3 is not greater than 10.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Let's try some more examples to demonstrate how conditional operators work. Firstly, we have less than or equal to (<code data-lang=\"py3\">&lt;=<\/code>):<\/p>\n<pre class=\"js-editor\" data-eg-id=\"op-lte\"><code data-lang=\"py3\">\nx = 5\nprint(x &lt;= 10)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"op-lte\"><code data-lang=\"py3\">\n<o>True\n<\/o>\n<\/code><\/pre>\n<p>Any value of <code data-lang=\"py3\">x<\/code> up to and including 10 will result in <code data-lang=\"py3\">True<\/code>. Any value of <code data-lang=\"py3\">x<\/code> greater than 10 will result in <code data-lang=\"py3\">False<\/code>. The opposite is true for greater than or equal to (<code data-lang=\"py3\">&gt;=<\/code>).<\/p>\n\n<p>Another important operator is not equal to (<code data-lang=\"py3\">!=<\/code>):<\/p>\n<pre class=\"js-editor\" data-eg-id=\"op-gte\"><code data-lang=\"py3\">\nx = 5\nprint(x != 10)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"op-gte\"><code data-lang=\"py3\">\n<o>True\n<\/o>\n<\/code><\/pre>\n<p>Notice this program prints <code data-lang=\"py3\">True<\/code> because 5 is not equal to 10. This can be a bit confusing - see what happens if you change the value of <code data-lang=\"py3\">x<\/code> to 10.<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Experimenting with comparison",
              "notes_rendered":"",
              "content_rendered":"<p>Let's try some more examples to demonstrate how conditional operators work. Firstly, we have less than or equal to (<code data-lang=\"py3\">&lt;=<\/code>):<\/p>\n<pre class=\"js-editor\" data-eg-id=\"op-lte\"><code data-lang=\"py3\">\nx = 5\nprint(x &lt;= 10)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"op-lte\"><code data-lang=\"py3\">\n<o>True\n<\/o>\n<\/code><\/pre>\n<p>Any value of <code data-lang=\"py3\">x<\/code> up to and including 10 will result in <code data-lang=\"py3\">True<\/code>. Any value of <code data-lang=\"py3\">x<\/code> greater than 10 will result in <code data-lang=\"py3\">False<\/code>. The opposite is true for greater than or equal to (<code data-lang=\"py3\">&gt;=<\/code>).<\/p>\n\n<p>Another important operator is not equal to (<code data-lang=\"py3\">!=<\/code>):<\/p>\n<pre class=\"js-editor\" data-eg-id=\"op-gte\"><code data-lang=\"py3\">\nx = 5\nprint(x != 10)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"op-gte\"><code data-lang=\"py3\">\n<o>True\n<\/o>\n<\/code><\/pre>\n<p>Notice this program prints <code data-lang=\"py3\">True<\/code> because 5 is not equal to 10. This can be a bit confusing - see what happens if you change the value of <code data-lang=\"py3\">x<\/code> to 10.<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Now we can bring together everything we've learned in this section, and write programs that make decisions based on numerical input.\n  The example below makes two decisions based on the value in <code data-lang=\"py3\">x<\/code>:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g2-making-decisions-with-numbers-0\"><code data-lang=\"py3\">x = 3\nif x &lt;= 3:\n  print('x is less than or equal to three')\nelse:\n  print('x is greater than three')\n<\/code><\/pre>\n<p>\n  Try assigning different values to <code data-lang=\"py3\">x<\/code> to change how the program executes.\n<\/p>\n<p>\n  We could do something similar, but with user input:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g2-making-decisions-with-numbers-1\"><code data-lang=\"py3\">height = int(input('How many cm tall are you? '))\nif height == 157:\n  print('You are the same height as Kylie Minogue.')\nelse:\n  print('You are not the same height as Kylie Minogue.')\n<\/code><\/pre>\n<p>\n  Remember you have to convert input to an integer using the <code data-lang=\"py3\">int<\/code> function if you want to do numerical comparisons.\n<\/p>"
                }
              ],
              "layout":0,
              "title":"Making decisions with numbers",
              "notes_rendered":"",
              "content_rendered":"<p>\n  Now we can bring together everything we've learned in this section, and write programs that make decisions based on numerical input.\n  The example below makes two decisions based on the value in <code data-lang=\"py3\">x<\/code>:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g2-making-decisions-with-numbers-0\"><code data-lang=\"py3\">x = 3\nif x &lt;= 3:\n  print('x is less than or equal to three')\nelse:\n  print('x is greater than three')\n<\/code><\/pre>\n<p>\n  Try assigning different values to <code data-lang=\"py3\">x<\/code> to change how the program executes.\n<\/p>\n<p>\n  We could do something similar, but with user input:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g2-making-decisions-with-numbers-1\"><code data-lang=\"py3\">height = int(input('How many cm tall are you? '))\nif height == 157:\n  print('You are the same height as Kylie Minogue.')\nelse:\n  print('You are not the same height as Kylie Minogue.')\n<\/code><\/pre>\n<p>\n  Remember you have to convert input to an integer using the <code data-lang=\"py3\">int<\/code> function if you want to do numerical comparisons.\n<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Soil Sensor",
              "purpose":"",
              "problem":"py3-soil-sensor",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Buy me a pony",
              "purpose":"",
              "problem":"aca-py3-buy-me-a-pony",
              "type":1
            }
          ],
          "title":"Decisions about numbers"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  The body of an <code data-lang=\"py3\">if<\/code> statement may contain another <code data-lang=\"py3\">if<\/code> statement.\n  This is called <em>nesting<\/em>.\n<\/p>\n<p>\n  In the program below we have indented one <code data-lang=\"py3\">if<\/code> statement inside another one.\n  That means the second condition will only be tested if the first condition is <code data-lang=\"py3\">True<\/code>.\n<\/p> \n<pre class=\"js-editor\" data-eg-id=\"eg-g3-decisions-within-decisions-0\"><code data-lang=\"py3\">x = 2\nif x &lt;= 3:\n  print('x is less than or equal to three')\n  if x &gt;= 3:\n    print('x is greater than or equal to three')\n<\/code><\/pre>\n<p>\n  There is only one value of <code data-lang=\"py3\">x<\/code> that will cause both of these messages to be printed.\n  Experiment to work out what it is.\n<\/p>"
                }
              ],
              "layout":0,
              "title":"Decisions within decisions",
              "notes_rendered":"",
              "content_rendered":"<p>\n  The body of an <code data-lang=\"py3\">if<\/code> statement may contain another <code data-lang=\"py3\">if<\/code> statement.\n  This is called <em>nesting<\/em>.\n<\/p>\n<p>\n  In the program below we have indented one <code data-lang=\"py3\">if<\/code> statement inside another one.\n  That means the second condition will only be tested if the first condition is <code data-lang=\"py3\">True<\/code>.\n<\/p> \n<pre class=\"js-editor\" data-eg-id=\"eg-g3-decisions-within-decisions-0\"><code data-lang=\"py3\">x = 2\nif x &lt;= 3:\n  print('x is less than or equal to three')\n  if x &gt;= 3:\n    print('x is greater than or equal to three')\n<\/code><\/pre>\n<p>\n  There is only one value of <code data-lang=\"py3\">x<\/code> that will cause both of these messages to be printed.\n  Experiment to work out what it is.\n<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  If you want to consider each case separately, we need to test more conditions.\n  One way of doing this would be using nesting, as shown below:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g3-decisions-with-multiple-options-0\"><code data-lang=\"py3\">\nx = 5\nif x &lt; 3:\n  print('x is less than three')\nelse:\n  if x == 3:\n    print('x is equal to three')\n  else:\n    print('x is greater than three')\n<\/code><\/pre>\n<p>\n  Another, neater, way of doing this is to use an <code data-lang=\"py3\">elif<\/code> clause.\n  <code data-lang=\"py3\">elif<\/code> is an abbreviation for <code data-lang=\"py3\">else<\/code> and <code data-lang=\"py3\">if<\/code> together.\n  It works like this:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g3-decisions-with-multiple-options-1\"><code data-lang=\"py3\">x = 5\nif x &lt; 3:\n  print('x is less than three')\nelif x == 3:\n  print('x is equal to three')\nelse:\n  print('x is greater than three')\n<\/code><\/pre>\n<p>\n  You can test as many cases as you want by using multiple <code data-lang=\"py3\">elif<\/code>s.\n<\/p>"
                }
              ],
              "layout":0,
              "title":"Decisions with multiple options",
              "notes_rendered":"",
              "content_rendered":"<p>\n  If you want to consider each case separately, we need to test more conditions.\n  One way of doing this would be using nesting, as shown below:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g3-decisions-with-multiple-options-0\"><code data-lang=\"py3\">\nx = 5\nif x &lt; 3:\n  print('x is less than three')\nelse:\n  if x == 3:\n    print('x is equal to three')\n  else:\n    print('x is greater than three')\n<\/code><\/pre>\n<p>\n  Another, neater, way of doing this is to use an <code data-lang=\"py3\">elif<\/code> clause.\n  <code data-lang=\"py3\">elif<\/code> is an abbreviation for <code data-lang=\"py3\">else<\/code> and <code data-lang=\"py3\">if<\/code> together.\n  It works like this:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g3-decisions-with-multiple-options-1\"><code data-lang=\"py3\">x = 5\nif x &lt; 3:\n  print('x is less than three')\nelif x == 3:\n  print('x is equal to three')\nelse:\n  print('x is greater than three')\n<\/code><\/pre>\n<p>\n  You can test as many cases as you want by using multiple <code data-lang=\"py3\">elif<\/code>s.\n<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  We can now handle decisions with many options, like planets:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g3-interplanetary-visitor-0\"><code data-lang=\"py3\">planet = input('What planet are you from? ')\nif planet == 'Earth':\n  print('Hello Earthling friend.')\nelif planet == 'Mars':\n  print('Hello Martian friend.')\nelif planet == 'Jupiter':\n  print('Hello Jovian friend.')\nelif planet == 'Pluto':\n  print('Pluto is not a planet!')\nelse:\n  print('I do not know your planet.')\n<\/code><\/pre>\n<p>\n  You could add as many <code data-lang=\"py3\">elif<\/code> clauses as you like, to deal with different cases.\n<\/p>"
                }
              ],
              "layout":0,
              "title":"Interplanetary visitor",
              "notes_rendered":"",
              "content_rendered":"<p>\n  We can now handle decisions with many options, like planets:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g3-interplanetary-visitor-0\"><code data-lang=\"py3\">planet = input('What planet are you from? ')\nif planet == 'Earth':\n  print('Hello Earthling friend.')\nelif planet == 'Mars':\n  print('Hello Martian friend.')\nelif planet == 'Jupiter':\n  print('Hello Jovian friend.')\nelif planet == 'Pluto':\n  print('Pluto is not a planet!')\nelse:\n  print('I do not know your planet.')\n<\/code><\/pre>\n<p>\n  You could add as many <code data-lang=\"py3\">elif<\/code> clauses as you like, to deal with different cases.\n<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Portuguese Phrases",
              "purpose":"",
              "problem":"py3-portuguese-phrases",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Whose chair is whose?",
              "purpose":"",
              "problem":"aca-py3-goldilocks",
              "type":1
            }
          ],
          "title":"Making complex decisions"
        }
      ],
      "title":"Making decisions",
      "label":"aca-python-yr78-decisions",
      "updated_at":"2017-11-15T06:41:05.676686+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nNow that we've learnt how to repeat things, we can make our games much more detailed and fun to play!\n\nLet's revisit the Taboo and Word Chain questions, and turn them into fully-fledged games."
                }
              ],
              "layout":0,
              "title":"Making simple games",
              "notes_rendered":"",
              "content_rendered":"<p>Now that we've learnt how to repeat things, we can make our games much more detailed and fun to play!<\/p>\n<p>Let's revisit the Taboo and Word Chain questions, and turn them into fully-fledged games.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Questions?",
              "purpose":"",
              "problem":"py3-question-game",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Taboo",
              "purpose":"",
              "problem":"py3-taboo-loops",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Word Chain",
              "purpose":"",
              "problem":"py3-word-chain-loop",
              "type":1
            }
          ],
          "title":"More word games"
        }
      ],
      "title":"Project 3",
      "label":"aca-python-yr78-project3",
      "updated_at":"2017-11-15T06:41:29.810849+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nWe've now learnt how to make lots of quite complex word games! Nice work!\n\nFor our last project, we're going to put everything we've learnt together to make a chatterbot, which is a robot that can reply to your messages in a seemingly intelligent way.\n\nWe'll see if we can make our chatbot smart enough that it might just be able to trick a human into thinking it was alive. \n\nThe question of whether or not you be able to tell if you were texting your friend or a computer is trickier than you might think!\n"
                }
              ],
              "layout":0,
              "title":"Making simple games",
              "notes_rendered":"",
              "content_rendered":"<p>We've now learnt how to make lots of quite complex word games! Nice work!<\/p>\n<p>For our last project, we're going to put everything we've learnt together to make a chatterbot, which is a robot that can reply to your messages in a seemingly intelligent way.<\/p>\n<p>We'll see if we can make our chatbot smart enough that it might just be able to trick a human into thinking it was alive.<\/p>\n<p>The question of whether or not you be able to tell if you were texting your friend or a computer is trickier than you might think!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Capt Featherbot 1",
              "purpose":"",
              "problem":"py3-chatbot-capt-featherbot-1",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Capt Featherbot 2",
              "purpose":"",
              "problem":"py3-chatbot-capt-featherbot-2",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Capt Featherbot 3",
              "purpose":"",
              "problem":"py3-chatbot-capt-featherbot-3",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Capt Featherbot 4",
              "purpose":"",
              "problem":"py3-chatbot-capt-featherbot-4",
              "type":1
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\n**Arrrrr! I be impressed!**\n\nExcellent work on finishing the project, and the course! You've learnt how to solve problems with code, and make a cheeky chatbot as well!\n\nWe hope you enjoyed this course, and can't wait to see what swashbuckling adventures await you! "
                }
              ],
              "layout":0,
              "title":"Congratulations, me hearties!",
              "notes_rendered":"",
              "content_rendered":"<p><strong>Arrrrr! I be impressed!<\/strong><\/p>\n<p>Excellent work on finishing the project, and the course! You've learnt how to solve problems with code, and make a cheeky chatbot as well!<\/p>\n<p>We hope you enjoyed this course, and can't wait to see what swashbuckling adventures await you!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Chatbot Playground!",
              "purpose":"",
              "problem":"py3-chatbot-capt-playground",
              "type":1
            }
          ],
          "title":"More word games"
        }
      ],
      "title":"Project 4: Putting it all together",
      "label":"aca-python-yr78-project4",
      "updated_at":"2017-11-15T06:41:39.327605+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\nTraditionally, the first program you write when learning a new programming language is <a href=\"https:\/\/en.wikipedia.org\/wiki\/Hello_world_program\" target=\"_blank\">Hello, World!<\/a>\nLet's write it in Python now:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-print-hello-world\"><code data-lang=\"py3\">print('Hello, World!')<\/code><\/pre>\n\n<p>\nYou can edit and run any example in Grok by clicking the <span class=\"icon-play4\" style=\"font-size: 16px\"><\/span> button. Try changing <code data-lang=\"py3\">'Hello, World!'<\/code> to <code data-lang=\"py3\">'Hi!'<\/code>, and running it again.\n<\/p>\n\n<p>\n <strong>Congratulations, your first Python program worked!<\/strong>\n<\/p>\n\n<p>\nClick on the <span class=\"icon-undo2\" style=\"font-size: 16px\"><\/span> button to swap the code back to the original. Click it again to swap back to your version.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Our biggest hint!<\/h2>\n  <p>\n    Try running and modifying (messing around with even!) <strong>every<\/strong> example in these notes to make sure you understand it.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "title":"Hello, World!",
              "notes_rendered":"",
              "content_rendered":"<p>\nTraditionally, the first program you write when learning a new programming language is <a href=\"https:\/\/en.wikipedia.org\/wiki\/Hello_world_program\" target=\"_blank\">Hello, World!<\/a>\nLet's write it in Python now:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-print-hello-world\"><code data-lang=\"py3\">print('Hello, World!')<\/code><\/pre>\n\n<p>\nYou can edit and run any example in Grok by clicking the <span class=\"icon-play4\" style=\"font-size: 16px\"><\/span> button. Try changing <code data-lang=\"py3\">'Hello, World!'<\/code> to <code data-lang=\"py3\">'Hi!'<\/code>, and running it again.\n<\/p>\n\n<p>\n <strong>Congratulations, your first Python program worked!<\/strong>\n<\/p>\n\n<p>\nClick on the <span class=\"icon-undo2\" style=\"font-size: 16px\"><\/span> button to swap the code back to the original. Click it again to swap back to your version.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Our biggest hint!<\/h2>\n  <p>\n    Try running and modifying (messing around with even!) <strong>every<\/strong> example in these notes to make sure you understand it.\n  <\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  When you talk, you need to follow certain rules to be understood, called the <em>grammar<\/em> or <em>syntax<\/em> of the language.\n<\/p>\n\n<p>\n  You can't just use any words wherever you like. <em>like programming I<\/em> \u2013 doesn't make sense, but <em>I like programming<\/em> does!\n<\/p>\n\n<p>\n  Programming languages have syntax too. Python is pretty easy to learn because it has very simple syntax.\n<\/p>\n\n<p>\n  Have you noticed that the program is multi-coloured?  The colourful <em>syntax highlighting<\/em> helps you code correctly:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"python-hello-world-highlight\"><code data-lang=\"py3\">\nprint('Hello, World!')\n<\/code><\/pre>\n\n<p>\n  Purple tells you that <code data-lang=\"py3\">print<\/code> is a <em>function<\/em> and green tells you that <code data-lang=\"py3\">'Hello, World!'<\/code> is a <em>string<\/em>, which we'll talk about in a moment.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Watch the colours!<\/h2>\n  <p>\n    Pay attention to these colours as you code. When they are not what you expect, there's often a typo that needs fixing.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "title":"How to write programs",
              "notes_rendered":"",
              "content_rendered":"<p>\n  When you talk, you need to follow certain rules to be understood, called the <em>grammar<\/em> or <em>syntax<\/em> of the language.\n<\/p>\n\n<p>\n  You can't just use any words wherever you like. <em>like programming I<\/em> \u2013 doesn't make sense, but <em>I like programming<\/em> does!\n<\/p>\n\n<p>\n  Programming languages have syntax too. Python is pretty easy to learn because it has very simple syntax.\n<\/p>\n\n<p>\n  Have you noticed that the program is multi-coloured?  The colourful <em>syntax highlighting<\/em> helps you code correctly:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"python-hello-world-highlight\"><code data-lang=\"py3\">\nprint('Hello, World!')\n<\/code><\/pre>\n\n<p>\n  Purple tells you that <code data-lang=\"py3\">print<\/code> is a <em>function<\/em> and green tells you that <code data-lang=\"py3\">'Hello, World!'<\/code> is a <em>string<\/em>, which we'll talk about in a moment.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Watch the colours!<\/h2>\n  <p>\n    Pay attention to these colours as you code. When they are not what you expect, there's often a typo that needs fixing.\n  <\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\nThe Python <em>interpreter<\/em> is a program that reads and runs your code. Just like your English teacher, it will complain if you make spelling or grammar errors, e.g. <a href=\"https:\/\/en.wikipedia.org\/wiki\/I_Can_Has_Cheezburger%3F\"  target=\"_blank\" data-toggle=\"tooltip\" data-placement=\"top\" data-original-title=\"English translation: can I have a cheeseburger?\"><em>i can has cheezburger?<\/em><\/a>\n<\/p>\n\n<p>\nUnlike people, the interpreter can't understand bad grammar at all! Instead, it will stop with an error, e.g. <code data-lang=\"err\">SyntaxError<\/code> or <code data-lang=\"err\">NameError<\/code>.\n<\/p>\n\n<p>\nHere we accidentally put <code data-lang=\"py3\">write<\/code> instead of <code data-lang=\"py3\">print<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"name-error-write\"><code data-lang=\"py3\">write('Hi There')\n<\/code><\/pre>\n\n<p>Python doesn't know they mean the same thing, so gives an error:<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"name-error-write\"><code data-lang=\"py3\"><o>Traceback (most recent call last):\n  File \"program.py\", line 1, in &lt;module>\n    write('Hi There')\nNameError: name 'write' is not defined\n<\/o>\n<\/code><\/pre>\n\n<p>\nPython displays the error (it does not recognise the name <code data-lang=\"py3\">write<\/code>) in red, including the type (<code data-lang=\"err\">NameError<\/code>) and where it occurred (<code data-lang=\"err\">line 1<\/code>).\n<\/p>\n\n<aside class=\"info\">\n  <h2>Syntax highlighting saves the day!<\/h2>\n  <p>\n    Since <code data-lang=\"py3\">write<\/code> is not a builtin function, it didn't go purple like <code data-lang=\"py3\">print<\/code> does.  The highlighting can help you catch syntax errors.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "title":"What happens when things go wrong?",
              "notes_rendered":"",
              "content_rendered":"<p>\nThe Python <em>interpreter<\/em> is a program that reads and runs your code. Just like your English teacher, it will complain if you make spelling or grammar errors, e.g. <a href=\"https:\/\/en.wikipedia.org\/wiki\/I_Can_Has_Cheezburger%3F\"  target=\"_blank\" data-toggle=\"tooltip\" data-placement=\"top\" data-original-title=\"English translation: can I have a cheeseburger?\"><em>i can has cheezburger?<\/em><\/a>\n<\/p>\n\n<p>\nUnlike people, the interpreter can't understand bad grammar at all! Instead, it will stop with an error, e.g. <code data-lang=\"err\">SyntaxError<\/code> or <code data-lang=\"err\">NameError<\/code>.\n<\/p>\n\n<p>\nHere we accidentally put <code data-lang=\"py3\">write<\/code> instead of <code data-lang=\"py3\">print<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"name-error-write\"><code data-lang=\"py3\">write('Hi There')\n<\/code><\/pre>\n\n<p>Python doesn't know they mean the same thing, so gives an error:<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"name-error-write\"><code data-lang=\"py3\"><o>Traceback (most recent call last):\n  File \"program.py\", line 1, in &lt;module>\n    write('Hi There')\nNameError: name 'write' is not defined\n<\/o>\n<\/code><\/pre>\n\n<p>\nPython displays the error (it does not recognise the name <code data-lang=\"py3\">write<\/code>) in red, including the type (<code data-lang=\"err\">NameError<\/code>) and where it occurred (<code data-lang=\"err\">line 1<\/code>).\n<\/p>\n\n<aside class=\"info\">\n  <h2>Syntax highlighting saves the day!<\/h2>\n  <p>\n    Since <code data-lang=\"py3\">write<\/code> is not a builtin function, it didn't go purple like <code data-lang=\"py3\">print<\/code> does.  The highlighting can help you catch syntax errors.\n  <\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\nIf you get an error, don't panic, they happen all the time \u2014 we'll learn to fix them! Luckily lots of the errors you will make are easy to fix. Run the following example with an error in it:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"error-no-closing-quote\"><code data-lang=\"py3\">print('Hello)\n<\/code><\/pre>\n\n<p>\n  We forgot to end the string <code data-lang=\"py3\">'Hello<\/code> with a quote. Python complains with a <code data-lang=\"err\">SyntaxError<\/code> that it reached the <em>end of line<\/em> (EOL) without finding another quote. <strong>Fix it by adding a quote right after <code data-lang=\"str\">Hello<\/code>.<\/strong>\n<\/p>\n\n<p>Here's another broken program:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"error-no-brackets\"><code data-lang=\"py3\">print 'Hello'\n<\/code><\/pre>\n\n<p>\nThis time, we forgot the round brackets around what we wanted to <code data-lang=\"py3\">print<\/code>. Again, the interpreter say there is a <code data-lang=\"err\">SyntaxError<\/code> on line 1.\n<\/p>\n\n<aside class=\"info\">\n<h2>Python can't always find the error<\/h2>\n<p>\nThe Python interpreter attempts to pinpoint the error, but it doesn't always get it right. If the highlighted bit doesn't seem like an error try looking earlier in the line or on the previous line.\n<\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "title":"Help! I have a Syntax Error",
              "notes_rendered":"",
              "content_rendered":"<p>\nIf you get an error, don't panic, they happen all the time \u2014 we'll learn to fix them! Luckily lots of the errors you will make are easy to fix. Run the following example with an error in it:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"error-no-closing-quote\"><code data-lang=\"py3\">print('Hello)\n<\/code><\/pre>\n\n<p>\n  We forgot to end the string <code data-lang=\"py3\">'Hello<\/code> with a quote. Python complains with a <code data-lang=\"err\">SyntaxError<\/code> that it reached the <em>end of line<\/em> (EOL) without finding another quote. <strong>Fix it by adding a quote right after <code data-lang=\"str\">Hello<\/code>.<\/strong>\n<\/p>\n\n<p>Here's another broken program:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"error-no-brackets\"><code data-lang=\"py3\">print 'Hello'\n<\/code><\/pre>\n\n<p>\nThis time, we forgot the round brackets around what we wanted to <code data-lang=\"py3\">print<\/code>. Again, the interpreter say there is a <code data-lang=\"err\">SyntaxError<\/code> on line 1.\n<\/p>\n\n<aside class=\"info\">\n<h2>Python can't always find the error<\/h2>\n<p>\nThe Python interpreter attempts to pinpoint the error, but it doesn't always get it right. If the highlighted bit doesn't seem like an error try looking earlier in the line or on the previous line.\n<\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Hello, World!",
              "purpose":"",
              "problem":"py3-hello-world",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Therefore I rock!",
              "purpose":"",
              "problem":"aca-py3-therefore-aca",
              "type":1
            }
          ],
          "title":"Writing your first program"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  A <em>string<\/em> (the green messages) can contain any letters, digits, punctuation and spaces that you want, and it can be any length:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-string-chars\"><code data-lang=\"py3\">\nprint('abc ABC 123 @!?.#')\n<\/code><\/pre>\n\n<p>\nThe individual letters, digits, symbols and spaces are called <em>characters<\/em> and the word string is short for <em>string of characters<\/em>.\n<\/p>\n\n<p>\n  What if the character you want to use is a single quote?  Python allows you to use double quotes around strings instead:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-string-double-quote\"><code data-lang=\"py3\">\nprint(\"This message contains 'single quotes'.\")\n<\/code><\/pre>\n\n<aside class=\"info\">\n<h2><code data-lang=\"py3\">print<\/code> adds a newline<\/h2>\n<p>\n  Notice that <code data-lang=\"py3\">print<\/code> also moves the output position (the <em>cursor<\/em>) to the next line (so the output ends on a blank line).  Programmers call this printing a <em>newline<\/em> character after the string.\n<\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "title":"A string of characters",
              "notes_rendered":"",
              "content_rendered":"<p>\n  A <em>string<\/em> (the green messages) can contain any letters, digits, punctuation and spaces that you want, and it can be any length:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-string-chars\"><code data-lang=\"py3\">\nprint('abc ABC 123 @!?.#')\n<\/code><\/pre>\n\n<p>\nThe individual letters, digits, symbols and spaces are called <em>characters<\/em> and the word string is short for <em>string of characters<\/em>.\n<\/p>\n\n<p>\n  What if the character you want to use is a single quote?  Python allows you to use double quotes around strings instead:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-string-double-quote\"><code data-lang=\"py3\">\nprint(\"This message contains 'single quotes'.\")\n<\/code><\/pre>\n\n<aside class=\"info\">\n<h2><code data-lang=\"py3\">print<\/code> adds a newline<\/h2>\n<p>\n  Notice that <code data-lang=\"py3\">print<\/code> also moves the output position (the <em>cursor<\/em>) to the next line (so the output ends on a blank line).  Programmers call this printing a <em>newline<\/em> character after the string.\n<\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  A <em>statement<\/em> is the smallest stand-alone part of a program.  It tells the computer to do something.  Using the <code data-lang=\"py3\">print<\/code> function is an example of a statement.\n<\/p>\n\n<p>\n  Python will run statements in order (unless told otherwise), so to print multiple messages you can use:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-happy-birthday\"><code data-lang=\"py3\">\nprint('Happy Birthday to you!')\nprint('Happy Birthday to you!')\nprint('Happy Birthday dear Python.')\nprint('Happy Birthday to you!')\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Each message is printed on its own line. <strong>Run the example to check!<\/strong>\n<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Using multiple print statements",
              "notes_rendered":"",
              "content_rendered":"<p>\n  A <em>statement<\/em> is the smallest stand-alone part of a program.  It tells the computer to do something.  Using the <code data-lang=\"py3\">print<\/code> function is an example of a statement.\n<\/p>\n\n<p>\n  Python will run statements in order (unless told otherwise), so to print multiple messages you can use:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-happy-birthday\"><code data-lang=\"py3\">\nprint('Happy Birthday to you!')\nprint('Happy Birthday to you!')\nprint('Happy Birthday dear Python.')\nprint('Happy Birthday to you!')\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Each message is printed on its own line. <strong>Run the example to check!<\/strong>\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Writing out a long message many times is a pain.  It would be great if we could just store the message somewhere and reuse it.\n<\/p>\n\n<p>\n  <strong>A <em>variable<\/em> is that place for storing a value so we can use it later.<\/strong>\n<\/p>\n\n<p>\n  Each variable has a <em>name<\/em> which we use to set and get its value.  We create a new variable using an equals sign:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-jolly-good-fellow\"><code data-lang=\"py3\">\nline = \"For she's a jolly good fellow.\"\nprint(line)\nprint(line)\nprint(line)\nprint('And so say all of us!')\n<\/code><\/pre>\n\n<p>\n  The first statement creates a new variable called <code data-lang=\"py3\">line<\/code> (<em>a song line<\/em>) and stores the string <code data-lang=\"str\">For she's a jolly good fellow.<\/code> We then <code data-lang=\"py3\">print<\/code> the\nvalue of the <code data-lang=\"py3\">line<\/code> variable three times.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Don't repeat yourself (DRY)<\/h2>\n  <p>\n    Avoiding repetition makes your code simpler, easier to read and edit, and so just more ... fun!  Variables help avoid repetition.\n  <\/p>\n  <p>\n    Imagine now we're singing to a male.  Because we put the line in a variable, we only need to change <code data-lang=\"str\">she<\/code> into <code data-lang=\"str\">he<\/code> once!\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "title":"Storing things in variables",
              "notes_rendered":"",
              "content_rendered":"<p>\n  Writing out a long message many times is a pain.  It would be great if we could just store the message somewhere and reuse it.\n<\/p>\n\n<p>\n  <strong>A <em>variable<\/em> is that place for storing a value so we can use it later.<\/strong>\n<\/p>\n\n<p>\n  Each variable has a <em>name<\/em> which we use to set and get its value.  We create a new variable using an equals sign:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-jolly-good-fellow\"><code data-lang=\"py3\">\nline = \"For she's a jolly good fellow.\"\nprint(line)\nprint(line)\nprint(line)\nprint('And so say all of us!')\n<\/code><\/pre>\n\n<p>\n  The first statement creates a new variable called <code data-lang=\"py3\">line<\/code> (<em>a song line<\/em>) and stores the string <code data-lang=\"str\">For she's a jolly good fellow.<\/code> We then <code data-lang=\"py3\">print<\/code> the\nvalue of the <code data-lang=\"py3\">line<\/code> variable three times.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Don't repeat yourself (DRY)<\/h2>\n  <p>\n    Avoiding repetition makes your code simpler, easier to read and edit, and so just more ... fun!  Variables help avoid repetition.\n  <\/p>\n  <p>\n    Imagine now we're singing to a male.  Because we put the line in a variable, we only need to change <code data-lang=\"str\">she<\/code> into <code data-lang=\"str\">he<\/code> once!\n  <\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>To join two or more strings together we can use addition, also called <em>concatenation<\/em>. For example, to print <code data-lang=\"py3\">'Harry'<\/code> followed by <code data-lang=\"py3\">'Potter'<\/code>, we can write:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-str-concat-potter\"><code data-lang=\"py3\">\nprint('Harry' + 'Potter')\n<\/code><\/pre>\n\n<p>which gives this (surprising?) output:<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-str-concat-potter\"><code data-lang=\"py3\">\n<o>HarryPotter\n<\/o>\n<\/code><\/pre>\n\n<p>\n  They are added together exactly as they are, with no space!  You need to add the space yourself if you want it:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-str-concat-potter-space\"><code data-lang=\"py3\">\nprint('Harry' + ' ' + 'Potter')\n<\/code><\/pre>\n\n<p>We can also join strings that are stored in variables:<\/p> \n\n<pre class=\"js-editor\" data-eg-id=\"py3-str-concat-muggle-var\"><code data-lang=\"py3\">\nname = 'Vernon Dursley'\nprint(name + ' is a muggle!')\n<\/code><\/pre>\n\n<p>Notice that we included a space in the <code data-lang=\"py3\">' is a muggle!'<\/code>.<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Joining messages together",
              "notes_rendered":"",
              "content_rendered":"<p>To join two or more strings together we can use addition, also called <em>concatenation<\/em>. For example, to print <code data-lang=\"py3\">'Harry'<\/code> followed by <code data-lang=\"py3\">'Potter'<\/code>, we can write:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-str-concat-potter\"><code data-lang=\"py3\">\nprint('Harry' + 'Potter')\n<\/code><\/pre>\n\n<p>which gives this (surprising?) output:<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-str-concat-potter\"><code data-lang=\"py3\">\n<o>HarryPotter\n<\/o>\n<\/code><\/pre>\n\n<p>\n  They are added together exactly as they are, with no space!  You need to add the space yourself if you want it:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-str-concat-potter-space\"><code data-lang=\"py3\">\nprint('Harry' + ' ' + 'Potter')\n<\/code><\/pre>\n\n<p>We can also join strings that are stored in variables:<\/p> \n\n<pre class=\"js-editor\" data-eg-id=\"py3-str-concat-muggle-var\"><code data-lang=\"py3\">\nname = 'Vernon Dursley'\nprint(name + ' is a muggle!')\n<\/code><\/pre>\n\n<p>Notice that we included a space in the <code data-lang=\"py3\">' is a muggle!'<\/code>.<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: I have no homework",
              "purpose":"",
              "problem":"py3-no-homework-variable",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Library Day",
              "purpose":"",
              "problem":"aca-py3-library-day",
              "type":1
            }
          ],
          "title":"Python strings and variables"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Setting the contents of a variable is called <em>assigning<\/em> a value to the variable. Python creates variables by assignment.\n<\/p>\n\n<p>\n  When you assign a new value to an existing variable, it replaces the old contents of the variable:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-change-var-value\"><code data-lang=\"py3\">\ngreeting = 'Hello!'\nprint(greeting)\ngreeting = 'Bonjour!'\nprint(greeting)\n<\/code><\/pre>\n\n<p>\n  The old value in <code data-lang=\"py3\">greeting<\/code> (<code data-lang=\"py3\">'Hello'<\/code>) is replaced with the new value (<code data-lang=\"py3\">'Bonjour!'<\/code>) before the second <code data-lang=\"py3\">print<\/code> statement, producing:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-change-var-value\"><code data-lang=\"py3\">\n<o>Hello!\nBonjour!\n<\/o>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Variables are like files<\/h2>\n  <p>\n    Variables are like files on your computer: they have a name and you can store data in them.  You can look at the contents or overwrite the contents with new data.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "title":"Assigning to a variable",
              "notes_rendered":"",
              "content_rendered":"<p>\n  Setting the contents of a variable is called <em>assigning<\/em> a value to the variable. Python creates variables by assignment.\n<\/p>\n\n<p>\n  When you assign a new value to an existing variable, it replaces the old contents of the variable:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-change-var-value\"><code data-lang=\"py3\">\ngreeting = 'Hello!'\nprint(greeting)\ngreeting = 'Bonjour!'\nprint(greeting)\n<\/code><\/pre>\n\n<p>\n  The old value in <code data-lang=\"py3\">greeting<\/code> (<code data-lang=\"py3\">'Hello'<\/code>) is replaced with the new value (<code data-lang=\"py3\">'Bonjour!'<\/code>) before the second <code data-lang=\"py3\">print<\/code> statement, producing:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-change-var-value\"><code data-lang=\"py3\">\n<o>Hello!\nBonjour!\n<\/o>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Variables are like files<\/h2>\n  <p>\n    Variables are like files on your computer: they have a name and you can store data in them.  You can look at the contents or overwrite the contents with new data.\n  <\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Let's write a program that asks the user for information:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-input-name\"><code data-lang=\"py3\">\nname = input('What is your name? ')\nprint(name)\n<\/code><\/pre>\n\n<p>Run this program. Even if you haven't run any so far, run this one!\n<strong>You will need to type a name and press <kbd>Enter<\/kbd><\/strong>:<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-input-name\"><code data-lang=\"py3\">\n<o>What is your name? <\/o><i>Sandra\n<\/i><o>Sandra\n<\/o>\n<\/code><\/pre>\n\n<p>\n  The program prints the prompt <code data-lang=\"out\">What is your name?<\/code> and waits for the user to type a name and press <kbd>Enter<\/kbd> (also called <kbd>Return<\/kbd>).  The program then prints the name the user entered and stops.\n<\/p>\n\n<p>\n  A <em>prompt<\/em> is a message that tells (or prompts) the user that the program is asking for input (in this case, the user's name).\n<\/p>\n\n<p>\n  <strong>Run it again with a different name.  Then try changing the prompt!<\/strong>\n<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Asking the user a question",
              "notes_rendered":"",
              "content_rendered":"<p>Let's write a program that asks the user for information:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-input-name\"><code data-lang=\"py3\">\nname = input('What is your name? ')\nprint(name)\n<\/code><\/pre>\n\n<p>Run this program. Even if you haven't run any so far, run this one!\n<strong>You will need to type a name and press <kbd>Enter<\/kbd><\/strong>:<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-input-name\"><code data-lang=\"py3\">\n<o>What is your name? <\/o><i>Sandra\n<\/i><o>Sandra\n<\/o>\n<\/code><\/pre>\n\n<p>\n  The program prints the prompt <code data-lang=\"out\">What is your name?<\/code> and waits for the user to type a name and press <kbd>Enter<\/kbd> (also called <kbd>Return<\/kbd>).  The program then prints the name the user entered and stops.\n<\/p>\n\n<p>\n  A <em>prompt<\/em> is a message that tells (or prompts) the user that the program is asking for input (in this case, the user's name).\n<\/p>\n\n<p>\n  <strong>Run it again with a different name.  Then try changing the prompt!<\/strong>\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  We have now used two Python functions, <code data-lang=\"py3\">print<\/code> and <code data-lang=\"py3\">input<\/code>, so we better tell you what a function actually is!\n<\/p>\n\n<p>\n  A function is a named<sup>*<\/sup> piece of code that performs a specific task.\n<\/p>\n\n<p>\n  Using that name, you can run the code (programmers say <em>call the function<\/em>) to perform the task without having to know how it works.\n<\/p>\n\n<p>\n  A function is called by name followed by round brackets.\n<\/p>\n\n<p>\n  Some functions take data to perform their task: <code data-lang=\"py3\">print<\/code> takes the value you want to print.  This data goes inside the brackets:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-print-data\"><code data-lang=\"py3\">\nprint('To be, or not to be...')\n<\/code><\/pre>\n\n<p>\n  Some functions produce data while performing their task: <code data-lang=\"py3\">input<\/code> produces the string that the user entered.  Programmers call this the <em>return<\/em> value. It can be used directly or stored in a variable:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-input-repeat\"><code data-lang=\"py3\">\nmsg = input('Repeat? ')\nprint(msg)\nprint(msg)\n<\/code><\/pre>\n\n<p><small>* some (anonymous) functions don't have a name!<\/small><\/p>\n "
                }
              ],
              "layout":0,
              "title":"Calling functions",
              "notes_rendered":"",
              "content_rendered":"<p>\n  We have now used two Python functions, <code data-lang=\"py3\">print<\/code> and <code data-lang=\"py3\">input<\/code>, so we better tell you what a function actually is!\n<\/p>\n\n<p>\n  A function is a named<sup>*<\/sup> piece of code that performs a specific task.\n<\/p>\n\n<p>\n  Using that name, you can run the code (programmers say <em>call the function<\/em>) to perform the task without having to know how it works.\n<\/p>\n\n<p>\n  A function is called by name followed by round brackets.\n<\/p>\n\n<p>\n  Some functions take data to perform their task: <code data-lang=\"py3\">print<\/code> takes the value you want to print.  This data goes inside the brackets:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-print-data\"><code data-lang=\"py3\">\nprint('To be, or not to be...')\n<\/code><\/pre>\n\n<p>\n  Some functions produce data while performing their task: <code data-lang=\"py3\">input<\/code> produces the string that the user entered.  Programmers call this the <em>return<\/em> value. It can be used directly or stored in a variable:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-input-repeat\"><code data-lang=\"py3\">\nmsg = input('Repeat? ')\nprint(msg)\nprint(msg)\n<\/code><\/pre>\n\n<p><small>* some (anonymous) functions don't have a name!<\/small><\/p>\n ",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Echo! Echo!",
              "purpose":"",
              "problem":"aca-py3-echo-echo",
              "type":1
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Now we see why variables are called <em>variables<\/em>! When you run the program and ask the user for input, they could type anything:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-variable-vars\"><code data-lang=\"py3\">\nanimal = input('Favourite animal? ')\nprint('I like ' + animal + ' too!')\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-variable-vars\"><code data-lang=\"py3\">\n<o>Favourite animal? <\/o><i>tigers\n<\/i><o>I like tigers too!\n<\/o>\n<\/code><\/pre>\n\n<p>Here, the <code data-lang=\"py3\">animal<\/code> variable contains <code data-lang=\"py3\">'tigers'<\/code>, but if the user types in something else, it will contain something else:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\">\n<o>Favourite animal? <\/o><i>pineapples\n<\/i><o>I like pineapples too!\n<\/o>\n<\/code><\/pre>\n\n<p>\n  This time, the <code data-lang=\"py3\">animal<\/code> variable contains <code data-lang=\"py3\">'pineapples'<\/code>.\n<\/p>\n\n<p>\n  Variables are <em>variable<\/em> because you may not know their value when you write the program, it could be <em>anything<\/em>!\n<\/p>\n\n<aside class=\"info\">\n  <h2>Variables (or pronumerals) in algebra<\/h2>\n  <p>\n    In programming, variables store values that change or may be unknown before the program runs. In algebra, variables (like <em>x<\/em> and <em>y<\/em>) represent numbers that may vary or be unknown.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "title":"Variable variables!",
              "notes_rendered":"",
              "content_rendered":"<p>Now we see why variables are called <em>variables<\/em>! When you run the program and ask the user for input, they could type anything:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-variable-vars\"><code data-lang=\"py3\">\nanimal = input('Favourite animal? ')\nprint('I like ' + animal + ' too!')\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-variable-vars\"><code data-lang=\"py3\">\n<o>Favourite animal? <\/o><i>tigers\n<\/i><o>I like tigers too!\n<\/o>\n<\/code><\/pre>\n\n<p>Here, the <code data-lang=\"py3\">animal<\/code> variable contains <code data-lang=\"py3\">'tigers'<\/code>, but if the user types in something else, it will contain something else:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\">\n<o>Favourite animal? <\/o><i>pineapples\n<\/i><o>I like pineapples too!\n<\/o>\n<\/code><\/pre>\n\n<p>\n  This time, the <code data-lang=\"py3\">animal<\/code> variable contains <code data-lang=\"py3\">'pineapples'<\/code>.\n<\/p>\n\n<p>\n  Variables are <em>variable<\/em> because you may not know their value when you write the program, it could be <em>anything<\/em>!\n<\/p>\n\n<aside class=\"info\">\n  <h2>Variables (or pronumerals) in algebra<\/h2>\n  <p>\n    In programming, variables store values that change or may be unknown before the program runs. In algebra, variables (like <em>x<\/em> and <em>y<\/em>) represent numbers that may vary or be unknown.\n  <\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Meet the Puppy",
              "purpose":"",
              "problem":"py3-meet-the-puppy",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Cheer me on!",
              "purpose":"",
              "problem":"aca-py3-cheer-me-on",
              "type":1
            }
          ],
          "title":"Reading user input"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>When you've stored some data in a variable, you can use it as many times as you want:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-reusable-vars\"><code data-lang=\"py3\">\ntopic = input('What do you like? ')\nprint(topic + ' is so cool!')\nprint('I love ' + topic)\nprint(topic + ', ' + topic + ', ' + topic + '!')\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-reusable-vars\"><code data-lang=\"py3\">\n<o>What do you like? <\/o><i>soccer<\/i>\n<o>soccer is so cool!<\/o>\n<o>I love soccer<\/o>\n<o>soccer, soccer, soccer!<\/o>\n<\/code><\/pre>\n\n<p><strong>Try running it again with another topic (e.g., <code data-lang=\"in\">Python<\/code>)!<\/strong><\/p>\n\n<p>A variable (such as <code data-lang=\"py3\">topic<\/code>) will keep the same value until the program finishes, unless you assign a new value to it.<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Reusable variables!",
              "notes_rendered":"",
              "content_rendered":"<p>When you've stored some data in a variable, you can use it as many times as you want:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-reusable-vars\"><code data-lang=\"py3\">\ntopic = input('What do you like? ')\nprint(topic + ' is so cool!')\nprint('I love ' + topic)\nprint(topic + ', ' + topic + ', ' + topic + '!')\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-reusable-vars\"><code data-lang=\"py3\">\n<o>What do you like? <\/o><i>soccer<\/i>\n<o>soccer is so cool!<\/o>\n<o>I love soccer<\/o>\n<o>soccer, soccer, soccer!<\/o>\n<\/code><\/pre>\n\n<p><strong>Try running it again with another topic (e.g., <code data-lang=\"in\">Python<\/code>)!<\/strong><\/p>\n\n<p>A variable (such as <code data-lang=\"py3\">topic<\/code>) will keep the same value until the program finishes, unless you assign a new value to it.<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Choosing variable names is really important (it's an art!) <strong>A good variable name clearly describes what the variable is and does<\/strong> and this helps explain how the code works. Ideally, it is short too!\n<\/p>\n\n<p>\n  A bad name can make your program very confusing to read, e.g.:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-bad-var-name\"><code data-lang=\"py3\">\nblue = input('What colour is the sky? ')\nprint('The sky is ' + blue)\n<\/code><\/pre>\n\n<p>\n  The name <code data-lang=\"py3\">blue<\/code> describes a possible value, not <em>what the variable represents<\/em> (the sky colour). What if the user enters something else?\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-bad-var-name\"><code data-lang=\"py3\">\n<o>What colour is the sky? <\/o><i>pink<\/i>\n<o>The sky is pink<\/o>\n\n<\/code><\/pre>\n\n<p>Now the variable <code data-lang=\"py3\">blue<\/code> holds <code data-lang=\"py3\">'pink'<\/code>. How confusing! A much better variable name is <code data-lang=\"py3\">sky_colour<\/code>:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-good-var-name\"><code data-lang=\"py3\">\nsky_colour = input('What colour is the sky? ')\nprint('The sky is ' + sky_colour)\n<\/code><\/pre>\n\n<p>\n  It describes <em>exactly<\/em> what the variable represents, even if it is <code data-lang=\"str\">pink<\/code>!\n<\/p>\n\n<aside class=\"info\">\n  <h2>Variable name rules<\/h2>\n  <p>Variable names cannot include spaces. Instead we used an <em>underscore<\/em> <code data-lang=\"py3\">_<\/code> to join the words together into <code data-lang=\"py3\">sky_colour<\/code>.<\/p>\n  <p>Variables also cannot contain punctuation or start with a digit.<\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "title":"Choosing good variable names",
              "notes_rendered":"",
              "content_rendered":"<p>\n  Choosing variable names is really important (it's an art!) <strong>A good variable name clearly describes what the variable is and does<\/strong> and this helps explain how the code works. Ideally, it is short too!\n<\/p>\n\n<p>\n  A bad name can make your program very confusing to read, e.g.:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-bad-var-name\"><code data-lang=\"py3\">\nblue = input('What colour is the sky? ')\nprint('The sky is ' + blue)\n<\/code><\/pre>\n\n<p>\n  The name <code data-lang=\"py3\">blue<\/code> describes a possible value, not <em>what the variable represents<\/em> (the sky colour). What if the user enters something else?\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-bad-var-name\"><code data-lang=\"py3\">\n<o>What colour is the sky? <\/o><i>pink<\/i>\n<o>The sky is pink<\/o>\n\n<\/code><\/pre>\n\n<p>Now the variable <code data-lang=\"py3\">blue<\/code> holds <code data-lang=\"py3\">'pink'<\/code>. How confusing! A much better variable name is <code data-lang=\"py3\">sky_colour<\/code>:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-good-var-name\"><code data-lang=\"py3\">\nsky_colour = input('What colour is the sky? ')\nprint('The sky is ' + sky_colour)\n<\/code><\/pre>\n\n<p>\n  It describes <em>exactly<\/em> what the variable represents, even if it is <code data-lang=\"str\">pink<\/code>!\n<\/p>\n\n<aside class=\"info\">\n  <h2>Variable name rules<\/h2>\n  <p>Variable names cannot include spaces. Instead we used an <em>underscore<\/em> <code data-lang=\"py3\">_<\/code> to join the words together into <code data-lang=\"py3\">sky_colour<\/code>.<\/p>\n  <p>Variables also cannot contain punctuation or start with a digit.<\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Boaty McBoatface",
              "purpose":"",
              "problem":"py3-boaty-mcboatface",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Pen Pineapple Apple Pen",
              "purpose":"",
              "problem":"aca-py3-pen-pineapple-apple-pen",
              "type":1
            }
          ],
          "title":"Re-using variables"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  You can create as many variables as you need, as long as they have different names (otherwise, you're setting an existing variable).\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-var-full-names\"><code data-lang=\"py3\">\nfirst = input('What is your first name? ')\nmiddle = input('What is your middle name? ')\nlast = input('What is your last name? ')\nfull_name = first + ' ' + middle + ' ' + last\nprint('Full name: ' + full_name)\n<\/code><\/pre>\n\n<p>\n  The variable names make it very clear we've said a full name consists of a first, middle and last name.  Self explanatory!\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-var-full-names\"><code data-lang=\"py3\">\n<o>What is your first name? <\/o><i>Hans\n<\/i><o>What is your middle name? <\/o><i>Christian\n<\/i><o>What is your last name? <\/o><i>Andersen\n<\/i><o>Full name: Hans Christian Andersen\n<\/o>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "title":"Using multiple variables",
              "notes_rendered":"",
              "content_rendered":"<p>\n  You can create as many variables as you need, as long as they have different names (otherwise, you're setting an existing variable).\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-var-full-names\"><code data-lang=\"py3\">\nfirst = input('What is your first name? ')\nmiddle = input('What is your middle name? ')\nlast = input('What is your last name? ')\nfull_name = first + ' ' + middle + ' ' + last\nprint('Full name: ' + full_name)\n<\/code><\/pre>\n\n<p>\n  The variable names make it very clear we've said a full name consists of a first, middle and last name.  Self explanatory!\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"py3-var-full-names\"><code data-lang=\"py3\">\n<o>What is your first name? <\/o><i>Hans\n<\/i><o>What is your middle name? <\/o><i>Christian\n<\/i><o>What is your last name? <\/o><i>Andersen\n<\/i><o>Full name: Hans Christian Andersen\n<\/o>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Match of the year!",
              "purpose":"",
              "problem":"py3-match-of-the-year",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Best New Ice Cream Combination",
              "purpose":"",
              "problem":"aca-py3-ice-cream-combo",
              "type":1
            }
          ],
          "title":"Variables"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Congratulations, you have completed the first module! You're starting to sound like a programmer!\n<\/p>\n\n<p>You can now completely write and explain this code:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-input-echo-echo\"><code data-lang=\"py3\">\nmsg = input('Echo? ')\nprint(msg + '...' + msg + '...')\n<\/code><\/pre>\n\n<ol>\n  <li>the call to <code data-lang=\"py3\">input<\/code> returns a string from the user;<\/li>\n  <li>that gets assigned to the <code data-lang=\"py3\">msg<\/code> (short for message) variable;<\/li>\n  <li><code data-lang=\"py3\">msg<\/code> is concatenated with <code data-lang=\"py3\">'...'<\/code> twice;<\/li>\n  <li>and the call to <code data-lang=\"py3\">print<\/code> displays the result.<\/li>\n<\/ol>\n\n<p>Keep going to module 2! Good luck!<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Congratulations!",
              "notes_rendered":"",
              "content_rendered":"<p>\n  Congratulations, you have completed the first module! You're starting to sound like a programmer!\n<\/p>\n\n<p>You can now completely write and explain this code:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-input-echo-echo\"><code data-lang=\"py3\">\nmsg = input('Echo? ')\nprint(msg + '...' + msg + '...')\n<\/code><\/pre>\n\n<ol>\n  <li>the call to <code data-lang=\"py3\">input<\/code> returns a string from the user;<\/li>\n  <li>that gets assigned to the <code data-lang=\"py3\">msg<\/code> (short for message) variable;<\/li>\n  <li><code data-lang=\"py3\">msg<\/code> is concatenated with <code data-lang=\"py3\">'...'<\/code> twice;<\/li>\n  <li>and the call to <code data-lang=\"py3\">print<\/code> displays the result.<\/li>\n<\/ol>\n\n<p>Keep going to module 2! Good luck!<\/p>\n",
              "purpose":"",
              "type":0
            }
          ],
          "title":"Congratulations!"
        }
      ],
      "title":"Getting started with code",
      "label":"aca-python-yr78-module1-variables",
      "updated_at":"2017-11-15T06:40:19.843517+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nLet's put what we've learnt about strings and decisions into practice making some more complex games.\n\nWe're going to add in the concept of decisions and string manipulations. These will help us build up to more complex games as we keep adding more skills to our toolbox.\n"
                }
              ],
              "layout":0,
              "title":"Making simple games",
              "notes_rendered":"",
              "content_rendered":"<p>Let's put what we've learnt about strings and decisions into practice making some more complex games.<\/p>\n<p>We're going to add in the concept of decisions and string manipulations. These will help us build up to more complex games as we keep adding more skills to our toolbox.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Taboo",
              "purpose":"",
              "problem":"py3-taboo-simple",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Word chain!",
              "purpose":"",
              "problem":"py3-word-chain-simple-no-loop",
              "type":1
            }
          ],
          "title":"More word games"
        }
      ],
      "title":"Project 2",
      "label":"aca-python-yr78-project2",
      "updated_at":"2017-11-15T06:41:18.698799+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>So far we have written a lot of programs that take input from the user in the form of a <em>string<\/em> (a letter, word or sentence). <\/p>\n\n<pWe've already seen how to use <code data-lang=\"py3\">if<\/code> statements to make decisions about strings like this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"if-revision-eg1\"><code data-lang=\"py3\">\nfood = input('Enter a food: ')\nif food == 'mango':\n  print('Mango is my favourite!')\nelse:\n  print('Eww... ' + food)\n<\/code><\/pre>\n\n<p>In this example, we're checking if the food entered is <em>exactly equal<\/em> to <code data-lang=\"str\">mango<\/code>. It doesn't match if the user enters <code data-lang=\"str\">mangoes<\/code> or <code data-lang=\"str\">Mango<\/code> with capital letters.<\/p>\n\n<p>In this module we are going to learn how to manipulate these strings so that we can write more interesting programs that are a bit smarter.<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Decisions about strings",
              "notes_rendered":"",
              "content_rendered":"<p>So far we have written a lot of programs that take input from the user in the form of a <em>string<\/em> (a letter, word or sentence). <\/p>\n\n<pWe've already seen how to use <code data-lang=\"py3\">if<\/code> statements to make decisions about strings like this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"if-revision-eg1\"><code data-lang=\"py3\">\nfood = input('Enter a food: ')\nif food == 'mango':\n  print('Mango is my favourite!')\nelse:\n  print('Eww... ' + food)\n<\/code><\/pre>\n\n<p>In this example, we're checking if the food entered is <em>exactly equal<\/em> to <code data-lang=\"str\">mango<\/code>. It doesn't match if the user enters <code data-lang=\"str\">mangoes<\/code> or <code data-lang=\"str\">Mango<\/code> with capital letters.<\/p>\n\n<p>In this module we are going to learn how to manipulate these strings so that we can write more interesting programs that are a bit smarter.<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Instead of checking if a string is exactly equal to what we expect we can also check for parts of a string (or <em>substrings<\/em>).<\/p>\n\n<p>A substring could represent part of a word, or one word in a phrase. For example:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"substring-in-string\"><code data-lang=\"py3\">\nmsg = 'concatenation is fun'\nprint('cat' in msg) \nprint('dog' in msg)\n<\/code><\/pre>\n\n<p>The first print statement will print <code data-lang=\"py3\">True<\/code> because the substring <code data-lang=\"py3\">'cat'<\/code> appears in the message. However, the second print statement will print <code data-lang=\"py3\">False<\/code> because <code data-lang=\"py3\">'dog'<\/code> does not appear.<\/p>\n<pre class=\"js-terminal\" data-eg-id=\"substring-in-string\"><code data-lang=\"py3\">\n<o>True<\/o>\n<o>False<\/o>\n\n<\/code><\/pre>\n<p>Try changing the message and seeing what happens.<\/p>\n\n<p>The <code data-lang=\"py3\">not in<\/code> operator does the opposite to <code data-lang=\"py3\">in<\/code>. It returns <code data-lang=\"py3\">True<\/code> when the string does <em>not<\/em> contain the substring:\n\n<\/p><pre class=\"js-editor\" data-eg-id=\"x-not-in-string\"><code data-lang=\"py3\">\nmsg = 'concatenation is fun'\nprint('cat' not in msg) \nprint('dog' not in msg)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"x-not-in-string\"><code data-lang=\"py3\">\n<o>False<\/o>\n<o>True\n<\/o>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "title":"Substrings within a string",
              "notes_rendered":"",
              "content_rendered":"<p>Instead of checking if a string is exactly equal to what we expect we can also check for parts of a string (or <em>substrings<\/em>).<\/p>\n\n<p>A substring could represent part of a word, or one word in a phrase. For example:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"substring-in-string\"><code data-lang=\"py3\">\nmsg = 'concatenation is fun'\nprint('cat' in msg) \nprint('dog' in msg)\n<\/code><\/pre>\n\n<p>The first print statement will print <code data-lang=\"py3\">True<\/code> because the substring <code data-lang=\"py3\">'cat'<\/code> appears in the message. However, the second print statement will print <code data-lang=\"py3\">False<\/code> because <code data-lang=\"py3\">'dog'<\/code> does not appear.<\/p>\n<pre class=\"js-terminal\" data-eg-id=\"substring-in-string\"><code data-lang=\"py3\">\n<o>True<\/o>\n<o>False<\/o>\n\n<\/code><\/pre>\n<p>Try changing the message and seeing what happens.<\/p>\n\n<p>The <code data-lang=\"py3\">not in<\/code> operator does the opposite to <code data-lang=\"py3\">in<\/code>. It returns <code data-lang=\"py3\">True<\/code> when the string does <em>not<\/em> contain the substring:\n\n<\/p><pre class=\"js-editor\" data-eg-id=\"x-not-in-string\"><code data-lang=\"py3\">\nmsg = 'concatenation is fun'\nprint('cat' not in msg) \nprint('dog' not in msg)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"x-not-in-string\"><code data-lang=\"py3\">\n<o>False<\/o>\n<o>True\n<\/o>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Like the other true\/false expressions, we can now use these in an <code data-lang=\"py3\">if<\/code> statement to make decisions. For example to check if a person's name contains an <code data-lang=\"py3\">x<\/code> character you can write:\n\n<\/p><pre class=\"js-editor\" data-eg-id=\"does-your-name-have-an-x\"><code data-lang=\"py3\">\nname = input('Enter your name? ') \nif 'x' in name:\n  print('Your name contains an x!')\nelse:\n  print('No \"x\" in your name.')\n<\/code><\/pre>\n<p>Running this program gives:<\/p>\n<pre class=\"js-terminal\" data-eg-id=\"does-your-name-have-an-x\"><code data-lang=\"py3\">\n<o>Enter your name? <i>Maxwell<\/i>\nYour name contains an x!\n<\/o>\n<\/code><\/pre>\n<p>Notice that at the moment the program can only deal with lowercase letters (try entering <code data-lang=\"py3\">Xavier<\/code>). We'll solve this problem later in the section.<\/p>"
                }
              ],
              "layout":0,
              "title":"Making decisions with strings",
              "notes_rendered":"",
              "content_rendered":"<p>Like the other true\/false expressions, we can now use these in an <code data-lang=\"py3\">if<\/code> statement to make decisions. For example to check if a person's name contains an <code data-lang=\"py3\">x<\/code> character you can write:\n\n<\/p><pre class=\"js-editor\" data-eg-id=\"does-your-name-have-an-x\"><code data-lang=\"py3\">\nname = input('Enter your name? ') \nif 'x' in name:\n  print('Your name contains an x!')\nelse:\n  print('No \"x\" in your name.')\n<\/code><\/pre>\n<p>Running this program gives:<\/p>\n<pre class=\"js-terminal\" data-eg-id=\"does-your-name-have-an-x\"><code data-lang=\"py3\">\n<o>Enter your name? <i>Maxwell<\/i>\nYour name contains an x!\n<\/o>\n<\/code><\/pre>\n<p>Notice that at the moment the program can only deal with lowercase letters (try entering <code data-lang=\"py3\">Xavier<\/code>). We'll solve this problem later in the section.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Forgot the attachment?",
              "purpose":"",
              "problem":"py3-forgot-the-attachment",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Moth spotting",
              "purpose":"",
              "problem":"aca-py3-hidden-moth",
              "type":1
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nLet's look at comparing strings that are lower and upper case.\n\nTo a computer, `'a'` and `'A'` are completely different *characters*, even if we interpret them as the same *letter*, just lower and upper case:\n```eg:aAnotequal;\nprint('a' == 'A')\n```\n```terminal;eg:aAnotequal;\nFalse\n\n```\n\nSo testing if `'apple'` is the same as `'APPLE'` (or even `'Apple'`) will also be `False`:\n\n```eg:applenotequal;\nprint('apple' == 'APPLE')\n```\n```terminal;eg:applenotequal;\nFalse\n\n```\n\nWe'll have to **modify** the strings so that we compare only lower case letters with lower case letters. (Or, only upper case with upper case!) We've seen how to change the case of a string using `lower` and `upper`:\n\n```eg:changecase;\nword = 'Apple'\nprint(word.lower())\n```\n```terminal;eg:changecase;\napple\n\n```"
                }
              ],
              "layout":0,
              "title":"When an <code data-lang=\"py3\">'apple'<\/code> is not an <code data-lang=\"py3\">'APPLE'<\/code>",
              "notes_rendered":"",
              "content_rendered":"<p>Let's look at comparing strings that are lower and upper case.<\/p>\n<p>To a computer, <code data-lang=\"py3\">'a'<\/code> and <code data-lang=\"py3\">'A'<\/code> are completely different <em>characters<\/em>, even if we interpret them as the same <em>letter<\/em>, just lower and upper case:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aAnotequal\"><code data-lang=\"py3\">print('a' == 'A')\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aAnotequal\"><code data-lang=\"py3\"><o>False<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>So testing if <code data-lang=\"py3\">'apple'<\/code> is the same as <code data-lang=\"py3\">'APPLE'<\/code> (or even <code data-lang=\"py3\">'Apple'<\/code>) will also be <code data-lang=\"py3\">False<\/code>:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"applenotequal\"><code data-lang=\"py3\">print('apple' == 'APPLE')\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"applenotequal\"><code data-lang=\"py3\"><o>False<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>We'll have to <strong>modify<\/strong> the strings so that we compare only lower case letters with lower case letters. (Or, only upper case with upper case!) We've seen how to change the case of a string using <code data-lang=\"py3\">lower<\/code> and <code data-lang=\"py3\">upper<\/code>:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"changecase\"><code data-lang=\"py3\">word = 'Apple'\nprint(word.lower())\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"changecase\"><code data-lang=\"py3\"><o>apple<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nTo compare whether strings are equal *ignoring case*, we have to modify the strings so that we compare only letters of the same case: lower with lower, and UPPER with UPPER. We can use `lower` and `upper` to make sure what we're comparing is the same.\n\nIn this example, we make new variables: `lower_word1` and `lower_word2`, and then compare them:\n\n```eg:changecasecompare;\nword1 = input('Word 1: ')\nword2 = input('Word 2: ')\nlower_word1 = word1.lower()\nlower_word2 = word2.lower()\nif lower_word1 == lower_word2:\n  print('The words are the same, ignoring case.')\n```\n\n```terminal;eg:changecasecompare;\nWord 1: @@@banana\nWord 2: @@@BANANA\nThe words are the same, ignoring case.\n```\n\nWe can actually skip making new variables, and just compare the `lower` versions of the two words:\n```eg:changecasecompareoneline;\nword1 = input('Word 1: ')\nword2 = input('Word 2: ')\nif word1.lower() == word2.lower():\n  print('The words are the same, ignoring case.')\n```\n\n"
                }
              ],
              "layout":0,
              "title":"Comparing strings but ignoring case",
              "notes_rendered":"",
              "content_rendered":"<p>To compare whether strings are equal <em>ignoring case<\/em>, we have to modify the strings so that we compare only letters of the same case: lower with lower, and UPPER with UPPER. We can use <code data-lang=\"py3\">lower<\/code> and <code data-lang=\"py3\">upper<\/code> to make sure what we're comparing is the same.<\/p>\n<p>In this example, we make new variables: <code data-lang=\"py3\">lower_word1<\/code> and <code data-lang=\"py3\">lower_word2<\/code>, and then compare them:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"changecasecompare\"><code data-lang=\"py3\">word1 = input('Word 1: ')\nword2 = input('Word 2: ')\nlower_word1 = word1.lower()\nlower_word2 = word2.lower()\nif lower_word1 == lower_word2:\n  print('The words are the same, ignoring case.')\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"changecasecompare\"><code data-lang=\"py3\"><o>Word 1: <\/o><i>banana<\/i>\n<o>Word 2: <\/o><i>BANANA<\/i>\n<o>The words are the same, ignoring case.<\/o>\n<o><\/o><\/code><\/pre>\n<p>We can actually skip making new variables, and just compare the <code data-lang=\"py3\">lower<\/code> versions of the two words:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"changecasecompareoneline\"><code data-lang=\"py3\">word1 = input('Word 1: ')\nword2 = input('Word 2: ')\nif word1.lower() == word2.lower():\n  print('The words are the same, ignoring case.')\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nHere's an example to show how this can work in a problem. Let's write a program to ask the user their favourite movie. \n\nIf it's the same as yours (The LEGO Movie) let's say <code data-lang=\"out\">Me too!<\/code> Otherwise, let's say <code data-lang=\"out\">That is a good movie.<\/code> and tell them what our favourite is.\n\nWe want to accept answers like <code data-lang=\"in\">The LEGO Movie<\/code>, <code data-lang=\"in\">the lego movie<\/code> or even <code data-lang=\"in\">the Lego MOVIE<\/code>.\n\n```eg:legoeg;\nmovie = input('What is your favourite movie? ')\nif movie.lower() == 'the lego movie':\n  print('Me too!')\nelse:\n  print('That is a good movie.')\n  print('My favourite movie is The LEGO Movie.')\n```\n\n```terminal;eg:legoeg;\nWhat is your favourite movie? @@@the Lego movie\nMe too!\n\n```\n\nTry out the example with a few different examples!\n\n> ## Comparing cases\n> Note that we're comparing whatever the user types in *turned into lower case* to something - in this case the string `'the lego movie'`.\n> \n> If we're converting what the user types in into lower case, we'd better make sure we're comparing it to something in lower case!\n> \n> We could do something like this: \n> ```norun;\n> if movie.lower() == 'The LEGO Movie'.lower():\n> ```\n> That way we're making both sides lower case, so we can compare them directly.\n"
                }
              ],
              "layout":0,
              "title":"A case study...",
              "notes_rendered":"",
              "content_rendered":"<p>Here's an example to show how this can work in a problem. Let's write a program to ask the user their favourite movie.<\/p>\n<p>If it's the same as yours (The LEGO Movie) let's say <code data-lang=\"out\">Me too!<\/code> Otherwise, let's say <code data-lang=\"out\">That is a good movie.<\/code> and tell them what our favourite is.<\/p>\n<p>We want to accept answers like <code data-lang=\"in\">The LEGO Movie<\/code>, <code data-lang=\"in\">the lego movie<\/code> or even <code data-lang=\"in\">the Lego MOVIE<\/code>.<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"legoeg\"><code data-lang=\"py3\">movie = input('What is your favourite movie? ')\nif movie.lower() == 'the lego movie':\n  print('Me too!')\nelse:\n  print('That is a good movie.')\n  print('My favourite movie is The LEGO Movie.')\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"legoeg\"><code data-lang=\"py3\"><o>What is your favourite movie? <\/o><i>the Lego movie<\/i>\n<o>Me too!<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>Try out the example with a few different examples!<\/p>\n<aside class=\"info\">\n<h2>Comparing cases<\/h2>\n<p>Note that we're comparing whatever the user types in <em>turned into lower case<\/em> to something - in this case the string <code data-lang=\"py3\">'the lego movie'<\/code>.<\/p>\n<p>If we're converting what the user types in into lower case, we'd better make sure we're comparing it to something in lower case!<\/p>\n<p>We could do something like this:<\/p>\n<pre style=\"\" data-eg-id=\"aca-python-yr78-strings-0-7-0\" class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">if movie.lower() == 'The LEGO Movie'.lower():\n<\/code><\/pre>\n<p>That way we're making both sides lower case, so we can compare them directly.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"py3-need-a-hug",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Open Sesame!",
              "purpose":"",
              "problem":"aca-py3-open-sesame-case-insensitive",
              "type":1
            }
          ],
          "title":"Investigating strings"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Often we need to access individual characters in a string.  Accessing a single character is done using the square bracket <em>subscripting<\/em> or <em>indexing<\/em> operation:\n\n<\/p><pre class=\"js-editor\" data-eg-id=\"get-pieces-of-string2\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg[0])\nprint(msg[1])\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"get-pieces-of-string2\"><code data-lang=\"py3\"><o>h<\/o>\n<o>e<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>You might be wondering why we use <code data-lang=\"py3\">0<\/code> to access the <em>first<\/em> character in the string &#8212; why wouldn't we be using a <code data-lang=\"py3\">1<\/code>? This is because in programming, and in general in computer science, we start counting from 0 rather than from 1. So the first character in a string is at index <code data-lang=\"py3\">0<\/code>, the second character is at index <code data-lang=\"py3\">1<\/code>, the third character is at index <code data-lang=\"py3\">2<\/code>, and so on.\n\n<\/p><p>You can also access strings from the other end using a negative index:\n\n<\/p><pre class=\"js-editor\" data-eg-id=\"string-index-end-of-string2\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg[-1])\nprint(msg[-5])\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"string-index-end-of-string2\"><code data-lang=\"py3\"><o>d<\/o>\n<o>w<\/o>\n<o><\/o>\n<\/code><\/pre>"
                }
              ],
              "layout":0,
              "title":"Getting an individual character",
              "notes_rendered":"",
              "content_rendered":"<p>Often we need to access individual characters in a string.  Accessing a single character is done using the square bracket <em>subscripting<\/em> or <em>indexing<\/em> operation:\n\n<\/p><pre class=\"js-editor\" data-eg-id=\"get-pieces-of-string2\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg[0])\nprint(msg[1])\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"get-pieces-of-string2\"><code data-lang=\"py3\"><o>h<\/o>\n<o>e<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>You might be wondering why we use <code data-lang=\"py3\">0<\/code> to access the <em>first<\/em> character in the string &#8212; why wouldn't we be using a <code data-lang=\"py3\">1<\/code>? This is because in programming, and in general in computer science, we start counting from 0 rather than from 1. So the first character in a string is at index <code data-lang=\"py3\">0<\/code>, the second character is at index <code data-lang=\"py3\">1<\/code>, the third character is at index <code data-lang=\"py3\">2<\/code>, and so on.\n\n<\/p><p>You can also access strings from the other end using a negative index:\n\n<\/p><pre class=\"js-editor\" data-eg-id=\"string-index-end-of-string2\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg[-1])\nprint(msg[-5])\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"string-index-end-of-string2\"><code data-lang=\"py3\"><o>d<\/o>\n<o>w<\/o>\n<o><\/o>\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>If you try and access a character past the end of the string, Python will throw an error and your program will crash. Because of this, it is important to make sure that you're always trying to access a character in the string which exists. Here is an example of what happens when you try to access a character which is past the end of the string:\n\n<\/p><pre class=\"js-editor\" data-eg-id=\"out-of-range-string-indexing\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg[9])\nprint(msg[10])\nprint(msg[11])\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"out-of-range-string-indexing\"><code data-lang=\"py3\"><o>l<\/o>\n<o>d<\/o>\nTraceback (most recent call last):\n  File \"program.py\", line 4, in &lt;module&gt;\n    print(msg[11])\nIndexError: string index out of range\n<\/code><\/pre>\n<p>The string <code data-lang=\"py3\">'hello world'<\/code> only has 11 characters, and we are trying to access character 12 (remember we start counting from 0).<\/p>"
                }
              ],
              "layout":0,
              "title":"Characters that don't exist",
              "notes_rendered":"",
              "content_rendered":"<p>If you try and access a character past the end of the string, Python will throw an error and your program will crash. Because of this, it is important to make sure that you're always trying to access a character in the string which exists. Here is an example of what happens when you try to access a character which is past the end of the string:\n\n<\/p><pre class=\"js-editor\" data-eg-id=\"out-of-range-string-indexing\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg[9])\nprint(msg[10])\nprint(msg[11])\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"out-of-range-string-indexing\"><code data-lang=\"py3\"><o>l<\/o>\n<o>d<\/o>\nTraceback (most recent call last):\n  File \"program.py\", line 4, in &lt;module&gt;\n    print(msg[11])\nIndexError: string index out of range\n<\/code><\/pre>\n<p>The string <code data-lang=\"py3\">'hello world'<\/code> only has 11 characters, and we are trying to access character 12 (remember we start counting from 0).<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Last two letters",
              "purpose":"",
              "problem":"py3-last-two-letters",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Email address",
              "purpose":"",
              "problem":"py3-email-address",
              "type":1
            }
          ],
          "title":"Characters in a string"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nWe already learnt how to change the case of a string using `upper` and `lower`, but how do we know what case something is? We might need to check whether a user has entered upper or lowercase characters (for example, if they were entering a password.)\n\nWe can do this using the `isupper` and `islower` methods. These are similar to conditional operators - they return `True` or `False` depending on the input.\n\nHere's an example that checks a lowercase string:\n\n```eg:str-check-lowercase;lang:py3;\n\nmsg = 'a lowercase string!'\nprint(msg.islower()) \nprint(msg.isupper())\n\n```\n\n```eg:last;lang:py3;terminal;\nTrue\nFalse\n\n```\n\nLikewise, we can check an uppercase string, and get the opposite result:\n\n```eg:str-check-uppercase;lang:py3;\n\nmsg = 'AN UPPERCASE STRING!'\nprint(msg.islower()) \nprint(msg.isupper())\n\n```\n\n```eg:last;lang:py3;terminal;\nFalse\nTrue\n\n```\n\nChange the `msg` variable to test what happens if you have a `'MiXeD CaSe'` string.\n"
                }
              ],
              "layout":0,
              "title":"Testing the case of a string",
              "notes_rendered":"",
              "content_rendered":"<p>We already learnt how to change the case of a string using <code data-lang=\"py3\">upper<\/code> and <code data-lang=\"py3\">lower<\/code>, but how do we know what case something is? We might need to check whether a user has entered upper or lowercase characters (for example, if they were entering a password.)<\/p>\n<p>We can do this using the <code data-lang=\"py3\">isupper<\/code> and <code data-lang=\"py3\">islower<\/code> methods. These are similar to conditional operators - they return <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code> depending on the input.<\/p>\n<p>Here's an example that checks a lowercase string:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"str-check-lowercase\"><code data-lang=\"py3\">\nmsg = 'a lowercase string!'\nprint(msg.islower()) \nprint(msg.isupper())\n\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"str-check-lowercase\"><code data-lang=\"py3\"><o>True<\/o>\n<o>False<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>Likewise, we can check an uppercase string, and get the opposite result:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"str-check-uppercase\"><code data-lang=\"py3\">\nmsg = 'AN UPPERCASE STRING!'\nprint(msg.islower()) \nprint(msg.isupper())\n\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"str-check-uppercase\"><code data-lang=\"py3\"><o>False<\/o>\n<o>True<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>Change the <code data-lang=\"py3\">msg<\/code> variable to test what happens if you have a <code data-lang=\"py3\">'MiXeD CaSe'<\/code> string.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Just like before, we can now use these in an <code data-lang=\"py3\">if<\/code> statement to make decisions. For example to check if a user has given their name in the correct case, you could write:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"name-case\"><code data-lang=\"py3\">\nname = input('Enter your name: ') \nif name.isupper():\n  print('Your name is in uppercase.')\nelif name.islower():\n  print('Your name is in lowercase.')\nelse:\n  print('Your name is in mixed case.')\n<\/code><\/pre>\n\n<p>If we wanted to correct the user's input so that their name had traditional English capitalisation (the first letter in each word capitalised), we could use the <code data-lang=\"py3\">title<\/code> method:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"name-case2\"><code data-lang=\"py3\">\nname = input('Enter your name: ') \nprint('Name converted to:', name.title())\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"name-case2\"><code data-lang=\"py3\">\n<o>Enter your name: <\/o><i>XAVIER<\/i>\n<o>Name converted to: Xavier<\/o>\n<o><\/o>\n<\/code><\/pre>\n<p>Notice in all these examples, that punctuation is ignored.<\/p>"
                }
              ],
              "layout":0,
              "title":"Making decisions about case",
              "notes_rendered":"",
              "content_rendered":"<p>Just like before, we can now use these in an <code data-lang=\"py3\">if<\/code> statement to make decisions. For example to check if a user has given their name in the correct case, you could write:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"name-case\"><code data-lang=\"py3\">\nname = input('Enter your name: ') \nif name.isupper():\n  print('Your name is in uppercase.')\nelif name.islower():\n  print('Your name is in lowercase.')\nelse:\n  print('Your name is in mixed case.')\n<\/code><\/pre>\n\n<p>If we wanted to correct the user's input so that their name had traditional English capitalisation (the first letter in each word capitalised), we could use the <code data-lang=\"py3\">title<\/code> method:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"name-case2\"><code data-lang=\"py3\">\nname = input('Enter your name: ') \nprint('Name converted to:', name.title())\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"name-case2\"><code data-lang=\"py3\">\n<o>Enter your name: <\/o><i>XAVIER<\/i>\n<o>Name converted to: Xavier<\/o>\n<o><\/o>\n<\/code><\/pre>\n<p>Notice in all these examples, that punctuation is ignored.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Capital Cities",
              "purpose":"",
              "problem":"py3-capital-cities",
              "type":1
            }
          ],
          "title":"Checking string case"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>We have seen how to grab out a specific letter from a string:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"get-pieces-of-string\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg[0])\nprint(msg[1])\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"get-pieces-of-string\"><code data-lang=\"py3\"><o>h<\/o>\n<o>e<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>This is called <em>indexing<\/em> and the number we use to look up each letter in the string is called the <em>index<\/em>.<\/p>\n\n<p>In particular you should notice again that the first letter is index 0, the second letter is index 1 and so on.<\/p>\n\n<p>You can also access strings from the other end using a negative index:\n\n<\/p><pre class=\"js-editor\" data-eg-id=\"string-index-end-of-string\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg[-1])\nprint(msg[-5])\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"string-index-end-of-string\"><code data-lang=\"py3\"><o>d<\/o>\n<o>w<\/o>\n<o><\/o>\n<\/code><\/pre>"
                }
              ],
              "layout":0,
              "title":"One letter at a time",
              "notes_rendered":"",
              "content_rendered":"<p>We have seen how to grab out a specific letter from a string:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"get-pieces-of-string\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg[0])\nprint(msg[1])\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"get-pieces-of-string\"><code data-lang=\"py3\"><o>h<\/o>\n<o>e<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>This is called <em>indexing<\/em> and the number we use to look up each letter in the string is called the <em>index<\/em>.<\/p>\n\n<p>In particular you should notice again that the first letter is index 0, the second letter is index 1 and so on.<\/p>\n\n<p>You can also access strings from the other end using a negative index:\n\n<\/p><pre class=\"js-editor\" data-eg-id=\"string-index-end-of-string\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg[-1])\nprint(msg[-5])\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"string-index-end-of-string\"><code data-lang=\"py3\"><o>d<\/o>\n<o>w<\/o>\n<o><\/o>\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>If we wanted to create a new string which is the first 3 letters of another string, we could write this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-substrings-0\"><code data-lang=\"py3\">sentence = 'The cat is asleep.'\nprint(sentence[0] + sentence[1] + sentence[2])\n<\/code><\/pre>\n\n<p>\nBut there's a nicer way!<\/p>\n<p>A piece of a string (called a <em>substring<\/em>) can be accessed by using two numbers separated by a colon:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-substrings-1\"><code data-lang=\"py3\">sentence = 'The cat is asleep.'\nprint(sentence[0:3])\n<\/code><\/pre>\n<p>\n  This is called taking a <em>slice<\/em>.\n<\/p>\n<p>\n  A slice starts from the first number (index) and includes characters <strong>up to but not including<\/strong> the second index.  So in the example below, looking at the string <code data-lang=\"py3\">x = 'hello world'<\/code>, slice <code data-lang=\"py3\">x[0:5]<\/code> starts from the <code data-lang=\"py3\">x[0]<\/code> and goes up to <code data-lang=\"py3\">x[5]<\/code> (the space) but doesn't include it.  Here are a few more examples:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-substrings-2\"><code data-lang=\"py3\">\nx = 'hello world'\nprint(x[0:5])\nprint(x[6:11])\n<\/code><\/pre>"
                }
              ],
              "layout":0,
              "title":"Substrings",
              "notes_rendered":"",
              "content_rendered":"<p>If we wanted to create a new string which is the first 3 letters of another string, we could write this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-substrings-0\"><code data-lang=\"py3\">sentence = 'The cat is asleep.'\nprint(sentence[0] + sentence[1] + sentence[2])\n<\/code><\/pre>\n\n<p>\nBut there's a nicer way!<\/p>\n<p>A piece of a string (called a <em>substring<\/em>) can be accessed by using two numbers separated by a colon:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-substrings-1\"><code data-lang=\"py3\">sentence = 'The cat is asleep.'\nprint(sentence[0:3])\n<\/code><\/pre>\n<p>\n  This is called taking a <em>slice<\/em>.\n<\/p>\n<p>\n  A slice starts from the first number (index) and includes characters <strong>up to but not including<\/strong> the second index.  So in the example below, looking at the string <code data-lang=\"py3\">x = 'hello world'<\/code>, slice <code data-lang=\"py3\">x[0:5]<\/code> starts from the <code data-lang=\"py3\">x[0]<\/code> and goes up to <code data-lang=\"py3\">x[5]<\/code> (the space) but doesn't include it.  Here are a few more examples:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g0-substrings-2\"><code data-lang=\"py3\">\nx = 'hello world'\nprint(x[0:5])\nprint(x[6:11])\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>If we want to find the <em>substring<\/em> until the end of the string, we can do that with a slice if we know the length of the string. We can find out the length of the string using the <code data-lang=\"py3\">len<\/code> function:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"str-slice2\"><code data-lang=\"py3\">\nx = 'hello world'\nprint(x[3:len(x)])\nprint(x[6:len(x)])\n<\/code><\/pre>\n\n<p>But there's another way, if we leave out the second index in a slice (keeping the <code data-lang=\"py3\">:<\/code>!) then it will give us the substring up until the end of the string, just like it did with <code data-lang=\"py3\">len<\/code>:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"str-slice3\"><code data-lang=\"py3\">\nx = 'hello world'\nprint(x[3:])\nprint(x[6:])\n<\/code><\/pre>\n\n<p>But what happens if we try to find a substring that doesn't exist?<\/p>\n<pre class=\"js-editor\" data-eg-id=\"str-slice4\"><code data-lang=\"py3\">\nx = 'hello world'\nprint('The substring is \"' + x[20:30] + '\"')\n<\/code><\/pre>\n\n<p>The string <code data-lang=\"py3\">x<\/code> is less than 20 characters long so the substring <code data-lang=\"py3\">x[20:30]<\/code>, doesn't exist. Instead we get an empty string and it prints nothing.<\/p>"
                }
              ],
              "layout":0,
              "title":"Substring to the end",
              "notes_rendered":"",
              "content_rendered":"<p>If we want to find the <em>substring<\/em> until the end of the string, we can do that with a slice if we know the length of the string. We can find out the length of the string using the <code data-lang=\"py3\">len<\/code> function:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"str-slice2\"><code data-lang=\"py3\">\nx = 'hello world'\nprint(x[3:len(x)])\nprint(x[6:len(x)])\n<\/code><\/pre>\n\n<p>But there's another way, if we leave out the second index in a slice (keeping the <code data-lang=\"py3\">:<\/code>!) then it will give us the substring up until the end of the string, just like it did with <code data-lang=\"py3\">len<\/code>:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"str-slice3\"><code data-lang=\"py3\">\nx = 'hello world'\nprint(x[3:])\nprint(x[6:])\n<\/code><\/pre>\n\n<p>But what happens if we try to find a substring that doesn't exist?<\/p>\n<pre class=\"js-editor\" data-eg-id=\"str-slice4\"><code data-lang=\"py3\">\nx = 'hello world'\nprint('The substring is \"' + x[20:30] + '\"')\n<\/code><\/pre>\n\n<p>The string <code data-lang=\"py3\">x<\/code> is less than 20 characters long so the substring <code data-lang=\"py3\">x[20:30]<\/code>, doesn't exist. Instead we get an empty string and it prints nothing.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\nStrings are <em>immutable<\/em>, which means that once the string is constructed, it cannot be changed.  For example, you cannot change a character in an existing string by assigning a new character to a subscript:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"str-immutable\"><code data-lang=\"py3\">x = 'hello world'\nx[0] = 'X'\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"str-immutable\"><code data-lang=\"py3\">Traceback (most recent call last):\n  File \"program.py\", line 2, in &lt;module&gt;\n    x[0] = 'X'\nTypeError: 'str' object does not support item assignment\n\n<\/code><\/pre>\n\n<p>\nYou must instead create a new string by slicing up the string and joining together the pieces, and then saving the result back to the original variable:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"str-immutable2\"><code data-lang=\"py3\">x = 'hello world'\nx = 'X' + x[1:]\nprint(x)\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"str-immutable2\"><code data-lang=\"py3\"><o>'Xello world'\n<\/o>\n<\/code><\/pre>\n\n<p>\nEvery operation that looks like it is modifying a string is actually creating a new string.\n<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Strings cannot be changed",
              "notes_rendered":"",
              "content_rendered":"<p>\nStrings are <em>immutable<\/em>, which means that once the string is constructed, it cannot be changed.  For example, you cannot change a character in an existing string by assigning a new character to a subscript:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"str-immutable\"><code data-lang=\"py3\">x = 'hello world'\nx[0] = 'X'\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"str-immutable\"><code data-lang=\"py3\">Traceback (most recent call last):\n  File \"program.py\", line 2, in &lt;module&gt;\n    x[0] = 'X'\nTypeError: 'str' object does not support item assignment\n\n<\/code><\/pre>\n\n<p>\nYou must instead create a new string by slicing up the string and joining together the pieces, and then saving the result back to the original variable:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"str-immutable2\"><code data-lang=\"py3\">x = 'hello world'\nx = 'X' + x[1:]\nprint(x)\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"str-immutable2\"><code data-lang=\"py3\"><o>'Xello world'\n<\/o>\n<\/code><\/pre>\n\n<p>\nEvery operation that looks like it is modifying a string is actually creating a new string.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Sloth Speak",
              "purpose":"",
              "problem":"py3-sloth-speak",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Re-sounding Success",
              "purpose":"",
              "problem":"aca-py3-re-sounding-echo",
              "type":1
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>We've seen how to call a method on a string object (like <code data-lang=\"py3\">upper<\/code>), and introduced a couple of string methods for converting strings to uppercase and lowercase, and replacing bits of a string with other strings.  Here are a few more string tricks...\n<\/p>\n<p>\nChecking if a string starts or ends with a substring:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"stars-ends-with\"><code data-lang=\"py3\">s = 'hello world'\nprint(s.startswith('hello'))\nprint(s.endswith('rld'))\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"stars-ends-with\"><code data-lang=\"py3\">\n<o>True<\/o>\n<o>True\n<\/o>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "title":"Checking the ends of a string",
              "notes_rendered":"",
              "content_rendered":"<p>We've seen how to call a method on a string object (like <code data-lang=\"py3\">upper<\/code>), and introduced a couple of string methods for converting strings to uppercase and lowercase, and replacing bits of a string with other strings.  Here are a few more string tricks...\n<\/p>\n<p>\nChecking if a string starts or ends with a substring:\n<\/p>\n<pre class=\"js-editor\" data-eg-id=\"stars-ends-with\"><code data-lang=\"py3\">s = 'hello world'\nprint(s.startswith('hello'))\nprint(s.endswith('rld'))\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"stars-ends-with\"><code data-lang=\"py3\">\n<o>True<\/o>\n<o>True\n<\/o>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"py3-unbelieve-a-bull",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: That's exciting!",
              "purpose":"",
              "problem":"aca-py3-exciting",
              "type":1
            }
          ],
          "title":"Slices of strings"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>As you write longer and more complex programs, it can be very helpful to add notes to the code to remind you what it does.<\/p>\n\n<p>In Python you can put a hash (<code data-lang=\"py3\">#<\/code>) on any line, and anything that comes after it will be ignored.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"comments-hello-eg\"><code data-lang=\"py3\">\n# This is just a comment, it doesn't do anything.\nprint('Hello')\n# Another comment\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"comments-hello-eg\"><code data-lang=\"py3\"><o>Hello<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>This is useful to help explain a difficult part of the code, or to divide up code into steps.<\/p>"
                }
              ],
              "layout":0,
              "title":"Commenting on your code",
              "notes_rendered":"",
              "content_rendered":"<p>As you write longer and more complex programs, it can be very helpful to add notes to the code to remind you what it does.<\/p>\n\n<p>In Python you can put a hash (<code data-lang=\"py3\">#<\/code>) on any line, and anything that comes after it will be ignored.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"comments-hello-eg\"><code data-lang=\"py3\">\n# This is just a comment, it doesn't do anything.\nprint('Hello')\n# Another comment\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"comments-hello-eg\"><code data-lang=\"py3\"><o>Hello<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>This is useful to help explain a difficult part of the code, or to divide up code into steps.<\/p>",
              "purpose":"",
              "type":0
            }
          ],
          "title":"Comments"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Congratulations, you have just completed the module on Investigating strings!<\/p>\n\n<p>In this module we learned a lot about strings and we covered the following topics:<\/p>\n<ul>\n<li>Finding if a character or string is inside another string;<\/li>\n<li>checking if strings are upper or lowercase;<\/li>\n<li>converting strings to all-caps or lowercase letters;<\/li>\n<li>replacing parts of a string;<\/li>\n<li>picking out characters from a string by number.<\/li>\n<\/ul>\n"
                }
              ],
              "layout":0,
              "title":"Congratulations!",
              "notes_rendered":"",
              "content_rendered":"<p>Congratulations, you have just completed the module on Investigating strings!<\/p>\n\n<p>In this module we learned a lot about strings and we covered the following topics:<\/p>\n<ul>\n<li>Finding if a character or string is inside another string;<\/li>\n<li>checking if strings are upper or lowercase;<\/li>\n<li>converting strings to all-caps or lowercase letters;<\/li>\n<li>replacing parts of a string;<\/li>\n<li>picking out characters from a string by number.<\/li>\n<\/ul>\n",
              "purpose":"",
              "type":0
            }
          ],
          "title":"Congratulations!"
        }
      ],
      "title":"Investigating strings",
      "label":"aca-python-yr78-strings",
      "updated_at":"2017-11-15T06:41:12.534951+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nLet's put what we've learnt so far into practice! In each of the Project modules in this course, we're going to write word games.\n\nIn this project, we'll start off with [Mad Libs](https:\/\/en.wikipedia.org\/wiki\/Mad_Libs).\nMad Libs is a game where one player asks the other for answers that fit a specific category, and then those answers are substituted in for blanks in a story.\n\nWe'll work up to more and more complex games in each project, and each project will start off small and build to something bigger."
                }
              ],
              "layout":0,
              "title":"Making simple games",
              "notes_rendered":"",
              "content_rendered":"<p>Let's put what we've learnt so far into practice! In each of the Project modules in this course, we're going to write word games.<\/p>\n<p>In this project, we'll start off with <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/Mad_Libs\">Mad Libs<\/a>.\nMad Libs is a game where one player asks the other for answers that fit a specific category, and then those answers are substituted in for blanks in a story.<\/p>\n<p>We'll work up to more and more complex games in each project, and each project will start off small and build to something bigger.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: New Black",
              "purpose":"",
              "problem":"py3-x-is-the-new-y",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Mad Libs 1: Letters from camp!",
              "purpose":"",
              "problem":"py3-mad-libs-0",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Mad Libs Part 3: That's a Spicy Meatball!",
              "purpose":"",
              "problem":"py3-mad-libs-1",
              "type":1
            }
          ],
          "title":"Making simple games"
        }
      ],
      "title":"Project 1",
      "label":"aca-python-yr78-project1",
      "updated_at":"2017-11-15T06:40:56.863535+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>When working with strings, we often want to change the case from uppercase to lowercase or vice versa. To do this, and many other string manipulations we can use <em>string methods<\/em>.<\/p>\n\n<p>This is best demonstrated with an example.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"introducing-str-modification-lower\"><code data-lang=\"py3\">\nmsg = 'I know my ABC'\nprint(msg.lower())\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"introducing-str-modification-lower\"><code data-lang=\"py3\">\n<o>i know my abc\n<\/o>\n<\/code><\/pre>\n\n<p>The method we are using here is <code data-lang=\"py3\">lower<\/code>. The <code data-lang=\"py3\">msg<\/code> string contains a message in mixed case, and when you call the <code data-lang=\"py3\">lower<\/code> method it gives back a new message in lowercase only.<\/p>"
                }
              ],
              "layout":0,
              "title":"Changing text to lowercase",
              "notes_rendered":"",
              "content_rendered":"<p>When working with strings, we often want to change the case from uppercase to lowercase or vice versa. To do this, and many other string manipulations we can use <em>string methods<\/em>.<\/p>\n\n<p>This is best demonstrated with an example.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"introducing-str-modification-lower\"><code data-lang=\"py3\">\nmsg = 'I know my ABC'\nprint(msg.lower())\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"introducing-str-modification-lower\"><code data-lang=\"py3\">\n<o>i know my abc\n<\/o>\n<\/code><\/pre>\n\n<p>The method we are using here is <code data-lang=\"py3\">lower<\/code>. The <code data-lang=\"py3\">msg<\/code> string contains a message in mixed case, and when you call the <code data-lang=\"py3\">lower<\/code> method it gives back a new message in lowercase only.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>This can get a bit confusing, so look closely.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"introducing-str-modification-immutability\"><code data-lang=\"py3\">\nmessage = 'I know my ABC'\nmessage.lower()\nprint(message)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"introducing-str-modification-immutability\"><code data-lang=\"py3\"><o>I know my ABC<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Even though we used the <code data-lang=\"py3\">lower<\/code> method, the string hasn't changed!<\/p> \n\n<p>The <code data-lang=\"py3\">lower<\/code> method actually creates a new string which is the lowercase version of the original message. The original is not changed at all!<\/p>\n\n<p>In this case we haven't saved the new lowercase version in a variable, so it's gone. Instead we should save it:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"introducing-str-modification-immutability2\"><code data-lang=\"py3\">\nmessage = 'I know my ABC'\nnew_message = message.lower()\nprint(message)\nprint(new_message)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"introducing-str-modification-immutability2\"><code data-lang=\"py3\"><o>I know my ABC<\/o>\n<o>i know my abc<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Now we can use both the original and lowercase versions of the string.<\/p>"
                }
              ],
              "layout":0,
              "title":"The original doesn't change",
              "notes_rendered":"",
              "content_rendered":"<p>This can get a bit confusing, so look closely.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"introducing-str-modification-immutability\"><code data-lang=\"py3\">\nmessage = 'I know my ABC'\nmessage.lower()\nprint(message)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"introducing-str-modification-immutability\"><code data-lang=\"py3\"><o>I know my ABC<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Even though we used the <code data-lang=\"py3\">lower<\/code> method, the string hasn't changed!<\/p> \n\n<p>The <code data-lang=\"py3\">lower<\/code> method actually creates a new string which is the lowercase version of the original message. The original is not changed at all!<\/p>\n\n<p>In this case we haven't saved the new lowercase version in a variable, so it's gone. Instead we should save it:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"introducing-str-modification-immutability2\"><code data-lang=\"py3\">\nmessage = 'I know my ABC'\nnew_message = message.lower()\nprint(message)\nprint(new_message)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"introducing-str-modification-immutability2\"><code data-lang=\"py3\"><o>I know my ABC<\/o>\n<o>i know my abc<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Now we can use both the original and lowercase versions of the string.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Of course we might want to do the opposite of <code data-lang=\"py3\">lower<\/code>, and get the uppercase version of our string. The method for doing this is, not surprisingly, called <code data-lang=\"py3\">upper<\/code>:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"str-upper\"><code data-lang=\"py3\">\nmsg = 'I know my ABC'\nnewmsg = msg.upper()\nprint(newmsg)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"str-upper\"><code data-lang=\"py3\"><o>I KNOW MY ABC<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Just like the <code data-lang=\"py3\">lower<\/code> method, <code data-lang=\"py3\">upper<\/code> is part of a family of methods that all return a new version of the string; the original string doesn't change.<\/p>\n\n<p>Methods can also be used in expressions with a print statement, and only the output of the method will be printed. For example:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"str-modification-lower-info\"><code data-lang=\"py3\">\nmsg = 'I know my ABC'\nprint('Lowercase: ' + msg.lower())\nprint('Uppercase: ' + msg.upper())\nprint('Original: ' + msg)\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"str-modification-lower-info\"><code data-lang=\"py3\"><o>Lowercase: i know my abc<\/o>\n<o>Uppercase: I KNOW MY ABC<\/o>\n<o>Original: I know my ABC<\/o>\n<o><\/o>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "title":"Changing text to uppercase",
              "notes_rendered":"",
              "content_rendered":"<p>Of course we might want to do the opposite of <code data-lang=\"py3\">lower<\/code>, and get the uppercase version of our string. The method for doing this is, not surprisingly, called <code data-lang=\"py3\">upper<\/code>:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"str-upper\"><code data-lang=\"py3\">\nmsg = 'I know my ABC'\nnewmsg = msg.upper()\nprint(newmsg)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"str-upper\"><code data-lang=\"py3\"><o>I KNOW MY ABC<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Just like the <code data-lang=\"py3\">lower<\/code> method, <code data-lang=\"py3\">upper<\/code> is part of a family of methods that all return a new version of the string; the original string doesn't change.<\/p>\n\n<p>Methods can also be used in expressions with a print statement, and only the output of the method will be printed. For example:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"str-modification-lower-info\"><code data-lang=\"py3\">\nmsg = 'I know my ABC'\nprint('Lowercase: ' + msg.lower())\nprint('Uppercase: ' + msg.upper())\nprint('Original: ' + msg)\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"str-modification-lower-info\"><code data-lang=\"py3\"><o>Lowercase: i know my abc<\/o>\n<o>Uppercase: I KNOW MY ABC<\/o>\n<o>Original: I know my ABC<\/o>\n<o><\/o>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question:",
              "purpose":"",
              "problem":"py3-shout-it",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Breaking the fourth wall",
              "purpose":"",
              "problem":"py3-breaking-fourth-wall",
              "type":1
            }
          ],
          "title":"Uppercase and lowercase"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>We can find out how long a string is using the <code data-lang=\"py3\">len<\/code> function:\n<\/p><pre class=\"js-editor\" data-eg-id=\"len-hello-world\"><code data-lang=\"py3\">\nprint(len('Hello World!'))\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"len-hello-world\"><code data-lang=\"py3\">\n<o>12<\/o>\n\n<\/code><\/pre>\n<p>Notice that the <code data-lang=\"py3\">len<\/code> function counts all the characters, including the 5 letters in <code data-lang=\"py3\">\"Hello\"<\/code>, the space, the 5 letters in \n<code data-lang=\"py3\">\"World\"<\/code>, and the exclamation mark.<\/p>\n\n<p>As another example, we can count the number of letters in the alphabet, by first storing the letters of the alphabet in a variable <code data-lang=\"py3\">a<\/code>:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"len-alphabet\"><code data-lang=\"py3\">\na = \"abcdefghijklmnopqrstuvwxyz\"\nprint(len(a))\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"len-alphabet\"><code data-lang=\"py3\">\n<o>26<\/o>\n\n<\/code><\/pre>"
                }
              ],
              "layout":0,
              "title":"Finding the length of a string",
              "notes_rendered":"",
              "content_rendered":"<p>We can find out how long a string is using the <code data-lang=\"py3\">len<\/code> function:\n<\/p><pre class=\"js-editor\" data-eg-id=\"len-hello-world\"><code data-lang=\"py3\">\nprint(len('Hello World!'))\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"len-hello-world\"><code data-lang=\"py3\">\n<o>12<\/o>\n\n<\/code><\/pre>\n<p>Notice that the <code data-lang=\"py3\">len<\/code> function counts all the characters, including the 5 letters in <code data-lang=\"py3\">\"Hello\"<\/code>, the space, the 5 letters in \n<code data-lang=\"py3\">\"World\"<\/code>, and the exclamation mark.<\/p>\n\n<p>As another example, we can count the number of letters in the alphabet, by first storing the letters of the alphabet in a variable <code data-lang=\"py3\">a<\/code>:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"len-alphabet\"><code data-lang=\"py3\">\na = \"abcdefghijklmnopqrstuvwxyz\"\nprint(len(a))\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"len-alphabet\"><code data-lang=\"py3\">\n<o>26<\/o>\n\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Another useful string method is <code data-lang=\"py3\">count<\/code>, which allows you to count how many times a substring is contained in another string.<\/p>\n\n<p>For example, to work out how many times <code data-lang=\"py3\">'l'<\/code> appears in <code data-lang=\"py3\">'hello world'<\/code>:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g2-counting-the-characters-in-a-string-0\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg.count('l'))\n<\/code><\/pre>\n\n<p>This also works for multi-character strings. For example, to work out how many times double l appears:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g2-counting-the-characters-in-a-string-1\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg.count('ll'))\n<\/code><\/pre>\n\n<p>Remember that the convention for calling string methods is that the string we are manipulating comes first, and then the method name, with any other information that is required passed in as arguments.<\/p> "
                }
              ],
              "layout":0,
              "title":"Counting the characters in a string",
              "notes_rendered":"",
              "content_rendered":"<p>Another useful string method is <code data-lang=\"py3\">count<\/code>, which allows you to count how many times a substring is contained in another string.<\/p>\n\n<p>For example, to work out how many times <code data-lang=\"py3\">'l'<\/code> appears in <code data-lang=\"py3\">'hello world'<\/code>:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"eg-g2-counting-the-characters-in-a-string-0\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg.count('l'))\n<\/code><\/pre>\n\n<p>This also works for multi-character strings. For example, to work out how many times double l appears:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"eg-g2-counting-the-characters-in-a-string-1\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg.count('ll'))\n<\/code><\/pre>\n\n<p>Remember that the convention for calling string methods is that the string we are manipulating comes first, and then the method name, with any other information that is required passed in as arguments.<\/p> ",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Twittier: Can I Tweet that?",
              "purpose":"",
              "problem":"py3-tweet-length",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: How good is your vocabulary?",
              "purpose":"",
              "problem":"aca-py3-vocab-length",
              "type":1
            }
          ],
          "title":"Counting characters"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>You can replace part of a string (a substring) with another substring using the <code data-lang=\"py3\">replace<\/code> method. This requires you to pass the string data you wish to replace and the string you wish to replace it with as arguments to the method.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"str-replace\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg.replace('l', 'X'))\n<\/code><\/pre>\n<p>In this example, all the cases of the letter <code data-lang=\"py3\">'l'<\/code> are replaced by the letter <code data-lang=\"py3\">'X'<\/code>:<\/p>\n<pre class=\"js-terminal\" data-eg-id=\"str-replace\"><code data-lang=\"py3\">\n<o>heXXo worXd\n<\/o>\n<\/code><\/pre>\n<p>You can replace multiple characters at once:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"str-replace2\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg.replace('hello', 'goodbye'))\n<\/code><\/pre>\n<p>And you can do replace multiple times in sequence:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"str-replace3\"><code data-lang=\"py3\">\nmsg = 'hello world'\nmsg = msg.replace('hello', 'goodbye')\nmsg = msg.replace('o', 'X')\nprint(msg)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"str-replace3\"><code data-lang=\"py3\">\n<o>gXXdbye wXrld\n<\/o>\n<\/code><\/pre>\n<p>In this example, <code data-lang=\"py3\">'hello'<\/code> is replaced with <code data-lang=\"py3\">'goodbye'<\/code> and then <code data-lang=\"py3\">'o'<\/code> is replaced with <code data-lang=\"py3\">'X'<\/code>.<\/p>"
                }
              ],
              "layout":0,
              "title":"Replacing parts of a string",
              "notes_rendered":"",
              "content_rendered":"<p>You can replace part of a string (a substring) with another substring using the <code data-lang=\"py3\">replace<\/code> method. This requires you to pass the string data you wish to replace and the string you wish to replace it with as arguments to the method.<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"str-replace\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg.replace('l', 'X'))\n<\/code><\/pre>\n<p>In this example, all the cases of the letter <code data-lang=\"py3\">'l'<\/code> are replaced by the letter <code data-lang=\"py3\">'X'<\/code>:<\/p>\n<pre class=\"js-terminal\" data-eg-id=\"str-replace\"><code data-lang=\"py3\">\n<o>heXXo worXd\n<\/o>\n<\/code><\/pre>\n<p>You can replace multiple characters at once:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"str-replace2\"><code data-lang=\"py3\">\nmsg = 'hello world'\nprint(msg.replace('hello', 'goodbye'))\n<\/code><\/pre>\n<p>And you can do replace multiple times in sequence:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"str-replace3\"><code data-lang=\"py3\">\nmsg = 'hello world'\nmsg = msg.replace('hello', 'goodbye')\nmsg = msg.replace('o', 'X')\nprint(msg)\n<\/code><\/pre>\n<pre class=\"js-terminal\" data-eg-id=\"str-replace3\"><code data-lang=\"py3\">\n<o>gXXdbye wXrld\n<\/o>\n<\/code><\/pre>\n<p>In this example, <code data-lang=\"py3\">'hello'<\/code> is replaced with <code data-lang=\"py3\">'goodbye'<\/code> and then <code data-lang=\"py3\">'o'<\/code> is replaced with <code data-lang=\"py3\">'X'<\/code>.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Telegram",
              "purpose":"",
              "problem":"py3-telegram",
              "type":1
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Trackwork",
              "purpose":"",
              "problem":"aca-py3-trackwork",
              "type":1
            }
          ],
          "title":"Parts of strings"
        }
      ],
      "title":"Strings: working with words",
      "label":"aca-python-yr78-module3-string-intro",
      "updated_at":"2017-11-15T06:40:37.804547+00:00",
      "concepts":[

      ]
    }
  ],
  "problems":[
    {
      "language":0,
      "title":"Level Up!",
      "notes":"#markdown\n<p>\n  To solve this question, we need to add one to a number - the user's \"level\" - which we read in. But <code data-lang=\"py3\">input<\/code> returns a string, so we have to convert it to an integer using <code data-lang=\"py3\">int<\/code> first:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-input\"><code data-lang=\"py3\">\nlevel = int(input('Level: '))\n<\/code><\/pre>\n\nYou can do this in one line, or two:\n```\nlevel = input('Level: ')\nlevel = int(level)\n```\n\n<p>\n  Once we have the user's level as a number, we can add one to it:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-calc\"><code data-lang=\"py3\">\nlevel = input('Level: ')\nlevel = int(level)\nnewlevel = level + 1\n<\/code><\/pre>\n\n<p>\n  Finally, we should print it, either using <code data-lang=\"py3\">str<\/code> to convert back to a string:\n<\/p>\n\n```norun;\nprint(f'Congratulations! You have reached level ' + str(newlevel) + '!')\n```\n\nOr using *f-strings*, which let you print values stored in variables directly:\n\n```norun;\nprint(f'Congratulations! You have reached level {level + 1}!')\n```",
      "updated_at":"2017-09-14T03:16:07.120290+00:00",
      "label":"py3-level-up-int",
      "content":"#markdown\nCongratulations! Your character has levelled up! \n\nWrite a program that reads in what level the character was, and congratulates you on reaching the next level.\nFor example:\n\n\n```lang:py3;terminal;eg:none;\nLevel: @@@2\nCongratulations! You have reached level 3!\n\n```\n\nHere is another example:\n```lang:py3;terminal;eg:none;\nLevel: @@@15\nCongratulations! You have reached level 16!\n\n```\n\nNo matter what level you get to, you can always reach a level higher!\n```lang:py3;terminal;eg:none;\nLevel: @@@99\nCongratulations! You have reached level 100!\n\n```",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  We need the age as an integer so we can do maths, like subtraction, but <code data-lang=\"py3\">input<\/code> returns a string. So, we have to convert it with <code data-lang=\"py3\">int<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-input\"><code data-lang=\"py3\">\nage = int(input(\"How old are you?  \"))\n<\/code><\/pre>\n\n<p>\n  Once we have the user's age as a number, we can work out how long you'll have to wait for your letter:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-calc\"><code data-lang=\"py3\">\nage = int(input(\"How old are you?  \"))\nwait = 100 - age\nprint(wait)\n<\/code><\/pre>\n\n<p>\n  And finally, we can print it, using <code data-lang=\"py3\">str<\/code> to convert back to a string:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-cast-str\"><code data-lang=\"py3\">\nprint('You must wait ' + str(wait) + ' years.')\n<\/code><\/pre>\n\n<p>\n  Try out this version to see the <code data-lang=\"err\">TypeError<\/code> you get if you forgot to turn (<em>cast<\/em>) <code data-lang=\"py3\">wait<\/code> back into a string:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-no-cast-error\"><code data-lang=\"py3\">\nage = int(input('How old are you? '))\nwait = 100 - age\nprint('You must wait ' + wait + ' years.')\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Nooooooooo!",
      "notes":"<p>\n  Once you know string multiplication this question is much easier!  But it can be fiddly to get the string exactly right, since you need to multiply the <code data-lang=\"py3\">'o'<\/code> and then add the <code data-lang=\"py3\">'N'<\/code> on the front.<\/p>\n\n<p>\n  We start off by reading in how long to hold our &ldquo;Noooooooo&rdquo; for.\n  We'll need to use <code data-lang=\"py3\">input<\/code> and <code data-lang=\"py3\">int<\/code> to get a number, not a string.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nooooo-input\" runnable=\"false\"><code data-lang=\"py3\">\nlength = int(input('How long? '))\n<\/code><\/pre>\n\n<p>\n  From there, we multiply just the <code data-lang=\"py3\">'o'<\/code> by the stored <code data-lang=\"py3\">length<\/code>, to make the long <code data-lang=\"out\">oooo...<\/code>\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nooooo-str-mult\"><code data-lang=\"py3\">\nlength = int(input('How long? '))\nprint('o'*length)\n<\/code><\/pre>\n\n<p>\n  Finally, we add the <code data-lang=\"py3\">'N'<\/code> to the front of our defiant cry:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nooooo-str-mult-add\"><code data-lang=\"py3\">\nlength = int(input('How long? '))\nprint('N' + 'o'*length)\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2><code data-lang=\"py3\">length<\/code> and not <code data-lang=\"py3\">len<\/code><\/h2>\n  <p>\n    <code data-lang=\"py3\">len<\/code> is a Python function that returns the length of a string, so you don't want to use it as a variable name. That's why we used <code data-lang=\"py3\">length<\/code> as our variable.\n  <\/p>\n<\/aside>",
      "updated_at":"2016-08-07T11:37:35.405831+00:00",
      "label":"py3-nooooo",
      "content":"<p>\n  When writing a movie script, sometimes you want a simple &ldquo;No&rdquo; and sometimes a longer dramatic &ldquo;Noooooooo&rdquo;.\n<\/p>\n\n<p>\n  Write a program which asks how long the <code data-lang=\"out\">No<\/code> should be, then uses that number of <code data-lang=\"out\">o<\/code>'s.  Here is an example:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>How long? <\/o><i>1<\/i>\n<o>No<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Here is another example with more <code data-lang=\"out\">o<\/code>'s:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>How long? <\/o><i>10<\/i>\n<o>Noooooooooo<\/o>\n<o><\/o>\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "int",
        "print",
        "string:mult"
      ],
      "choices":"{}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  Once you know string multiplication this question is much easier!  But it can be fiddly to get the string exactly right, since you need to multiply the <code data-lang=\"py3\">'o'<\/code> and then add the <code data-lang=\"py3\">'N'<\/code> on the front.<\/p>\n\n<p>\n  We start off by reading in how long to hold our &ldquo;Noooooooo&rdquo; for.\n  We'll need to use <code data-lang=\"py3\">input<\/code> and <code data-lang=\"py3\">int<\/code> to get a number, not a string.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nooooo-input\" runnable=\"false\"><code data-lang=\"py3\">\nlength = int(input('How long? '))\n<\/code><\/pre>\n\n<p>\n  From there, we multiply just the <code data-lang=\"py3\">'o'<\/code> by the stored <code data-lang=\"py3\">length<\/code>, to make the long <code data-lang=\"out\">oooo...<\/code>\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nooooo-str-mult\"><code data-lang=\"py3\">\nlength = int(input('How long? '))\nprint('o'*length)\n<\/code><\/pre>\n\n<p>\n  Finally, we add the <code data-lang=\"py3\">'N'<\/code> to the front of our defiant cry:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nooooo-str-mult-add\"><code data-lang=\"py3\">\nlength = int(input('How long? '))\nprint('N' + 'o'*length)\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2><code data-lang=\"py3\">length<\/code> and not <code data-lang=\"py3\">len<\/code><\/h2>\n  <p>\n    <code data-lang=\"py3\">len<\/code> is a Python function that returns the length of a string, so you don't want to use it as a variable name. That's why we used <code data-lang=\"py3\">length<\/code> as our variable.\n  <\/p>\n<\/aside>\n"
    },
    {
      "language":0,
      "title":"Letter from the Queen",
      "notes":"#markdown\n<p>\n  We need the age as an integer so we can do maths, like subtraction, but <code data-lang=\"py3\">input<\/code> returns a string. So, we have to convert it with <code data-lang=\"py3\">int<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-input\"><code data-lang=\"py3\">\nage = int(input(\"How old are you?  \"))\n<\/code><\/pre>\n\n<p>\n  Once we have the user's age as a number, we can work out how long you'll have to wait for your letter:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-calc\"><code data-lang=\"py3\">\nage = int(input(\"How old are you?  \"))\nwait = 100 - age\nprint(wait)\n<\/code><\/pre>\n\n<p>\n  And finally, we can print it, using <code data-lang=\"py3\">str<\/code> to convert back to a string:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-cast-str\"><code data-lang=\"py3\">\nprint('You must wait ' + str(wait) + ' years.')\n<\/code><\/pre>\n\n<p>\n  Try out this version to see the <code data-lang=\"err\">TypeError<\/code> you get if you forgot to turn (<em>cast<\/em>) <code data-lang=\"py3\">wait<\/code> back into a string:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-no-cast-error\"><code data-lang=\"py3\">\nage = int(input('How old are you? '))\nwait = 100 - age\nprint('You must wait ' + wait + ' years.')\n<\/code><\/pre>\n\n\nThe other option is to use *f-strings*, which simplifies printing out the message a bit!\n\n```\nage = int(input('How old are you? '))\nwait = 100 - age\nprint(f'You must wait {wait} years.')\n```",
      "updated_at":"2017-07-21T06:04:45.460562+00:00",
      "label":"py3-letter-from-the-queen",
      "content":"<p>\n  For nearly 100 years, there has been a tradition that citizens of the United Kingdom and Commonwealth countries receive a letter from the King or Queen on their <a href=\" https:\/\/en.wikipedia.org\/wiki\/Centenarian#British_and_Commonwealth_traditions\" target=\"_blank\">100th birthday<\/a>.\n<\/p>\n\n<p>\n  Write a program that works out how long until your letter arrives!\n<\/p>\n\n<p>\n  Your program should ask the user how old they are then calculate 100 minus their age.\n  For example:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>How old are you? <\/o><i>14<\/i>\n<o>You must wait 86 years.<o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Here is another example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>How old are you? <\/o><i>52<\/i>\n<o>You must wait 48 years.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If you're already over 100, the answer is a negative number:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>How old are you? <\/o><i>102<\/i>\n<o>You must wait -2 years.<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\n<p>\n  We need the age as an integer so we can do maths, like subtraction, but <code data-lang=\"py3\">input<\/code> returns a string. So, we have to convert it with <code data-lang=\"py3\">int<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-input\"><code data-lang=\"py3\">\nage = int(input(\"How old are you?  \"))\n<\/code><\/pre>\n\n<p>\n  Once we have the user's age as a number, we can work out how long you'll have to wait for your letter:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-calc\"><code data-lang=\"py3\">\nage = int(input(\"How old are you?  \"))\nwait = 100 - age\nprint(wait)\n<\/code><\/pre>\n\n<p>\n  And finally, we can print it, using <code data-lang=\"py3\">str<\/code> to convert back to a string:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-cast-str\"><code data-lang=\"py3\">\nprint('You must wait ' + str(wait) + ' years.')\n<\/code><\/pre>\n\n<p>\n  Try out this version to see the <code data-lang=\"err\">TypeError<\/code> you get if you forgot to turn (<em>cast<\/em>) <code data-lang=\"py3\">wait<\/code> back into a string:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-no-cast-error\"><code data-lang=\"py3\">\nage = int(input('How old are you? '))\nwait = 100 - age\nprint('You must wait ' + wait + ' years.')\n<\/code><\/pre>\n\n\nThe other option is to use *f-strings*, which simplifies printing out the message a bit!\n\n```\nage = int(input('How old are you? '))\nwait = 100 - age\nprint(f'You must wait {wait} years.')\n```"
    },
    {
      "language":0,
      "title":"Next Olympics",
      "notes":"<p>To solve this question, we'll need to use <code data-lang=\"py3\">input<\/code> to ask user for the year of the previous summer olympics. Since we're dealing with numbers, not strings, we will need to make sure we turn the input into integers using the <code data-lang=\"py3\">int<\/code> function.<\/p>\n\n<p>There are a few different ways to do this.\nOne option is to read in the information, and then turn it into an integer on the next line: <\/p>\n<pre class=\"js-editor\" data-eg-id=\"next-olympics-soln0\"><code data-lang=\"py3\">year = input('When is the Olympics? ')\nyear = int(year)\n<\/code><\/pre>\n\n<p>Another option is to do this all at once on the same line. This works by first getting the <code data-lang=\"py3\">input<\/code>, and then taking the message that the user types in and turning that into an integer, <em>saving it back<\/em> into our variable <code data-lang=\"py3\">year<\/code>. (Or we could save it into a new variable, if we wanted.)\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"next-olympics-soln1\"><code data-lang=\"py3\">year = int(input('When is the Olympics? '))<\/code><\/pre>\n<p>The second step is to print out the message and the year of the next olympic, which is calculated by adding 4 to the year of the previous summer olympics: <\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"next-olympics-soln2\" data-runnable=\"false\"><code data-lang=\"py3\">\nprint('The next Olympics is in...')\nprint(year + 4)\n<\/code><\/pre>\n\n<p>And that's it! So we can now piece these two steps together to form the final solution.<\/p>",
      "updated_at":"2017-07-22T08:35:28.737304+00:00",
      "label":"py3-next-olympics",
      "content":"<p>\n  The summer <a href=\"https:\/\/en.wikipedia.org\/wiki\/Olympic_Games\" target=\"_blank\">Olympic Games<\/a> happen every 4 years. \n<\/p>\n\n<p>\n  Write a program which asks for the year of the previous summer Olympics, then prints the year of the next Olympics (by adding 4).\n<\/p>\n\n<p>Here's how it should work:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>When is the Olympics? <\/o><i>2016<\/i>\n<o>The next Olympics is in...<\/o>\n<o>2020<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Here's another example:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>When is the Olympics? <\/o><i>2020<\/i>\n<o>The next Olympics is in...<\/o>\n<o>2024<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Your program should still add 4, even if the year entered is wrong:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>When is the Olympics? <\/o><i>2011<\/i>\n<o>The next Olympics is in...<\/o>\n<o>2015<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Converting the inputs into numbers<\/h2>\n  <p>\n    You'll need to convert the input into an integer using <code data-lang=\"py3\">int<\/code>.\n  <\/p>\n<\/aside>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "int",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>To solve this question, we'll need to use <code data-lang=\"py3\">input<\/code> to ask user for the year of the previous summer olympics. Since we're dealing with numbers, not strings, we will need to make sure we turn the input into integers using the <code data-lang=\"py3\">int<\/code> function.<\/p>\n\n<p>There are a few different ways to do this.\nOne option is to read in the information, and then turn it into an integer on the next line: <\/p>\n<pre class=\"js-editor\" data-eg-id=\"next-olympics-soln0\"><code data-lang=\"py3\">year = input('When is the Olympics? ')\nyear = int(year)\n<\/code><\/pre>\n\n<p>Another option is to do this all at once on the same line. This works by first getting the <code data-lang=\"py3\">input<\/code>, and then taking the message that the user types in and turning that into an integer, <em>saving it back<\/em> into our variable <code data-lang=\"py3\">year<\/code>. (Or we could save it into a new variable, if we wanted.)\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"next-olympics-soln1\"><code data-lang=\"py3\">year = int(input('When is the Olympics? '))<\/code><\/pre>\n\n<p>The second step is to print out the message and the year of the next olympic, which is calculated by adding 4 to the year of the previous summer olympics: <\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"next-olympics-soln2\" data-runnable=\"false\"><code data-lang=\"py3\">\nprint('The next Olympics is in...')\nprint(year + 4)\n<\/code><\/pre>\n\n<p>And that's it! So we can now piece these two steps together to form the final solution.<\/p>"
    },
    {
      "language":0,
      "title":"Twice as big",
      "notes":"#markdown\nTo solve this question, we'll need to use <code data-lang=\"py3\">input<\/code> to ask user for a number. \n\n\nRemember that `input` reads in a string. Since we're dealing with numbers, not strings, we will need to make sure we turn the input into integers using the <code data-lang=\"py3\">int<\/code> function.\n\n\nWe've provided the start of your program that does exactly that:\n```\nnumber = input('What is the number? ')\nnumber = int(number)\n\n```\n\nYou could also do it in just one line! Another option is to do this all at once on the same line. This works by first getting the <code data-lang=\"py3\">input<\/code>, and then taking the message that the user types in and turning that into an integer, <em>saving it back<\/em> into our variable <code data-lang=\"py3\">number<\/code>. \n\n\n```\nnumber = int(input('What is the number? '))\n```\n\nThere's no specific benefit or disadvantage to either way. Just use whatever you're comfortable with!\n\nBoth options read in information from the user, asking `'What is the number? '`, and then converts it to an integer before saving it in a variable which we've called `number`.\n\nThen we need to print out the number multiplied by two! Remember that in Python, the way to multiply number is using `*`:\n```\nprint(number * 2)\n```",
      "updated_at":"2017-09-13T12:44:56.066221+00:00",
      "label":"aca-py3-twice-as-big",
      "content":"#markdown\nWhat's the biggest number you can think of? I bet I can think of one that's twice as big!\n\nWrite a program which asks the user for a number, and prints out a number twice as big as it.\n\nWe've given you a start with reading in the number.\n\n<p>Here's how your program should work:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What is the number? <\/o><i>1000<\/i>\n<o>2000<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Here's another example, with a small number:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What is the number? <\/o><i>2<\/i>\n<o>4<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Here's another example:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What is the number? <\/o><i>44444<\/i>\n<o>88888<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n\n> ## Converting the input into numbers\n> You'll need to convert the input into an integer using <code data-lang=\"py3\">int<\/code>.\n> We've started you off with this line:\n>\n> ```\n> number = int(input('What is the number? '))\n> \n> ```\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"number = input('What is the number? ')\\nnumber = int(number)\\n\\n\",\"path\":\"program.py\",\"is_static\":false,\"undeletable\":true}]",
      "concepts":[
        "input",
        "int",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nTo solve this question, we'll need to use <code data-lang=\"py3\">input<\/code> to ask user for a number. \n\n\nRemember that `input` reads in a string. Since we're dealing with numbers, not strings, we will need to make sure we turn the input into integers using the <code data-lang=\"py3\">int<\/code> function.\n\n\nWe've provided the start of your program that does exactly that:\n```\nnumber = input('What is the number? ')\nnumber = int(number)\n```\n\nYou could also do it in just one line! Another option is to do this all at once on the same line. This works by first getting the <code data-lang=\"py3\">input<\/code>, and then taking the message that the user types in and turning that into an integer, <em>saving it back<\/em> into our variable <code data-lang=\"py3\">number<\/code>. \n\n\n```\nnumber = int(input('What is the number? '))\n```\n\nThere's no specific benefit or disadvantage to either way. Just use whatever you're comfortable with!\n\nBoth options read in information from the user, asking `'What is the number? '`, and then converts it to an integer before saving it in a variable which we've called `number`.\n\nThen we need to print out the number multiplied by two! Remember that in Python, the way to multiply number is using `*`:\n```\nprint(number * 2)\n```"
    },
    {
      "language":0,
      "title":"Pull a happy face",
      "notes":"<p>\n  Once you know string multiplication this question is much easier!  But it can be fiddly to get the string exactly right, since you need to multiply the underscore <code data-lang=\"py3\">'_'<\/code> and add the <code data-lang=\"py3\">'^'<\/code> to the front and end of the string.<\/p>\n\n<p>\n  We start off by reading in how happy to pull our face.\n  We'll need to use <code data-lang=\"py3\">input<\/code> and <code data-lang=\"py3\">int<\/code> to get a number, not a string.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nooooo-input\" runnable=\"false\"><code data-lang=\"py3\">\nlength = int(input('How happy? '))\n<\/code><\/pre>\n\n<p>\n  From there, we multiply just the <code data-lang=\"py3\">'_'<\/code> by the stored <code data-lang=\"py3\">length<\/code>, to make the long <code data-lang=\"out\">____<\/code> mouth.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nooooo-str-mult\"><code data-lang=\"py3\">\nlength = int(input('How happy? '))\nprint('_'*length)\n<\/code><\/pre>\n\n<p>\n  Finally, we add the <code data-lang=\"py3\">'^'<\/code> to the front and end of our mouth:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nooooo-str-mult-add\"><code data-lang=\"py3\">\nlength = int(input('How long? '))\nprint('^' + '_'*length + '^')\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2><code data-lang=\"py3\">length<\/code> and not <code data-lang=\"py3\">len<\/code><\/h2>\n  <p>\n    <code data-lang=\"py3\">len<\/code> is a Python function that returns the length of a string, so you don't want to use it as a variable name. That's why we used <code data-lang=\"py3\">length<\/code> as our variable.\n  <\/p>\n<\/aside>",
      "updated_at":"2017-07-21T05:32:35.579492+00:00",
      "label":"py3-how-happy-emoji",
      "content":"#markdown\nNow that you're getting the hang of programming, you want to show everyone how happy you are! Write a program to help you generate\n[Japanese-style emoticons](https:\/\/en.wikipedia.org\/wiki\/Japanese_Emoticons#Japanese_style)\nto express your joy. \n^_^\n\nWrite a program which asks how happy you are, and prints out a face to match!\n\n```lang:py3;terminal;eg:none;\nHow happy? @@@1\n^_^\n\n```\n\nHere is another example, where you're rather happy:\n```lang:py3;terminal;eg:none;\nHow happy? @@@3\n^___^\n\n```\n\n\nHere is another example, where you're really happy:\n\n```lang:py3;terminal;eg:none;\nHow happy? @@@10\n^__________^\n\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "int",
        "print",
        "string:mult"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  Once you know string multiplication this question is much easier!  But it can be fiddly to get the string exactly right, since you need to multiply the underscore <code data-lang=\"py3\">'_'<\/code> and add the <code data-lang=\"py3\">'^'<\/code> to the front and end of the string.<\/p>\n\n<p>\n  We start off by reading in how happy to pull our face.\n  We'll need to use <code data-lang=\"py3\">input<\/code> and <code data-lang=\"py3\">int<\/code> to get a number, not a string.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nooooo-input\" runnable=\"false\"><code data-lang=\"py3\">\nlength = int(input('How happy? '))\n<\/code><\/pre>\n\n<p>\n  From there, we multiply just the <code data-lang=\"py3\">'_'<\/code> by the stored <code data-lang=\"py3\">length<\/code>, to make the long <code data-lang=\"out\">____<\/code> mouth.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nooooo-str-mult\"><code data-lang=\"py3\">\nlength = int(input('How happy? '))\nprint('_'*length)\n<\/code><\/pre>\n\n<p>\n  Finally, we add the <code data-lang=\"py3\">'^'<\/code> to the front and end of our mouth:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nooooo-str-mult-add\"><code data-lang=\"py3\">\nlength = int(input('How long? '))\nprint('^' + '_'*length + '^')\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2><code data-lang=\"py3\">length<\/code> and not <code data-lang=\"py3\">len<\/code><\/h2>\n  <p>\n    <code data-lang=\"py3\">len<\/code> is a Python function that returns the length of a string, so you don't want to use it as a variable name. That's why we used <code data-lang=\"py3\">length<\/code> as our variable.\n  <\/p>\n<\/aside>"
    },
    {
      "language":0,
      "title":"TL;DR",
      "notes":"<p>This question is tricky because it combines both <code data-lang=\"py3\">while<\/code> loops and <code data-lang=\"py3\">if<\/code> statements.<\/p>\n\n<p>A good place to start is getting the <code data-lang=\"py3\">while<\/code> loop working first:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"tldr-solution-notes-eg1\"><code data-lang=\"py3\">\nsentence = input('Sentence: ')\nwhile sentence:\n  print('I read it.')\n  sentence = input('Sentence: ')\n<\/code><\/pre>\n\n<p>This is the same pattern as other <code data-lang=\"py3\">while<\/code> loop questions, you've done before.<\/p>\n\n<p>This gives us a clear place to add the <code data-lang=\"py3\">if<\/code> check for whether the sentence is too long. The key concept here is that the entire <code data-lang=\"py3\">if<\/code> must be indented to be within the <code data-lang=\"py3\">while<\/code> loop, and then lines inside the <code data-lang=\"py3\">if<\/code> indented again.<\/p>\n\n",
      "updated_at":"2016-11-20T02:54:02.526285+00:00",
      "label":"py3-too-long-didnt-read",
      "content":"<p>\n  <a href=\"https:\/\/en.wikipedia.org\/wiki\/TL;DR\" target=\"_blank\">TL;DR<\/a> is short for <em>too long; didn't read<\/em>.\n  A reader can use tl;dr to say a story is too long. An author can use tl;dr before a brief summary so readers can decide to read the full story or not.\n<\/p>\n\n<p>\n  Write a (rude!) program to complain when a line of input is too long.\n<\/p>\n\n<p>\n  Your program should read in multiple lines of input until a blank line is entered.\n  If the line is longer than 30 characters, your program should output <code data-lang=\"out\">TL;DR<\/code>.\n  For lines that are 30 characters or shorter, your program should output <code data-lang=\"out\">I read it.<\/code>\n<\/p>\n\n<p>\n  Here is an example of how your program should work:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Sentence: <\/o><i>This is a short sentence.<\/i>\n<o>I read it.<\/o>\n<o>Sentence: <\/o><i>This is a very long sentence and it might not get read.<\/i>\n<o>TL;DR<\/o>\n<o>Sentence: <\/o><i><\/i>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Here is a longer example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Sentence: <\/o><i>Oh my, what a beautiful day it is today!<\/i>\n<o>TL;DR<\/o>\n<o>Sentence: <\/o><i>The warm weather is delightful.<\/i>\n<o>TL;DR<\/o>\n<o>Sentence: <\/o><i>It is sunny today.<\/i>\n<o>I read it.<\/o>\n<o>Sentence: <\/o><i>The weather today's fantastic!<\/i>\n<o>I read it.<\/o>\n<o>Sentence: <\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Hint: Use <code data-lang=\"py3\">len<\/code> to find the length of a string.<\/h2>\n  <p>You can test the length of a string like this:<\/p>\n  <pre class=\"js-editor\" data-eg-id=\"tldr-example-len\"><code data-lang=\"py3\">s = input('Type something: ')\nif len(s) > 10:\n  print('That was more than 10 characters long.')\n<\/code><\/pre>\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "while",
        "multiple-lines",
        "string:len",
        "string:slice",
        "string:startswith"
      ],
      "choices":"{}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>This question is tricky because it combines both <code data-lang=\"py3\">while<\/code> loops and <code data-lang=\"py3\">if<\/code> statements.<\/p>\n\n<p>A good place to start is getting the <code data-lang=\"py3\">while<\/code> loop working first:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"tldr-teacher-notes-eg1\"><code data-lang=\"py3\">\nsentence = input('Sentence: ')\nwhile sentence:\n  print('I read it.')\n  sentence = input('Sentence: ')\n<\/code><\/pre>\n\n<p>This is the same pattern as other <code data-lang=\"py3\">while<\/code> loop questions, you've done before.<\/p>\n\n<p>This gives us a clear place to add the <code data-lang=\"py3\">if<\/code> check for whether the sentence is too long. The key concept here is that the entire <code data-lang=\"py3\">if<\/code> must be indented to be within the <code data-lang=\"py3\">while<\/code> loop, and then lines inside the <code data-lang=\"py3\">if<\/code> indented again.<\/p>\n\n<p><em>Nesting<\/em> control structures within each other is an important programming technique for students to learn, in order to build larger and more complex programs.<\/p>\n"
    },
    {
      "language":0,
      "title":"Snooze No More!",
      "notes":"<p>This question had a few things that could trip you up, since <code data-lang=\"py3\">while<\/code> loops have so many pieces to possibly get wrong.<\/p>\n\n<p>A common mistake was to forgot the second <code data-lang=\"py3\">input<\/code> so that the loop continues writing <code data-lang=\"out\">MEEP MEEP MEEP<\/code> forever (an infinite loop).<\/p>\n\n<p>Another common mistake was to swap the <code data-lang=\"py3\">print<\/code> and second <code data-lang=\"py3\">input<\/code> so that the program prints one last <code data-lang=\"out\">MEEP MEEP MEEP<\/code> even after you've already said <code data-lang=\"in\">I am up!<\/code><\/p>\n\n<p>Let's take a look at working to the solution!<\/p>\n\n<p>This program needs you to print out an annoying message to wake you up, and then ask you a question. If you don't get the question \"correct\", then the annoying message will continue! Start by printing out the annoying message:<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\nprint('MEEP MEEP MEEP')\n<\/code><\/pre>\n\n<p>Next, let's ask you a question:<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\nresponse = input('Are you up? ')\n<\/code><\/pre>\n\n<p>Remember, the annoying message needs to continue until you enter the right answer. So, the loop itself will check for the right answer. If it's not correct (i.e., <em>while the response is not equal to [<code data-lang=\"py3\">!=<\/code>] 'I am up'<\/em>) then the loop will run:<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\nwhile response != 'I am up!':\n  # we'll add code here next\n<\/code><\/pre>\n\n<p>Print out the message again, and ask the question again, but remember to put it inside the loop (indented):<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\n  print('MEEP MEEP MEEP')\n  response = input('Are you up? ')\n<\/code><\/pre>\n\n<p>Finally, once you're awake, your awesome alarm clock will print out a congratulatory message:<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\nprint('Took you long enough!')\n<\/code><\/pre>\n\n\n",
      "updated_at":"2016-08-21T11:58:08.420157+00:00",
      "label":"py3-snooze-no-more",
      "content":"<p>\n  When your alarm goes off, you can hit the <em>snooze<\/em> button and fall back asleep.\n  Write a program that won't let you snooze too long!\n  <!--Your alarm program should keep going until you enter the sentence: <code data-lang=\"in\">I am up!<\/code>-->\n<\/p>\n<p>\n  Your program should print out <code data-lang=\"out\">MEEP MEEP MEEP<\/code> and then keep asking the user <code data-lang=\"out\">Are you up? <\/code> until the user enters <code data-lang=\"in\">I am up!<\/code><\/p>\n<p>\n  If the user says anything else, your program should print out <code data-lang=\"out\">MEEP MEEP MEEP<\/code> and ask the user for input again.\n<\/p>\n<p>\n  Once the user says <code data-lang=\"in\">I am up!<\/code> your program should finish by printing out <code data-lang=\"out\">Took you long enough!<\/code>\n<\/p>\n<p>\n  For example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>Noooo<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>I'm sleepy<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>snooze...<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>snooze...<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>OK OK!<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>I am up!<\/i>\n<o>Took you long enough!<\/o>\n<o><\/o>\n<\/code><\/pre>\n<p>\n  Here is another example. The program should run until the user enters <code data-lang=\"in\">I am up!<\/code> exactly:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>Sssssh<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>i'm up<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>I am awake!<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>I am up!<\/i>\n<o>Took you long enough!<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "while",
        "input",
        "multiple-lines",
        "print"
      ],
      "choices":"{}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>This question had a few things that could trip you up, since <code data-lang=\"py3\">while<\/code> loops have so many pieces to possibly get wrong.<\/p>\n\n<p>A common mistake was to forgot the second <code data-lang=\"py3\">input<\/code> so that the loop continues writing <code data-lang=\"out\">MEEP MEEP MEEP<\/code> forever (an infinite loop).<\/p>\n\n<p>Another common mistake was to swap the <code data-lang=\"py3\">print<\/code> and second <code data-lang=\"py3\">input<\/code> so that the program prints one last <code data-lang=\"out\">MEEP MEEP MEEP<\/code> even after you've already said <code data-lang=\"in\">I am up!<\/code><\/p>\n\n<p>Let's take a look at working to the solution!<\/p>\n\n<p>This program needs you to print out an annoying message to wake you up, and then ask you a question. If you don't get the question \"correct\", then the annoying message will continue! Start by printing out the annoying message:<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\nprint('MEEP MEEP MEEP')\n<\/code><\/pre>\n\n<p>Next, let's ask you a question:<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\nresponse = input('Are you up? ')\n<\/code><\/pre>\n\n<p>Remember, the annoying message needs to continue until you enter the right answer. So, the loop itself will check for the right answer. If it's not correct (i.e., <em>while the response is not equal to [<code data-lang=\"py3\">!=<\/code>] 'I am up'<\/em>) then the loop will run:<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\nwhile response != 'I am up!':\n  # we'll add code here next\n<\/code><\/pre>\n\n<p>Print out the message again, and ask the question again, but remember to put it inside the loop (indented):<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\n  print('MEEP MEEP MEEP')\n  response = input('Are you up? ')\n<\/code><\/pre>\n\n<p>Finally, once you're awake, your awesome alarm clock will print out a congratulatory message:<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\nprint('Took you long enough!')\n<\/code><\/pre>\n\n"
    },
    {
      "language":0,
      "title":"That's Un-American (spelling)!",
      "notes":"<p>Here, as with all <code data-lang=\"py3\">while<\/code> loops, it's important to get the order of what's inside the loop correct.<\/p>\n\n<p>The <em>condition<\/em>, in this case we're checking if the line is empty, only gets checked when the steps inside the loop have finished. The last step inside the loop should be the thing that changes <code data-lang=\"py3\">line<\/code> to be empty, so that next time the loop repeats and the <em>condition<\/em> is checked again, it stops immediately.<\/p>\n\n<p>The other common mistake was this: <\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"\" data-runnable=\"false\"><code data-lang=\"py3\">\nline.replace('or', 'our')\n<\/pre><\/code>\n\n<p>The replace function doesn't change the <code data-lang=\"py3\">line<\/code> variable, it creates a new string instead. That means this piece of code doesn't do anything, the new string is created but not saved anywhere. In order to change <code data-lang=\"py3\">line<\/code> we need to also save over it with the new string:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"\" data-runnable=\"false\"><code data-lang=\"py3\">\nline = line.replace('or', 'our')\n<\/pre><\/code>\n",
      "updated_at":"2017-09-12T23:16:19.825709+00:00",
      "label":"py3-unamerican-spelling",
      "content":"<p>\n  You've been reading a lot of articles online and are sick of American spelling.\n  You decide to write a program to <em>un-Americanise<\/em> the text. \n<\/p>\n<p>\n  There are <a href=\"https:\/\/en.wikipedia.org\/wiki\/American_and_British_English_spelling_differences\" target=\"_blank\">lots of differences between American and British spelling<\/a>, but for this program we'll focus on two major differences: <em>-or\/-our<\/em> (like color\/colour) and <em>-ize\/-ise<\/em>.\n  Write a program to change all instances of <code data-lang=\"in\">or<\/code> to <code data-lang=\"out\">our<\/code> and <code data-lang=\"in\">ize<\/code> to <code data-lang=\"out\">ise<\/code>.\n<\/p>\n<p>\n  You only need to translate lowercase letters for this problem.\n<\/p>\n<p>\n  Your program should read multiple lines of input from the user, translate each line, and print out the translated line.\n  Your program should keep translating until the user enters a blank line.\n  For example:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Line: <\/o><i>Don't rely on rumor to recognize humor.<\/i>\n<o>Don't rely on rumour to recognise humour.<\/o>\n<o>Line: <\/o><i>You can analyze the patterns.<\/i>\n<o>You can analyze the patterns.<\/o>\n<o>Line: <\/o><i>That will help you visualize situations.<\/i>\n<o>That will help you visualise situations.<\/o>\n<o>Line: <\/o><i>Vocalize your favorites!<\/i>\n<o>Vocalise your favourites!<\/o>\n<o>Line: <\/o><i>\n<\/i>\n<\/code><\/pre>\n\n<p>\n  Here is another example, where the changes don't always work so well:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Line: <\/o><i>A citizen was honored in the neighborhood recently.<\/i>\n<o>A citisen was honoured in the neighbourhood recently.<\/o>\n<o>Line: <\/o><i>The size of the prize was hard to realize.<\/i>\n<o>The sise of the prise was hard to realise.<\/o>\n<o>Line: <\/o><i>There was lots to organize and names to memorize<\/i>\n<o>There was lots to ourganise and names to memourise.<\/o>\n<o>Line: <\/o><i><\/i>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Hint: Use the <code data-lang=\"py3\">replace<\/code> method<\/h2>\n  <p>If you don't remember how the <code data-lang=\"py3\">replace<\/code> method works, look for it in earlier notes.<\/p>\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "multiple-lines",
        "print",
        "string:replace"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>Here, as with all <code data-lang=\"py3\">while<\/code> loops, it's important to get the order of what's inside the loop correct.<\/p>\n\n<p>The <em>condition<\/em>, in this case we're checking if the line is empty, only gets checked when the steps inside the loop have finished. The last step inside the loop should be the thing that changes <code data-lang=\"py3\">line<\/code> to be empty, so that next time the loop repeats and the <em>condition<\/em> is checked again, it stops immediately.<\/p>\n\n<p>The other common mistake was this: <\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"\" data-runnable=\"false\"><code data-lang=\"py3\">\nline.replace('or', 'our')\n<\/pre><\/code>\n\n<p>The replace function doesn't change the <code data-lang=\"py3\">line<\/code> variable, it creates a new string instead. That means this piece of code doesn't do anything, the new string is created but not saved anywhere. In order to change <code data-lang=\"py3\">line<\/code> we need to also save over it with the new string:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"\" data-runnable=\"false\"><code data-lang=\"py3\">\nline = line.replace('or', 'our')\n<\/pre><\/code>"
    },
    {
      "language":0,
      "title":"Michael's Medals",
      "notes":"\n<p>\n  For this question it's best to get the <code data-lang=\"py3\">input<\/code> loop working first, and then add a variable to count the number of incorrect guesses.\n  This first step is very similar to the earlier <code data-lang=\"py3\">while<\/code> problems.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"most-medals-solution-notes-eg1\"><code data-lang=\"py3\">name = input('Who has the most medals? ')\nwhile name != 'Michael Phelps':\n  name = input('Nope! Guess again: ')\nprint('Correct!')\n<\/code><\/pre>\n\n<p>\n  If the loop has exited and the program reached the last line then the answer must have been correct (or the loop would have continued).\n<\/p>\n<p>\n  Now we add the counter variable! Here's how it works without the loop (assuming the loop repeats three times):\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"most-medals-solution-notes-eg2\"><code data-lang=\"py3\">incorrect = 0\nincorrect = incorrect + 1\nincorrect = incorrect + 1\nincorrect = incorrect + 1\nprint(incorrect)\n<\/code><\/pre>\n\n<p>\n  The counter must start at zero, then each time a guess is incorrect (and the loop repeats) the variable is changed to the previous value plus one.\n<\/p>\n\n<p>\n  Putting it all together and printing the value of the <code data-lang=\"py3\">incorrect<\/code> variable at the end, we have a full solution.\n<\/p>\n",
      "updated_at":"2016-08-21T22:11:09.283349+00:00",
      "label":"py3-michaels-medals-most",
      "content":"<p>\n  Which athlete has won the most Olympic medals ever?\n  How many guesses do you need to get the answer?\n  <a href=\"https:\/\/en.wikipedia.org\/wiki\/Michael_Phelps\" target=\"_blank\"><code data-lang=\"in\">Michael Phelps<\/code><\/a>, a swimmer from the USA.\n  He has won 28 medals, including 23 gold!\n<\/p>\n\n<p>\n  Let's write a program to see how many attempts the user needs to get the right answer! Here is an example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Who has the most medals? <\/o><i>Ian Thorpe<\/i>\n<o>Nope! Guess again: <\/o><i>Larisa Latynina<\/i>\n<o>Nope! Guess again: <\/o><i>Dawn Fraser<\/i>\n<o>Nope! Guess again: <\/o><i>Michael Phelps<\/i>\n<o>Correct!<\/o>\n<o>You made 3 incorrect attempt(s).<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Your program should keep asking forever until the user enters the exact answer.  However, they might get it right the first time:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Who has the most medals? <\/o><i>Michael Phelps<\/i>\n<o>Correct!<\/o>\n<o>You made 0 incorrect attempt(s).<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "multiple-lines",
        "print",
        "string:eq"
      ],
      "choices":"{}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  For this question it's best to get the <code data-lang=\"py3\">input<\/code> loop working first, and then add a variable to count the number of incorrect guesses.\n  This first step is very similar to the earlier <code data-lang=\"py3\">while<\/code> problems.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"most-medals-teacher-notes-eg1\"><code data-lang=\"py3\">name = input('Who has the most medals? ')\nwhile name != 'Michael Phelps':\n  name = input('Nope! Guess again: ')\nprint('Correct!')\n<\/code><\/pre>\n\n<p>\n  If the loop has exited and the program reached the last line then the answer must have been correct (or the loop would have continued).\n<\/p>\n<p>\n  Now we add the counter variable! Here's how it works without the loop (assuming the loop repeats three times):\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"most-medals-teacher-notes-eg2\"><code data-lang=\"py3\">incorrect = 0\nincorrect = incorrect + 1\nincorrect = incorrect + 1\nincorrect = incorrect + 1\nprint(incorrect)\n<\/code><\/pre>\n\n<p>\n  The counter must start at zero, then each time a guess is incorrect (and the loop repeats) the variable is changed to the previous value plus one.\n<\/p>\n\n<p>\n  Putting it all together and printing the value of the <code data-lang=\"py3\">incorrect<\/code> variable at the end, we have a full solution.\n<\/p>\n"
    },
    {
      "language":0,
      "title":"Will the name fit?",
      "notes":"#markdown\nThis question is very similar to the last one with slightly different prompts and if statement.\n\nA good place to start is getting the `while` loop working first:\n\n```eg:tldr-solution-notes-eg1;lang:py3;\n\nname = input('Name: ')\nwhile name:\n  print('Shorten that name.')\n  name = input('Name: ')\n\n```\n\nThis is the same pattern as other `while` loop questions, you've done before.\n\nThis gives us a clear place to add the `if` check for whether the name is too long. The key concept here is that the entire `if` must be indented to be within the `while` loop, and then lines inside the `if` indented again.",
      "updated_at":"2017-12-08T03:57:51.058211+00:00",
      "label":"aca-py3-will-the-name-fit",
      "content":"#markdown\nYou have a new badge printer and it only allows you to print 20 characters including spaces on each badge.\nThat's not actually long enough for many names.\n\nWrite a program to test whether a name or nickname is too long to be printed onto a badge.\n\nYour program should read in multiple lines of input until a blank line is entered.\nIf the line is longer than 16 characters, your program should output <code data-lang=\"out\">Shorten that name.<\/code>\n  For lines that are 16 characters or shorter, your program should output <code data-lang=\"out\">That will fit nicely.<\/code>\n\nHere is an example of how your program should work:\n\n```lang:py3;terminal;eg:none;\nName: @@@Sherlock Holmes\nThat will fit nicely.\nName: @@@Dr John Watson\nThat will fit nicely.\nName: @@@Prof James Moriarty\nShorten that name.\nName: @@@\n\n```\n\nHere is a longer example:\n\n```lang:py3;terminal;eg:none;\nName: @@@Luke Skywalker\nThat will fit nicely.\nName: @@@Leia Organa\nThat will fit nicely.\nName: @@@Han Solo\nThat will fit nicely.\nName: @@@Lando Calrissian\nThat will fit nicely.\nName: @@@Emperor Palpatine\nShorten that name.\nName: @@@\n\n```\n\n> ## Hint: Use `len` to find the length of a string.\n> You can test the length of a string like this:\n> ```\n> s = input('Type something: ')\n> if len(s) > 10:\n>   print('That was more than 10 characters long.')\n> ```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "while",
        "multiple-lines",
        "string:len",
        "string:slice",
        "string:startswith"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThis question is very similar to the last one with slightly different prompts and if statement.\n\nA good place to start is getting the `while` loop working first:\n\n```eg:tldr-solution-notes-eg1;lang:py3;\n\nname = input('Name: ')\nwhile name:\n  print('Shorten that name.')\n  name = input('Name: ')\n\n```\n\nThis is the same pattern as other `while` loop questions, you've done before.\n\nThis gives us a clear place to add the `if` check for whether the name is too long. The key concept here is that the entire `if` must be indented to be within the `while` loop, and then lines inside the `if` indented again."
    },
    {
      "language":0,
      "title":"I know you are, you said you are...",
      "notes":"#markdown\nHere, as with all `while` loops, it's important to get the order of what's inside the loop correct.\n\nThe *condition*, in this case we're checking if the line is empty, only gets checked when the steps inside the loop have finished. The last step inside the loop should be the thing that changes `line` to be empty, so that next time the loop repeats and the *condition* is checked again, it stops immediately.\n\nOnce we're in the loop, we need to check if the line `startswith` the letters <code data-lang=\"in\">You are<\/code>. We can use either `startswith` or string slicing to do this check. ",
      "updated_at":"2017-10-30T07:28:01.982698+00:00",
      "label":"aca-py3-i-know-you-are-but-what-am-i",
      "content":"#markdown\nYour little brother is staying at a friend's place for a few days and you're actually missing his [annoying banter](https:\/\/en.wiktionary.org\/wiki\/I_know_you_are_but_what_am_I). Write a program to add it back into your life!\n\nYour program should read in lines of text from the user until the user enters an empty line.\nIf a line starts with the words <code data-lang=\"in\">You are<\/code> (exactly), you should print out the traditional retort: <code data-lang=\"out\">I know you are, you said you are, but what am I?<\/code>\n\nHere's an example:\n\n```lang:py3;terminal;eg:none;\nLine: @@@You are probably having fun.\nI know you are, you said you are, but what am I?\nLine: @@@That seems unnecessary.\nLine: @@@You are silly.\nI know you are, you said you are, but what am I?\nLine: @@@You are getting on my nerves!\nI know you are, you said you are, but what am I?\nLine: @@@Stop it!\nLine: @@@That's better.\nLine: @@@\n\n```\n\nHere is another short example:\n\n```lang:py3;terminal;eg:none;\nLine: @@@Hello!\nLine: @@@You are looking well.\nI know you are, you said you are, but what am I?\nLine: @@@I should have seen that coming.\nLine: @@@\n\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "multiple-lines",
        "print",
        "string:replace"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nHere, as with all `while` loops, it's important to get the order of what's inside the loop correct.\n\nThe *condition*, in this case we're checking if the line is empty, only gets checked when the steps inside the loop have finished. The last step inside the loop should be the thing that changes `line` to be empty, so that next time the loop repeats and the *condition* is checked again, it stops immediately.\n\nOnce we're in the loop, we need to check if the line `startswith` the letters <code data-lang=\"in\">You are<\/code>. We can use either `startswith` or string slicing to do this check. "
    },
    {
      "language":0,
      "title":"What's the time Mr Wolf?",
      "notes":"#markdown\nFor this question it's best to get the `input` loop working first, and then add a variable to print out the proper time. It's important to realise that there are inverted commas inside the messages so we need to use double quotes.\n  This first step is very similar to the earlier `while` problems.\n\n```eg:most-medals-solution-notes-eg1;lang:py3;\n\nmsg = input(\"What's the time Mr Wolf? \")\nwhile msg != \"dinner time\":\n  msg = input(\"What's the time Mr Wolf? \")\nprint('Run!!')\n\n```\n\nIf the loop has exited and the program reached the last line then the answer must have been 'dinner time' (or the loop would have continued).\n\nNow we add the time counting variable! Here's how it works without the loop (assuming the loop repeats three times):\n\n```eg:most-medals-solution-notes-eg2;lang:py3;\n\ntime = 1\nprint(f\"{time} o'clock\") \ntime = time + 1\nprint(f\"{time} o'clock\") \ntime = time + 1\nprint(f\"{time} o'clock\") \ntime = time + 1\nprint(f\"{time} o'clock\") \n\n```\n\nThe counter must start at one (because the time starts at 1), then each time a message is not 'dinner time' (and the loop repeats) the variable is changed to the previous value plus one.\n\nPutting it all together and printing the value of the `time` each repeat, we have a full solution.\n",
      "updated_at":"2017-10-30T07:25:33.748048+00:00",
      "label":"aca-py3-mr-wolf",
      "content":"#markdown\nThere is a schoolyard game called [What's the time, Mr Wolf?](https:\/\/en.wikipedia.org\/wiki\/What%27s_the_time,_Mr_Wolf%3F)\nOne person is *Mr Wolf* and stands with their eyes closed against a wall.\nAll the other players line up at the safe line.\nWhen the game starts the players call out *\"What's the time, Mr Wolf?* Starting from 1 o'clock the wolf calls out times going up by one each time. The players must walk towards the wolf that number of steps. Finally the wolf shouts *\"dinner time!\"* and everyone must run back to the safe line while *Mr Wolf* tries to catch them.\n\nLet's write a program to help play the game. Here's an example:\n\n```lang:py3;terminal;eg:none;\nWhat's the time Mr Wolf? @@@not yet\n1 o'clock\nWhat's the time Mr Wolf? @@@not close enough\n2 o'clock\nWhat's the time Mr Wolf? @@@getting closer\n3 o'clock\nWhat's the time Mr Wolf? @@@dinner time\nRun!!!\n\n```\n\nYour program should keep asking forever until the user enters the exact phrase <code data-lang=\"in\">'dinner time'<\/code>.  However, they might enter it the first time:\n\n```lang:py3;terminal;eg:none;\nWhat's the time Mr Wolf? @@@dinner time\nRun!!!\n\n```\n\n> ## Hint\n> To print the word `\"What's\"` or `\"o'clock\"`, you will need to use double quotes:\n> ```\n> msg = input(\"What's the time Mr Wolf? \") \n> ```",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "multiple-lines",
        "print",
        "string:eq"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nFor this question it's best to get the `input` loop working first, and then add a variable to print out the proper time. It's important to realise that there are inverted commas inside the messages so we need to use double quotes.\n  This first step is very similar to the earlier `while` problems.\n\n```eg:most-medals-solution-notes-eg1;lang:py3;\n\nmsg = input(\"What's the time Mr Wolf? \")\nwhile msg != \"dinner time\":\n  msg = input(\"What's the time Mr Wolf? \")\nprint('Run!!')\n\n```\n\nIf the loop has exited and the program reached the last line then the answer must have been 'dinner time' (or the loop would have continued).\n\nNow we add the time counting variable! Here's how it works without the loop (assuming the loop repeats three times):\n\n```eg:most-medals-solution-notes-eg2;lang:py3;\n\ntime = 1\nprint(f\"{time} o'clock\") \ntime = time + 1\nprint(f\"{time} o'clock\") \ntime = time + 1\nprint(f\"{time} o'clock\") \ntime = time + 1\nprint(f\"{time} o'clock\") \n\n```\n\nThe counter must start at one (because the time starts at 1), then each time a message is not 'dinner time' (and the loop repeats) the variable is changed to the previous value plus one.\n\nPutting it all together and printing the value of the `time` each repeat, we have a full solution.\n"
    },
    {
      "language":0,
      "title":"Duck, Duck, Goose!",
      "notes":"#markdown\nThis question had a few things that could trip you up, since `while` loops have so many pieces to possibly get wrong.\n\nA common mistake was to forgot the second `input` so that the loop continues writing `Duck` forever (an infinite loop).\n\nAnother common mistake was to swap the `print` and second `input` so that the program prints one last `Duck` even after you've already said `Now`\n\nLet's take a look at working to the solution!\n\nThis program needs you to print out Duck to start the game, and then ask you a question. If your answer doesn't match exactly, then the game will continue! Start by printing out \"Duck\":\n\n```lang:py3;norun;\n\nprint('Duck')\n\n```\n\nNext, let's ask you a question:\n\n```lang:py3;norun;\n\nresponse = input('Pick? ')\n\n```\n\nRemember, the game needs to continue until you enter the right answer. So, the loop itself will check for the right answer. If it's not correct (i.e., *while the response is not equal to [`!=`] 'Now'*) then the loop will run:\n\n```lang:py3;norun;\n\nwhile response != 'Now':\n  # we'll add code here next\n\n```\n\nPrint out \"Duck\" again, and ask the question again, but remember to put it inside the loop (indented):\n\n```lang:py3;norun;\n\n  print('Duck')\n  response = input('Pick? ')\n\n```\n\nFinally, once you choose the goose, your program will print 'Goose -- Now run!' and you should start running:\n\n```lang:py3;norun;\n\nprint(\"Goose! -- Now run!\")\n\n```\n",
      "updated_at":"2017-10-30T05:53:24.468727+00:00",
      "label":"aca-py3-duck-goose-while",
      "content":"#markdown\nThere's a fun game often played in school playgrounds called [Duck, Duck, Goose!](https:\/\/en.wikipedia.org\/wiki\/Duck,_duck,_goose)\nA player who is ***it*** walks around the outside of a circle of students tapping them lightly on the head and saying \"Duck\". When the person who is ***it*** taps someone and says \"Goose\" the *goose* must get up and chase the ***it*** person until getting back to the hole left by the *goose*. The last person to sit down is then the ***it*** person and the game starts again.\n\nWrite a program to help you play the game.\n\nYour program should repeatedly ask the user <code data-lang=\"out\">Pick?<\/code> until the user enters <code data-lang=\"in\">Now<\/code>.\n\nIf the user says anything else, your program should print out <code data-lang=\"out\">Duck<\/code> and ask the user for input again.\n\nOnce the user says <code data-lang=\"in\">Now<\/code>, your program should finish by printing out <code data-lang=\"out\">Goose! -- Now run!<\/code>\n\nFor example:\n\n```lang:py3;terminal;eg:none;\nPick? @@@no\nDuck\nPick? @@@nup\nDuck\nPick? @@@not yet\nDuck\nPick? @@@I said no\nDuck\nPick? @@@Now\nGoose! -- Now run!\n```\n\nHere is another example. The program should run until the user enters `Now` exactly:\n\n```lang:py3;terminal;eg:none;\nPick? @@@yep\nDuck\nPick? @@@Yes\nDuck\nPick? @@@now!\nDuck\nPick? @@@Now\nGoose! -- Now run!\n\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "while",
        "input",
        "multiple-lines",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThis question had a few things that could trip you up, since `while` loops have so many pieces to possibly get wrong.\n\nA common mistake was to forgot the second `input` so that the loop continues writing `Duck` forever (an infinite loop).\n\nAnother common mistake was to swap the `print` and second `input` so that the program prints one last `Duck` even after you've already said `Now`\n\nLet's take a look at working to the solution!\n\nThis program needs you to print out Duck to start the game, and then ask you a question. If your answer doesn't match exactly, then the game will continue! Start by printing out \"Duck\":\n\n```lang:py3;norun;\n\nprint('Duck')\n\n```\n\nNext, let's ask you a question:\n\n```lang:py3;norun;\n\nresponse = input('Pick? ')\n\n```\n\nRemember, the game needs to continue until you enter the right answer. So, the loop itself will check for the right answer. If it's not correct (i.e., *while the response is not equal to [`!=`] 'Now'*) then the loop will run:\n\n```lang:py3;norun;\n\nwhile response != 'Now':\n  # we'll add code here next\n\n```\n\nPrint out \"Duck\" again, and ask the question again, but remember to put it inside the loop (indented):\n\n```lang:py3;norun;\n\n  print('Duck')\n  response = input('Pick? ')\n\n```\n\nFinally, once you choose the goose, your program will print 'Goose -- Now run!' and you should start running:\n\n```lang:py3;norun;\n\nprint(\"Goose! -- Now run!\")\n\n```\n"
    },
    {
      "language":0,
      "title":"Cheap Tuesdays",
      "notes":"<p>\n  Describing the problem in your own words helps you <em>understand it better<\/em>, and <em>identify the pieces of code<\/em> you need to solve it:\n<\/p>\n\n<p>\n  <strong>The program must <em>decide<\/em> to print a message, based on user input.<\/strong>\n<\/p>\n\n<p>\n  Once you've got the pieces, you need to work out where they go.  Here, the <code data-lang=\"py3\">if<\/code> <em>controls<\/em> the <code data-lang=\"py3\">print<\/code>, but it needs the input <em>before<\/em> it can make a decision.  The correct order is:\n<\/p>\n\n<ol>\n  <li><code data-lang=\"py3\">input<\/code> for reading user input;<\/li>\n  <li><code data-lang=\"py3\">if<\/code> statement for deciding to run some code (or not);<\/li>\n  <li><code data-lang=\"py3\">print<\/code> for printing out a message.<\/li>\n<\/ol>\n\n<p>\n  We get input in the usual way, choosing <code data-lang=\"py3\">day<\/code> as the variable name:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"cheap-tues-input\"><code data-lang=\"py3\">\nday = input('When can we see a movie? ')\n<\/code><\/pre>\n\n<p>\n  We check if <code data-lang=\"py3\">day<\/code> equals <code data-lang=\"py3\">'Tuesday'<\/code>. If so, we <code data-lang=\"py3\">print<\/code> the message:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"cheap-tues-if\"><code data-lang=\"py3\">\nday = input('When can we see a movie? ')\nif day == 'Tuesday':\n  print('Great! Tuesdays are cheap.')\n<\/code><\/pre>\n\n<p>\n  Since the <code data-lang=\"out\">Finding Dory<\/code> message is printed every time, we use no indentation, so the second <code data-lang=\"py3\">print<\/code> is outside of the <code data-lang=\"py3\">if<\/code> body:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"cheap-tues\"><code data-lang=\"py3\">\n  day = input('When can we see a movie? ')\nif day == 'Tuesday':\n  print('Great! Tuesdays are cheap.')\nprint('I want to see Finding Dory.')\n<\/code><\/pre>\n",
      "updated_at":"2017-07-28T06:49:46.229352+00:00",
      "label":"py3-cheap-tuesdays-1",
      "content":"<p>\n  Your local cinema has a special on Tuesdays, so tickets are cheap!\n  However, you want to hang out with your friends, so you are happy to go on any day.\n<\/p>\n\n<p>\n  Write a program to organise a day.\n  If it's <code data-lang=\"in\">Tuesday<\/code>, the program should print <code data-lang=\"out\">Great! Tuesdays are cheap.<\/code> For example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>When can we see a movie? <\/o><i>Tuesday<\/i>\n<o>Great! Tuesdays are cheap.<\/o>\n<o>I want to see Finding Dory.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If it's not <code data-lang=\"in\">Tuesday<\/code>, you should still go to the movies:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>When can we see a movie? <\/o><i>Wednesday<\/i>\n<o>I want to see Finding Dory.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Any answer other than <code data-lang=\"in\">Tuesday<\/code> should work the same way:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>When can we see a movie? <\/o><i>Saturday<\/i>\n<o>I want to see Finding Dory.<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if",
        "string:eq"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  Describing the problem in your own words helps you <em>understand it better<\/em>, and <em>identify the pieces of code<\/em> you need to solve it:\n<\/p>\n\n<p>\n  <strong>The program must <em>decide<\/em> to print a message, based on user input.<\/strong>\n<\/p>\n\n<p>\n  Once you've got the pieces, you need to work out where they go.  Here, the <code data-lang=\"py3\">if<\/code> <em>controls<\/em> the <code data-lang=\"py3\">print<\/code>, but it needs the input <em>before<\/em> it can make a decision.  The correct order is:\n<\/p>\n\n<ol>\n  <li><code data-lang=\"py3\">input<\/code> for reading user input;<\/li>\n  <li><code data-lang=\"py3\">if<\/code> statement for deciding to run some code (or not);<\/li>\n  <li><code data-lang=\"py3\">print<\/code> for printing out a message.<\/li>\n<\/ol>\n\n<p>\n  We get input in the usual way, choosing <code data-lang=\"py3\">day<\/code> as the variable name:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"cheap-tues-input\"><code data-lang=\"py3\">\nday = input('When can we see a movie? ')\n<\/code><\/pre>\n\n<p>\n  We check if <code data-lang=\"py3\">day<\/code> equals <code data-lang=\"py3\">'Tuesday'<\/code>. If so, we <code data-lang=\"py3\">print<\/code> the message:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"cheap-tues-if\"><code data-lang=\"py3\">\nday = input('When can we see a movie? ')\nif day == 'Tuesday':\n  print('Great! Tuesdays are cheap.')\n<\/code><\/pre>\n\n<p>\n  Since the <code data-lang=\"out\">Finding Dory<\/code> message is printed every time, we use no indentation, so the second <code data-lang=\"py3\">print<\/code> is outside of the <code data-lang=\"py3\">if<\/code> body:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"cheap-tues\"><code data-lang=\"py3\">\n  day = input('When can we see a movie? ')\nif day == 'Tuesday':\n  print('Great! Tuesdays are cheap.')\nprint('I want to see Finding Dory.')\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Protect Your Eyes",
      "notes":"#markdown\nYour program needs to *decide* which message to print based on user input. So you need `input` and an `if` statement.\n\nThe `input` value should be stored in a variable, let's call it `colour`:\n\n```eg:none;lang:py3;norun;\ncolour = input('What colour are your eyes? ')\n```\n\nTo handle the `blue` eyes case, the `if` checks that the value entered is equal to `'blue'`.  \n\n```eg:none;norun\ncolour = input('What colour are your eyes? ')\nif colour== 'blue':\n  print('Slide on some sunnies pronto!')\n```\n\nThe program needs to do something *else* (hint hint!) for any other `colour`. We use an `else` clause that prints `'Sunnies are cool but you can take your time.'` when the equality is `False`:\n\nIt is also possible to do with two separate `if` statements. The second one would need to use `!=` (*is not equal to*) instead.",
      "updated_at":"2017-09-13T12:51:24.199869+00:00",
      "label":"aca-py3-light-sensitivity",
      "content":"#markdown\n\n<p>\n  Did you know that blue coloured eyes have <a href=\"https:\/\/en.wikipedia.org\/wiki\/Melanin#Effects\" target=\"_blank\">less melanin<\/a> and are less protected from the sun than dark coloured eyes? \n<\/p>\n\n<p>\n  People with blue eyes should really put on some sunglasses as soon as possible! Write a program to warn them. \n<\/p>\n\n<p>\n  Your program should ask the user what colour their eyes are.\n  If they say <code data-lang=\"in\">blue<\/code>, your program should print <code data-lang=\"out\">Slide on some sunnies pronto!<\/code> like this:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What colour are your eyes? <\/o><i>blue<\/i>\n<o>Slide on some sunnies pronto!<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If they say anything else, it should print <code data-lang=\"out\">Sunnies are cool but you can take your time.<\/code> instead:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What colour are your eyes? <\/o><i>brown<\/i>\n<o>Sunnies are cool but you can take your time.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\nIf the answer is similar but not *exactly* <code data-lang=\"in\">blue<\/code> you should still print out the other message. For example:\n\n```terminal;eg:none;\nWhat colour are your eyes? @@@bluey-green\nSunnies are cool but you can take your time.\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-else",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nYour program needs to *decide* which message to print based on user input. So you need `input` and an `if` statement.\n\nThe `input` value should be stored in a variable, let's call it `colour`:\n\n```eg:none;lang:py3;norun;\ncolour = input('What colour are your eyes? ')\n```\n\nTo handle the `blue` eyes case, the `if` checks that the value entered is equal to `'blue'`.  \n\n```eg:none;norun\ncolour = input('What colour are your eyes? ')\nif colour== 'blue':\n  print('Slide on some sunnies pronto!')\n```\n\nThe program needs to do something *else* (hint hint!) for any other `colour`. We use an `else` clause that prints `'Sunnies are cool but you can take your time.'` when the equality is `False`:\n\nIt is also possible to do with two separate `if` statements. The second one would need to use `!=` (*is not equal to*) instead."
    },
    {
      "language":0,
      "title":"Soil Sensor",
      "notes":"<p>\n  Try describing this problem in your own words first, like:\n<\/p>\n\n<p>\n  <strong>The program must decide between two messages to print, based on an integer from the user.<\/strong>\n<\/p>\n\n<p>\n  So we need <code data-lang=\"py3\">input<\/code> converted to an integer with <code data-lang=\"py3\">int<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"moisture-level-input-int\"><code data-lang=\"py3\">\nlevel = int(input('Moisture level: '))\n<\/code><\/pre>\n\n<p>\n  Then we need to check if the <code data-lang=\"py3\">level<\/code> <em>is less than<\/em> 25:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"moisture-level-if\"><code data-lang=\"py3\">\nlevel = int(input('Moisture level: '))\nif level < 25:\n  print('Water the plants.')\n<\/code><\/pre>\n\n<p>\n  Finally, we need to print a different message otherwise:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"moisture-level-if-else\"><code data-lang=\"py3\">\nlevel = int(input('Moisture level: '))\nif level < 25:\n  print('Water the plants.')\nelse:\n  print('The plants are happy.')\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Common mistake: not converting with <code data-lang=\"py3\">int<\/code><\/h2>\n  <p>\n    This causes a <code data-lang=\"err\">TypeError<\/code> in the comparison <code data-lang=\"py3\">level < 25<\/code>, because you can't compare a string (in <code data-lang=\"py3\">level<\/code>) and an integer.\n  <\/p>\n\n  <p>\n    It is tempting to fix this by changing <code data-lang=\"py3\">25<\/code> to a string, like this: <code data-lang=\"py3\">level < '25'<\/code>. This even appears to work!  Except for moisture levels of <code data-lang=\"in\">100<\/code> (or larger).\n  <\/p>\n\n  <p>\n    Strings are compared by their first characters first, so <code data-lang=\"py3\">'100'<\/code> is actually smaller than <code data-lang=\"py3\">'25'<\/code>.\n  <\/p>\n<\/aside>\n",
      "updated_at":"2016-08-07T11:38:30.831477+00:00",
      "label":"py3-soil-sensor",
      "content":"<p>\n  You're creating an automatic system to water your plants.\n  It has a sensor to measure the moisture in the soil.\n  If the moisture level is below 25%, the plant should be watered.\n<\/p>\n\n<p>\n  Write a program to read in the moisture level from the sensor.\n  If the moisture level is below 25%, it should do this:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Moisture level: <\/o><i>18<\/i>\n<o>Water the plants.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If the moisture level is 25% or above, it should do this:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Moisture level: <\/o><i>27<\/i>\n<o>The plants are happy.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  <a href=\"https:\/\/en.wikipedia.org\/wiki\/Soil#Soil_moisture_content\" target=\"_blank\">Ideal soil moisture levels<\/a> are actually more complicated!\n<\/p>\n\n<aside class=\"info\">\n  <h2>Hint: don't forget the <code data-lang=\"py3\">int<\/code><\/h2>\n  <p>\n    Don't forget to convert the user's input from a string to an integer with <code data-lang=\"py3\">int<\/code> before doing the comparison.\n  <\/p>\n<\/aside>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "int",
        "if-else",
        "print",
        "greater than less than"
      ],
      "choices":"{}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  Try describing this problem in your own words first, like:\n<\/p>\n\n<p>\n  <strong>The program must decide between two messages to print, based on an integer from the user.<\/strong>\n<\/p>\n\n<p>\n  So we need <code data-lang=\"py3\">input<\/code> converted to an integer with <code data-lang=\"py3\">int<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"moisture-level-input-int\"><code data-lang=\"py3\">\nlevel = int(input('Moisture level: '))\n<\/code><\/pre>\n\n<p>\n  Then we need to check if the <code data-lang=\"py3\">level<\/code> <em>is less than<\/em> 25:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"moisture-level-if\"><code data-lang=\"py3\">\nlevel = int(input('Moisture level: '))\nif level < 25:\n  print('Water the plants.')\n<\/code><\/pre>\n\n<p>\n  Finally, we need to print a different message otherwise:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"moisture-level-if-else\"><code data-lang=\"py3\">\nlevel = int(input('Moisture level: '))\nif level < 25:\n  print('Water the plants.')\nelse:\n  print('The plants are happy.')\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Common mistake: not converting with <code data-lang=\"py3\">int<\/code><\/h2>\n  <p>\n    This causes a <code data-lang=\"err\">TypeError<\/code> in the comparison <code data-lang=\"py3\">level < 25<\/code>, because you can't compare a string (in <code data-lang=\"py3\">level<\/code>) and an integer.\n  <\/p>\n\n  <p>\n    It is tempting to fix this by changing <code data-lang=\"py3\">25<\/code> to a string, like this: <code data-lang=\"py3\">level < '25'<\/code>. This even appears to work!  Except for moisture levels of <code data-lang=\"in\">100<\/code> (or larger).\n  <\/p>\n\n  <p>\n    Strings are compared by their first characters first, so <code data-lang=\"py3\">'100'<\/code> is actually smaller than <code data-lang=\"py3\">'25'<\/code>.\n  <\/p>\n<\/aside>\n"
    },
    {
      "language":0,
      "title":"Pikachu, I choose you!",
      "notes":"<p>\n  Your program needs to <em>decide<\/em> which message to print based on user input. So you need <code data-lang=\"py3\">input<\/code> and an <code data-lang=\"py3\">if<\/code> statement.\n<\/p>\n\n<p>\n  The <code data-lang=\"py3\">input<\/code> value should be stored in a variable, let's call it <code data-lang=\"py3\">name<\/code>:\n<\/p> \n\n<pre class=\"js-editor\" data-eg-id=\"preferred-pokemon-input-prompt\"><code data-lang=\"py3\">\nname = input('Which is your favourite? ')\n<\/code><\/pre>\n\n<p>\n  To handle the <code data-lang=\"in\">Pikachu<\/code> case, the <code data-lang=\"py3\">if<\/code> checks that the value entered is equal to <code data-lang=\"py3\">'Pikachu'<\/code>.  <strong>Watch the spelling and capital letter!<\/strong>\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"preferred-pokemon-if\"><code data-lang=\"py3\">\nname = input('Which is your favourite? ')\nif name == 'Pikachu':\n  print('Me too!')\n<\/code><\/pre>\n\n<p>\n  The program needs to do something <em>else<\/em> (hint hint!) for any other <code data-lang=\"py3\">name<\/code>. We use an <code data-lang=\"py3\">else<\/code> clause that prints <code data-lang=\"out\">I like Pikachu.<\/code> when the equality is <code data-lang=\"py3\">False<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"preferred-pokemon-if-else\"><code data-lang=\"py3\">\nname = input('Which is your favourite? ')\nif name == 'Pikachu':\n  print('Me too!')\nelse:\n  print('I like Pikachu.')\n<\/code><\/pre>\n\n<p>\n  It is also possible to do with two separate <code data-lang=\"py3\">if<\/code> statements. The second one would need to use <code data-lang=\"py3\">!=<\/code> (<em>is not equal to<\/em>) instead.\n<\/p>\n",
      "updated_at":"2017-07-28T06:38:41.278494+00:00",
      "label":"py3-preferred-pokemon-favourite",
      "content":"<p>\n  <a href=\"https:\/\/en.wikipedia.org\/wiki\/Pok%C3%A9mon_Go\" target=\"_blank\">Pok\u00e9mon Go<\/a> was downloaded over 100 million times in a month.\n  We all have friends obsessed with Pok\u00e9mon &mdash; and one of the favourites is Pikachu!\n<\/p>\n\n<p>\n  Write a program to talk to your <a href=\"https:\/\/en.wikipedia.org\/wiki\/Pikachu\" target=\"_blank\">Pikachu<\/a>-obsessed friend.\n<\/p>\n\n<p>\n  Your program should ask the user for their favourite Pok\u00e9mon.\n  If they say <code data-lang=\"in\">Pikachu<\/code>, your program should print <code data-lang=\"out\">Me too!<\/code> like this:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Which is your favourite? <\/o><i>Pikachu<\/i>\n<o>Me too!<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If they say anything else, it should print <code data-lang=\"out\">I like Pikachu.<\/code> instead:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Which is your favourite? <\/o><i>Squirtle<\/i>\n<o>I like Pikachu.<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-else",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  Your program needs to <em>decide<\/em> which message to print based on user input. So you need <code data-lang=\"py3\">input<\/code> and an <code data-lang=\"py3\">if<\/code> statement.\n<\/p>\n\n<p>\n  The <code data-lang=\"py3\">input<\/code> value should be stored in a variable, let's call it <code data-lang=\"py3\">name<\/code>:\n<\/p> \n\n<pre class=\"js-editor\" data-eg-id=\"preferred-pokemon-input-prompt\"><code data-lang=\"py3\">\nname = input('Which is your favourite? ')\n<\/code><\/pre>\n\n<p>\n  To handle the <code data-lang=\"in\">Pikachu<\/code> case, the <code data-lang=\"py3\">if<\/code> checks that the value entered is equal to <code data-lang=\"py3\">'Pikachu'<\/code>.  <strong>Watch the spelling and capital letter!<\/strong>\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"preferred-pokemon-if\"><code data-lang=\"py3\">\nname = input('Which is your favourite? ')\nif name == 'Pikachu':\n  print('Me too!')\n<\/code><\/pre>\n\n<p>\n  The program needs to do something <em>else<\/em> (hint hint!) for any other <code data-lang=\"py3\">name<\/code>. We use an <code data-lang=\"py3\">else<\/code> clause that prints <code data-lang=\"out\">I like Pikachu.<\/code> when the equality is <code data-lang=\"py3\">False<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"preferred-pokemon-if-else\"><code data-lang=\"py3\">\nname = input('Which is your favourite? ')\nif name == 'Pikachu':\n  print('Me too!')\nelse:\n  print('I like Pikachu.')\n<\/code><\/pre>\n\n<p>\n  It is also possible to do with two separate <code data-lang=\"py3\">if<\/code> statements. The second one would need to use <code data-lang=\"py3\">!=<\/code> (<em>is not equal to<\/em>) instead.\n<\/p>\n"
    },
    {
      "language":0,
      "title":"N\u00e3o compreendo?",
      "notes":"<p>\n  The key to this problem is to use an <code data-lang=\"py3\">if<\/code>-<code data-lang=\"py3\">elif<\/code>-<code data-lang=\"py3\">elif<\/code>-<code data-lang=\"py3\">else<\/code> structure. This is how you attach a single <code data-lang=\"py3\">else<\/code> block to a lot of <code data-lang=\"py3\">if<\/code>'s so that we can catch the words which are not known.\n<\/p>",
      "updated_at":"2016-08-07T13:28:36.585488+00:00",
      "label":"py3-portuguese-phrases",
      "content":"<p>\n  You're in Brazil for the 2016 Summer Olympic Games!\n  You're going to need a few Portuguese words to help you get around.\n<\/p>\n<p>\n  Write a program to translate some useful words from <a href=\"https:\/\/en.wikipedia.org\/wiki\/Portuguese_language\" target=\"_blank\">Portuguese<\/a>. Here are the words you need:\n<\/p>\n<table class=\"table table-bordered\">\n  <thead>\n    <tr>\n      <th>Portuguese<\/th>\n      <th>English<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>Ola<\/td>\n      <td>Hello<\/td>\n    <\/tr>\n    <tr>\n      <td>Sim<\/td>\n      <td>Yes<\/td>\n    <\/tr>\n    <tr>\n      <td>Nao<\/td>\n      <td>No<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n\n<p>\n  Your program should ask for the Portuguese word then print out the English translation.\n  For example:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>What did they say? <\/o><i>Ola<\/i>\n<o>Hello<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Here is another example:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>What did they say? <\/o><i>Sim<\/i>\n<o>Yes<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If the Portuguese word isn't one of the three above, your program should print <code data-lang=\"out\">Nao compreendo.<\/code> which means &ldquo;I don't understand.&rdquo; in Portuguese.  For example:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>What did they say? <\/o><i>Desculpe<\/i>\n<o>Nao compreendo.<\/o>\n<o><\/o>\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"{}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  The key to this problem is to use an <code data-lang=\"py3\">if<\/code>-<code data-lang=\"py3\">elif<\/code>-<code data-lang=\"py3\">elif<\/code>-<code data-lang=\"py3\">else<\/code> structure. This is how you attach a single <code data-lang=\"py3\">else<\/code> block to a lot of <code data-lang=\"py3\">if<\/code>'s so that we can catch the words which are not known.\n<\/p>"
    },
    {
      "language":0,
      "title":"Buy me a pony",
      "notes":"#markdown\nTry describing this problem in your own words first, like:\n\n**The program must decide between two messages to print, based on an integer from the user.**\n\nSo we need `input` converted to an integer with `int`:\n\n```eg:height-input-int;lang:py3;\n\nheight = int(input('What height is the animal? '))\n\n```\n\nThen we need to check if the `height` *is greater than* 149:\n\n```eg:height-if;lang:py3;\n\nheight= int(input('What height is the animal? '))\nif height > 149:\n  print('That animal is a horse.')\n\n```\n\nFinally, we need to print a different message otherwise:\n\n```eg:height-if-else;lang:py3;\n\nheight= int(input('What height is the animal? '))\nif height > 149:\n  print('That animal is a horse.')\nelse:\n  print('Buy me a pony!')\n\n```\n\n> ## Common mistake: not converting with `int`\n> This causes a `TypeError` in the comparison `height > 149`, because you can't compare a string (in `level`) and an integer.\n > \n >   It is tempting to fix this by changing `149` to a string, like this: `height > '149'`. This even appears to work!  Except for heights that are much lower or much higher.\n > \n >   Strings are compared by their first characters first, so `'100'` is actually smaller than `'99'`.\n",
      "updated_at":"2017-09-27T07:47:55.371707+00:00",
      "label":"aca-py3-buy-me-a-pony",
      "content":"#markdown\nYou want a pony! Horses and ponies are a little bit different. There is a height restriction. The [International Federation for Equestrian Sports](https:\/\/en.wikipedia.org\/wiki\/International_Federation_for_Equestrian_Sports) defines a pony as no bigger than 149 cm from horse shoes to [withers](https:\/\/en.wikipedia.org\/wiki\/Withers).\nIf an animal's height is greater than 149 cm, the animal is a horse, not a pony.\n\nWrite a program to read in the animal's height.\nIf the height is above 149 cm it should do this:\n\n```lang:py3;terminal;eg:none;\nWhat height is the animal? @@@155\nThat animal is a horse.\n\n```\n\nIf the height of the animal is 149 cm or lower, it should do this:\n\n```lang:py3;terminal;eg:none;\nWhat height is the animal? @@@140\nBuy me the pony!\n\n```\n\n[The actual definition of a pony](https:\/\/en.wikipedia.org\/wiki\/Pony#Horses_and_ponies) is not quite so straight forward.\n\n> ## Hint: don't forget the `int`\n> Don't forget to convert the user's input from a string to an integer with `int` before doing the comparison.\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "int",
        "if-else",
        "print",
        "greater than less than"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  Try describing this problem in your own words first, like:\n<\/p>\n\n<p>\n  <strong>The program must decide between two messages to print, based on an integer from the user.<\/strong>\n<\/p>\n\n<p>\n  So we need <code data-lang=\"py3\">input<\/code> converted to an integer with <code data-lang=\"py3\">int<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"moisture-level-input-int\"><code data-lang=\"py3\">\nlevel = int(input('Moisture level: '))\n<\/code><\/pre>\n\n<p>\n  Then we need to check if the <code data-lang=\"py3\">level<\/code> <em>is less than<\/em> 25:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"moisture-level-if\"><code data-lang=\"py3\">\nlevel = int(input('Moisture level: '))\nif level < 25:\n  print('Water the plants.')\n<\/code><\/pre>\n\n<p>\n  Finally, we need to print a different message otherwise:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"moisture-level-if-else\"><code data-lang=\"py3\">\nlevel = int(input('Moisture level: '))\nif level < 25:\n  print('Water the plants.')\nelse:\n  print('The plants are happy.')\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Common mistake: not converting with <code data-lang=\"py3\">int<\/code><\/h2>\n  <p>\n    This causes a <code data-lang=\"err\">TypeError<\/code> in the comparison <code data-lang=\"py3\">level < 25<\/code>, because you can't compare a string (in <code data-lang=\"py3\">level<\/code>) and an integer.\n  <\/p>\n\n  <p>\n    It is tempting to fix this by changing <code data-lang=\"py3\">25<\/code> to a string, like this: <code data-lang=\"py3\">level < '25'<\/code>. This even appears to work!  Except for moisture levels of <code data-lang=\"in\">100<\/code> (or larger).\n  <\/p>\n\n  <p>\n    Strings are compared by their first characters first, so <code data-lang=\"py3\">'100'<\/code> is actually smaller than <code data-lang=\"py3\">'25'<\/code>.\n  <\/p>\n<\/aside>\n"
    },
    {
      "language":0,
      "title":"Get in the game!",
      "notes":"<p>\n  Describing the problem in your own words helps you <em>understand it better<\/em>, and <em>identify the pieces of code<\/em> you need to solve it:\n<\/p>\n\n<p>\n  <strong>The program must <em>decide<\/em> to print a message, based on user input.<\/strong>\n<\/p>\n\n<p>\n  Once you've got the pieces, you need to work out where they go.  Here, the <code data-lang=\"py3\">if<\/code> <em>controls<\/em> the <code data-lang=\"py3\">print<\/code>, but it needs the input <em>before<\/em> it can make a decision.  The correct order is:\n<\/p>\n\n<ol>\n  <li><code data-lang=\"py3\">input<\/code> for reading user input;<\/li>\n  <li><code data-lang=\"py3\">if<\/code> statement for deciding to run some code (or not);<\/li>\n  <li><code data-lang=\"py3\">print<\/code> for printing out a message.<\/li>\n<\/ol>\n\n<p>\n  We get input in the usual way, choosing <code data-lang=\"py3\">day<\/code> as the variable name:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"cheap-tues-input\"><code data-lang=\"py3\">\nday = input('When can we see a movie? ')\n<\/code><\/pre>\n\n<p>\n  We check if <code data-lang=\"py3\">day<\/code> equals <code data-lang=\"py3\">'Tuesday'<\/code>. If so, we <code data-lang=\"py3\">print<\/code> the message:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"cheap-tues-if\"><code data-lang=\"py3\">\nday = input('When can we see a movie? ')\nif day == 'Tuesday':\n  print('Great! Tuesdays are cheap.')\n<\/code><\/pre>\n\n<p>\n  Since the <code data-lang=\"out\">Finding Dory<\/code> message is printed every time, we use no indentation, so the second <code data-lang=\"py3\">print<\/code> is outside of the <code data-lang=\"py3\">if<\/code> body:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"cheap-tues\"><code data-lang=\"py3\">\n  day = input('When can we see a movie? ')\nif day == 'Tuesday':\n  print('Great! Tuesdays are cheap.')\nprint('I want to see Finding Dory.')\n<\/code><\/pre>\n",
      "updated_at":"2017-09-27T06:40:10.969407+00:00",
      "label":"aca-py3-favourite-boardgame",
      "content":"#markdown\n\nYou're at a friend's board game party and it's time to play a new game.\nYour favourite game is [Codenames](https:\/\/en.wikipedia.org\/wiki\/Codenames_(board_game)), so you're hoping to play that, but you're happy to play anything.\n\nWrite a program to see what the next game is.\nIf it's <code data-lang=\"in\">Codenames<\/code>, the program should print <code data-lang=\"out\">I love Codenames!<\/code> For example:\n\n\n```eg:none;terminal;\nWhat should we play next? @@@Codenames\nAwesome! I love Codenames.\nI will set up the board!\n```\n\nWhatever the next game is, you're happy to play. Your program should print out that you will set up the board even if the next game isn't <code data-lang=\"in\">Codenames<\/code>.\n\n```eg:none;terminal;\nWhat should we play next? @@@Settlers of Catan\nI will set up the board!\n```\n\nHere is another example, with a different game:\n\n```eg:none;terminal;\nWhat should we play next? @@@Pictionary\nI will set up the board!\n```",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if",
        "string:eq"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  Describing the problem in your own words helps you <em>understand it better<\/em>, and <em>identify the pieces of code<\/em> you need to solve it:\n<\/p>\n\n<p>\n  <strong>The program must <em>decide<\/em> to print a message, based on user input.<\/strong>\n<\/p>\n\n<p>\n  Once you've got the pieces, you need to work out where they go.  Here, the <code data-lang=\"py3\">if<\/code> <em>controls<\/em> the <code data-lang=\"py3\">print<\/code>, but it needs the input <em>before<\/em> it can make a decision.  The correct order is:\n<\/p>\n\n<ol>\n  <li><code data-lang=\"py3\">input<\/code> for reading user input;<\/li>\n  <li><code data-lang=\"py3\">if<\/code> statement for deciding to run some code (or not);<\/li>\n  <li><code data-lang=\"py3\">print<\/code> for printing out a message.<\/li>\n<\/ol>\n\n<p>\n  We get input in the usual way, choosing <code data-lang=\"py3\">day<\/code> as the variable name:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"cheap-tues-input\"><code data-lang=\"py3\">\nday = input('When can we see a movie? ')\n<\/code><\/pre>\n\n<p>\n  We check if <code data-lang=\"py3\">day<\/code> equals <code data-lang=\"py3\">'Tuesday'<\/code>. If so, we <code data-lang=\"py3\">print<\/code> the message:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"cheap-tues-if\"><code data-lang=\"py3\">\nday = input('When can we see a movie? ')\nif day == 'Tuesday':\n  print('Great! Tuesdays are cheap.')\n<\/code><\/pre>\n\n<p>\n  Since the <code data-lang=\"out\">Finding Dory<\/code> message is printed every time, we use no indentation, so the second <code data-lang=\"py3\">print<\/code> is outside of the <code data-lang=\"py3\">if<\/code> body:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"cheap-tues\"><code data-lang=\"py3\">\n  day = input('When can we see a movie? ')\nif day == 'Tuesday':\n  print('Great! Tuesdays are cheap.')\nprint('I want to see Finding Dory.')\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Whose chair is whose?",
      "notes":"<p>\n  The key to this problem is to use an <code data-lang=\"py3\">if<\/code>-<code data-lang=\"py3\">elif<\/code>-<code data-lang=\"py3\">elif<\/code>-<code data-lang=\"py3\">else<\/code> structure. This is how you attach a single <code data-lang=\"py3\">else<\/code> block to a lot of <code data-lang=\"py3\">if<\/code>'s so that we can catch the sizes of chair which are not known.\n<\/p>",
      "updated_at":"2017-09-27T08:15:12.143749+00:00",
      "label":"aca-py3-goldilocks",
      "content":"#markdown\nThe bears from the story Golidlocks and the Three Bears have very distinct property depending on their size.\n\nThe bears are Mama Bear, Papa Bear and Baby Bear. You want to be able to identify whose chair is whose based on the size.\n\nWrite a program to ask for the size of the chair and respond with whose chair it is. Here are the sizes and bears you will use:\n\n<table class=\"table table-bordered\">\n  <thead>\n    <tr>\n      <th>Chair<\/th>\n      <th>Bear<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>big<\/td>\n      <td>That chair belongs to Papa Bear.<\/td>\n    <\/tr>\n    <tr>\n      <td>medium<\/td>\n      <td>That chair belongs to Mama Bear.<\/td>\n    <\/tr>\n    <tr>\n      <td>small<\/td>\n      <td>That chair belongs to Baby Bear.<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n\nYour program should ask for the size of the chair and then print out the chair's owner.\n  For example:\n\n```lang:py3;terminal;eg:none;\nWhat size chair? @@@big\nThat chair belongs to Papa Bear.\n\n```\n\nHere is another example:\n\n```lang:py3;terminal;eg:none;\nWhat size chair? @@@small\nThat chair belongs to Baby Bear.\n```\n\nIf the size isn't one of the three above, your program should print `'I wonder whose chair that is.'` For example:\n\n```lang:py3;terminal;eg:none;\nWhat size chair? @@@large\nI wonder whose chair that is.\n\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  The key to this problem is to use an <code data-lang=\"py3\">if<\/code>-<code data-lang=\"py3\">elif<\/code>-<code data-lang=\"py3\">elif<\/code>-<code data-lang=\"py3\">else<\/code> structure. This is how you attach a single <code data-lang=\"py3\">else<\/code> block to a lot of <code data-lang=\"py3\">if<\/code>'s so that we can catch the sizes of chair which are not known.\n<\/p>"
    },
    {
      "language":0,
      "title":"Do you want to play questions?",
      "notes":"#markdown\nTo answer this question, we'll read in a line from the user, then set up a <code data-lang=\"py3\">while<\/code> loop with the condition that the line <code data-lang=\"py3\">endswith<\/code> a question mark! While that is true, and the loop continues running, we'll keep asking for another line, and another line, and another line!  \n\nAs soon as a line is entered that does not <code data-lang=\"py3\">endswith('?')<\/code>, the <code data-lang=\"py3\">while<\/code> loop will exit, and we will print out <code data-lang=\"out\"><o>Statement!<\/o><\/code>.",
      "updated_at":"2017-07-25T01:28:21.022910+00:00",
      "label":"py3-question-game",
      "content":"<p><a href=\"https:\/\/en.wikipedia.org\/wiki\/Questions_(game)\" target=\"_blank\">Questions<\/a> is a game played by maintaining a dialogue of only questions for as long as possible.<\/p>\n\n<p>Write a program that reads in each line of dialogue and checks that it is a question, printing <code data-lang=\"out\">Statement!<\/code> and ending the game if a line is not a question. In this game, we will assume that everything ending in a question mark (<code data-lang=\"py3\">'?'<\/code>) is a question.<\/p>\n\n<p>Your program should work like this:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>line: <\/o><i>Do you want to play questions?<\/i>\n<o>line: <\/o><i>How long does it take?<\/i>\n<o>line: <\/o><i>Do you need to go somewhere?<\/i>\n<o>line: <\/o><i>No.<\/i>\n<o>Statement!<\/o>\n<\/code><\/pre>\n\n<p>Here is another example:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>line: <\/o><i>What time is it?<\/i>\n<o>line: <\/o><i>Don't you have a watch?<\/i>\n<o>line: <\/o><i>Is there a clock somewhere?<\/i>\n<o>line: <\/o><i>Is there one in that room?<\/i>\n<o>line: <\/o><i>I don't think so.<\/i>\n<o>Statement!<\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nTo answer this question, we'll read in a line from the user, then set up a <code data-lang=\"py3\">while<\/code> loop with the condition that the line <code data-lang=\"py3\">endswith<\/code> a question mark! While that is true, and the loop continues running, we'll keep asking for another line, and another line, and another line!  \n\nAs soon as a line is entered that does not <code data-lang=\"py3\">endswith('?')<\/code>, the <code data-lang=\"py3\">while<\/code> loop will exit, and we will print out <code data-lang=\"out\"><o>Statement!<\/o><\/code>."
    },
    {
      "language":0,
      "title":"Taboo Part Two!",
      "notes":"#markdown\n\nFor this question, we have to read in the taboo word and the description, and check if the word is in the description. We'll have to deal with case, too! The easiest way to do this is to make both the word and the description into lower case using `lower`. That way, no matter what case the input is, you can compare them directly.\n\nWe were nice and didn't include any upper case taboo words, but you had to make sure you turned the description into lower case.",
      "updated_at":"2017-07-23T12:22:58.611626+00:00",
      "label":"py3-taboo-loops",
      "content":"#markdown\n\n[Taboo](https:\/\/en.wikipedia.org\/wiki\/Taboo_(game)) is a word game where one person describes a word on a card so that their partner can guess it. However, there are certain words that the person can't say when trying to describe the thing! \nA player might have to describe *'cereal'* without using the word *'breakfast'*.\n\nWrite a program that reads in the Taboo word, and continues to read in the description line until the line includes the taboo word.\nHere's an example for trying to guess the word *'cereal'*:\n\n```terminal;eg:none;\nTaboo word: @@@breakfast\nLine: @@@A type of grain\nSafe!\nLine: @@@you might pour milk on it...\nSafe!\nLine: @@@Museli is a type of breakfast blank.\nTaboo!\n\n```\n\nThe program should keep running until the line includes the taboo word (ignoring case):\n```terminal;eg:none;\nTaboo word: @@@bike\nLine: @@@there's a song about them on a bus.\nSafe!\nLine: @@@where they go round and round?\nSafe!\nLine: @@@Umm. - Oh! There are 4 of them on a car\nSafe!\nLine: @@@and one in a unicycle\nSafe!\nLine: @@@and two on a motorbike\nTaboo!\n\n```\n\nHere's a short example when trying to guess the word *'wheel'*:\n```terminal;eg:none;\nTaboo word: @@@bike\nLine: @@@The things on a BIKE that go flat...\nTaboo!\n\n```\n\nSometimes unrelated words include the sub-word. That still counts as a Taboo! E.g. guessing *'cat'*:\n\n```terminal;eg:none;\nTaboo word: @@@meow\nLine: @@@An animal with whiskers\nSafe!\nLine: @@@As a homeowner they might make your house smell\nTaboo!\n\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\"]",
      "teacher_notes":"#markdown\n\nFor this question, we have to read in the taboo word and the description, and check if the word is in the description. We'll have to deal with case, too! The easiest way to do this is to make both the word and the description into lower case using `lower`. That way, no matter what case the input is, you can compare them directly.\n\nWe were nice and didn't include any upper case taboo words, but you had to make sure you turned the description into lower case."
    },
    {
      "language":0,
      "title":"Word chain!",
      "notes":"#markdown\n\nThis problem is an extension of the Word Chain problem in Project 2. We need to approach it the same way but we're going to add the loop to manage the ongoing game.\n\nFor this question, we have to read in the two words and check whether the last letter of `previous_word` is the same (ignoring case) as the first letter of `current_word`. \n\nWe'll use string indexing to get the right letters from each word:\n```norun;\nif previous_word[-1] == current_word[0]:\n\n```\n\nAnd to make sure we're checking letters of the same case, let's turn them both into lower case when we read them in:\n\n```norun;\nprevious_word = input('Word: ').lower()\ncurrent_word = input('Word: ').lower()\n```\n\nNow the extension bit requires that we update `previous_word` to be `current_word`:\n```norun;\nif previous_word[-1] == current_word[0]:\n  previous_word = current_word\n```\n\nThen we need to get a new word and set the value of `current_word` to be the new input value:\n```norun;\ncurrent_word = input('Word: ').lower()\n```\n\nFrom there, it's just a case of putting it all together!",
      "updated_at":"2017-11-03T06:45:52.933619+00:00",
      "label":"py3-word-chain-loop",
      "content":"#markdown\n\n[Word Chain](https:\/\/en.wikipedia.org\/wiki\/Word_chain) is word game where players take turns saying words that start with the last letter of the previous word. You might have played this game on long car trips.\n\nWrite a program to help you play word chain. Your program should read in words until a blank line is entered. It should print out <code data-lang=\"out\">Invalid word<\/code> if a word is not a valid play. Your program should work for upper case and lower case words.\n\nHere is an example:\n\n```terminal;eg:none;\nWord: @@@carrot\nWord: @@@tomato\nWord: @@@orange\nWord: @@@mandarin\nInvalid word\nWord: @@@eggplant\nWord: @@@\n\n```\n\nNotice that the word <code data-lang=\"py3\">mandarin<\/code> is rejected because it doesn't start with the letter <code data-lang=\"py3\">e<\/code> from the previous word: <code data-lang=\"py3\">orange<\/code>. The next word still needs to start with the letter <code data-lang=\"py3\">e<\/code> (from <code data-lang=\"py3\">orange<\/code>), rather than <code data-lang=\"py3\">n<\/code> (from the end of the invalid word, <code data-lang=\"py3\">mandarin<\/code>).\n\n<p>Here is another example:<\/p>\n\n```terminal;eg:none;\nWord: @@@tomato\nWord: @@@okra\nWord: @@@asparagus\nWord: @@@seaweed\nWord: @@@cake\nInvalid word\nWord: @@@dried apricots\nWord: @@@cake\nInvalid word\nWord: @@@\n\n```\n\nHere's one last example. Don't forget it should work regardless of case!\n\n```terminal;eg:none;\nWord: @@@Australia\nWord: @@@Antartic\nWord: @@@Canada\nWord: @@@England\nInvalid word\nWord: @@@Denmark\nInvalid word\nWord: @@@\n\n```\n\n<p>You will always read in at least two words.<\/p>\n\n<aside class=\"info\">\n<h2>Hint: previous and current lines<\/h2>\n<ol>\n<li>Read two lines of input before you start looping.<\/li>\n<li>Notice that the previous line becomes the current line in the next iteration.<\/li>\n<\/ol>\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "while"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\n\nThis problem is an extension of the Word Chain problem in Project 2. We need to approach it the same way but we're going to add the loop to manage the ongoing game.\n\nFor this question, we have to read in the two words and check whether the last letter of `previous_word` is the same (ignoring case) as the first letter of `current_word`. \n\nWe'll use string indexing to get the right letters from each word:\n```norun;\nif previous_word[-1] == current_word[0]:\n\n```\n\nAnd to make sure we're checking letters of the same case, let's turn them both into lower case when we read them in:\n\n```norun;\nprevious_word = input('Word: ').lower()\ncurrent_word = input('Word: ').lower()\n```\n\nNow the extension bit requires that we update `previous_word` to be `current_word`:\n```norun;\nif previous_word[-1] == current_word[0]:\n  previous_word = current_word\n```\n\nThen we need to get a new word and set the value of `current_word` to be the new input value:\n```norun;\ncurrent_word = input('Word: ').lower()\n```\n\nFrom there, it's just a case of putting it all together!"
    },
    {
      "language":0,
      "title":"Introducing Captain Featherbot",
      "notes":"#markdown\n\nWe gave you a head start for this question so you started with the beginning and end of the interaction with Captain Feathersword.\n\nYour task was to write the main loop that asked what was on the user's mind over and over and over again, until they told the Captain to `go away`. \n\nFirst, you'll have to print out the initial question, asking them what's on their mind:\n\n```norun;\nprint(f'Ahoy {name}! What be on your mind?')\n```\n\nThen start the loop that will drive the main program, listening to their answer for that question, and then telling them to go on:\n```\nline = input('> ').lower()\nwhile line != \"go away\":\n  print('Arrr. Go on...')\n  line = input('> ').lower()\n```\n\nA big gotcha in this question was forgetting to ask for the `line` again inside the loop.\nIf you forget this, the loop will continue forever, because you never give the user a chance to say `'go away'`, and end the loop.",
      "updated_at":"2017-07-25T02:41:50.852982+00:00",
      "label":"py3-chatbot-capt-featherbot-1",
      "content":"#markdown\n\n*Ya-har. Captain Featherbot is pleased to make your acquaintance!*\n\nLet's start off with our chatterbot. Captain Featherbot should introduce themselves, ask for the user's name, and then ask them what's on their mind. The Captain should keep letting them talk until the user enters <code data-lang=\"in\">go away<\/code> (or <code data-lang=\"in\">GO AWAY<\/code>). \n\nHere's an example interaction:\n\n```terminal;eg:none;\nArrr, I am Captain Featherbot.\nWhat be your name?\n> @@@Sarah\nAhoy Sarah! What be on your mind?\n> @@@This is a strange way to talk to a pirate\nArrr. Go on...\n> @@@But it's fun!\nArrr. Go on...\n> @@@For a little bit.\nArrr. Go on...\n> @@@go away\nShiver me timbers!\nFarewell Sarah, yer landlubber.\nI will be off for more swashbuckling adventures!\n\n```\n\n> ## Input on another line!\n> Careful! In these questions, you'll need to use `input` like this, printing out a question then using a prompt string afterwards:\n> ```\n> print('What be your name?')\n> name = input('> ')\n> ```\n> We've given you a start to get you going.\n\nHere's another example:\n```terminal;eg:none;\nArrr, I am Captain Featherbot.\nWhat be your name?\n> @@@Felix\nAhoy Felix! What be on your mind?\n> @@@I want to go sailing.\nArrr. Go on...\n> @@@The ocean looks so pretty.\nArrr. Go on...\n> @@@But I don't have a boat.\nArrr. Go on...\n> @@@I need a boat to go sailing.\nArrr. Go on...\n> @@@Do you have a boat?\nArrr. Go on...\n> @@@Will you answer my question?\nArrr. Go on...\n> @@@You're not helping me!\nArrr. Go on...\n> @@@GO AWAY!!!\nArrr. Go on...\n> @@@Go Away\nShiver me timbers!\nFarewell Felix, yer landlubber.\nI will be off for more swashbuckling adventures!\n\n```\n\nNotice that the user has to type *exactly* <code data-lang=\"in\">go away<\/code> (or <code data-lang=\"in\">GO AWAY<\/code>) without any other characters on the line for the Captain to stop talking.",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"print('Arrr, I am Captain Featherbot.')\\nprint('What be your name?')\\nname = input('> ')\\n\\n\\n\\nprint('Shiver me timbers!')\\nprint(f'Farewell {name}, yer landlubber.')\\nprint('I will be off for more swashbuckling adventures!')\",\"path\":\"program.py\",\"is_static\":false,\"undeletable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\n\nWe gave you a head start for this question so you started with the beginning and end of the interaction with Captain Feathersword.\n\nYour task was to write the main loop that asked what was on the user's mind over and over and over again, until they told the Captain to `go away`. \n\nFirst, you'll have to print out the initial question, asking them what's on their mind:\n\n```norun;\nprint(f'Ahoy {name}! What be on your mind?')\n```\n\nThen start the loop that will drive the main program, listening to their answer for that question, and then telling them to go on:\n```\nline = input('> ').lower()\nwhile line != \"go away\":\n  print('Arrr. Go on...')\n  line = input('> ').lower()\n```\n\nA big gotcha in this question was forgetting to ask for the `line` again inside the loop.\nIf you forget this, the loop will continue forever, because you never give the user a chance to say `'go away'`, and end the loop."
    },
    {
      "language":0,
      "title":"Captain Featherbot and the Sea",
      "notes":"#markdown\nThis question builds on the previous question.\nWe're going to add in more checks and specific responses for if the user mentions a `'boat'` or the `'sea'`.\n\nWe can do this using `if` statements _inside_ the main loop:\n```\nline = input('> ').lower()\nwhile line != 'go away':\n  if 'boat' in line:\n    print('Oh, I do love my boat, Floaty McFloatface.')\n  elif 'sea' in line:\n    print('Oh, the sea. Arrr to be back on the sea.')\n  else:\n    print('Arrr. Go on...')\n  line = input('> ').lower()\n```\n\nIn this case, we've `lower`ed the whole line, but another option would be to only use `lower` when doing the comparisons:\n```\nline = input('> ')\nwhile line.lower() != 'go away':\n  if 'boat' in line.lower():\n    print('Oh, I do love my boat, Floaty McFloatface.')\n  elif 'sea' in line.lower():\n    print('Oh, the sea. Arrr to be back on the sea.')\n  else:\n    print('Arrr. Go on...')\n  line = input('> ')\n```\n\n",
      "updated_at":"2017-07-25T02:49:09.230333+00:00",
      "label":"py3-chatbot-capt-featherbot-2",
      "content":"#markdown\n\nLet's make Captain Featherbot a bit more interesting to talk to.\n\n**Take your answer from the last question, and then we'll add to it in this question!**\n\nCaptain Featherbot loves talking about their boat and the sea. If you mention the word `'boat'` or `'sea'` while you're talking to them, they will derail the conversation!\n\nAdd to your program, such that if you use the word `'boat'` in the line, the Captain says: <code data-lang=\"out\">Oh, I do love my boat, Floaty McFloatface.<\/code> Or, if you use the word `'sea'` in the line, the Captain says: <code data-lang=\"out\">Oh, the sea. Arrr to be back on the sea.<\/code>\n\nHere's an example interaction:\n\n```terminal;eg:none;\nArrr, I am Captain Featherbot.\nWhat be your name?\n> @@@Guybrush\nAhoy Guybrush! What be on your mind?\n> @@@I have a little row boat\nOh, I do love my boat, Floaty McFloatface.\n> @@@That's a nice name for a boat.\nOh, I do love my boat, Floaty McFloatface.\n> Yes, you said you like it.\nArrr. Go on...\n> @@@But I've never been to the seaside.\nOh, the sea. Arrr to be back on the sea.\n> @@@I'd like to go!\nArrr. Go on...\n> @@@You're no help!\nArrr. Go on...\n> @@@GO AWAY\nShiver me timbers!\nFarewell Guybrush, yer landlubber.\nI will be off for more swashbuckling adventures!\n\n```\n\nHere's another example. Make sure your program works with upper case and lower case!\n```terminal;eg:none;\nArrr, I am Captain Featherbot.\nWhat be your name? Ahmed\nAhoy Ahmed! What be on your mind?\n> BOATS! I like boats.\nOh, I do love my boat, Floaty McFloatface.\n> That's a funny name for a boat.\nOh, I do love my boat, Floaty McFloatface.\n> Are boats all you ever talk about?\nOh, I do love my boat, Floaty McFloatface.\n> STOP TALKING ABOUT YOUR BOAT\nOh, I do love my boat, Floaty McFloatface.\n> go away\nShiver me timbers!\nFarewell Ahmed, yer landlubber.\nI will be off for more swashbuckling adventures!\n\n```\n\n> ## Boats or Seas? Which first?\n> You won't be given a line that has both `'boat'` and `'sea'` in it, so don't worry about which way the tests are ordered.",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"# Use your answer for the previous question as a starting place!\",\"path\":\"program.py\",\"is_static\":false,\"undeletable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThis question builds on the previous question.\nWe're going to add in more checks and specific responses for if the user mentions a `'boat'` or the `'sea'`.\n\nWe can do this using `if` statements _inside_ the main loop:\n```\nline = input('> ').lower()\nwhile line != 'go away':\n  if 'boat' in line:\n    print('Oh, I do love my boat, Floaty McFloatface.')\n  elif 'sea' in line:\n    print('Oh, the sea. Arrr to be back on the sea.')\n  else:\n    print('Arrr. Go on...')\n  line = input('> ').lower()\n```\n\nIn this case, we've `lower`ed the whole line, but another option would be to only use `lower` when doing the comparisons:\n```\nline = input('> ')\nwhile line.lower() != 'go away':\n  if 'boat' in line.lower():\n    print('Oh, I do love my boat, Floaty McFloatface.')\n  elif 'sea' in line.lower():\n    print('Oh, the sea. Arrr to be back on the sea.')\n  else:\n    print('Arrr. Go on...')\n  line = input('> ')\n```\n\nEither is fine!"
    },
    {
      "language":0,
      "title":"Chatbot Playground!",
      "notes":"",
      "updated_at":"2017-11-11T04:36:14.877377+00:00",
      "label":"py3-chatbot-capt-playground",
      "content":"#markdown\n\n**What's this?! You thought you were finished?**\n\n\nWhy not have a go at writing your very own chatbot! You can write whatever code you like in this question. Consider it your personal chatbot playground!\n\n> ## Save or submit your code!\n> There are no points to be earned for this question, so you can submit whatever code you like. Make sure you save programs that you want to keep! ",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"\",\"path\":\"program.py\",\"is_static\":false,\"undeletable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":""
    },
    {
      "language":0,
      "title":"Captain Featherbot, are you listening?",
      "notes":"#markdown\n\nOnce again, we'll start with our solution to the last question and add in some more specifics.\n\nTo solve this question, we need to check if the line `startswith` or `endswith` specific things. \n\nFirst, if the line is a question (and `endswith('?')`), we should print out a specific message:\n\n```norun\n  if line.endswith('?'):\n    print(f'That be the real question {name}. I wish I knew.')\n```\n\nOr if it's an exclamation, Captain Feathersword assumes it's part of a fantastically funny and exciting story:\n```norun\n  elif line.endswith('!'):\n    print(f'Yo ho ho. That be a good one, {name}! Then what?')\n```\n\nAnd finally, if the line starts with the words '`I feel'`, the Captain wants to give you some good advice about how to deal with your feelings.\n```norun\n  elif line.startswith('i feel'):\n    print('When I feel that way, I go sailing. What do you do?')\n```",
      "updated_at":"2017-07-25T03:05:33.772753+00:00",
      "label":"py3-chatbot-capt-featherbot-3",
      "content":"#markdown\n\nNow Captain Featherbot is starting to have a bit of personality! \n\n**Take your answer from the last question, and then we'll add to it in this question!**\n\nFor lines that end in a question mark, the Captain says: <code data-lang=\"out\">That be the real question &lt;name&gt;. I wish I knew.<\/code> Make sure to replace <code data-lang=\"out\">&lt;name&gt;<\/code> with the user's name!\n\nIf the line ends in an exclamation mark, the Captain says: <code data-lang=\"out\">Yo ho ho. That be a good one, &lt;name&gt;! Then what?<\/code>\n\nIf the line starts with <code data-lang=\"in\">I feel<\/code>, the Captain says: <code data-lang=\"out\">When I feel that way, I go sailing. What do you do?<\/code>\n\nHere's an example interaction:\n\n```terminal;eg:none;\nArrr, I am Captain Featherbot.\nWhat be your name?\n> @@@Bluebeard\nAhoy Bluebeard! What be on your mind?\n> @@@I'm a pirate!\nYo ho ho. That be a good one, Bluebeard! Then what?\n> @@@No, that's it.\nArrr. Go on...\n> @@@Are you following me?\nThat be the real question Bluebeard. I wish I knew.\n> @@@Don't follow me!\nYo ho ho. That be a good one, Bluebeard! Then what?\n> @@@I feel like I'm not being understood.\nWhen I feel that way, I go sailing. What do you do?\n> @@@I try to explain it a different way.\nArrr. Go on...\n> @@@Consider the lowly boatsman.\nOh, I do love my boat, Floaty McFloatface.\n> @@@Are you even listening?\nThat be the real question Bluebeard. I wish I knew.\n> @@@go AWAY\nShiver me timbers!\nFarewell Bluebeard, yer landlubber.\nI will be off for more swashbuckling adventures!\n\n```\n\n> ## Which rule first?\n> You won't be given a line that matches multiple criteria, so don't worry about which way the rules are ordered.",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"# Use your answer for the previous question as a starting place!\",\"path\":\"program.py\",\"is_static\":false,\"undeletable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\n\nOnce again, we'll start with our solution to the last question and add in some more specifics.\n\nTo solve this question, we need to check if the line `startswith` or `endswith` specific things. \n\nFirst, if the line is a question (and `endswith('?')`), we should print out a specific message:\n\n```norun\n  if line.endswith('?'):\n    print(f'That be the real question {name}. I wish I knew.')\n```\n\nOr if it's an exclamation, Captain Feathersword assumes it's part of a fantastically funny and exciting story:\n```norun\n  elif line.endswith('!'):\n    print(f'Yo ho ho. That be a good one, {name}! Then what?')\n```\n\nAnd finally, if the line starts with the words '`I feel'`, the Captain wants to give you some good advice about how to deal with your feelings.\n```norun\n  elif line.startswith('i feel'):\n    print('When I feel that way, I go sailing. What do you do?')\n```"
    },
    {
      "language":0,
      "title":"Captain Featherbot!",
      "notes":"",
      "updated_at":"2017-09-09T02:40:58.953145+00:00",
      "label":"py3-chatbot-capt-featherbot-4",
      "content":"#markdown\n\n**Take your answer from the last question, and then we'll add to it in this question!**\n\nThere's one more thing to add to Captain Featherbot's repertoire. \n\nIf the user enters a line that starts with <code data-lang=\"in\">I am &lt;something&gt;<\/code>, the Captain should say: <code data-lang=\"out\">When I was last &lt;something&gt; I stole a boat and sailed the seas.<\/code> The Captain will replace the <code data-lang=\"out\">&lt;something&gt;<\/code> with what the user typed in.\n\nThis should work if the user enters a line that starts with that pattern regardless of the case of the letters.\n\nHere's an example interaction:\n\n```terminal;eg:none;\nArrr, I am Captain Featherbot.\nWhat be your name?\n> @@@Beets McGee\nAhoy Beets McGee! What be on your mind?\n> @@@I am hungry\nWhen I was last hungry I stole a boat and sailed the seas.\n> @@@i am not amused\nWhen I was last not amused I stole a boat and sailed the seas.\n> @@@go away\nShiver me timbers!\nFarewell Beets McGee, yer landlubber.\nI will be off for more swashbuckling adventures!\n\n```\n\nHere's another example.\n```terminal;eg:none;\nArrr, I am Captain Featherbot.\nWhat be your name?\n> @@@Captain Bitbots\nAhoy Captain Bitbots! What be on your mind?\n> @@@Bits and bytes\nArrr. Go on...\n> @@@I want a boat.\nOh, I do love my boat, Floaty McFloatface.\n> @@@Why did you name it that?\nThat be the real question Captain Bitbots. I wish I knew.\n> @@@You don't know?!\nYo ho ho. That be a good one, Captain Bitbots! Then what?\n> @@@I feel like you should know.\nWhen I feel that way, I go sailing. What do you do?\n> @@@I go look at the sea.\nOh, the sea. Arrr to be back on the sea.\n> @@@Indeed. I do miss it.\nArrr. Go on...\n> @@@I should get going, I am glad to have met you.\nArrr. Go on...\n> @@@I am going to miss you.\nWhen I was last going to miss you. I stole a boat and sailed the seas.\n> @@@go away\nShiver me timbers!\nFarewell Captain Bitbots, yer landlubber.\nI will be off for more swashbuckling adventures!\n\n```\n\n> ## Putting it all together!\n> This question's tricky! There's a lot to put together. Stick with it and you'll be hacking like a pirate it no time!",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"# Use your answer for the previous question as a starting place!\",\"path\":\"program.py\",\"is_static\":false,\"undeletable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":""
    },
    {
      "language":0,
      "title":"Library Day",
      "notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <code data-lang=\"py3\">library_day<\/code> to be <code data-lang=\"str\">Wednesday<\/code> instead of <code data-lang=\"str\">Friday<\/code>, run it to check it works, and then mark it.<\/p>",
      "updated_at":"2017-09-13T12:40:30.031530+00:00",
      "label":"aca-py3-library-day",
      "content":"<p>\n  You need to remember to bring your library bag and book returns on Library day.\n<\/p>\n\n<p>\n  We've put a program in the editor that reminds you what day is Library day.\n<\/p>\n    \n<p>\n  Click <button class=\"action mark\" style=\"display: inline-block; background-color: white; padding: 6px 12px; border: 1px solid #e5e5e5; margin-right: 0px\" disabled><span class=\"icon icon-play4\"><\/span> Run<\/button> to see what it does.\n<\/p>\n\n<p>\n  The day you need to bring your book bag and returns is stored in a variable called <code data-lang=\"py3\">library_day<\/code>.\n<\/p>\n<p><strong>Disaster!<\/strong> Library day has changed from Friday to Wednesday so your reminder doesn't work.<\/p>\n<p>\n  <strong>Update this program so that it works for a different day,<\/strong> <code data-lang=\"out\">Wednesday<\/code>.\n  Your updated program should print the message:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\">\n<o>Don't forget, Library Day is Wednesday!<\/o>\n<o>On Wednesday you need to remember your library bag!<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Only change the <code data-lang=\"py3\">library_day<\/code> variable!<\/h2>\n  <p>\n    You just need to change the value of <code data-lang=\"py3\">library_day<\/code> to be <code data-lang=\"str\">Wednesday<\/code> instead of <code data-lang=\"str\">Friday<\/code>, run it to check it works, and then mark it.\n  <\/p>\n<\/aside>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"library_day = 'Friday'\\nprint(\\\"Don't forget, Library Day is \\\" + library_day + '!')\\nprint('On ' + library_day + ' you need to remember your library bag!')\",\"path\":\"program.py\",\"is_static\":false}]",
      "concepts":[
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <code data-lang=\"py3\">library_day<\/code> to be <code data-lang=\"str\">Wednesday<\/code> instead of <code data-lang=\"str\">Friday<\/code>, run it to check it works, and then mark it.<\/p>"
    },
    {
      "language":0,
      "title":"Cheer me on!",
      "notes":"#markdown\n\n<p>This solution is very similar to the last question, and the discussion of <code data-lang=\"py3\">input<\/code> in the notes.<\/p>\n\n<p>Here, the first step is to use the <code data-lang=\"py3\">input<\/code> function to ask for your friend's name:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln1\"><code data-lang=\"py3\">name = input(\"What is your friend's name? \")\n<\/code><\/pre>\n\nDon't forget that you'll need to use double quotes `\"` so that you can print out `\"friend's\"` with the apostrophe!\n\n<p>\n  This prints out <code data-lang=\"out\">What is your friend's name? <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <code data-lang=\"py3\">name<\/code>.\n<\/p>\n\n<p>The second step was to print out <code data-lang=\"out\">Go &lt;name&gt; Go! <\/code> using your friend's name. To do this you needed to print out a string and the name that was read in from the user. <\/p>\n",
      "updated_at":"2017-09-13T12:40:58.852940+00:00",
      "label":"aca-py3-cheer-me-on",
      "content":"<p>Several of your friends are competing in a bike race and you want to cheer them all on! Write a program to write a cheer for you to shout for any friend's name.<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Friend: <\/o><i>Jane\n<\/i><o>Go Jane Go!\n<\/o>\n<\/code><\/pre>\n\n<p>Your program should work with any friend's name:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Friend: <\/o><i>Isabella\n<\/i><o>Go Isabella Go!\n<\/o>\n<\/code><\/pre>\n\n<p>\n  When you run your program, it should wait for you to type in the friend's name, using <code data-lang=\"py3\">input<\/code>, then use the same name that the user typed in when printing the message.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Get the prompt string right!<\/h2>\n  <p>\n    Make sure you give <code data-lang=\"py3\">input<\/code> the same prompt message in the example above, especially <strong>the space after the colon<\/strong>.\n  <\/p>\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\n\n<p>This solution is very similar to the last question, and the discussion of <code data-lang=\"py3\">input<\/code> in the notes.<\/p>\n\n<p>Here, the first step is to use the <code data-lang=\"py3\">input<\/code> function to ask for your friend's name:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln1\"><code data-lang=\"py3\">name = input(\"What is your friend's name? \")\n<\/code><\/pre>\n\nDon't forget that you'll need to use double quotes `\"` so that you can print out `\"friend's\"` with the apostrophe!\n\n<p>\n  This prints out <code data-lang=\"out\">What is your friend's name? <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <code data-lang=\"py3\">name<\/code>.\n<\/p>\n\n<p>The second step was to print out <code data-lang=\"out\">Go &lt;name&gt; Go! <\/code> using your friend's name. To do this you needed to print out a string and the name that was read in from the user. <\/p>\n"
    },
    {
      "language":0,
      "title":"Pen Pineapple Apple Pen",
      "notes":"<p>To solve this question, we'll need to read in a fruit, save it in a variable, and then print out the contents of that variable multiple times &ndash; essentially reusing it!<\/p>\n\n<p>To start out with, we'll use <code data-lang=\"py3\">input<\/code> as we did in the last question, and <code data-lang=\"py3\">print<\/code> to print out our new song title.\n<\/p>\n\n<p>The first step is to use the <code data-lang=\"py3\">input<\/code> function to ask for the type of fruit:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"boaty-mc-boatface-soln1\"><code data-lang=\"py3\">fruit = input('Type of fruit: ')\n<\/code><\/pre>\n\n<p>Pay close attention to the colon and space in the input prompt!<\/p>\n\n<p>This prints out <code data-lang=\"out\">Type of fruit: <\/code> and waits for the user to type something in and then hit <strong>Enter<\/strong>.\nOnce they have, it is saved in the variable <code data-lang=\"py3\">fruit<\/code>.\n<\/p>\n\n<p>The second step was to print out new name along the lines of <code data-lang=\"out\">pen pinefruit fruit pen <\/code> using the right piece of fruit. To do this you needed to print out both strings and the word multiple times.<\/p>\n\n<p>Try running this to see how we built it up:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"boaty-mc-boatface-soln\"><code data-lang=\"py3\">\nfruit = 'apple'\nprint('pen pine' + fruit + ' ' + fruit + ' pen')\n<\/code><\/pre>\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>\n",
      "updated_at":"2017-09-13T12:41:25.639273+00:00",
      "label":"aca-py3-pen-pineapple-apple-pen",
      "content":"<p>\n  Last year, fictional character DJ Piko-Taro caused an internet sensation with his very catchy tune PPAP (short for <a href=\"https:\/\/www.youtube.com\/watch?v=Ct6BUPvE2sM\" target=\"_blank\">Pen Pineapple Apple Pen<\/a>).\n<\/p>\n\n<p>\n  This song is so simple and was so popular we think that a computer program could be used to come up with a similar song name.\n<\/p>\n\n<p>Write a program to automate inventing songs like PPAP:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Type of fruit: <\/o><i>apple\n<\/i><o>pen pineapple apple pen\n<\/o>\n<\/code><\/pre>\n\n<p>Here is another example:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Type of fruit: <\/o><i>cherry\n<\/i><o>pen pinecherry cherry pen\n<\/o>\n<\/code><\/pre>\n\n<p>And one more. Did you know that the tomato can be classed as a <a href=\"http:\/\/theplate.nationalgeographic.com\/2015\/02\/09\/fruit-or-vegetable\/\" target=\"_blank\">fruit or a vegetable depending on who you're talking to<\/a> - even in a court of law?<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Type of fruit: <\/o><i>tomato\n<\/i><o>pen pinetomato tomato pen\n<\/o>\n<\/code><\/pre>\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "strings",
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>To solve this question, we'll need to read in a fruit, save it in a variable, and then print out the contents of that variable multiple times &ndash; essentially reusing it!<\/p>\n\n<p>To start out with, we'll use <code data-lang=\"py3\">input<\/code> as we did in the last question, and <code data-lang=\"py3\">print<\/code> to print out our new song title.\n<\/p>\n\n<p>The first step is to use the <code data-lang=\"py3\">input<\/code> function to ask for the type of fruit:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"boaty-mc-boatface-soln1\"><code data-lang=\"py3\">fruit = input('Type of fruit: ')\n<\/code><\/pre>\n\n<p>Pay close attention to the colon and space in the input prompt!<\/p>\n\n<p>This prints out <code data-lang=\"out\">Type of fruit: <\/code> and waits for the user to type something in and then hit <strong>Enter<\/strong>.\nOnce they have, it is saved in the variable <code data-lang=\"py3\">fruit<\/code>.\n<\/p>\n\n<p>The second step was to print out new name along the lines of <code data-lang=\"out\">pen pinefruit fruit pen <\/code> using the right piece of fruit. To do this you needed to print out both strings and the word multiple times.<\/p>\n\n<p>Try running this to see how we built it up:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"boaty-mc-boatface-soln\"><code data-lang=\"py3\">\nfruit = 'apple'\nprint('pen pine' + fruit + ' ' + fruit + ' pen')\n<\/code><\/pre>\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>\n"
    },
    {
      "language":0,
      "title":"Echo! Echo!",
      "notes":"<p>This solution is very similar to the discussion of <code data-lang=\"py3\">input<\/code> in the notes.<\/p>\n\n<p>Here, the first step is to use the <code data-lang=\"py3\">input<\/code> function to ask for the words to repeat:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln1\"><code data-lang=\"py3\">name = input('What do you want to say? ')\n<\/code><\/pre>\nThis prints out <code data-lang=\"out\">What do you want to say? <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <code data-lang=\"py3\">text<\/code>.\n\n<p>The second step was to print out exactly what was typed. To do this you needed to print out whatever was read in from the user. <\/p>\n\n<p>Try running this to see how we built it up:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln\"><code data-lang=\"py3\">\ntext = 'Hooray!'\nprint(text)\n<\/code><\/pre>\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>\n",
      "updated_at":"2017-09-13T12:40:42.211521+00:00",
      "label":"aca-py3-echo-echo",
      "content":"<p>\nThere is a game that little kids play when they're first learning to speak. It's called Echo!\n<\/p>\n\n<p>\n  It's a pretty easy game. You just need to repeat whatever was just said.\n<\/p>\n\n<p>\n  You are going to program this game. You need to get input from the user and print back exactly what the user input.\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What do you want to say? <\/o><i>Echo!\n<\/i><o>Echo!\n<\/o>\n<\/code><\/pre>\n<p>Your program should work with anything the user types:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What do you want to say? <\/o><i>I am having a great day!\n<\/i><o>I am having a great day!\n<\/o>\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\"]",
      "teacher_notes":"<p>This solution is very similar to the discussion of <code data-lang=\"py3\">input<\/code> in the notes.<\/p>\n\n<p>Here, the first step is to use the <code data-lang=\"py3\">input<\/code> function to ask for the words to repeat:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln1\"><code data-lang=\"py3\">name = input('What do you want to say? ')\n<\/code><\/pre>\nThis prints out <code data-lang=\"out\">What do you want to say? <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <code data-lang=\"py3\">text<\/code>.\n\n<p>The second step was to print out exactly what was typed. To do this you needed to print out whatever was read in from the user. <\/p>\n\n<p>Try running this to see how we built it up:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln\"><code data-lang=\"py3\">\ntext = 'Hooray!'\nprint(text)\n<\/code><\/pre>\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>"
    },
    {
      "language":0,
      "title":"Best New Ice Cream Combination",
      "notes":"<p>To solve this question, we'll use <code data-lang=\"py3\">input<\/code> as we did in the last few questions, and we'll need to read in two different bits of information: the ice cream flavours of flavour 1 and flavour 2.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln1\"><code data-lang=\"py3\">flavour1 = input('Flavour 1: ')\nflavour2 = input('Flavour 2: ')\n<\/code><\/pre>\n\n<p>Here we've called our variables <code data-lang=\"py3\">flavour1<\/code> and <code data-lang=\"py3\">flavour2<\/code>. When you're naming your variables, remember that they can't contain spaces!<\/p>\n\n<p>The second step is to print out the message, using strings and the contents of those variables. You'll need two print statements for this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln2\" data-runnable=\"false\"><code data-lang=\"py3\">\nprint('New best ever flavour combination...')\nprint(flavour1 + ' and ' + flavour2 + '!')\n<\/code><\/pre>\n\n<p>And that's it! So we can now piece these two steps together to form the final solution.<\/p>\n",
      "updated_at":"2017-09-13T12:41:51.448359+00:00",
      "label":"aca-py3-ice-cream-combo",
      "content":"<p>Everyone knows that two scoops of ice cream are better than one! But the best part is coming up with a new winning combination of flavours.<\/p>\n\n<p>Write a program that asks for two ice cream flavours, then prints out an announcement of the new best ever flavour combination.<\/p>\n\n<p>Here is an example:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Flavour 1: <\/o><i>Chocolate<\/i>\n<o>Flavour 2: <\/o><i>Hazelnut<\/i>\n<o>New best ever flavour combination...<\/o><o>\nChocolate and Hazelnut!<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Here's another example:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Flavour 1: <\/o><i>Sour Cherry<\/i>\n<o>Flavour 2: <\/o><i>Cookies 'n' Cream<\/i>\n<o>New best ever flavour combination...<\/o><o>\nSour Cherry and Cookies 'n' Cream!<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>To solve this question, we'll use <code data-lang=\"py3\">input<\/code> as we did in the last few questions, and we'll need to read in two different bits of information: the ice cream flavours of flavour 1 and flavour 2.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln1\"><code data-lang=\"py3\">flavour1 = input('Flavour 1: ')\nflavour2 = input('Flavour 2: ')\n<\/code><\/pre>\n\n<p>Here we've called our variables <code data-lang=\"py3\">flavour1<\/code> and <code data-lang=\"py3\">flavour2<\/code>. When you're naming your variables, remember that they can't contain spaces!<\/p>\n\n<p>The second step is to print out the message, using strings and the contents of those variables. You'll need two print statements for this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln2\" data-runnable=\"false\"><code data-lang=\"py3\">\nprint('New best ever flavour combination...')\nprint(flavour1 + ' and ' + flavour2 + '!')\n<\/code><\/pre>\n\n<p>And that's it! So we can now piece these two steps together to form the final solution.<\/p>\n"
    },
    {
      "language":0,
      "title":"I have no homework",
      "notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <code data-lang=\"py3\">suggestion<\/code> to be <code data-lang=\"str\">I have no homework.<\/code> instead of <code data-lang=\"str\">My room is clean.<\/code>, run it to check it works, and then mark it.<\/p>",
      "updated_at":"2017-07-25T04:49:41.620844+00:00",
      "label":"py3-no-homework-variable",
      "content":"#markdown\nSometimes, if you repeat something often enough, it seems true. Repeating an opinion over and over again to make it seem true is called [argumentum ad nauseam](http:\/\/rationalwiki.org\/wiki\/Argumentum_ad_nauseam), or _argument by repetition_. \n\nWe've written a program in the editor that repeats a statement.\n\nClick  <button type=\"button\" style=\"\n                                   display: inline-block;\n                                   background: #f0f0f0;\n                                   border: none;\n                                   overflow: visible;\n                                   color: #1b79bf;\n                                   height: 46px;\n                                   width: 40px;\n                                   text-align: center;\n                                   font-size: 12px;\n                                   min-width: 40px;\n                                   padding: 7px 5px 5px 3px;\n                                   outline: 0 !important;\">\n      <span class=\"icon icon-play4 hide-shell-icon\" style=\"font-size: 18px;\"><\/span><br>\n      <span class=\"icon icon-cog shell-icon\" style=\"display: none\"><\/span>\n      <span class=\"title\" style=\"font-size: 12px\">Run<\/span>\n    <\/button>\nto see what it does.\n\nThe statement is stored in a variable called `suggestion`.\n\n**Update this program so that it works for a different suggestion:** `'I have no homework.'`\n  Your updated program should print the message:\n\n```lang:py3;terminal;eg:none;\nI have no homework.\nI have no homework.\nI have no homework.\nI have no homework.\nI have no homework.\nNo really! I have no homework.\n\n```\n\n> ## Only change the `suggestion` variable!\n> You just need to change the value of `suggestion` to be `'I have no homework.'` instead of `'My room is clean.'`, run it to check it works, and then mark it.\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"suggestion = 'My room is clean.'\\nprint(suggestion)\\nprint(suggestion)\\nprint(suggestion)\\nprint(suggestion)\\nprint(suggestion)\\nprint('No really! ' + suggestion)\",\"path\":\"program.py\",\"is_static\":false}]",
      "concepts":[
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <code data-lang=\"py3\">suggestion<\/code> to be <code data-lang=\"str\">I have no homework.<\/code> instead of <code data-lang=\"str\">My room is clean.<\/code>, run it to check it works, and then mark it.<\/p>"
    },
    {
      "language":0,
      "title":"Meet the Puppy",
      "notes":"<p>This solution is very similar to the discussion of <code data-lang=\"py3\">input<\/code> in the notes.<\/p>\n\n<p>Here, the first step is to use the <code data-lang=\"py3\">input<\/code> function to ask for the puppy's name:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln1\"><code data-lang=\"py3\">name = input('What is the name of the puppy? ')\n<\/code><\/pre>\nThis prints out <code data-lang=\"out\">What is the name of the puppy? <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <code data-lang=\"py3\">name<\/code>.\n\n<p>The second step was to print out <code data-lang=\"out\">Sit <\/code> using the puppy's name. To do this you needed to print out a both a string and the name that was read in from the user. <\/p>\n\n<p>Try running this to see how we built it up:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln\"><code data-lang=\"py3\">\nname = 'Fluffy'\nprint('Sit ' + name)\n<\/code><\/pre>\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>\n",
      "updated_at":"2016-08-14T21:49:39.186458+00:00",
      "label":"py3-meet-the-puppy",
      "content":"<p>Your friend has a new puppy! Write a program to tell the puppy to sit using its name.<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What is the name of the puppy? <\/o><i>Fluffy\n<\/i><o>Sit Fluffy\n<\/o>\n<\/code><\/pre>\n\n<p>Your program should work with any puppy name:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What is the name of the puppy? <\/o><i>Shadow\n<\/i><o>Sit Shadow\n<\/o>\n<\/code><\/pre>\n\n<p>\n  When you run your program, it should wait for you to type in the puppy's name, using <code data-lang=\"py3\">input<\/code>, then use the same name that the user typed in when printing the message.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Get the prompt string right!<\/h2>\n  <p>\n    Make sure you give <code data-lang=\"py3\">input<\/code> the same prompt message in the example above, especially <strong>the space after the question mark<\/strong>.\n  <\/p>\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input"
      ],
      "choices":"{}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>This solution is very similar to the discussion of <code data-lang=\"py3\">input<\/code> in the notes.<\/p>\n\n<p>Here, the first step is to use the <code data-lang=\"py3\">input<\/code> function to ask for the puppy's name:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln1\"><code data-lang=\"py3\">name = input('What is the name of the puppy? ')\n<\/code><\/pre>\n<p>\nThis prints out <code data-lang=\"out\">What is the name of the puppy? <\/code> and waits for the user to type something in.\nThe program will wait, and wait, and wait, until the user types something in and <strong>hits the 'Enter' key<\/strong>.\nOnce they have entered something and hit Enter, the word (or words) the user typed is saved in the variable <code data-lang=\"py3\">name<\/code>.\n\n<p>The second step was to print out <code data-lang=\"out\">Sit <\/code> using the puppy's name. To do this you needed to print out a both a string and the name that was read in from the user. <\/p>\n\n<p>Try running this to see how we built it up:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln\"><code data-lang=\"py3\">\nname = 'Fluffy'\nprint('Sit ' + name)\n<\/code><\/pre>\n\n<p>And that's it! So we can piece these two steps together to form the final solution.<\/p>\n"
    },
    {
      "language":0,
      "title":"Boaty McBoatFace",
      "notes":"<p>To solve this question, we'll need to read in a word, save it in a variable, and then print out the contents of that variable multiple times &ndash; essentially reusing it!<\/p>\n\n<p>To start out with, we'll use <code data-lang=\"py3\">input<\/code> as we did in the last question, and <code data-lang=\"py3\">print<\/code> to print out our new ship name.\n<\/p>\n\n<p>The first step is to use the <code data-lang=\"py3\">input<\/code> function to ask for the word:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"boaty-mc-boatface-soln1\"><code data-lang=\"py3\">word = input('Word? ')\n<\/code><\/pre>\n\n<p>Pay close attention to the question mark and space in the input prompt!<\/p>\n\n<p>This prints out <code data-lang=\"out\">Word? <\/code> and waits for the user to type something in and then hit <strong>Enter<\/strong>.\nOnce they have, it is saved in the variable <code data-lang=\"py3\">word<\/code>.\n<\/p>\n\n<p>The second step was to print out new name along the lines of <code data-lang=\"out\">Wordy McWordface <\/code> using the right word. To do this you needed to print out both strings and the word multiple times.<\/p>\n\n<p>Try running this to see how we built it up:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"boaty-mc-boatface-soln\"><code data-lang=\"py3\">\nword = 'Code'\nprint(word + 'y Mc' + word + 'face')\n<\/code><\/pre>\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>\n",
      "updated_at":"2016-07-31T07:25:15.484330+00:00",
      "label":"py3-boaty-mcboatface",
      "content":"<p>\n  The UK's Natural Environment Research Council (NERC) <a href=\"https:\/\/nameourship.nerc.ac.uk\/\" target=\"_blank\">asked the public to vote for the name of a new research ship<\/a>.\n<\/p>\n\n<p>\n  The <a href=\"http:\/\/www.bbc.com\/news\/uk-england-36064659\" target=\"_blank\">favourite<\/a> was <strong>Boaty McBoatface<\/strong>, invented by James Hand.\n<\/p>\n\n<p>Write a program to automate inventing names like Boaty:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Word? <\/o><i>Boat\n<\/i><o>Boaty McBoatface\n<\/o>\n<\/code><\/pre>\n\n<p>Here is another example:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Word? <\/o><i>Truck\n<\/i><o>Trucky McTruckface\n<\/o>\n<\/code><\/pre>\n\n<p>And the name of some code <a href=\"https:\/\/research.googleblog.com\/2016\/05\/announcing-syntaxnet-worlds-most.html\" target=\"_blank\">released by Google<\/a>:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Word? <\/o><i>Parse\n<\/i><o>Parsey McParseface\n<\/o>\n<\/code><\/pre>\n\n<p>\n  In the end, the NERC went with <a href=\"https:\/\/en.wikipedia.org\/wiki\/RRS_Sir_David_Attenborough\" target=\"_blank\">RRS Sir David Attenborough<\/a>, and named one of the ship's underwater vehicles <em>Boaty McBoatface<\/em>.\n<\/p>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "strings",
        "input",
        "print"
      ],
      "choices":"{}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>To solve this question, we'll need to read in a word, save it in a variable, and then print out the contents of that variable multiple times &ndash; essentially reusing it!<\/p>\n\n<p>To start out with, we'll use <code data-lang=\"py3\">input<\/code> as we did in the last question, and <code data-lang=\"py3\">print<\/code> to print out our new ship name.\n<\/p>\n\n<p>The first step is to use the <code data-lang=\"py3\">input<\/code> function to ask for the word:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"boaty-mc-boatface-soln1\"><code data-lang=\"py3\">word = input('Word? ')\n<\/code><\/pre>\n\n<p>Pay close attention to the question mark and space in the input prompt!<\/p>\n\n<p>This prints out <code data-lang=\"out\">Word? <\/code> and waits for the user to type something in and then hit <strong>Enter<\/strong>.\nOnce they have, it is saved in the variable <code data-lang=\"py3\">word<\/code>.\n<\/p>\n\n<p>The second step was to print out new name along the lines of <code data-lang=\"out\">Wordy McWordface <\/code> using the right word. To do this you needed to print out both strings and the word multiple times.<\/p>\n\n<p>Try running this to see how we built it up:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"boaty-mc-boatface-soln\"><code data-lang=\"py3\">\nword = 'Code'\nprint(word + 'y Mc' + word + 'face')\n<\/code><\/pre>\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>\n"
    },
    {
      "language":0,
      "title":"Match of the Year!",
      "notes":"<p>To solve this question, we'll use <code data-lang=\"py3\">input<\/code> as we did in the last few questions, except we'll need to read in two different bits of information: the names of team 1 and team 2.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln1\"><code data-lang=\"py3\">team1 = input('Who is team 1? ')\nteam2 = input('Who is team 2? ')\n<\/code><\/pre>\n\n<p>Here we've called our variables <code data-lang=\"py3\">team1<\/code> and <code data-lang=\"py3\">team2<\/code>. When you're naming your variables, remember that they can't contain spaces!<\/p>\n\n<p>The second step is to print out the message, using strings and the contents of those variables:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln2\" data-runnable=\"false\"><code data-lang=\"py3\">\nprint('The match of the year: ' + team1 + ' vs. ' + team2 + '!')\n<\/code><\/pre>\n\n<p>And that's it! So we can now piece these two steps together to form the final solution.<\/p>\n",
      "updated_at":"2016-08-14T21:50:16.461156+00:00",
      "label":"py3-match-of-the-year",
      "content":"<p>It's the greatest match ever! Team 1 against Team 2... oh what's that? The team names are missing.<\/p>\n\n<p>Write a program that asks for two team names, then prints out an announcement of the match.<\/p>\n\n<p>Here is an example:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Who is team 1? <\/o><i>Diamonds<\/i>\n<o>Who is team 2? <\/o><i>Silver Ferns<\/i>\n<o>The match of the year: Diamonds vs. Silver Ferns!<\/p>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Here's another example:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Who is team 1? <\/o><i>Liverpool<\/i>\n<o>Who is team 2? <\/o><i>Everton<\/i>\n<o>The match of the year: Liverpool vs. Everton!<\/p>\n<o><\/o>\n<\/code><\/pre>\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"{}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>To solve this question, we'll use <code data-lang=\"py3\">input<\/code> as we did in the last few questions, except we'll need to read in two different bits of information: the names of team 1 and team 2.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln1\"><code data-lang=\"py3\">team1 = input('Who is team 1? ')\nteam2 = input('Who is team 2? ')\n<\/code><\/pre>\n\n<p>Here we've called our variables <code data-lang=\"py3\">team1<\/code> and <code data-lang=\"py3\">team2<\/code>. When you're naming your variables, remember that they can't contain spaces!<\/p>\n\n<p>The second step is to print out the message, using strings and the contents of those variables:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln2\" data-runnable=\"false\"><code data-lang=\"py3\">\nprint('The match of the year: ' + team1 + ' vs. ' + team2 + '!')\n<\/code><\/pre>\n\n<p>And that's it! So we can now piece these two steps together to form the final solution.<\/p>\n"
    },
    {
      "language":0,
      "title":"Therefore I rock!",
      "notes":"<p>This solution is a way to allow you to try out your own text in a print function. You rock!<\/p>",
      "updated_at":"2017-09-13T12:40:12.523443+00:00",
      "label":"aca-py3-therefore-aca",
      "content":"<p>You've printed your first text - congratulate yourself! Write a program that prints out:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\">\n<o>Therefore, I rock!<\/o>\n\n<\/code><\/pre>\n\n<p>Remember that the marker is really picky about punctuation and spelling.<\/p>\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "strings",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>This solution is a way to allow you to try out your own text in a print function. You rock!<\/p>"
    },
    {
      "language":0,
      "title":"Hello, World!",
      "notes":"<p>This problem was designed to be simple, but there were a few things to trip you up. Common issues were:<\/p>\r\n<ul>\r\n  <li>not realising that you had to submit a <em>complete program<\/em>, with a <code data-lang=\"py3\">print<\/code> function in it;<\/li>\r\n  <li>not <strong>reading the question carefully!<\/strong> and getting the output (including capitalisation, spaces and punctuation) exactly right.  This kind of attention to detail is critical to programming.<\/li>\r\n<\/ul>\r\n",
      "updated_at":"2017-10-03T23:59:14.884522+00:00",
      "label":"py3-hello-world",
      "content":"#markdown\r\nWrite a program that prints out the message:\r\n\r\n```lang:py3;terminal;eg:none;\r\nHello, World!\r\n```\r\n\r\nIf you're not sure how to start writing the program, go back a few pages and take another look at the notes.\r\n\r\n<aside class=\"info\">\r\n  <h2>How do I submit?<\/h2>\r\n  <ol>\r\n    <li><p>Write your program (in the <code data-lang=\"txt\">program.py<\/code> file) in the editor<br>(large panel on the right);<\/p><\/li>\r\n    <li><p>Run your program by clicking \r\n      <button type=\"button\" style=\"\r\n                                   display: inline-block;\r\n                                   background: #f0f0f0;\r\n                                   border: none;\r\n                                   overflow: visible;\r\n                                   color: #1b79bf;\r\n                                   height: 46px;\r\n                                   width: 40px;\r\n                                   text-align: center;\r\n                                   font-size: 12px;\r\n                                   min-width: 40px;\r\n                                   padding: 7px 5px 5px 3px;\r\n                                   outline: 0 !important;\">\r\n      <span class=\"icon icon-play4 hide-shell-icon\" style=\"font-size: 18px;\"><\/span><br>\r\n      <span class=\"icon icon-cog shell-icon\" style=\"display: none\"><\/span>\r\n      <span class=\"title\" style=\"font-size: 12px\">Run<\/span>\r\n    <\/button> in the top right-hand menu bar.\r\n    The output will appear below your code. <strong>Check the program works correctly!<\/strong><\/p><\/li>\r\n    <li><p>Mark your program by clicking\r\n      <button type=\"button\" style=\"\r\n                                   display: inline-block;\r\n                                   background: #f0f0f0;\r\n                                   border: none;\r\n                                   overflow: visible;\r\n                                   color: #fb4251;\r\n                                   height: 46px;\r\n                                   width: 40px;\r\n                                   text-align: center;\r\n                                   font-size: 12px;\r\n                                   min-width: 40px;\r\n                                   padding: 7px 5px 5px 3px;\r\n                                   outline: 0 !important;\">\r\n      <span class=\"icon icon-star-full hide-marking-icon\" style=\"font-size: 18px;\"><\/span><br>\r\n      <span class=\"icon icon-cog marking-icon\" style=\"display: none\"><\/span>\r\n      <span class=\"title\" style=\"font-size: 12px\">Mark<\/span>\r\n      <\/button> and we will automatically check if your program is correct, and if not, give you some hints to fix it up.<\/p>\r\n    <\/li>\r\n  <\/ol>\r\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"exportable\":true,\"unrenamable\":true,\"content\":\"from grok.private.annotate import Annotate, a_or_an\\nimport re\\n\\nWORDS = ['hello', 'world', 'hi', 'there', 'howdy']\\n\\nDEFAULT_EXPLAIN = \\\"\\\"\\\"\\nThe Python interpreter stopped running your code because of {} `lang:err;{}`.\\n\\nThe *traceback* shows where it stopped (highlighted above in red).\\n\\\"\\\"\\\"\\n\\nSYNTAX_EXPLAIN = \\\"\\\"\\\"\\nA `lang:err;SyntaxError` means the Python interpreter could not understand your code.  Unlike people, the interpreter can't handle bad spelling or grammar at all, and so it stopped running your code.\\n\\nThe *traceback* shows where it stopped (highlighted above in red).\\n\\\"\\\"\\\".lstrip()\\n\\nEOL_EXPLAIN = SYNTAX_EXPLAIN + \\\"\\\"\\\"\\nThis error means Python reached the *end of line* (EOL) before it found another quote to end the string.\\n\\n**Maybe you're missing an end quote or used the wrong one?**\\n\\\"\\\"\\\"\\n\\nEOF_EXPLAIN = SYNTAX_EXPLAIN + \\\"\\\"\\\"\\nThis error means Python reached the *end of file* (EOF) before it found something it was expecting, e.g. a closing round bracket.\\n\\\"\\\"\\\"\\n\\nINVALID_CHAR_EXPLAIN = SYNTAX_EXPLAIN + \\\"\\\"\\\"\\nThis error means Python found a character it could not understand.  For example, it may contain *smart quotes*, like this: `lang:py3;\\u2018hello world\\u2019`.\\n\\\"\\\"\\\"\\n\\nPRINT_PAREN_EXPLAIN = SYNTAX_EXPLAIN + \\\"\\\"\\\"\\nYou must include round brackets when calling the `lang:py3;print` function. Before Python 3.0, this was different.\\n\\\"\\\"\\\"\\n\\nNAME_EXPLAIN = \\\"\\\"\\\"\\nA `lang:err;NameError` means the Python interpreter did not recognise the variable or function named `lang:py3;{}`, and so it stopped running your code.\\n\\nThe *traceback* shows where it stopped (highlighted above in red).\\n\\\"\\\"\\\"\\n\\nINDENT_EXPLAIN = \\\"\\\"\\\"\\nAn `lang:err;IndentationError` means the Python interpreter could not understand the layout of your code, and so it stopped running it.\\n\\n*Indenting* means putting spaces or tabs before a statement.  In Python, indenting your code means something special.  It means that one block of code is controlled by another statement.\\n\\\"\\\"\\\"\\n\\nNO_OUTPUT = \\\"\\\"\\\"\\nYour program produced no output.\\n\\\"\\\"\\\"\\n\\nclass HelloWorldAnnotate(Annotate):\\n  def __init__(self, strings):\\n    self.words = []\\n    for s in strings:\\n      self.words.extend(re.findall(r'\\\\w+', s))\\n    super().__init__()\\n\\n  def explain(self, etype, value, tb, limit, file):\\n    super().explain(etype, value, tb, limit, file)\\n    self.HANDLERS.get(etype, self._default.__func__)(self, value)\\n\\n  def annotate(self, etype, value, tb_list, index):\\n    pass\\n\\n  def marker(self, etype, value, tb):\\n    pass\\n\\n  def _default(self, err):\\n    name = err.__class__.__name__\\n    self.stdio.widget(-1, DEFAULT_EXPLAIN.format(a_or_an(name), name))\\n\\n  def _syntax(self, err):\\n    try:\\n      self.SYNTAX_HANDLERS[err.msg](self, err)\\n    except KeyError:\\n      if err.msg.startswith(\\\"(unicode error) 'unicodeescape' codec can't decode bytes\\\"):\\n        self._syntax_unicode(src, err)\\n\\n  def _name(self, err):\\n    match = re.match(r\\\"^name '([^']*)' is not defined$\\\", err.args[0])\\n    if not match:\\n      return\\n    name = match.group(1)\\n\\n    self.stdio.widget(-1, NAME_EXPLAIN.format(name))\\n\\n    msg = \\\"\\\"\\\"**Have you capitalised the `print` function**? In Python, capitalisation matters. `print` must be lowercase!\\\"\\\"\\\"\\n    if name != 'print':\\n      self.main.reject(r'print', msg, flags=re.I, text=name)\\n\\n    msg = \\\"\\\"\\\"**Have you called `lang:py3;{0}` instead of `lang:py3;print`**?  Python doesn't recognise `lang:py3;{0}`.\\\"\\\"\\\"\\n    self.main.reject(r'write', msg.format(name), flags=re.I, text=name)\\n\\n    if self.words:\\n      msg = \\\"\\\"\\\"**Is your message missing quotes around it?** The message needs to be inside single or double quotes, like `'Hello!'`, so Python treats it as a string, and not an instruction.\\n\\\"\\\"\\\"\\n      self.main.reject('|'.join(self.words), msg, flags=re.I, text=name)\\n\\n    msg = \\\"\\\"\\\"Python does not recognise the name `lang:py3;{}`. **Did you mistype a variable or function name** or use a variable before it was defined?\\\"\\\"\\\"\\n    self.main.reject('.', msg.format(name), text=name)\\n\\n  def _indent(self, err):\\n    self.stdio.widget(-1, INDENT_EXPLAIN)\\n\\n    msg = \\\"\\\"\\\"Have you put **spaces or tabs** to indent your code?  In Python, indenting means something special that you probably didn't intend.\\\"\\\"\\\"\\n    self.main.reject(r'^[ \\\\t]+', msg)\\n\\n  HANDLERS = {\\n    SyntaxError: _syntax,\\n    NameError: _name,\\n    IndentationError: _indent,\\n  }\\n\\n  def _syntax_invalid(self, err):\\n    self.stdio.widget(-1, SYNTAX_EXPLAIN)\\n\\n    msg = \\\"\\\"\\\"**Are there any messages in your code?** The message needs to be inside single or double quotes, like this `'Hello!'`, so Python treats it as a string, and not an instruction.\\\"\\\"\\\"\\n    self.main.require(r'[\\\"\\\\']', msg)\\n\\n    msg = \\\"\\\"\\\"Did you miss the **round brackets in the `lang:py3;print` function call**? It should be like this `print('Hello!')`.\\\"\\\"\\\"\\n    self.main.reject(r\\\"\\\"\\\"print['\\\"]\\\"\\\"\\\", msg)\\n\\n  def _syntax_str_eol(self, err):\\n    self.stdio.widget(-1, EOL_EXPLAIN)\\n\\n    msg = \\\"\\\"\\\"Are you missing a {} quote **just before the round bracket** at the end?\\\"\\\"\\\"\\n    self.main.reject(r\\\"\\\\('[^'\\\\\\\"(]*\\\\)\\\\w*$\\\", msg.format('single'), text=self.main.line)\\n    self.main.reject(r'\\\\(\\\"[^\\\"\\\\'(]*\\\\)\\\\w*$', msg.format('double'), text=self.main.line)\\n\\n    msg = \\\"\\\"\\\"Have you started a string with a {} quote, but **ended it with a {} quote**?\\\"\\\"\\\"\\n    self.main.reject(r\\\"'[^']*\\\\\\\"[^']*$\\\", msg.format('single', 'double'))\\n    self.main.reject(r'\\\"[^\\\"]*\\\\'[^\\\"]*$', msg.format('double', 'single'))\\n\\n    msg = \\\"\\\"\\\"Have you started a string with a {} quote, but **forgotten the end quote**?\\\"\\\"\\\"\\n    self.main.reject(r\\\"'[^']*$\\\", msg.format('single'))\\n    self.main.reject(r'\\\"[^\\\"]*$', msg.format('double'))\\n\\n  def _syntax_eof(self, err):\\n    self.stdio.widget(-1, EOF_EXPLAIN)\\n\\n    msg = \\\"\\\"\\\"Are you **missing the round bracket** at the end of the `print` call?\\\"\\\"\\\"\\n    self.main.reject(r\\\"print *\\\\([^)]*$\\\", msg, text=self.main.line)\\n\\n    msg = \\\"\\\"\\\"Are you **missing the round bracket** at the end of the `input` call?\\\"\\\"\\\"\\n    self.main.reject(r\\\"input *\\\\([^)]*$\\\", msg, text=self.main.line)\\n\\n    # want to generalise this as soon as we can collect groups and include them in messages\\n    msg = \\\"\\\"\\\"Are you **missing the round bracket** at the end of the function call?\\\"\\\"\\\"\\n    self.main.reject(r\\\"\\\\w+ *\\\\([^)]*$\\\", msg, text=self.main.line)\\n\\n  def _syntax_invalid_char(self, err):\\n    self.stdio.widget(-1, INVALID_CHAR_EXPLAIN)\\n\\n    msg = \\\"\\\"\\\"**Does your code include *smart {0} quotes***, e.g. from Microsoft Word, a PDF, or a webpage? Python does not recognise these. They need to be replaced with regular {0} quotes.\\\"\\\"\\\"\\n    self.main.reject(r'[\\u2018\\u2019]', msg.format('single'))\\n    self.main.reject(r'[\\u201c\\u201d]', msg.format('double'))\\n\\n  def _syntax_print_parens(self, err):\\n    self.stdio.widget(-1, PRINT_PAREN_EXPLAIN)\\n\\n    msg = \\\"\\\"\\\"Are you trying to **use `lang:py3;print` without round brackets**?  This *only* works in old versions of Python, so you might see it in older notes and textbooks.\\\"\\\"\\\"\\n    self.main.reject(r'print *[^( ]', msg.format('single'))\\n\\n  def _syntax_unicode(self, err):\\n    pass\\n\\n  SYNTAX_HANDLERS = {\\n    'invalid syntax': _syntax_invalid,\\n    'EOL while scanning string literal': _syntax_str_eol,\\n    'unexpected EOF while parsing': _syntax_eof,\\n    'invalid character in identifier': _syntax_invalid_char,\\n    \\\"Missing parentheses in call to 'print'\\\": _syntax_print_parens,\\n  }\\n\\nimport sys\\n\\nsys.stdout._write = sys.stdout.write\\nsys.stdout._written = False\\n\\ndef write(text, *args, **kwargs):\\n  sys.stdout._write(text, *args, **kwargs)\\n  if text:\\n    sys.stdout._written = True\\n\\nsys.stdout.write = write\\n\\na = HelloWorldAnnotate(WORDS)\\n\\nif not sys.stdout._written:\\n  a.stdio.widget(-1, NO_OUTPUT)\\n\\n  msg = \\\"\\\"\\\"Did you call the `lang:py3;print` function with a message, like this: `lang:py3;print('Hello!')`?\\\"\\\"\\\"\\n  a.main.require(r'print|stdout\\\\.(?:write|writelines)', msg)\\n\\n  msg = \\\"\\\"\\\"Did your `lang:py3;print` or other output function calls run?\\\"\\\"\\\"\\n  a.main.widget(-1, msg)\\n\",\"readonly\":true,\"path\":\"___exception.py\",\"hidden\":true,\"undeletable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>This problem was designed to be simple, but there were a few things to trip up on. Common issues include:<\/p>\r\n<ul>\r\n  <li>not realising that you had to submit a <em>complete program<\/em>, with a <code data-lang=\"py3\">print<\/code> function in it;<\/li>\r\n  <li>not <strong>reading the question carefully!<\/strong> and getting the output (including capitalisation, spaces and punctuation) exactly right.  This kind of attention to detail is critical to programming.<\/li>\r\n<\/ul>\r\n"
    },
    {
      "language":0,
      "title":"Taboo!",
      "notes":"#markdown\n\nFor this question, we have to read in the taboo word and the description, and check if the word is in the description. We'll have to deal with case, too! The easiest way to do this is to make both the word and the description into lower case using `lower`. That way, no matter what case the input is, you can compare them directly.\n\nWe were nice and didn't include any upper case taboo words, but you had to make sure you turned the description into lower case.",
      "updated_at":"2017-07-23T07:49:53.828425+00:00",
      "label":"py3-taboo-simple",
      "content":"#markdown\n\n[Taboo](https:\/\/en.wikipedia.org\/wiki\/Taboo_(game)) is a word game where one person describes a word on a card so that their partner can guess it. However, there are certain words that the person can't say when trying to describe the thing! \nA player might have to describe *'cereal'* without using the word *'breakfast'*.\n\nWrite a program to help play Taboo. Here's an example for trying to guess the word *'cereal'*:\n\n```terminal;eg:none;\nTaboo word: @@@breakfast\nDescription: @@@A type of grain, like oats or bran.\nSafe!\n\n```\n\nHere's another example, which includes the taboo word:\n```terminal;eg:none;\nTaboo word: @@@breakfast\nDescription: @@@The thing you eat for breakfast.\nTaboo!\n\n```\n\nYou should print <code data-lang='out'>Taboo!<\/code> even if the word is in another word.\nHere's an example when trying to guess the word *'wheel'*:\n```terminal;eg:none;\nTaboo word: @@@bike\nDescription: @@@There's 4 on a car and 2 on a motorbike.\nTaboo!\n\n```\n\nSometimes games get exciting and players tend to shout. If the word occurs in **any case**, lower, upper or mixed, it still counts. For example, guessing the word *'oval'*:\n\n```terminal;eg:none;\nTaboo word: @@@sport\nDescription: @@@WE HAVE SPORTS HERE!\nTaboo!\n\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\"]",
      "teacher_notes":"#markdown\n\nFor this question, we have to read in the taboo word and the description, and check if the word is in the description. We'll have to deal with case, too! The easiest way to do this is to make both the word and the description into lower case using `lower`. That way, no matter what case the input is, you can compare them directly.\n\nWe were nice and didn't include any upper case taboo words, but you had to make sure you turned the description into lower case."
    },
    {
      "language":0,
      "title":"Word Chain!",
      "notes":"#markdown\n\nFor this question, we have to read in the two words and check whether the last letter of `word1` is the same (ignoring case) as the first letter of `word2`. \n\nWe'll use string indexing to get the right letters from each word:\n```norun;\nif word1[-1] == word2[0]:\n\n```\n\nAnd to make sure we're checking letters of the same case, let's turn them both into lower case when we read them in:\n\n```norun;\nword1 = input('Word 1: ').lower()\nword2 = input('Word 2: ').lower()\n```\n\nFrom there, it's just a case of putting it all together!",
      "updated_at":"2017-07-23T08:48:57.658601+00:00",
      "label":"py3-word-chain-simple-no-loop",
      "content":"#markdown\n\n<p><a href=\"https:\/\/en.wikipedia.org\/wiki\/Word_chain\" target=\"_blank\">Word chain<\/a> is word game where players take turns saying words that start with the last letter of the previous word. You might have played this game on long car trips.<\/p>\n\nWrite a program to help you and your friends play word chain. Your program should read in two words and print out whether they are valid to follow each other. You should ignore case for this game.\n\n<p>Here is an example of a valid pair:<\/p>\n\n```terminal;eg:none;\nWord 1: @@@carrot\nWord 2: @@@turnip\nValid\n\n```\n\nHere is another example of an invalid pair:\n```terminal;eg:none;\nWord 1: @@@orange\nWord 2: @@@apple\nNope!\n\n```\nThe word <code data-lang=\"py3\">apple<\/code> is rejected because it doesn't start with the letter <code data-lang=\"py3\">e<\/code> from the previous word, <code data-lang=\"py3\">orange<\/code>. \n\nHere's one more example, with uppercase and lowercase letters:\n```terminal;eg:none;\nWord 1: @@@Passionfruit\nWord 2: @@@Tangerine\nValid\n\n```",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\"]",
      "teacher_notes":"#markdown\n\nFor this question, we have to read in the two words and check whether the last letter of `word1` is the same (ignoring case) as the first letter of `word2`. \n\nWe'll use string indexing to get the right letters from each word:\n```norun;\nif word1[-1] == word2[0]:\n\n```\n\nAnd to make sure we're checking letters of the same case, let's turn them both into lower case when we read them in:\n\n```norun;\nword1 = input('Word 1: ').lower()\nword2 = input('Word 2: ').lower()\n```\n\nFrom there, it's just a case of putting it all together!"
    },
    {
      "language":0,
      "title":"Unbelieve-a-bull!",
      "notes":"#markdown\nThis program must replace one substring with another, but <strong>only if it matches at the end of a word.<\/strong>\n\nThe best way to do this is to check if the word `endswith` the string `'able'`, and if so, use string slicing to slice off the end.\n\nAnother strategy is to use `replace` to replace `able` with `-a-bull` if the word ends with `'able'`. This means that *all instances of* `'able'` will be replaced, but we explicitly say in the question that we'll only test words with the letters `'able'` in it once. (And not check words like `'tableable'` where it would become `'t-a-bull-a-bull'` rather than `'table-a-bull'`.\n\n\n",
      "updated_at":"2017-09-13T04:16:06.110347+00:00",
      "label":"py3-unbelieve-a-bull",
      "content":"#markdown\n\n[Rockhampton](https:\/\/en.wikipedia.org\/wiki\/Rockhampton) is known as the Beef Capital of Australia.\nSeveral businesses in the city have life-size promotional bulls with puns: lease-a-bull for a real estate agent, remove-a-bull for removalists, and train-a-bull for the local tafe. \n\nWrite a program that helps other businesses come up with puns for their bulls! Your program should read in a word.\nIf the word ends with `'able'`, you should print out the punny version.\n\nFor example:\n\n```terminal;eg:none;\nWord: @@@fashionable\nfashion-a-bull\n\n```\n\nIf the word does not end with `'able'`, you should print out a different message:\n```terminal;eg:none;\nWord: @@@bovine\nNo bulls here\n\n```\n\nYou should print out that message even if the word has `'able'` in it, but not at the end of the word. Here is another example:\n```terminal;eg:none;\nWord: @@@fabled\nNo bulls here\n\n```\n\nHere's one more example:\n```terminal;eg:none;\nWord: @@@deliverable\ndeliver-a-bull\n\n```\n\n> ## What about tableable?\n> We'll only test this on words that have `'able'` in them *once*, so you don't have to worry about whether `'tableable'` should be come `'table-a-bull'` or `'t-a-bull-a-bull'`. That's up to you!\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:replace"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThis program must replace one substring with another, but <strong>only if it matches at the end of a word.<\/strong>\n\nThe best way to do this is to check if the word `endswith` the string `'able'`, and if so, use string slicing to slice off the end.\n\nAnother strategy is to use `replace` to replace `able` with `-a-bull` if the word ends with `'able'`. This means that *all instances of* `'able'` will be replaced, but we explicitly say in the question that we'll only test words with the letters `'able'` in it once. (And not check words like `'tableable'` where it would become `'t-a-bull-a-bull'` rather than `'table-a-bull'`.\n\n"
    },
    {
      "language":0,
      "title":"Need a Hug?",
      "notes":"#markdown\nDescribing the problem in your own words helps you *understand it better*, and *identify the pieces of code* you need to solve it:\n\n**The program must *decide* to print a message, based on user input.**\n\nOnce you've got the pieces, you need to work out where they go.  Here, the `if` *controls* the `print`, but it needs the input *before* it can make a decision.  The correct order is:\n\n1. `input` for reading user input;\n2. `if` statement for deciding to run some code (or not);\n3. `print` for printing out a message.\n4. `print` for printing a message that doesn't depend on the `if`\n\n\nWe get input in the usual way, choosing `hug` as the variable name:\n\n```eg:need-a-hug-input;lang:py3;\n\nhug = input('Do you need a hug? ')\n\n```\n\nThen we have a small complexity. In order to test if the response is 'yes' regardless of the font we need to convert the variable hug to lower case. \n```eg:need-a-hug-if-lower;lang:py3;\n\nhug = input('Do you need a hug? ')\nhug = hug.lower()\n\n```\n\nWe need to check if `hug` equals `'yes'`. If so, we `print` the message:\n\n```eg:need-a-hug-if;lang:py3;\n\nhug = input('Do you need a hug? ')\nhug = hug.lower()\nif hug == 'yes':\n  print('\\(^-^)\/')\n\n```\n\nSince the `Have a great day` message is printed every time, we use no indentation, so the second `print` is outside of the `if` body:\n\n```eg:need-a-hug;lang:py3;\nhug = input('Do you need a hug? ')\nhug=hug.lower()\nif hug == 'yes':\n  print('\\(^-^)\/')\nprint('Have a great day!')\n\n```\n",
      "updated_at":"2017-08-17T07:13:05.438332+00:00",
      "label":"py3-need-a-hug",
      "content":"<p>\n  Before there were emojis to help you express yourself in emails and texts, there was a text based system called <a href=\"https:\/\/en.wikipedia.org\/wiki\/Emoticon#Japanese_style\" target=\"_blank\">emoticons<\/a>. In Western countries users generally had to tilt their head to the side to see the expression of the emoticon but in Japan they developed <a href=\"https:\/\/en.wikipedia.org\/wiki\/Emoticon#Japanese_style\" target=\"_blank\">kaomoji<\/a>.\n<\/p>\n\n<p>\n  Write a program to give your friend a kaomoji hug if they need one.\n  For example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Do you need a hug? <\/o><i>Yes<\/i>\n<o>\\(^-^)\/<\/o>\n<o>Have a great day!<\/o>\n<o><\/o>\n<\/code><\/pre>\n<p>\n  It should work regardless of whether they used upper or lower case or a mix of both.\n  For example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Do you need a hug? <\/o><i>YES<\/i>\n<o>\\(^-^)\/<\/o>\n<o>Have a great day!<\/o>\n<o><\/o>\n<\/code><\/pre>\n<p>\n  If they don't need a hug you should still wish them a great day:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Do you need a hug? <\/o><i>no<\/i>\n<o>Have a great day!<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Any answer other than <code data-lang=\"in\">yes<\/code> (with any capitalisation) should work the same way:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Do you need a hug? <\/o><i>nup<\/i>\n<o>Have a great day!<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if",
        "string:eq"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nDescribing the problem in your own words helps you *understand it better*, and *identify the pieces of code* you need to solve it:\n\n**The program must *decide* to print a message, based on user input.**\n\nOnce you've got the pieces, you need to work out where they go.  Here, the `if` *controls* the `print`, but it needs the input *before* it can make a decision.  The correct order is:\n\n1. `input` for reading user input;\n2. `if` statement for deciding to run some code (or not);\n3. `print` for printing out a message.\n4. `print` for printing a message that doesn't depend on the `if`\n\n\nWe get input in the usual way, choosing `hug` as the variable name:\n\n```eg:need-a-hug-input;lang:py3;\n\nhug = input('Do you need a hug? ')\n\n```\n\nThen we have a small complexity. In order to test if the response is 'yes' regardless of the font we need to convert the variable hug to lower case. \n```eg:need-a-hug-if-lower;lang:py3;\n\nhug = input('Do you need a hug? ')\nhug = hug.lower()\n\n```\n\nWe need to check if `hug` equals `'yes'`. If so, we `print` the message:\n\n```eg:need-a-hug-if;lang:py3;\n\nhug = input('Do you need a hug? ')\nhug = hug.lower()\nif hug == 'yes':\n  print('\\(^-^)\/')\n\n```\n\nSince the `Have a great day` message is printed every time, we use no indentation, so the second `print` is outside of the `if` body:\n\n```eg:need-a-hug;lang:py3;\nhug = input('Do you need a hug? ')\nhug=hug.lower()\nif hug == 'yes':\n  print('\\(^-^)\/')\nprint('Have a great day!')\n\n```\n"
    },
    {
      "language":0,
      "title":"Forgotten Attachment?",
      "notes":"<p>\n  Start by describing the problem for yourself:\n<\/p>\n\n<p>\n  <strong>The program must check if a string is <em>contained<\/em> in another string.<\/strong>\n<\/p>\n\n<p>\n  We need an <code data-lang=\"py3\">if<\/code> statement with an <code data-lang=\"py3\">else<\/code> as well since there are two possibilities, either the string <code data-lang=\"in\">attach<\/code> is there or it's not.\n<\/p>\n\n<p>\n  This is very similar to the <code data-lang=\"py3\">if<\/code> and <code data-lang=\"py3\">else<\/code> programs you wrote before, except for one thing:\n  you needed the <code data-lang=\"py3\">in<\/code> operator to test if the string <code data-lang=\"py3\">'attach'<\/code> is <em>anywhere<\/em> inside the <code data-lang=\"py3\">email<\/code> the user entered:\n<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\nemail = input('Email: ')\nif 'attach' in email:\n  ...\n<\/code><\/pre>\n",
      "updated_at":"2016-08-14T12:59:27.071707+00:00",
      "label":"py3-forgot-the-attachment",
      "content":"<p>\n  Have you ever tried to send an email with an attachment but forgot to attach the file?\n  Gmail and Outlook can check this for you.\n<\/p>\n\n<p>\n  Write a program that checks your email for the string <code data-lang=\"in\">attach<\/code>, and if it's there, reminds you to attach the file.\n  Here is an example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Email: <\/o><i>I will attach the document to this email.<\/i>\n<o>Did you remember the attachment?<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n If <code data-lang=\"in\">attach<\/code> doesn't appear in the email, then print that it was sent:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Email: <\/o><\/i>Hi, how are you going?<\/i>\n<o>Sent.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  <code data-lang=\"in\">attach<\/code> can appear <em>anywhere<\/em> in the email, even in a longer word:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Email: <\/o><i>I have attached a photo.<\/i>\n<o>Did you remember the attachment?<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-else",
        "print",
        "string:in"
      ],
      "choices":"{}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  Start by describing the problem for yourself:\n<\/p>\n\n<p>\n  <strong>The program must check if a string is <em>contained<\/em> in another string.<\/strong>\n<\/p>\n\n<p>\n  We need an <code data-lang=\"py3\">if<\/code> statement with an <code data-lang=\"py3\">else<\/code> as well since there are two possibilities, either the string <code data-lang=\"in\">attach<\/code> is there or it's not.\n<\/p>\n\n<p>\n  This is very similar to the <code data-lang=\"py3\">if<\/code> and <code data-lang=\"py3\">else<\/code> programs you wrote before, except for one thing:\n  you needed the <code data-lang=\"py3\">in<\/code> operator to test if the string <code data-lang=\"py3\">'attach'<\/code> is <em>anywhere<\/em> inside the <code data-lang=\"py3\">email<\/code> the user entered:\n<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\nemail = input('Email: ')\nif 'attach' in email:\n  ...\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Sloth Speak",
      "notes":"<p>There were two tricky pieces to this problem, the first one was working out if the word started with a vowel or not, and the second was using string multiplication to repeat the sloooooow letter.<\/p>\n\n<p>In order to work out if the word starts with a vowel, there was a strong hint at the end of the question description. Have a look at that if you missed it.<\/p>\n\n<p>The second tricky part was to grab out either the first or second letter, multiply it by 10, and put it back together. Let's take a look at doing that for the first letter (for cases where it is a vowel).<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"sloth-speak-sol-0\"><code data-lang=\"py3\">\nword = \"anyway\"\nprint(word[0]*10)\n<\/code><\/pre>\n\n<p>We can extend it using string multiplication, and then use string slicing to add on the rest of the word (<code data-lang=\"py3\">word[1:]<\/code>: <\/p>\n<pre class=\"js-editor\" data-eg-id=\"sloth-speak-sol-1\"><code data-lang=\"py3\">\nword = \"anyway\"\nprint(word[0]*10 + word[1:])\n<\/code><\/pre>\n\n\n<p>We can do a very similar thing with the second letter, - grabbing out <code data-lang=\"py3\">word[1]<\/code> rather than <code data-lang=\"py3\">word[0]<\/code> to multiply. Putting it all together you get this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"sloth-speak-sol-2\"><code data-lang=\"py3\">\nword = \"hello\"\nprint(word[0] + word[1]*10 + word[2:])\n<\/code><\/pre>",
      "updated_at":"2016-08-25T04:24:47.505901+00:00",
      "label":"py3-sloth-speak",
      "content":"<p>\n  You're writing a book, with a character who is a <a href=\"https:\/\/en.wikipedia.org\/wiki\/Sloth\" target=\"_blank\">sloth<\/a>. To make it clear in the book that your character speaks veeeery sloooowly you repeat letters in words that are said by this character.\n<\/p>\n<p>\n  Write a program to read in a single word and turn it into sloth speak. \n  The word will always be in lowercase.\n<\/p>\n\n<p>\n  If the word <strong>starts with a vowel<\/strong>, you should repeat the <strong>first<\/strong> letter of the word 10 times:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Enter a word: <\/o><i>and<\/i>\n<o>aaaaaaaaaand<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If the word <strong>doesn't start with a vowel<\/strong>, your program should repeat the <strong>second<\/strong> letter 10 times:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Enter a word: <\/o><i>goodbye<\/i>\n<o>gooooooooooodbye<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Here's another example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Enter a word: <\/o><i>hello<\/i>\n<o>heeeeeeeeeello<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Hint: Is this letter a vowel?<\/h2>\n  <p>\n    A nice way to check if a letter is a vowel is to check if it's one of the letters in the string <code data-lang=\"str\">aeiou<\/code>.\n  <\/p>\n  <pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">letter = 'a'\nif letter in 'aeiou':\n  print('The letter is a vowel!')\n<\/code><\/pre>\n  \n  <p>Also remember that you can multiply strings by numbers using <code data-lang=\"py3\">*<\/code>.<\/p>\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "string:indexing",
        "print",
        "if-else",
        "string:in",
        "string:slice"
      ],
      "choices":"{}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>There were two tricky pieces to this problem, the first one was working out if the word started with a vowel or not, and the second was using string multiplication to repeat the sloooooow letter.<\/p>\n\n<p>In order to work out if the word starts with a vowel, there was a strong hint at the end of the question description. Have a look at that if you missed it.<\/p>\n\n<p>The second tricky part was to grab out either the first or second letter, multiply it by 10, and put it back together. Let's take a look at doing that for the first letter (for cases where it is a vowel).<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"sloth-speak-sol-0\"><code data-lang=\"py3\">\nword = \"anyway\"\nprint(word[0]*10)\n<\/code><\/pre>\n\n<p>We can extend it using string multiplication, and then use string slicing to add on the rest of the word (<code data-lang=\"py3\">word[1:]<\/code>: <\/p>\n<pre class=\"js-editor\" data-eg-id=\"sloth-speak-sol-1\"><code data-lang=\"py3\">\nword = \"anyway\"\nprint(word[0]*10 + word[1:])\n<\/code><\/pre>\n\n\n<p>We can do a very similar thing with the second letter, - grabbing out <code data-lang=\"py3\">word[1]<\/code> rather than <code data-lang=\"py3\">word[0]<\/code> to multiply. Putting it all together you get this:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"sloth-speak-sol-2\"><code data-lang=\"py3\">\nword = \"hello\"\nprint(word[0] + word[1]*10 + word[2:])\n<\/code><\/pre>"
    },
    {
      "language":0,
      "title":"Capital Cities",
      "notes":"<p>\n  Let's start by describing the problem:\n<\/p>\n\n<p>\n  <strong>The program must check if the string is all <em>lowercase<\/em>, and if it is, capitalise it with the <code data-lang=\"py3\">title<\/code> method.<\/strong>\n<\/p>\n\n<p>\n  For this question you needed to use two new string methods.\n<\/p>\n\n<p>The <code data-lang=\"py3\">islower<\/code> method checks if the string is lowercase or not.  It's used with an <code data-lang=\"py3\">if<\/code> statement to decide what message to print.<\/p>\n\n<p>\n  The <code data-lang=\"py3\">title<\/code> method changes the first letter of each word in a string to a capital letter:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"capital-cities-title\"><code data-lang=\"py3\">\nname = 'san francisco'\nprint(name.title())\n<\/code><\/pre>\n",
      "updated_at":"2016-08-14T14:09:12.632254+00:00",
      "label":"py3-capital-cities",
      "content":"<p>\n  In English, city names have capital letters, but sometimes you forget to type the capital letters!<\/p>\n<\/p>\n\n<p>\n  Write a program to correct this mistake.\n  If the user enters a city name which is all lowercase, your program should capitalise it with <code data-lang=\"py3\">title<\/code>.\n  Here is an example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>City name: <\/o><i>auckland<\/i>\n<o>You forgot the capital! It should be: Auckland<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If the name is not all lowercase, then we assume that it's correct:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>City name: <\/o><i>San Francisco<\/i>\n<o>Looks fine to me.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Here is one more example:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>City name: <\/o><i>brisbane<\/i>\n<o>You forgot the capital! It should be: Brisbane<\/o>\n<o><\/o>\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-else",
        "print",
        "string:lower",
        "string:isupper"
      ],
      "choices":"{}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  Let's start by describing the problem:\n<\/p>\n\n<p>\n  <strong>The program must check if the string is all <em>lowercase<\/em>, and if it is, capitalise it with the <code data-lang=\"py3\">title<\/code> method.<\/strong>\n<\/p>\n\n<p>This question can be tricky, because it combines multiple elements:<\/p>\n\n<ul>\n  <li>Using new <code data-lang=\"py3\">islower<\/code> and <code data-lang=\"py3\">title<\/code> methods;<\/li>\n  <li>Using the result of <code data-lang=\"py3\">islower<\/code> in an <code data-lang=\"py3\">if<\/code> statement;<\/li>\n  <li>Adding the result of <code data-lang=\"py3\">title<\/code> to the printed output.<\/li>\n<\/ul>\n\n<p>\n  Try encouraging students to solve this in steps: first get the <code data-lang=\"py3\">if<\/code> statement working, print only <code data-lang=\"out\">You forgot the capital!<\/code> for the lowercase names, and <code data-lang=\"out\">Looks fine to me.<\/code> for the other names:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"py3-capital-citites-teacher-notes\"><code data-lang=\"py3\">\nname = input('City name: ')\nif name.islower():\n  print('You forgot the capital!')\nelse:\n  print('Looks fine to me.')\n<\/code><\/pre>\n\n<p>\n  Once that's working, understand how the <code data-lang=\"py3\">title<\/code> method works:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"teacher-capital-cities-title\"><code data-lang=\"py3\">\nname = 'san francisco'\nprint(name.title())\n<\/code><\/pre>\n\n<p>\n  and then add it to the output of the program:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"teacher-capital-cities-soln\"><code data-lang=\"py3\">\nname = input('City name: ')\nif name.islower():\n  fixed = name.title()\n  print('You forgot the capital! It should be: ' + fixed)\nelse:\n  print('Looks fine to me.')\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Seeing Double",
      "notes":"<p>\n  <strong>This program checks if the last two characters of a string are equal.<\/strong>\n<\/p>\n\n<p>\n  The trick to this problem is using <em>negative indices<\/em>. We can access the last character of <code data-lang=\"py3\">word<\/code> using <code data-lang=\"py3\">word[-1]<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"double-or-nothing-indices\"><code data-lang=\"py3\">\nword = input('Word: ')\nprint(word[-1])\n<\/code><\/pre>\n\n<p>\n  and the second last character with <code data-lang=\"py3\">word[-2]<\/code>.  Again, we use <code data-lang=\"py3\">print<\/code> to just check you're getting the right characters from the word.\n<\/p>\n\n<p>\n  Now, the equality test is just between <code data-lang=\"py3\">word[-1]<\/code> and <code data-lang=\"py3\">word[-2]<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\nword = input('Word: ')\nif word[-1] == word[-2]:\n  ...\n<\/code><\/pre>\n\n<p>\n  and all you need to do is <code data-lang=\"py3\">print<\/code> the right messages.\n<\/p>\n",
      "updated_at":"2016-08-15T07:13:52.153274+00:00",
      "label":"py3-last-two-letters",
      "content":"<p>\n  Lots of words in English end with a double letter!\n  Words like <code data-lang=\"in\">yell<\/code>, <code data-lang=\"in\">too<\/code>, <code data-lang=\"in\">baseball<\/code>, <code data-lang=\"in\">happiness<\/code>, <code data-lang=\"in\">free<\/code>, and so on.\n<\/p>\n\n<p>\n  Write a program that checks if the <strong>last letter<\/strong> and the <strong>second last letter<\/strong> of a word are the same character.\n  Here's an example:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Word: <\/o><i>yell<\/i>\n<o>Ends with a double letter!<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If the last two letters are different, your program should do this:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Word: <\/o><i>something<\/i>\n<o>No double letter at the end.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Double letters don't matter unless they're the last two, like this:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Word: <\/o><i>yellow<\/i>\n<o>No double letter at the end.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Your program will only be tested on words at least 2 letters long.\n<\/p>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:indexing"
      ],
      "choices":"{}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  <strong>This program checks if the last two characters of a string are equal.<\/strong>\n<\/p>\n\n<p>\n  The trick to this problem is using <em>negative indices<\/em>. We can access the last character of <code data-lang=\"py3\">word<\/code> using <code data-lang=\"py3\">word[-1]<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"double-or-nothing-indices\"><code data-lang=\"py3\">\nword = input('Word: ')\nprint(word[-1])\n<\/code><\/pre>\n\n<p>\n  and the second last character with <code data-lang=\"py3\">word[-2]<\/code>.  Again, we use <code data-lang=\"py3\">print<\/code> to just check you're getting the right characters from the word.\n<\/p>\n\n<p>\n  Now, the equality test is just between <code data-lang=\"py3\">word[-1]<\/code> and <code data-lang=\"py3\">word[-2]<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-runnable=\"false\"><code data-lang=\"py3\">\nword = input('Word: ')\nif word[-1] == word[-2]:\n  ...\n<\/code><\/pre>\n\n<p>\n  and all you need to do is <code data-lang=\"py3\">print<\/code> the right messages.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Minimum length strings<\/h2>\n  <p>\n    If you run the program with a one letter word it fails. This is because <code data-lang=\"py3\">word[-2]<\/code> only works if there are at least two characters in <code data-lang=\"py3\">word<\/code>.\n  <\/p>\n  <p>\n    To make the problem simpler, we only test on longer words.  To solve this properly, we should check the length first:\n  <\/p>\n  <pre class=\"js-editor\" data-eg-id=\"double-or-nothing-better\"><code data-lang=\"py3\">\nword = input('Word: ')\nif len(word) >= 2:\n  if word[-1] == word[-2]:\n    print('Ends with a double letter!')\n  else:\n    print('No double letter at the end.')\nelse:\n  print('Too short for double letters.')\n<\/code><\/pre>\n<\/aside>\n"
    },
    {
      "language":0,
      "title":"That's exciting!",
      "notes":"#markdown\nThis program must replace one substring with another, but the replace function is not a good strategy here because there may be multiple exclamation marks in the string. We want to change the text <strong>only if it matches at the end of a word.<\/strong>\n\nThe best way to do this is to check if the word `endswith` the string `'!'`, and if so, use string slicing to slice off the end.\n\n\n\n\n",
      "updated_at":"2017-11-10T10:13:45.266610+00:00",
      "label":"aca-py3-exciting",
      "content":"#markdown\n\nTerry Pratchett, the author of the [Discworld Series of books](https:\/\/en.wikipedia.org\/wiki\/Discworld), once wrote \"Five exclamation marks, the sure sign of an insane mind.\" Nevertheless, you believe that your friends just aren't excited enough when writing good news. \n\nWrite a program that fixes your friends' sentences to be more excited (but not quite insane). When they type a sentence, if it ends with an exclamation mark your program should rewrite it in all caps and with 3 extra exclamation marks tacked on the end.\n\nFor example:\n\n```terminal;eg:none;\nLine: @@@That is exciting!\nTHAT IS EXCITING!!!!\n\n```\n\nIf the word does not end with `'!'`, you should print out a different message:\n```terminal;eg:none;\nLine: @@@I like homework\nThat is not an exciting message.\n\n```\n\nA message is only exciting if it ends with `'!'`, so if it appears anywhere else, you should treat it like an unexciting message. Here is an example:\n```terminal;eg:none;\nLine: @@@But, soft! what light through yonder window breaks?\nThat is not an exciting message.\n\n```\n\nHere's one more example:\n```terminal;eg:none;\nLine: @@@Happy Birthday!\nHAPPY BIRTHDAY!!!!\n\n```\n\n> ## What about already excited sentences?\n> If the user types multiple exclamation marks we still add 3 to the end. If that means they are considered insane it's not our problem.\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:replace"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThis program must replace one substring with another, but the replace function is not a good strategy here because there may be multiple exclamation marks in the string. We want to change the text <strong>only if it matches at the end of a word.<\/strong>\n\nThe best way to do this is to check if the word `endswith` the string `'!'`, and if so, use string slicing to slice off the end.\n\n"
    },
    {
      "language":0,
      "title":"Re-sounding Success",
      "notes":"#markdown\nThere were three tricky pieces to this problem, the first one was working out if the word ended with one 'o', two 'e's or neither, and the second was using string multiplication to repeat the echoing letters.\n\nIn order to work out if the word ends with a letter or two letters you need to use the address of those letters. Remember that [-1] is the address for the last letter in a string.\n\nThe second tricky part was to grab the last letter, multiply it by 10, and put it back together. Let's take a look at doing that for the last letter (for cases where it is an 'o').\n\n```eg:re-sounding-success-sol-0;lang:py3;\n\nword = 'echo'\nprint(word[-1]*10)\n\n```\n\nWe can extend it using string multiplication, and then use string slicing to add on the rest of the word (`word[:-1]`):\n\n```eg:re-sounding-success-sol-1;lang:py3;\n\nword = 'echo'\nprint(word[:-1] + word[-1]*10)\n\n```\n\nWe can do a very similar thing with checking the last two letters, - grabbing out `word[-2:]`. Putting it all together you get this:\n\n```eg:re-sounding-success-sol-2;lang:py3;\n\nword = 'free'\nif word[-2:] == 'ee':\n  print(word[:-1] + word[-1]*10)\n\n```\n",
      "updated_at":"2017-10-11T07:19:23.349071+00:00",
      "label":"aca-py3-re-sounding-echo",
      "content":"#markdown\nThere is a common misconception that a [duck's quack doesn't echo](https:\/\/en.wikipedia.org\/wiki\/List_of_common_misconceptions#Biology). Echoes are reverberations of sound and work best with long sounds like 'o' and 'ee'.\n\nWrite a program to read in a single word and turn it into echo speak. \n  The word will always be in lowercase.\n\nIf the word **ends with an o**, you should repeat the **last** letter of the word 10 times:\n\n```lang:py3;terminal;eg:none;\nEnter a word: @@@echo\nechoooooooooo\n\n```\n\nIf the **second last and last letters are both e**, your program should repeat the **last** letter 10 times:\n\n```lang:py3;terminal;eg:none;\nEnter a word: @@@free\nfreeeeeeeeeee\n\n```\n\nHere's another example:\n\n```lang:py3;terminal;eg:none;\nEnter a word: @@@hello\nhelloooooooooo\n\n```\n\nIf the word nether ends with an o or a double e the program should print the original word.\n```lang:py3;terminal;eg:none;\nEnter a word: @@@goggles\ngoggles\n\n```\n\n> ## Hint: Is this letter a vowel?\n> Remember that you can multiply strings by numbers using `*`.\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "string:indexing",
        "print",
        "if-else",
        "string:in",
        "string:slice"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThere were three tricky pieces to this problem, the first one was working out if the word ended with one 'o', two 'e's or neither, and the second was using string multiplication to repeat the echoing letters.\n\nIn order to work out if the word ends with a letter or two letters you need to use the address of those letters. Remember that [-1] is the address for the last letter in a string.\n\nThe second tricky part was to grab the last letter, multiply it by 10, and put it back together. Let's take a look at doing that for the last letter (for cases where it is an 'o').\n\n```eg:re-sounding-success-sol-0;lang:py3;\n\nword = 'echo'\nprint(word[-1]*10)\n\n```\n\nWe can extend it using string multiplication, and then use string slicing to add on the rest of the word (`word[:-1]`):\n\n```eg:re-sounding-success-sol-1;lang:py3;\n\nword = 'echo'\nprint(word[:-1] + word[-1]*10)\n\n```\n\nWe can do a very similar thing with checking the last two letters, - grabbing out `word[-2:]`. Putting it all together you get this:\n\n```eg:re-sounding-success-sol-2;lang:py3;\n\nword = 'free'\nif word[-2:] == 'ee':\n  print(word[:-1] + word[-1]*10)\n\n```\n"
    },
    {
      "language":0,
      "title":"Moth spotting",
      "notes":"#markdown\nStart by describing the problem for yourself:\n\n**The program must check if a string is *contained* in another string.**\n\nWe need an `if` statement with an `else` as well since there are two possibilities, either the string `moth` is there or it's not.\n\nThis is very similar to the `if` and `else` programs you wrote before, except for one thing:\n  you needed the `in` operator to test if the string `'attach'` is *anywhere* inside the `text` the user entered:\n\n```lang:py3;norun;\n\ntext = input('Text: ')\nif 'moth' in text:\n  ...\n\n```\n",
      "updated_at":"2017-10-03T05:25:42.706241+00:00",
      "label":"aca-py3-hidden-moth",
      "content":"#markdown\n![<a href=\"https:\/\/commons.wikimedia.org\/wiki\/File:Camouflaged_Moth_-_01.jpg\" target=\"_blank\">Camouflaged moth<\/a>](https:\/\/groklearning-cdn.com\/problems\/kvxAc5WAyzABAnMVzVAQ2j\/Camouflaged_Moth_-_01.jpg)\n\nThere is a moth in that picture. Can you see it?\n  Moths are very good at camouflage. They can even hide in text.\n\nWrite a program that checks a line of text for the string `moth`, and if it's there, announces that there is a moth hiding in the line.\n  Here is an example:\n\n```lang:py3;terminal;eg:none;\nText: @@@The moth circled the lamp.\nI found a moth!\n\n```\n\nIf `moth` doesn't appear in the line, then print that there are `\"No moths here.\"`:\n\n```lang:py3;terminal;eg:none;\nText: @@@Animals can be very good at hiding.\nNo moths here.\n\n```\n\n`moth` can appear *anywhere* in the line, even in a longer word:\n\n```lang:py3;terminal;eg:none;\nText: @@@A good scout will always smother a campfire after use.\nI found a moth!\n\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-else",
        "print",
        "string:in"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nStart by describing the problem for yourself:\n\n**The program must check if a string is *contained* in another string.**\n\nWe need an `if` statement with an `else` as well since there are two possibilities, either the string `moth` is there or it's not.\n\nThis is very similar to the `if` and `else` programs you wrote before, except for one thing:\n  you needed the `in` operator to test if the string `'attach'` is *anywhere* inside the `text` the user entered:\n\n```lang:py3;norun;\n\ntext = input('Text: ')\nif 'moth' in text:\n  ...\n\n```\n"
    },
    {
      "language":0,
      "title":"Open Sesame!",
      "notes":"#markdown\nDescribing the problem in your own words helps you *understand it better*, and *identify the pieces of code* you need to solve it:\n\n**The program must *decide* to print a message, based on user input.**\n\nOnce you've got the pieces, you need to work out where they go.  Here, the `if` *controls* the `print`, but it needs the input *before* it can make a decision.  The correct order is:\n\n1. `input` for reading user input;\n2. `if` statement for deciding to run some code (or not);\n3. `print` for printing out a message.\n\nWe get input in the usual way, choosing `command` as the variable name:\n\n```eg:open_sesame-input;lang:py3;\n\ncommand = input('Voice command: ')\n\n```\n\nThen we have a small complexity. In order to test if the response is 'open sesame' regardless of the font we need to convert the variable hug to lower case. \n```eg:open-sesame-if-lower;lang:py3;\n\ncommand = input('Voice command: ')\ncommand = command.lower()\n\n```\n\nWe need to check if `command` equals `'open sesame'`. If so, we `print` the message:\n\n```eg:open-sesame-if;lang:py3;\n\ncommand = input('Voice command: ')\ncommand = command.lower()\nif command == 'open sesame':\n  print('**cave opens**')\n  print('Enter!')\n\n```\n\nSince the `**The cave does nothing**` message is printed only if the command is incorrect, we need an else:\n\n```eg:open-sesame;lang:py3;\ncommand = input('Voice command: ')\ncommand = command.lower()\nif command == 'open sesame':\n  print('**cave opens**')\n  print('Enter!')\nelse:\n  print('**the cave does nothing**')  \n\n\n```\n",
      "updated_at":"2017-10-03T06:28:17.511442+00:00",
      "label":"aca-py3-open-sesame-case-insensitive",
      "content":"#markdown\n[Ali Baba and the Forty Thieves](https:\/\/en.wikipedia.org\/wiki\/Ali_Baba_and_the_Forty_Thieves) is a story that is often included in the collection of stories called the [One Thousand and One Nights](https:\/\/en.wikipedia.org\/wiki\/One_Thousand_and_One_Nights). It is a folk tale that tells of a woodcutter who finds a secret cave that can only be opened with the voice command \"Open Sesame\".\n\nWrite a program to test is the password is correct to gain access to the cave. Remember that because it is a voice command it should work however the user types it.\n  For example:\n\n```lang:py3;terminal;eg:none;\nVoice command: @@@open sesame\n**cave opens**\nEnter!\n\n```\n\nIt should work regardless of whether they used upper or lower case or a mix of both.\nFor example:\n\n```lang:py3;terminal;eg:none;\nVoice command: @@@Open Sesame\n**cave opens**\nEnter!\n\n```\n\nIf the voice command is not right, your program should print:\n\n```lang:py3;terminal;eg:none;\nVoice command: @@@open please\n**the cave does nothing**\n\n```\n\nAny answer other than <code data-lang=\"in\">open sesame<\/code> (with any capitalisation) should work the same way:\n\n```lang:py3;terminal;eg:none;\nVoice command: @@@password\n**the cave does nothing**\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if",
        "string:eq"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"command = input('Voice command: ')\ncommand = command.lower()\nif command == 'open sesame':\n  print('**cave opens**')\n  print('Enter!')\nelse:\n  print('**the cave does nothing**')  \n"
    },
    {
      "language":0,
      "title":"Email Address",
      "notes":"#markdown\n\nThis solution has a few moving parts, so let's break it down and solve it bit by bit.\n\nThe first step is to read in the firstname and lastname from the user:\n\n```norun;eg:none;\nfirstname = input('First name: ')\nlastname = input('Last name: ')\n```\n\nSo far so good!\n\nNow, we'll build up our username. To do that, we'll need the first letter of the first name (`firstname[0]`) and the whole last name. We can add them together like this:\n\n```norun;eg:none;\nusername = firstname[0] + lastname\n```\n\nNow we have to turn the username into lowercase, using `.lower()`. Remember that this doesn't change the actual string itself, you have to save a new version. In this case we've saved the lowercase version of the string back in the `username` variable. \n\n```norun;eg:none;\nusername = username.lower()\n```\n\nThen, then final step is to print it out with the right message!\n\n```norun; eg:none;\nprint('Your email address is ' + username + '@example.school.edu')\n```",
      "updated_at":"2017-10-03T09:46:51.359002+00:00",
      "label":"py3-email-address",
      "content":"<p>\n  You're creating an email address for all the new students at your school. Each email address is created using the first letter of the student's first name and then their last name. Like this:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>First name: <\/o><i>Stephen<\/i>\n<o>Last name: <\/o><i>Merity<\/i>\n<o>Your email address is smerity@example.school.edu<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  All of the letters in the email address should be <strong>lowercase<\/strong>.\n<\/p>\n\n<p>Here is another example student at Example School:<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>First name: <\/o><i>Jasmine<\/i>\n<o>Last name: <\/o><i>Constable<\/i>\n<o>Your email address is jconstable@example.school.edu<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Hint<\/h2>\n  <p>This question has lots of moving parts! Start by breaking it up into smaller tasks and solve it bit by bit.<\/p>\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\n\nThis solution has a few moving parts, so let's break it down and solve it bit by bit.\n\nThe first step is to read in the firstname and lastname from the user:\n\n```norun;eg:none;\nfirstname = input('First name: ')\nlastname = input('Last name: ')\n```\n\nSo far so good!\n\nNow, we'll build up our username. To do that, we'll need the first letter of the first name (`firstname[0]`) and the whole last name. We can add them together like this:\n\n```norun;eg:none;\nusername = firstname[0] + lastname\n```\n\nNow we have to turn the username into lowercase, using `.lower()`. Remember that this doesn't change the actual string itself, you have to save a new version. In this case we've saved the lowercase version of the string back in the `username` variable. \n\n```norun;eg:none;\nusername = username.lower()\n```\n\nThen, then final step is to print it out with the right message!\n\n```norun; eg:none;\nprint('Your email address is ' + username + '@example.school.edu')\n```"
    },
    {
      "language":0,
      "title":"Mad Libs 2: Bork Bork Bork!",
      "notes":"#markdown\nTo solve this question, we'll use multiples of <code data-lang=\"py3\">input<\/code> and <code data-lang=\"py3\">print<\/code>, just like the last question.\nTo solve this question, though, we'll also need to change the ingredients that the user types in, so that they're **also** in *Swedish Chef Speak*. \n\nThere are a few different ways we could do this. We'll go through these three ways, just using the first line as an example to keep it short.\n\nWe can read in the ingredients first, saving them in a variable, then modify the variable, then print out the recipe, like this:\n```\ning1 = input('Ingredient 1: ')\ning1 = ing1.replace('th','z')\nprint(f'First cut ze {ing1} into triangles.')\n```\n\nThat's the way we expected you to solve this question, but there are a few other ways that might be interesting to you.\n\nWe could modify the ingredient as we print it out, either inside the f-string as a variable:\n```\ning1 = input('Ingredient 1: ')\nprint(f'First cut ze {ing1.replace(\"th\",\"z\")} into triangles.')\n```\n\nOr affecting the whole line! Remember that the line doesn't have any `'th'` in it, so it won't matter if we replace all occurrences of `'th'` with `'z'`.\n```\ning1 = input('Ingredient 1: ')\nprint(f'First cut ze {ing1} into triangles.'.replace('th','z'))\n```\n\nIn fact, we could even translate the recipe back into English, and then run the `replace` over the whole line:\n```\ning1 = input('Ingredient 1: ')\nprint(f'First cut the {ing1} into triangles.'.replace('th','z'))\n```\n",
      "updated_at":"2017-07-22T07:12:40.181085+00:00",
      "label":"py3-mad-libs-1",
      "content":"#markdown\nLet's keep building up our <a href=\"https:\/\/en.wikipedia.org\/wiki\/Mad_Libs\" target=\"_blank\">Mad Libs<\/a>!\nThe <a href=\"https:\/\/en.wikipedia.org\/wiki\/Swedish_Chef\" target=\"_blank\">Swedish Chef<\/a> is a character from the Muppets who does hilarious things to food. His accent is quite thick, and he is often almost unintelligible. \n\nWrite a program to write out a three ingredients recipe in *Swedish Chef speak*. You should read in three ingredients from the user and replace all occurences of the letters `'th'` with the letter `'z'`.\n\nFor this question, Swedish Chef's recipes are always the same (with different ingredients), and they always ends in `'Bork! Bork! Bork!'` \n\nHere is an example:\n\n```terminal;eg:none;\nIngredient 1: @@@pastry\nIngredient 2: @@@chicken thighs\nIngredient 3: @@@beans\nFirst cut ze pastry into triangles.\nThen smash ze chicken zighs wiz a hammer.\nFry a mix of pastry and chicken zighs stirring gently.\nAdd in ze beans one ladle at a time.\nSprinkle ze remaining pastry over ze top.\nBork! Bork! Bork!\n\n```\n\nHere is another example:\n\n```terminal;eg:none;\nIngredient 1: @@@onion\nIngredient 2: @@@wheat thins\nIngredient 3: @@@emmenthaler cheese\nFirst cut ze onion into triangles.\nThen smash ze wheat zins wiz a hammer.\nFry a mix of onion and wheat zins stirring gently.\nAdd in ze emmenzaler cheese one ladle at a time.\nSprinkle ze remaining onion over ze top.\nBork! Bork! Bork!\n\n```\n\n> ## Hint\n>\n> Don't forget you can copy and paste the text for long passages to save on typing.\n> \n> Using f-strings to build the recipe will make things easier!\n\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nTo solve this question, we'll use multiples of <code data-lang=\"py3\">input<\/code> and <code data-lang=\"py3\">print<\/code>, just like the last question.\nTo solve this question, though, we'll also need to change the ingredients that the user types in, so that they're **also** in *Swedish Chef Speak*. \n\nThere are a few different ways we could do this. We'll go through these three ways, just using the first line as an example to keep it short.\n\nWe can read in the ingredients first, saving them in a variable, then modify the variable, then print out the recipe, like this:\n```\ning1 = input('Ingredient 1: ')\ning1 = ing1.replace('th','z')\nprint(f'First cut ze {ing1} into triangles.')\n```\n\nThat's the way we expected you to solve this question, but there are a few other ways that might be interesting to you.\n\nWe could modify the ingredient as we print it out, either inside the f-string as a variable:\n```\ning1 = input('Ingredient 1: ')\nprint(f'First cut ze {ing1.replace(\"th\",\"z\")} into triangles.')\n```\n\nOr affecting the whole line! Remember that the line doesn't have any `'th'` in it, so it won't matter if we replace all occurrences of `'th'` with `'z'`.\n```\ning1 = input('Ingredient 1: ')\nprint(f'First cut ze {ing1} into triangles.'.replace('th','z'))\n```\n\nIn fact, we could even translate the recipe back into English, and then run the `replace` over the whole line:\n```\ning1 = input('Ingredient 1: ')\nprint(f'First cut the {ing1} into triangles.'.replace('th','z'))\n```\n"
    },
    {
      "language":0,
      "title":"Mad Libs 1: Letters from camp!",
      "notes":"<p>To solve this question, we'll use multiples of <code data-lang=\"py3\">input<\/code> and <code data-lang=\"py3\">print<\/code>. There are eight different pieces of information to input and there will need to be a separate variable and input for each.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"mad-libs-soln1\" data-runnable=\"false\"><code data-lang=\"py3\">name = input('Name: ')\nrelation = input('Relation: ')\nnoun = input('Noun: ')\nanimal = input('Animal (plural): ')\nsport = input('Sport: ')\nadjective = input('Adjective: ')\nadjective2 = input('Another Adjective: ')\nverb = input('Verb: ')\n<\/code><\/pre>\n\n<p>Here we've called our variables descriptive names such as  <code data-lang=\"py3\">name<\/code> and <code data-lang=\"py3\">relation<\/code>. When you're naming your variables, remember that they can't contain spaces!<\/p>\n\n<p>The second step is to print out the message, using strings and the contents of those variables just like the hint suggests:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"mad-libs-soln2\" data-runnable=\"false\"><code data-lang=\"py3\">\nprint(f'Dear {relation},')\nprint(f'Camp {noun} has been {adjective} so far!')\nprint(f'Tomorrow we will play {sport} if the weather is ok.')\nprint(f'Today it has been raining cats and {animal} all day!')\nprint(f'If we cannot play {sport}, maybe we will just {verb}.')\nprint(f'I am sure it will be {adjective2} either way!')\nprint(f'See you soon! {name}')\n<\/code><\/pre>\n\n<p>And that's it! So we can now piece these two steps together to form the final solution.<\/p>\n",
      "updated_at":"2017-07-22T08:02:57.232425+00:00",
      "label":"py3-mad-libs-0",
      "content":"<p><a href=\"https:\/\/en.wikipedia.org\/wiki\/Mad_Libs\" target=\"_blank\">Mad Libs<\/a> are funny, often nonsensical stories built by asking someone for a series of words and using those words to fill in the blanks in a story. There are often crazy results! <\/p>\n\n<p>Every time kids go away to camp, people expect them to send postcards. But there\u2019s more fun outside than being stuck inside writing!\nWrite a program that will help your friends tell fun stories about what they\u2019re doing at camp.\nYour program should ask the user for some things you might find at camp and turn them into a story. For example:<\/p>\n\n<p>Here is an example:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Name: <\/o><i>Jane<\/i>\n<o>Relation: <\/o><i>Aunty<\/i>\n<o>Noun: <\/o><i>stick<\/i>\n<o>Animal (plural): <\/o><i>sloths<\/i>\n<o>Sport: <\/o><i>tennis<\/i>\n<o>Adjective: <\/o><i>bouncy<\/i>\n<o>Another Adjective: <\/o><i>crunchy<\/i>\n<o>Verb: <\/o><i>hop<\/i>\n<o>Dear Aunty,\nCamp stick has been bouncy so far!\nTomorrow we will play tennis if the weather is ok.\nToday it has been raining cats and sloths all day!\nIf we cannot play tennis, maybe we will just hop.\nI am sure it will be crunchy either way!\nSee you soon! Jane<\/o>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Hint<\/h2>\n  <p>\n    Don't forget you can copy and paste the text for long passages to save on typing.\n  <\/p>\n    <p>\n    You will need to use f strings to build the story.\n  <\/p>\n  <p><strong>Example:<\/strong><\/p>\n    <pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln1\"><code data-lang=\"py3\">relation = input('Relation: ')\nprint(f'Dear {relation},')\n<\/code><\/pre>\n    \n<\/aside>\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>To solve this question, we'll use multiples of <code data-lang=\"py3\">input<\/code> and <code data-lang=\"py3\">print<\/code>. There are eight different pieces of information to input and there will need to be a separate variable and input for each.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln1\"><code data-lang=\"py3\">name = input('Name: ')\nrelation = input('Relation: ')\nnoun = input('Noun: ')\nanimal = input('Animal (plural): ')\nsport = input('Sport: ')\nadjective = input('Adjective: ')\nadjective2 = input('Another Adjective: ')\nverb = input('Verb: ')\n<\/code><\/pre>\n\n<p>Here we've called our variables descriptive names such as  <code data-lang=\"py3\">name<\/code> and <code data-lang=\"py3\">relation<\/code>. When you're naming your variables, remember that they can't contain spaces!<\/p>\n\n<p>The second step is to print out the message, using strings and the contents of those variables just like the hint suggests:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln2\" data-runnable=\"false\"><code data-lang=\"py3\">\nprint(f'Dear {relation},')\nprint(f'Camp {noun} has been {adjective} so far!')\nprint(f'Tomorrow we will play {sport} if the weather is ok.')\nprint(f'Today it has been raining cats and {animal} all day!')\nprint(f'If we cannot play {sport}, maybe we will just {verb}.')\nprint(f'I am sure it will be {adjective2} either way!')\nprint(f'See you soon! {name}')\n<\/code><\/pre>\n\n<p>And that's it! So we can now piece these two steps together to form the final solution.<\/p>\n"
    },
    {
      "language":0,
      "title":"Blank is the new blank",
      "notes":"<p>To solve this question, we'll use <code data-lang=\"py3\">input<\/code> to read in two different bits of information: x and y.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln1\"><code data-lang=\"py3\">team1 = input('x: ')\nteam2 = input('y: ')\n<\/code><\/pre>\n\n<p>Here we've called our variables <code data-lang=\"py3\">x<\/code> and <code data-lang=\"py3\">y<\/code>.<\/p>\n\n<p>The second step is to print out the message, using strings and the contents of those variables:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln2\" data-runnable=\"false\"><code data-lang=\"py3\">\nprint(f'{x} is the new {y}')\n<\/code><\/pre>\n\n<p>And that's it! So we can now piece these two steps together to form the final solution.<\/p>\n",
      "updated_at":"2017-07-25T10:42:27.060747+00:00",
      "label":"py3-x-is-the-new-y",
      "content":"#markdown\n\nA common saying in fashion is to describe a new fashion colour or trend as \"the new black\". \nYou can sometimes even see phrases like \"[x is the new y](https:\/\/snowclones.org\/2007\/07\/01\/x-is-the-new-y\/)\": [Quiet is the new Loud](https:\/\/en.wikipedia.org\/wiki\/Quiet_Is_the_New_Loud), [Bacon is the new Chocolate](https:\/\/www.theatlantic.com\/magazine\/archive\/2005\/11\/better-bacon\/304326\/) or even [Knitting is the new yoga](http:\/\/www.telegraph.co.uk\/men\/thinking-man\/10552983\/Mens-knitting-is-it-the-new-yoga.html).\n\nWrite a program that reads in two things, and prints out the resulting _new_ phrase.\n\nHere is an example:\n\n```lang:py3;terminal;eg:none;\nx: @@@Orange\ny: @@@Black\nOrange is the new Black\n\n```\n\n\n```lang:py3;terminal;eg:none;\nx: @@@Quiet\ny: @@@Loud\nQuiet is the new Loud\n\n```\n\n\nHere's another example:\n\n```lang:py3;terminal;eg:none;\nx: @@@knitting\ny: @@@yoga\nknitting is the new yoga\n\n```\n\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>To solve this question, we'll use <code data-lang=\"py3\">input<\/code> to read in two different bits of information: x and y.\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln1\"><code data-lang=\"py3\">team1 = input('x: ')\nteam2 = input('y: ')\n<\/code><\/pre>\n\n<p>Here we've called our variables <code data-lang=\"py3\">x<\/code> and <code data-lang=\"py3\">y<\/code>.<\/p>\n\n<p>The second step is to print out the message, using strings and the contents of those variables:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"match-of-the-year-soln2\" data-runnable=\"false\"><code data-lang=\"py3\">\nprint(f'{x} is the new {y}')\n<\/code><\/pre>\n\n<p>And that's it! So we can now piece these two steps together to form the final solution.<\/p>\n"
    },
    {
      "language":0,
      "title":"How good is your vocabulary?",
      "notes":"#markdown\nTo solve this question, we'll first need to read in the long word and save it in a variable.\n\nThen, we need to calculate the length of the message, and subtract it from 28, the length of the longest word.\n\nYou can solve this in small steps:\n\n```\nlongword = input('Long word: ')\nlength = len(message)\nremain = 28 - length\nprint(f'You have {remain} character(s) left.')\n```\n\nor in case you later find a longer word and want to update your program, you could do it this way:\n```\nlongword = input('Long word: ')\nlongestword='antidisestablishmentarianism'\nlength = len(message)\nlonglength=len(longestword)\nremain = longlength - length\nprint(f'You have {remain} character(s) left.')\n```\n\nOr you can do it all at once, which is how we imagined you'd solve it. There's no single right way to solve it!",
      "updated_at":"2017-12-02T23:58:13.059349+00:00",
      "label":"aca-py3-vocab-length",
      "content":"#markdown\nIf you're a fan of hangman you need to know some long words. [English has a lot of very long words](https:\/\/en.wikipedia.org\/wiki\/Longest_word_in_English). The longest non-technical word in the English language is [**antidisestablishmentarianism**](https:\/\/en.wikipedia.org\/wiki\/Antidisestablishmentarianism_(word)). At 28 letters it is a **very** long word. \n\nYou want to test your friends' vocabulary by seeing how close they can get to the longest word. \n\nWrite a program to read in the longest word your friends can think of and tell them how close they are to the length of \"antidisestablishmentarianism\":\n\n```lang:py3;terminal;eg:none;\nLong word: @@@incomprehensibilities\nIt is 7 letter(s) shorter than the longest word.\n\n```\n\nHere is another example:\n```lang:py3;terminal;eg:none;\nLong word: @@@unimaginatively\nIt is 13 letter(s) shorter than the longest word.\n\n```\n\nIf the long word is longer than 28 characters, it should print out the negative number of letters\n```lang:py3;terminal;eg:none;\nLong word: @@@supercalifragilisticexpialidocious\nIt is -6 letter(s) shorter than the longest word.\n\n```\nBut we all know that's not a *real* word.",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:len"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nTo solve this question, we'll first need to read in the long word and save it in a variable.\n\nThen, we need to calculate the length of the message, and subtract it from 28, the length of the longest word.\n\nYou can solve this in small steps:\n\n```\nlongword = input('Long word: ')\nlength = len(message)\nremain = 28 - length\nprint(f'You have {remain} character(s) left.')\n```\n\nor in case you later find a longer word and want to update your program, you could do it this way:\n```\nlongword = input('Long word: ')\nlongestword='antidisestablishmentarianism'\nlength = len(message)\nlonglength=len(longestword)\nremain = longlength - length\nprint(f'You have {remain} character(s) left.')\n```\n\nOr you can do it all at once, which is how we imagined you'd solve it. There's no single right way to solve it!"
    },
    {
      "language":0,
      "title":"Twittier: Can I Tweet that?",
      "notes":"#markdown\nTo solve this question, we'll first need to read in the message and save it in a variable.\n\nThen, we need to calculate the length of the message, and subtract it from 44, the maximum length of messages are allowed to be.\n\nYou can solve this in small steps:\n\n```\nmessage = input('Message: ')\nlength = len(message)\nremain = 44 - length\nprint(f'You have {remain} character(s) left.')\n```\n\nOr you can do it all at once. There's no single right way to solve it!",
      "updated_at":"2017-11-30T04:23:56.652941+00:00",
      "label":"py3-tweet-length",
      "content":"#markdown\n[Twitter](https:\/\/en.wikipedia.org\/wiki\/Twitter) is a social network where users post short \"tweets\" that used to be 140 characters or fewer. (Now they can be twice as long!) You've made your own version, \"Twittier\", that limits posts to only 44 characters!\n\nWrite a program to read in the post you'd like to make, and tells you how many characters you have spare.\n```lang:py3;terminal;eg:none;\nMessage: @@@First post!\nYou have 33 character(s) left.\n\n```\n\nHere is another example:\n```lang:py3;terminal;eg:none;\nMessage: @@@Can't wait until the weekend! #sleepin\nYou have 6 character(s) left.\n\n```\n\nHere's an example with a message of exactly 44 characters:\n```lang:py3;terminal;eg:none;\nMessage: @@@This msg is exactly 44 characters - no more!\nYou have 0 character(s) left.\n\n```\n\nIf the post is longer than 44 characters, it should print out the negative number of characters:\n```lang:py3;terminal;eg:none;\nMessage: @@@Fitbits are like Tamagotchi, except you're trying to keep yourself alive.\nYou have -29 character(s) left.\n\n```",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:len"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nTo solve this question, we'll first need to read in the message and save it in a variable.\n\nThen, we need to calculate the length of the message, and subtract it from 44, the maximum length of messages are allowed to be.\n\nYou can solve this in small steps:\n\n```\nmessage = input('Message: ')\nlength = len(message)\nremain = 44 - length\nprint(f'You have {remain} character(s) left.')\n```\n\nOr you can do it all at once. There's no single right way to solve it!\n"
    },
    {
      "language":0,
      "title":"Trackwork",
      "notes":"<p>\n  <strong>This program must replace one substring with another.<\/strong>\n<\/p>\n\n<p>\n  If you know about the <code data-lang=\"py3\">replace<\/code> string method, then you are most of the way to solving this problem!\n<\/p>\n\n<p>\n  We must replace every reference to <code data-lang=\"out\">train<\/code> with <code data-lang=\"out\">bus<\/code>\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"trackwork-soln\"><code data-lang=\"py3\">\nplan = 'I need to catch a train to school.'\nplan = plan.replace('train', 'bus')\nprint(plan)\n<\/code><\/pre>\n",
      "updated_at":"2017-09-13T12:49:57.129401+00:00",
      "label":"aca-py3-trackwork",
      "content":"#markdown\n\n<p>\n  Every so often, train tracks need maintenance or repairs. When that happens trains are replaced by buses. Write a program to help people know how to get where they're going. \n<\/p>\n\n<p>\n  Write a program which asks the user for their plans and replaces the word <code data-lang=\"out\">train<\/code> with the word <code data-lang=\"out\">bus<\/code>.\n  Here is an example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What are your plans? <\/o><i>Catching the train to the zoo.<\/i>\n<o>Catching the bus to the zoo.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\nHere is another example:\n```lang:py3;terminal;eg:none;\nWhat are your plans? @@@Take a train to Central then train to Redfern.\nTake a bus to Central then bus to Redfern.\n```\n\n<p>\n  Sometimes there might be a funny outcome:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What are your plans? <\/o><i>I am going to soccer training.<\/i>\n<o>I am going to soccer busing.<\/o>\n<o><\/o>\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:replace"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  <strong>This program must replace one substring with another.<\/strong>\n<\/p>\n\n<p>\n  If you know about the <code data-lang=\"py3\">replace<\/code> string method, then you are most of the way to solving this problem!\n<\/p>\n\n<p>\n  We must replace every reference to <code data-lang=\"out\">train<\/code> with <code data-lang=\"out\">bus<\/code>\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"trackwork-soln\"><code data-lang=\"py3\">\nplan = 'I need to catch a train to school.'\nplan = plan.replace('train', 'bus')\nprint(plan)\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"TELEGRAM STOP",
      "notes":"<p>\n  <strong>This program must convert a string to uppercase and replace one substring with another.<\/strong>\n<\/p>\n\n<p>\n  If you know about the <code data-lang=\"py3\">upper<\/code> and <code data-lang=\"py3\">replace<\/code> string methods, then you are most of the way to solving this problem!\n<\/p>\n\n<p>\n  You can start by converting the message to uppercase with <code data-lang=\"py3\">upper<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"telegram-upper\"><code data-lang=\"py3\">\nmessage = input('Message: ')\nmessage = message.upper()\nprint(message)\n<\/code><\/pre>\n\n<p>\n  Notice that we store the uppercase version back in the <code data-lang=\"py3\">message<\/code> variable.\n  It helps to <code data-lang=\"py3\">print<\/code> <code data-lang=\"py3\">message<\/code> as you're developing your program, so you know whether it is working.\n<\/p>\n\n<p>\n  Next, we must replace every full stop (<code data-lang=\"in\">.<\/code>) with <code data-lang=\"out\">STOP<\/code>, remembering to put a space at the start of the string, like this <code data-lang=\"py3\">' STOP'<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"telegram-soln\"><code data-lang=\"py3\">\nmessage = input('Message: ')\nmessage = message.upper()\nmessage = message.replace('.', ' STOP')\nprint(message)\n<\/code><\/pre>\n",
      "updated_at":"2016-08-14T15:06:45.402267+00:00",
      "label":"py3-telegram",
      "content":"<p>\n  Before telephones were invented, the only way to communicate quickly over long distances was by <a href=\"https:\/\/en.wikipedia.org\/wiki\/Telegraphy\" target=\"_blank\">telegraph<\/a>.\n  Short messages known as <a href=\"https:\/\/en.wikipedia.org\/wiki\/The_Telegram\" target=\"_blank\">telegrams<\/a> were sent over wires in <a href=\"https:\/\/en.wikipedia.org\/wiki\/Morse_code\" target=\"_blank\">Morse Code<\/a>.\n<\/p>\n<p>\n  Telegrams were usually written all in uppercase letters, and instead of a full stop (<code data-lang=\"in\">.<\/code>) they would write <code data-lang=\"out\">STOP<\/code>.\n<\/p>\n\n<p>\n  Write a program which converts a message into a telegram by changing it to uppercase and replacing the full stops with the word <code data-lang=\"out\">STOP<\/code> <strong>including a space before it<\/strong>.\n  Here is an example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Message: <\/o><i>I will visit in April.<\/i>\n<o>I WILL VISIT IN APRIL STOP<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Telegrams would cost money per word, so they are usually short:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Message: <\/o><i>French trip is awesome. See you soon.<\/i>\n<o>FRENCH TRIP IS AWESOME STOP SEE YOU SOON STOP<\/o>\n<o><\/o>\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:replace"
      ],
      "choices":"{}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  <strong>This program must convert a string to uppercase and replace one substring with another.<\/strong>\n<\/p>\n\n<p>\n  If you know about the <code data-lang=\"py3\">upper<\/code> and <code data-lang=\"py3\">replace<\/code> string methods, then you are most of the way to solving this problem!\n<\/p>\n\n<p>\n  You can start by converting the message to uppercase with <code data-lang=\"py3\">upper<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"telegram-upper\"><code data-lang=\"py3\">\nmessage = input('Message: ')\nmessage = message.upper()\nprint(message)\n<\/code><\/pre>\n\n<p>\n  Notice that we store the uppercase version back in the <code data-lang=\"py3\">message<\/code> variable.\n  It helps to <code data-lang=\"py3\">print<\/code> <code data-lang=\"py3\">message<\/code> as you're developing your program, so you know whether it is working.\n<\/p>\n\n<p>\n  Next, we must replace every full stop (<code data-lang=\"in\">.<\/code>) with <code data-lang=\"out\">STOP<\/code>, remembering to put a space at the start of the string, like this <code data-lang=\"py3\">' STOP'<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"telegram-soln\"><code data-lang=\"py3\">\nmessage = input('Message: ')\nmessage = message.upper()\nmessage = message.replace('.', ' STOP')\nprint(message)\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Shout it from the rooftops",
      "notes":"<p>\n  <strong>This program must convert a string to uppercase and print it out.<\/strong>\n<\/p>\n\n<p>\n  The <code data-lang=\"py3\">upper<\/code> string method will be particularly handy for this question.\n<\/p>\n\n<p>\n  You can start by reading in the message, and saving it in a variable. Then, convert it to upper case, and finally, print it out!<\/p>\n\n<p>\n  Notice that we store the uppercase version back in the <code data-lang=\"py3\">message<\/code> variable.\n  It helps to <code data-lang=\"py3\">print<\/code> <code data-lang=\"py3\">message<\/code> as you go, especially if you are developing a longer, more complex program, so you know whether it is working.\n<\/p>\n",
      "updated_at":"2017-09-14T03:15:48.896245+00:00",
      "label":"py3-shout-it",
      "content":"#markdown\nHave you ever felt something so strongly you want to shout it from a rooftop?\n\nLet's write a SHOUTER program that asks the user for some text and then SHOUTS it in upper case for us.\n\nHere is an example interaction with the program:\n\n```lang:py3;terminal;eg:none;\nEnter text: @@@I love programming!\nI LOVE PROGRAMMING!\n\n```\n\nHere is another example:\n```lang:py3;terminal;eg:none;\nEnter text: @@@It's lunchtime!\nIT'S LUNCHTIME!\n\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:replace"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>\n  <strong>This program must convert a string to uppercase and print it out.<\/strong>\n<\/p>\n\n<p>\n  The <code data-lang=\"py3\">upper<\/code> string method will be particularly handy for this question.\n<\/p>\n\n<p>\n  You can start by reading in the message, and saving it in a variable. Then, convert it to upper case, and finally, print it out!<\/p>\n\n<p>\n  Notice that we store the uppercase version back in the <code data-lang=\"py3\">message<\/code> variable.\n  It helps to <code data-lang=\"py3\">print<\/code> <code data-lang=\"py3\">message<\/code> as you go, especially if you are developing a longer, more complex program, so you know whether it is working.\n<\/p>\n"
    },
    {
      "language":0,
      "title":"Breaking the fourth wall",
      "notes":"#markdown\nTo solve this question, we need to read in a line, change it to lower case, and print it out together with a string `'Aside:'` at the beginning of the line.\n\n<p>\n  The <code data-lang=\"py3\">lower<\/code> string method will be particularly handy for this question.\n<\/p>\n\n",
      "updated_at":"2017-09-14T03:15:58.615041+00:00",
      "label":"py3-breaking-fourth-wall",
      "content":"#markdown\nAn [aside](https:\/\/en.wikipedia.org\/wiki\/Aside) is a dramatic device used to let a character speak directly to the audience, without the other characters hearing.\nIt's a way of breaking the [fourth wall](https:\/\/en.wikipedia.org\/wiki\/Fourth_wall).\nIt is used in theatre, TV and film, and needs to be specifically marked as an *aside* in a script.\n\nYou're writing a play, and want to make sure your asides stand out. \nWrite a program to help.\nEach aside should start with `Aside: ` and be entirely in **lower case**. \n\nHere is an example from [Hamlet](https:\/\/en.wikipedia.org\/wiki\/Hamlet), by Shakespeare:\n```lang:py3;terminal;eg:none;\nLine: @@@A little more than kin, and less than kind.\nAside: a little more than kin, and less than kind.\n\n```\n\nHere is another example from [The Emperor's New Groove](https:\/\/en.wikipedia.org\/wiki\/The_Emperor%27s_New_Groove):\n```lang:py3;terminal;eg:none;\nLine: @@@This is his story. WELL, ACTUALLY my story.\nAside: this is his story. well, actually my story.\n\n```\n\nHere's one more example from [Ferris Bueller's Day Off](https:\/\/en.wikipedia.org\/wiki\/Ferris_Bueller%27s_Day_Off):\n```lang:py3;terminal;eg:none;\nLine: @@@How could I possibly be expected to handle school on a day like this?\nAside: how could i possibly be expected to handle school on a day like this?\n\n```",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:replace"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nTo solve this question, we need to read in a line, change it to lower case, and print it out together with a string `'Aside:'` at the beginning of the line.\n\n<p>\n  The <code data-lang=\"py3\">lower<\/code> string method will be particularly handy for this question.\n<\/p>\n\n"
    }
  ],
  "lead_text":"Write code to create word games and develop a Pirate Chatbot. Arrr, me hearties!",
  "short_title":"DT Python Chatbot",
  "export_version":1,
  "slug":"aca-dt-78-py-chatbot",
  "outline":""
}