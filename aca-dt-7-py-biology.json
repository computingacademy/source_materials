{
  "description":"Learn about the differences between animals, and how Biologists use programming to help them do science!\n\nWe'll learn about the features of animals, and how to use their differences in order to classify them. So hop in and learn some science!\n\nThis course is based on the Year 7 science and the 7-8 Digital Technologies curriculum.",
  "title":"DT Challenge Python - Year 7 Biology",
  "modules":[
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nSetting the contents of a variable is called *assigning* a value to the variable. Python creates variables by assignment.\n\nWhen you assign a new value to an existing variable, it replaces the old contents of the variable:\n\n```eg:py3-change-var-value;lang:py3;\nspecies = 'Homo sapiens!'\nprint(species)\nspecies = 'Human!'\nprint(species)\n```\n\nThe old value in `species` - `'Homo sapiens'` - is replaced with the new value - `'Human!'` - before the second `print` statement, producing:\n\n```eg:last;lang:py3;terminal;\nHomo sapiens!\nHuman!\n```\n\n> ## Variables are like files\n> Variables are like files on your computer: they have a name and you can store data in them. You can look at the contents or overwrite the contents with new data.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>This is one of the toughest concepts for new programmers to understand, so it's worth making sure you're comfortable with this concept yourself so you can assist students who get stuck.<\/p>\n<p>When a computer needs to store data, it does so by writing that data into memory. Each section of memory has an address - just like every house on a street does - so accessing data requires you to point to the address that the data was stored at. Unfortunately, the addresses used by computers are not very memorable and look something like <code data-lang=\"py3\">0x83fba73d<\/code>.<\/p>\n<p>When we create a variable, we are setting a human-readable version of the address. We can then use this in our program to access the data we have assigned to it. You can think of this as replacing the address of your house - something like <code data-lang=\"py3\">123 House Street<\/code> - with a name - perhaps <code data-lang=\"py3\">Castle<\/code>. Now, every time you use the term <code data-lang=\"py3\">Castle<\/code>, you are referring to your house without needing to use the whole address.<\/p>\n<p>When you assign to a variable you aren't just giving it a convenient label - you are also storing some new data into that piece of memory. Any reference to that variable later in your program goes to that address and retrieves the data you put there.<\/p>\n<p>Variable labels are reusable, so you can change the data you are referring to by assigning the same variable name to a new value.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nThis is one of the toughest concepts for new programmers to understand, so it's worth making sure you're comfortable with this concept yourself so you can assist students who get stuck.\n\nWhen a computer needs to store data, it does so by writing that data into memory. Each section of memory has an address - just like every house on a street does - so accessing data requires you to point to the address that the data was stored at. Unfortunately, the addresses used by computers are not very memorable and look something like `0x83fba73d`.\n\nWhen we create a variable, we are setting a human-readable version of the address. We can then use this in our program to access the data we have assigned to it. You can think of this as replacing the address of your house - something like `123 House Street` - with a name - perhaps `Castle`. Now, every time you use the term `Castle`, you are referring to your house without needing to use the whole address.\n\nWhen you assign to a variable you aren't just giving it a convenient label - you are also storing some new data into that piece of memory. Any reference to that variable later in your program goes to that address and retrieves the data you put there.\n\nVariable labels are reusable, so you can change the data you are referring to by assigning the same variable name to a new value."
                }
              ],
              "title":"Assigning to a variable",
              "content_rendered":"<p>Setting the contents of a variable is called <em>assigning<\/em> a value to the variable. Python creates variables by assignment.<\/p>\n<p>When you assign a new value to an existing variable, it replaces the old contents of the variable:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-change-var-value\"><code data-lang=\"py3\">species = 'Homo sapiens!'\nprint(species)\nspecies = 'Human!'\nprint(species)\n<\/code><\/pre>\n<p>The old value in <code data-lang=\"py3\">species<\/code> - <code data-lang=\"py3\">'Homo sapiens'<\/code> - is replaced with the new value - <code data-lang=\"py3\">'Human!'<\/code> - before the second <code data-lang=\"py3\">print<\/code> statement, producing:<\/p>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"py3-change-var-value\"><code data-lang=\"py3\"><o>Homo sapiens!<\/o>\n<o>Human!<\/o>\n<o><\/o><\/code><\/pre>\n<aside class=\"info\">\n<h2>Variables are like files<\/h2>\n<p>Variables are like files on your computer: they have a name and you can store data in them. You can look at the contents or overwrite the contents with new data.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nLet's write a program that asks the user for information:\n\n```\nanimal = input('Can you name an animal? ')\nprint(animal)\n```\n\nRun this program. Even if you haven't run any so far, run this one!\n**You will need to type a name and press Enter**:\n\n```eg:last;lang:py3;terminal;\nCan you name an animal? @@@Duck\nDuck\n```\n\nThe program prints the prompt `lang:out;Can you name an animal?` and waits for the user to type in an animal and press <kbd>Enter<\/kbd>. The program then prints the name the user entered and stops.\n\nA *prompt* is a message that tells (or prompts) the user that the program is asking for input (in this case, an animal).\n\n**Run it again with a different animal. Then try changing the prompt!**"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>The introduction of the <code data-lang=\"py3\">input<\/code> function is what allow programs to behave differently based on the user's actions. In the previous slide when we introduced variables, we demonstrated how you can store data for retrieval later, but the data being stored was determined by the programmer, not the person running the program.<\/p>\n<p>If you think about the way most applications you use work, they respond to some kind of input you provide. A calculator app performs some kind of mathematical operation on the numbers you type in. For example, the programmer defines the way the calculator adds numbers together, but the actual numbers used should be up to the person using the program.<\/p>\n<p>When students first begin using <code data-lang=\"py3\">input<\/code> the most common mistakes are either typing the input data into the prompt argument, or not realising that when running the code the computer waits for the user to type something in. If you're demonstrating this concept to the class, make sure you spend time explaining what these things are.<\/p>\n<aside class=\"info curriculum\">\n<h2>Australian Curriculum: Digital Technologies<\/h2>\n<p>Text and numbers are two important types of user input.\nAC:DT requires students to write programs involving <em>user input<\/em> from Years 3\u20134 <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\">ACTDIP011<\/a> and 5\u20136 <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\">ACTDIP020<\/a>.\nStudents must <em>predict output for a given input<\/em> in Years 7\u20138 <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\">ACTDIP029<\/a>.<\/p>\n<\/aside>",
              "notes":[
                {
                  "left":"#markdown\nThe introduction of the `input` function is what allow programs to behave differently based on the user's actions. In the previous slide when we introduced variables, we demonstrated how you can store data for retrieval later, but the data being stored was determined by the programmer, not the person running the program.\n\nIf you think about the way most applications you use work, they respond to some kind of input you provide. A calculator app performs some kind of mathematical operation on the numbers you type in. For example, the programmer defines the way the calculator adds numbers together, but the actual numbers used should be up to the person using the program.\n\nWhen students first begin using `input` the most common mistakes are either typing the input data into the prompt argument, or not realising that when running the code the computer waits for the user to type something in. If you're demonstrating this concept to the class, make sure you spend time explaining what these things are.\n\n> ## type:curriculum;Australian Curriculum: Digital Technologies\n> Text and numbers are two important types of user input.\n>   AC:DT requires students to write programs involving *user input* from Years 3\u20134 [ACTDIP011](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011) and 5\u20136 [ACTDIP020](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020).\n>     Students must *predict output for a given input* in Years 7\u20138 [ACTDIP029](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029).\n"
                }
              ],
              "title":"Asking the user a question",
              "content_rendered":"<p>Let's write a program that asks the user for information:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-input-0-1-0\"><code data-lang=\"py3\">animal = input('Can you name an animal? ')\nprint(animal)\n<\/code><\/pre>\n<p>Run this program. Even if you haven't run any so far, run this one!\n<strong>You will need to type a name and press Enter<\/strong>:<\/p>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-py-biology-yr7-input-0-1-0\"><code data-lang=\"py3\"><o>Can you name an animal? <\/o><i>Duck<\/i>\n<o>Duck<\/o>\n<o><\/o><\/code><\/pre>\n<p>The program prints the prompt <code data-lang=\"out\">Can you name an animal?<\/code> and waits for the user to type in an animal and press <kbd>Enter<\/kbd>. The program then prints the name the user entered and stops.<\/p>\n<p>A <em>prompt<\/em> is a message that tells (or prompts) the user that the program is asking for input (in this case, an animal).<\/p>\n<p><strong>Run it again with a different animal. Then try changing the prompt!<\/strong><\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nWe have now used two Python functions, `print` and `input`, so we better tell you what a function actually is!\n\nA function is a piece of code that performs a specific task.\n\nUsing that name, you can run the code (programmers say *call the function*) to perform the task without having to know how it works.\n\nA function is called by name followed by round brackets.\n\nSome functions take data to perform their task: `print` takes the value you want to print. This data goes inside the brackets:\n\n```\nprint('I love Biology!')\n```\n\nSome functions produce data while performing their task: `input` produces the string that the user entered. Programmers call this the *return* value. It can be used directly or stored in a variable:\n\n```\nmsg = input('Repeat? ')\nprint(msg)\nprint(msg)\n```\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>When writing code, modern languages operate at a high level of abstraction and include built-in functions that you can use without needing to understand exactly what a function is. It is the ability to create a named piece of code that we can re-use that makes programming more accessible to beginners.<\/p>\n<p>Introducing the terminology is important for students because as they develop their skills and look further afield for other resources and projects, many of the websites and books they access will use the terminology.<\/p>\n<aside class=\"info curriculum\">\n<h2>Functions in the Australian Curriculum<\/h2>\n<p>Functions are referred to explicitly in the curriculum in the Year 7 and 8 band in content description <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030\">ACTDIP030<\/a>. Using functions like <code data-lang=\"py3\">print<\/code> and <code data-lang=\"py3\">input<\/code> is not what is intended here; by the end of the band, students should be able to call functions that they will define themselves, but this is beyond the scope of this introductory challenge. The reference to modular programs in Years 9 and 10 (<a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP041\">ACTDIP041<\/a>) builds on this concept further.<\/p>\n<\/aside>",
              "notes":[
                {
                  "left":"#markdown\nWhen writing code, modern languages operate at a high level of abstraction and include built-in functions that you can use without needing to understand exactly what a function is. It is the ability to create a named piece of code that we can re-use that makes programming more accessible to beginners.\n\nIntroducing the terminology is important for students because as they develop their skills and look further afield for other resources and projects, many of the websites and books they access will use the terminology.\n\n> ## type:curriculum;Functions in the Australian Curriculum\n> Functions are referred to explicitly in the curriculum in the Year 7 and 8 band in content description [ACTDIP030](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030). Using functions like `print` and `input` is not what is intended here; by the end of the band, students should be able to call functions that they will define themselves, but this is beyond the scope of this introductory challenge. The reference to modular programs in Years 9 and 10 ([ACTDIP041](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP041)) builds on this concept further.\n"
                }
              ],
              "title":"Calling functions",
              "content_rendered":"<p>We have now used two Python functions, <code data-lang=\"py3\">print<\/code> and <code data-lang=\"py3\">input<\/code>, so we better tell you what a function actually is!<\/p>\n<p>A function is a piece of code that performs a specific task.<\/p>\n<p>Using that name, you can run the code (programmers say <em>call the function<\/em>) to perform the task without having to know how it works.<\/p>\n<p>A function is called by name followed by round brackets.<\/p>\n<p>Some functions take data to perform their task: <code data-lang=\"py3\">print<\/code> takes the value you want to print. This data goes inside the brackets:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-input-0-2-0\"><code data-lang=\"py3\">print('I love Biology!')\n<\/code><\/pre>\n<p>Some functions produce data while performing their task: <code data-lang=\"py3\">input<\/code> produces the string that the user entered. Programmers call this the <em>return<\/em> value. It can be used directly or stored in a variable:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-input-0-2-1\"><code data-lang=\"py3\">msg = input('Repeat? ')\nprint(msg)\nprint(msg)\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Lyrebird mimic",
              "purpose":"",
              "problem":"aca-py3-bio-lyrebird-echo",
              "type":1,
              "problem_id":4432
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nNow we see why variables are called *variables*! When you run the program and ask the user for input, they could type anything:\n\n```\nanimal = input('Favourite animal? ')\nprint(f'I like {animal} too!')\n\n```\n\n```eg:last;lang:py3;terminal;\nFavourite animal? @@@tigers\nI like tigers too!\n\n```\n\nHere, the `animal` variable contains `'tigers'`, but if the user types in something else, it will contain something else:\n\n```lang:py3;terminal;eg:none;\nFavourite animal? @@@pineapples\nI like pineapples too!\n\n```\n\nThis time, the `animal` variable contains `'pineapples'`.\n\nVariables are *variable* because you may not know their value when you write the program, it could be *anything*!\n\n> ## Variables (or pronumerals) in algebra\n> In programming, variables store values that change or may be unknown before the program runs. In algebra, variables (like *x* and *y*) represent numbers that may vary or be unknown.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>Some students struggle to see the parallels between variables used in programming and algebra - and that's actually quite normal! This is because we use variables in algebra to define something that is unknown but (for the purposes of most high school mathematics) has a fixed value we are trying to work out.<\/p>\n<p>In programming, a variable is a reference that we use to refer to some data that may or may not be the same each time a program runs. Since we can read from and write to variables easily - including data input by the user - the variable doesn't have a particular value, even though it is still an unknown at the time the program is written.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nSome students struggle to see the parallels between variables used in programming and algebra - and that's actually quite normal! This is because we use variables in algebra to define something that is unknown but (for the purposes of most high school mathematics) has a fixed value we are trying to work out.\n\nIn programming, a variable is a reference that we use to refer to some data that may or may not be the same each time a program runs. Since we can read from and write to variables easily - including data input by the user - the variable doesn't have a particular value, even though it is still an unknown at the time the program is written."
                }
              ],
              "title":"Variable variables!",
              "content_rendered":"<p>Now we see why variables are called <em>variables<\/em>! When you run the program and ask the user for input, they could type anything:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-input-0-4-0\"><code data-lang=\"py3\">animal = input('Favourite animal? ')\nprint(f'I like {animal} too!')\n\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-py-biology-yr7-input-0-4-0\"><code data-lang=\"py3\"><o>Favourite animal? <\/o><i>tigers<\/i>\n<o>I like tigers too!<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>Here, the <code data-lang=\"py3\">animal<\/code> variable contains <code data-lang=\"py3\">'tigers'<\/code>, but if the user types in something else, it will contain something else:<\/p>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>Favourite animal? <\/o><i>pineapples<\/i>\n<o>I like pineapples too!<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>This time, the <code data-lang=\"py3\">animal<\/code> variable contains <code data-lang=\"py3\">'pineapples'<\/code>.<\/p>\n<p>Variables are <em>variable<\/em> because you may not know their value when you write the program, it could be <em>anything<\/em>!<\/p>\n<aside class=\"info\">\n<h2>Variables (or pronumerals) in algebra<\/h2>\n<p>In programming, variables store values that change or may be unknown before the program runs. In algebra, variables (like <em>x<\/em> and <em>y<\/em>) represent numbers that may vary or be unknown.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: The animal is...",
              "purpose":"",
              "problem":"aca-py3-bio-the-animal-is",
              "type":1,
              "problem_id":4305
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: What we saw at the zoo",
              "purpose":"",
              "problem":"aca-py3-bio-join-strings-zoo",
              "type":1,
              "problem_id":4309
            }
          ],
          "title":"Reading user input"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nThe [taxonomic rank](https:\/\/en.wikipedia.org\/wiki\/Taxonomic_rank) categorises each organism into 8 distinct categories.\n\nThose are:\n- Domain\n- Kingdom\n- Phylum\n- Class\n- Order\n- Family\n- Genus\n- Species\n\nWith each step down in classification, organisms are split into more specific groups. \n\n![From [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Taxonomic_rank).](https:\/\/groklearning-cdn.com\/modules\/t5Swcf3NNmzL2AueuR4W9F\/Taxonomic_Rank_Graph.svg)\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Taxonomy",
              "content_rendered":"<p>The <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/Taxonomic_rank\">taxonomic rank<\/a> categorises each organism into 8 distinct categories.<\/p>\n<p>Those are:<\/p>\n<ul>\n<li>Domain<\/li>\n<li>Kingdom<\/li>\n<li>Phylum<\/li>\n<li>Class<\/li>\n<li>Order<\/li>\n<li>Family<\/li>\n<li>Genus<\/li>\n<li>Species<\/li>\n<\/ul>\n<p>With each step down in classification, organisms are split into more specific groups.<\/p>\n<p><figure class=\"align-center\">\n<img src=\"https:\/\/groklearning-cdn.com\/modules\/t5Swcf3NNmzL2AueuR4W9F\/Taxonomic_Rank_Graph.svg\" title=\"From \" alt=\"From \" width=\"90%\">\n<figcaption>\nFrom <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/Taxonomic_rank\">Wikipedia<\/a>.\n<\/figcaption>\n<\/figure>\n<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nEach species can have up to two names. \n\n- *common name* - what we use in regular speech, \n- *scientific name* - to classify each organism exactly.\n\nFor example, the common name *kangaroo* doesn't describe a species *exactly*. There are many different types of kangaroo, and it also doesn't describe how the species relates to similar animals, like the wallaby.\n\nSo instead, we can use the *scientific name*, which is usually made up of the  *genus* and *species* in the taxonomic rank.\n\nThe Eastern Grey Kangaroo has the scientific name **Macropus giganteus**. The red-necked wallably is **Macropus rufogriseus**. See how the genus of both is *Macropus*?*\n\nWe can write a program to print these!\n\n```\ngenus = 'Macropus'\nspecies = 'giganteus'\nprint(f'Scientific name: {genus} {species}')\n```\n\n\\* *It turns out that wallabies and kangaroos are of the same genus (Macropus), but rock-wallabies are a different genus (Petrogale)! And all of them are from the Macropodidae family.*"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Common and scientific name",
              "content_rendered":"<p>Each species can have up to two names.<\/p>\n<ul>\n<li><em>common name<\/em> - what we use in regular speech,<\/li>\n<li><em>scientific name<\/em> - to classify each organism exactly.<\/li>\n<\/ul>\n<p>For example, the common name <em>kangaroo<\/em> doesn't describe a species <em>exactly<\/em>. There are many different types of kangaroo, and it also doesn't describe how the species relates to similar animals, like the wallaby.<\/p>\n<p>So instead, we can use the <em>scientific name<\/em>, which is usually made up of the  <em>genus<\/em> and <em>species<\/em> in the taxonomic rank.<\/p>\n<p>The Eastern Grey Kangaroo has the scientific name <strong>Macropus giganteus<\/strong>. The red-necked wallably is <strong>Macropus rufogriseus<\/strong>. See how the genus of both is <em>Macropus<\/em>?*<\/p>\n<p>We can write a program to print these!<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-input-1-1-0\"><code data-lang=\"py3\">genus = 'Macropus'\nspecies = 'giganteus'\nprint(f'Scientific name: {genus} {species}')\n<\/code><\/pre>\n<p>* <em>It turns out that wallabies and kangaroos are of the same genus (Macropus), but rock-wallabies are a different genus (Petrogale)! And all of them are from the Macropodidae family.<\/em><\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nWhen you need to store different bits of information, you can create more variables. As long as they have different names (otherwise, you're setting an existing variable).\n\n```\ndomain = 'Eukarya'\nkingdom = input('What is the kingdom? ')\nphylum = input('What is the phylum? ')\nhighest_ranks = f'{domain}, {kingdom}, {phylum}'\nprint('The highest taxonomic ranks are: ' + highest_ranks)\n```\n\nThe variable names make it very clear what is stored in each! We can set the `domain` variable to a fixed value, since for this example we're using animals and all animals are in the `'Eukarya'` domain.\n\n```eg:last;lang:py3;terminal;\nWhat is the kingdom? @@@Animalia\nWhat is the phylum? @@@Chordata\nThe highest taxonomic ranks are: Eukarya, Animalia, Chordata\n```\n\nNotice how we can use variables that have assigned values or `input` values together? We can treat all string variables the same way when printing."
                }
              ],
              "layout":0,
              "notes_rendered":"<p>There are two things to take away from this slide:<\/p>\n<ul>\n<li>It is good practice to use variable names that have meaning so you know what they actually contain. Make sure students use meaningful variable names in all of their code, all of the time.<\/li>\n<li>You can create as many variables as you need to make your code simple to write and easy to read. The creation of the <code data-lang=\"py3\">highest_ranks<\/code> variable makes the <code data-lang=\"py3\">print<\/code> statement much easier to write, and is easier to debug if things go wrong.<\/li>\n<\/ul>\n<p>As a general rule, for each step of your algorithm you should try to write a separate line of code, at least when you're starting out!<\/p>",
              "notes":[
                {
                  "left":"#markdown\nThere are two things to take away from this slide:\n* It is good practice to use variable names that have meaning so you know what they actually contain. Make sure students use meaningful variable names in all of their code, all of the time.\n* You can create as many variables as you need to make your code simple to write and easy to read. The creation of the `highest_ranks` variable makes the `print` statement much easier to write, and is easier to debug if things go wrong.\n\nAs a general rule, for each step of your algorithm you should try to write a separate line of code, at least when you're starting out!"
                }
              ],
              "title":"Using multiple variables",
              "content_rendered":"<p>When you need to store different bits of information, you can create more variables. As long as they have different names (otherwise, you're setting an existing variable).<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-input-1-2-0\"><code data-lang=\"py3\">domain = 'Eukarya'\nkingdom = input('What is the kingdom? ')\nphylum = input('What is the phylum? ')\nhighest_ranks = f'{domain}, {kingdom}, {phylum}'\nprint('The highest taxonomic ranks are: ' + highest_ranks)\n<\/code><\/pre>\n<p>The variable names make it very clear what is stored in each! We can set the <code data-lang=\"py3\">domain<\/code> variable to a fixed value, since for this example we're using animals and all animals are in the <code data-lang=\"py3\">'Eukarya'<\/code> domain.<\/p>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-py-biology-yr7-input-1-2-0\"><code data-lang=\"py3\"><o>What is the kingdom? <\/o><i>Animalia<\/i>\n<o>What is the phylum? <\/o><i>Chordata<\/i>\n<o>The highest taxonomic ranks are: Eukarya, Animalia, Chordata<\/o>\n<o><\/o><\/code><\/pre>\n<p>Notice how we can use variables that have assigned values or <code data-lang=\"py3\">input<\/code> values together? We can treat all string variables the same way when printing.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Scientific name generator",
              "purpose":"",
              "problem":"aca-py3-bio-scientific-name",
              "type":1,
              "problem_id":4312
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Common genus",
              "purpose":"",
              "problem":"aca-py3-bio-scientific-name-two",
              "type":1,
              "problem_id":4314
            }
          ],
          "title":"More with variables"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Taxonomic rank",
              "purpose":"",
              "problem":"aca-choices-bio-taxonomic-rank",
              "type":1,
              "problem_id":4377
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Scientific names",
              "purpose":"",
              "problem":"aca-choices-bio-scientific-names",
              "type":1,
              "problem_id":4379
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Name an animal",
              "purpose":"",
              "problem":"aca-choices-bio-input-animalia",
              "type":1,
              "problem_id":4382
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Do you own a Felis catus?",
              "purpose":"",
              "problem":"aca-choices-bio-felis-catus-felidae",
              "type":1,
              "problem_id":4378
            }
          ],
          "title":"Taxonomy"
        }
      ],
      "title":"Input",
      "label":"aca-py-biology-yr7-input",
      "updated_at":"2018-05-14T06:56:07.552165+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nSo far in the challenge you've learned quite a lot about both Biology and Digital Technologies:\n\n## Biology\n* *Taxonomy* is the classification of living things\n* The *taxonomic rank* describes an organism based on its similarities with others\n* The *scientific name* of an organism is a combination of its *Genus* and *Species*\n* *Classification* is done based on *features* and characteristics of organisms\n* *Dichotomous keys* allow us to split larger groups of animals based on whether a feature is present or not\n\n## Digital Technologies\n* Computers perform their functions through code *written by people*\n* Programming languages are very *precise* and have their own *syntax and grammar*\n* We can *display text* on the screen in Python using the `print` function\n* The user can *enter text* into our program via the `input` function\n* *Variables* are used to store data in a computer program\n* An `if` statement is used for *branching* in Python. It runs instructions when a condition is `True`.\n* Adding an `elif` or `else` to an `if` statement allows you to specify alternative instructions to run under different conditions.\n\nThis project guides you through the process of building your own mini-classifier that uses dichotomous keys to identify an organism based on its features."
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"What's the project?",
              "content_rendered":"<p>So far in the challenge you've learned quite a lot about both Biology and Digital Technologies:<\/p>\n<h2>Biology<\/h2>\n<ul>\n<li><em>Taxonomy<\/em> is the classification of living things<\/li>\n<li>The <em>taxonomic rank<\/em> describes an organism based on its similarities with others<\/li>\n<li>The <em>scientific name<\/em> of an organism is a combination of its <em>Genus<\/em> and <em>Species<\/em><\/li>\n<li><em>Classification<\/em> is done based on <em>features<\/em> and characteristics of organisms<\/li>\n<li><em>Dichotomous keys<\/em> allow us to split larger groups of animals based on whether a feature is present or not<\/li>\n<\/ul>\n<h2>Digital Technologies<\/h2>\n<ul>\n<li>Computers perform their functions through code <em>written by people<\/em><\/li>\n<li>Programming languages are very <em>precise<\/em> and have their own <em>syntax and grammar<\/em><\/li>\n<li>We can <em>display text<\/em> on the screen in Python using the <code data-lang=\"py3\">print<\/code> function<\/li>\n<li>The user can <em>enter text<\/em> into our program via the <code data-lang=\"py3\">input<\/code> function<\/li>\n<li><em>Variables<\/em> are used to store data in a computer program<\/li>\n<li>An <code data-lang=\"py3\">if<\/code> statement is used for <em>branching<\/em> in Python. It runs instructions when a condition is <code data-lang=\"py3\">True<\/code>.<\/li>\n<li>Adding an <code data-lang=\"py3\">elif<\/code> or <code data-lang=\"py3\">else<\/code> to an <code data-lang=\"py3\">if<\/code> statement allows you to specify alternative instructions to run under different conditions.<\/li>\n<\/ul>\n<p>This project guides you through the process of building your own mini-classifier that uses dichotomous keys to identify an organism based on its features.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nThe first step in constructing our classifier is to develop an algorithm that will allow us to correctly identify each of our animals using their features. The animals we will be classifying are:\n\n* Koala\n* Frilled-neck lizard\n* Murray cod\n* Laughing kookaburra\n\nYou can download a [set of trading cards](https:\/\/aca.edu.au\/public\/resources\/classifier-python-mini.pdf) for these animals that gives you the information you need about their features to build a series of dichotomous keys that will classify each animal uniquely."
                }
              ],
              "layout":0,
              "notes_rendered":"<p>A good way to complete this activity with students is to get the away from the computer when constructing their algorithm and working out the classification. To assist with this process and to give them some features to focus on, we've provided a <a target=\"_blank\" href=\"https:\/\/aca.edu.au\/public\/resources\/classifier-python-mini.pdf\">set of trading cards<\/a> that can be downloaded and printed on a single A4 sheet of paper\/cardboard.<\/p>\n<p>Consider pre-making a set of these for each student or pair of students, and have them work through the project together. You may also want to make a large copy of each of the cards that can be laminated and\/or have magnets attached to them so that they can be used to model the construction of the algorithm on the whiteboard (particularly helpful for younger or lower literacy students).<\/p>\n<p>The cards also come with a key card that maps each of the icons representing a feature to specific features of each animal. The programs students write will be matching those features exactly, so they are a good reference for spelling as well as the features themselves.<\/p>",
              "notes":[
                {
                  "left":"#markdown\n\nA good way to complete this activity with students is to get the away from the computer when constructing their algorithm and working out the classification. To assist with this process and to give them some features to focus on, we've provided a [set of trading cards](https:\/\/aca.edu.au\/public\/resources\/classifier-python-mini.pdf) that can be downloaded and printed on a single A4 sheet of paper\/cardboard.\n\nConsider pre-making a set of these for each student or pair of students, and have them work through the project together. You may also want to make a large copy of each of the cards that can be laminated and\/or have magnets attached to them so that they can be used to model the construction of the algorithm on the whiteboard (particularly helpful for younger or lower literacy students).\n\nThe cards also come with a key card that maps each of the icons representing a feature to specific features of each animal. The programs students write will be matching those features exactly, so they are a good reference for spelling as well as the features themselves."
                }
              ],
              "title":"Classifying animals",
              "content_rendered":"<p>The first step in constructing our classifier is to develop an algorithm that will allow us to correctly identify each of our animals using their features. The animals we will be classifying are:<\/p>\n<ul>\n<li>Koala<\/li>\n<li>Frilled-neck lizard<\/li>\n<li>Murray cod<\/li>\n<li>Laughing kookaburra<\/li>\n<\/ul>\n<p>You can download a <a target=\"_blank\" href=\"https:\/\/aca.edu.au\/public\/resources\/classifier-python-mini.pdf\">set of trading cards<\/a> for these animals that gives you the information you need about their features to build a series of dichotomous keys that will classify each animal uniquely.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Animal features",
              "purpose":"",
              "problem":"aca-choices-bio-classification-matrix-mini",
              "type":1,
              "problem_id":4413
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nNow that you know which features belong to which animal, your next step is to work out an appropriate split so that you can build your dichotomous tree. We used flowcharts to do this in our previous modules, but another common representation of the classification process is shown below:\n\n![Classifying fruit using dichotomous keys](https:\/\/groklearning-cdn.com\/modules\/fVtoUNBzVGX7YgrysVvhzi\/fruit.png)\n\nThis example classifies the four different fruits based on their features using just two questions for each one. You'll be doing a similar thing with our four animals.\n\n[This template](https:\/\/aca.edu.au\/public\/resources\/classifier-template.pdf) will help you work out which questions you need to ask using the trading cards from the previous slides.\n\nThere are a few different solutions to this problem, but the best one will only require asking ***two questions*** to identify each animal uniquely.\n\nYou can check your solution with your teacher first, or progress to the next slide and write your program!"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>You can think of this as the capstone project for this course - it has students use all of the Digital Technologies knowledge we've introduced so far to build a simple classifier for the four species on the trading cards.<\/p>\n<p>Having them plan out their algorithm is the key to success when writing the program. The fruit example has been chosen here because it demonstrates the process students will follow, but is also far enough removed from the actual species they are using that no information about the ideal split of features is revealed.<\/p>\n<p>The <a target=\"_blank\" href=\"https:\/\/aca.edu.au\/public\/resources\/classifier-template.pdf\">downloadable template<\/a> for this representation of dichotomous keys could be a useful way to guide students to the more efficient solution for this problem, where all animals can be identified with two questions. The template can be blown up to A3 size, which should allow the cards from the A4 printed sheet to fit in the template boxes provided.<\/p>\n<p>The project marker will allow other combinations, but one of the skills we want students to develop in Digital Technologies is designing efficient solutions to problems.<\/p>\n<p>In a divide and conquer type algorithm like dichotomous keys, halving the number of animals at each step is the best way to sort by features. It also ensures that students only have to write their <code data-lang=\"py3\">if<\/code> and <code data-lang=\"py3\">else<\/code> statements nested to two levels deep, which they've seen before in previous questions.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nYou can think of this as the capstone project for this course - it has students use all of the Digital Technologies knowledge we've introduced so far to build a simple classifier for the four species on the trading cards.\n\nHaving them plan out their algorithm is the key to success when writing the program. The fruit example has been chosen here because it demonstrates the process students will follow, but is also far enough removed from the actual species they are using that no information about the ideal split of features is revealed.\n\nThe [downloadable template](https:\/\/aca.edu.au\/public\/resources\/classifier-template.pdf) for this representation of dichotomous keys could be a useful way to guide students to the more efficient solution for this problem, where all animals can be identified with two questions. The template can be blown up to A3 size, which should allow the cards from the A4 printed sheet to fit in the template boxes provided.\n\nThe project marker will allow other combinations, but one of the skills we want students to develop in Digital Technologies is designing efficient solutions to problems.\n\nIn a divide and conquer type algorithm like dichotomous keys, halving the number of animals at each step is the best way to sort by features. It also ensures that students only have to write their `if` and `else` statements nested to two levels deep, which they've seen before in previous questions."
                }
              ],
              "title":"Dichotomous tree",
              "content_rendered":"<p>Now that you know which features belong to which animal, your next step is to work out an appropriate split so that you can build your dichotomous tree. We used flowcharts to do this in our previous modules, but another common representation of the classification process is shown below:<\/p>\n<p><figure class=\"align-center\">\n<img src=\"https:\/\/groklearning-cdn.com\/modules\/fVtoUNBzVGX7YgrysVvhzi\/fruit.png\" title=\"Classifying fruit using dichotomous keys\" alt=\"Classifying fruit using dichotomous keys\" width=\"90%\">\n<figcaption>\nClassifying fruit using dichotomous keys\n<\/figcaption>\n<\/figure>\n<\/p>\n<p>This example classifies the four different fruits based on their features using just two questions for each one. You'll be doing a similar thing with our four animals.<\/p>\n<p><a target=\"_blank\" href=\"https:\/\/aca.edu.au\/public\/resources\/classifier-template.pdf\">This template<\/a> will help you work out which questions you need to ask using the trading cards from the previous slides.<\/p>\n<p>There are a few different solutions to this problem, but the best one will only require asking <strong><em>two questions<\/em><\/strong> to identify each animal uniquely.<\/p>\n<p>You can check your solution with your teacher first, or progress to the next slide and write your program!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Biology classifier",
              "purpose":"",
              "problem":"aca-py3-bio-classifier-mini",
              "type":1,
              "problem_id":4391
            }
          ],
          "title":"Project description"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nExcellent work on finishing the project and our biology challenge! You've learnt a little bit about how biological organisms are classified, as well as how to solve some interesting problems with code!\n\nIf you want to learn a bit more programming there's a [biology extension challenge](https:\/\/groklearning.com\/learn\/aca-dt-7-py-biology-extension\/) waiting for you! It teaches you how to work with collections of data called lists, reading from files that contain lots of information, and you'll build a much more complicated classifier that includes extra information about many more animals!"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Congratulations!",
              "content_rendered":"<p>Excellent work on finishing the project and our biology challenge! You've learnt a little bit about how biological organisms are classified, as well as how to solve some interesting problems with code!<\/p>\n<p>If you want to learn a bit more programming there's a <a target=\"_blank\" href=\"https:\/\/groklearning.com\/learn\/aca-dt-7-py-biology-extension\/\">biology extension challenge<\/a> waiting for you! It teaches you how to work with collections of data called lists, reading from files that contain lots of information, and you'll build a much more complicated classifier that includes extra information about many more animals!<\/p>",
              "purpose":"",
              "type":0
            }
          ],
          "title":"Project complete"
        }
      ],
      "title":"Mini project: Simple classifier",
      "label":"aca-py-biology-yr7-mini-classifier",
      "updated_at":"2018-05-14T06:56:11.315175+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nIn this course you'll learn two things:\n\n* how biologists classify living things; and\n* writing computer programs with Python\n\n<figure class=\"align-center\">\n  <img alt=\"A biologist working at a computer\" src=\"https:\/\/groklearning-cdn.com\/modules\/koibbk9jMUYjQaQCd5cTfM\/biologist_1_0.jpg\" width=\"60%\">\n  <figcaption>Biologists use computers to analyse data. <a href=\"https:\/\/www.flickr.com\/photos\/64860478@N05\/38997905444\/\" target=\"_blank\">Daniel So\u00f1\u00e9 Photography, LLC<\/a> CC BY 2.0<\/figcaption>\n<\/figure>\n\nScientists rely on computers to do lots of data processing and analysis for them. This data processing is all performed with programs written in languages like Python!"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>Throughout the course the Teacher's Notes will include additional information about the programming concepts being introduced, including advice that will help you troubleshoot problems students are likely to have with each concept.<\/p>\n<aside class=\"info curriculum\">\n<h2>Biological sciences<\/h2>\n<p>The biology content for this course addresses the <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACSSU111\">ACSSU111<\/a> and <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACSIS129\">ACSIS129<\/a> content descriptions in Year 7 of the Australian Curriculum: Science.<\/p>\n<\/aside>",
              "notes":[
                {
                  "left":"#markdown\nThroughout the course the Teacher's Notes will include additional information about the programming concepts being introduced, including advice that will help you troubleshoot problems students are likely to have with each concept.\n\n> ## type:curriculum;Biological sciences\n> The biology content for this course addresses the [ACSSU111](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACSSU111) and [ACSIS129](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACSIS129) content descriptions in Year 7 of the Australian Curriculum: Science."
                }
              ],
              "title":"Why biology and Python?",
              "content_rendered":"<p>In this course you'll learn two things:<\/p>\n<ul>\n<li>how biologists classify living things; and<\/li>\n<li>writing computer programs with Python<\/li>\n<\/ul>\n<figure class=\"align-center\">\n  <img alt=\"A biologist working at a computer\" src=\"https:\/\/groklearning-cdn.com\/modules\/koibbk9jMUYjQaQCd5cTfM\/biologist_1_0.jpg\" width=\"60%\">\n  <figcaption>Biologists use computers to analyse data. <a href=\"https:\/\/www.flickr.com\/photos\/64860478@N05\/38997905444\/\" target=\"_blank\">Daniel So\u00f1\u00e9 Photography, LLC<\/a> CC BY 2.0<\/figcaption>\n<\/figure>\n<p>Scientists rely on computers to do lots of data processing and analysis for them. This data processing is all performed with programs written in languages like Python!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nNormally, the first program you write when learning a new programming language is [Hello, World!](https:\/\/en.wikipedia.org\/wiki\/Hello_world_program), but we're going to write a slightly different one instead:\n\n```eg:py3-hello-biology;lang:py3;\nprint('Hello, Biology!')\n```\n\nYou can edit and run any example in Grok by clicking the <span class=\"icon-play4\" style=\"font-size: 16px\"><\/span> button. Try changing 'Hello, Biology!' to 'Hi!', and running it again.\n\nCongratulations, your first Python program worked!\n\nClick on the <span class=\"icon-undo2\" style=\"font-size: 16px\"><\/span> button to swap the code back to the original. Click it again to swap back to your version.\n\n> ## Our biggest hint!\n> Try running and modifying (messing around with even!) every example in these notes to make sure you understand it.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>The smallest piece of standalone code is called an <em>instruction<\/em> or more technically, a <em>statement<\/em>. A program is made up of a <em>sequence<\/em> of one or more statements.<\/p>\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Statements are the building blocks of code. They are needed for implementation in Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a>, 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>, 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030\" target=\"_blank\">ACTDIP030<\/a>, and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP041\" target=\"_blank\">ACTDIP041<\/a> even though statements are not mentioned explicitly in the content descriptions.\n  <\/p>\n<\/aside>",
              "notes":[
                {
                  "left":"#markdown\nThe smallest piece of standalone code is called an *instruction* or more technically, a *statement*. A program is made up of a *sequence* of one or more statements.\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Statements are the building blocks of code. They are needed for implementation in Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a>, 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>, 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030\" target=\"_blank\">ACTDIP030<\/a>, and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP041\" target=\"_blank\">ACTDIP041<\/a> even though statements are not mentioned explicitly in the content descriptions.\n  <\/p>\n<\/aside>"
                }
              ],
              "title":"Hello, Biology!",
              "content_rendered":"<p>Normally, the first program you write when learning a new programming language is <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/Hello_world_program\">Hello, World!<\/a>, but we're going to write a slightly different one instead:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-hello-biology\"><code data-lang=\"py3\">print('Hello, Biology!')\n<\/code><\/pre>\n<p>You can edit and run any example in Grok by clicking the <span class=\"icon-play4\" style=\"font-size: 16px\"><\/span> button. Try changing 'Hello, Biology!' to 'Hi!', and running it again.<\/p>\n<p>Congratulations, your first Python program worked!<\/p>\n<p>Click on the <span class=\"icon-undo2\" style=\"font-size: 16px\"><\/span> button to swap the code back to the original. Click it again to swap back to your version.<\/p>\n<aside class=\"info\">\n<h2>Our biggest hint!<\/h2>\n<p>Try running and modifying (messing around with even!) every example in these notes to make sure you understand it.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nWhen you talk, you need to follow certain rules to be understood, called the *grammar* or *syntax* of the language.\n\nYou can't just use any words wherever you like. *like programming I* \u2013 doesn't make sense, but *I like programming* does!\n\nProgramming languages have syntax too. Python is pretty easy to learn because it has very simple syntax.\n\nHave you noticed that the program is multi-coloured?  The colourful *syntax highlighting* helps you code correctly:\n\n```eg:python-hello-biology-highlight;lang:py3;\nprint('Hello, Biology!')\n```\n\nPurple tells you that `print` is a *function* and green tells you that `'Hello, Biology!'` is a *string*, which we'll talk about in a moment.\n\n> ## Watch the colours!\n> Pay attention to these colours as you code. When they are not what you expect, there's often a typo that needs fixing.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"How to write programs",
              "content_rendered":"<p>When you talk, you need to follow certain rules to be understood, called the <em>grammar<\/em> or <em>syntax<\/em> of the language.<\/p>\n<p>You can't just use any words wherever you like. <em>like programming I<\/em> \u2013 doesn't make sense, but <em>I like programming<\/em> does!<\/p>\n<p>Programming languages have syntax too. Python is pretty easy to learn because it has very simple syntax.<\/p>\n<p>Have you noticed that the program is multi-coloured?  The colourful <em>syntax highlighting<\/em> helps you code correctly:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"python-hello-biology-highlight\"><code data-lang=\"py3\">print('Hello, Biology!')\n<\/code><\/pre>\n<p>Purple tells you that <code data-lang=\"py3\">print<\/code> is a <em>function<\/em> and green tells you that <code data-lang=\"py3\">'Hello, Biology!'<\/code> is a <em>string<\/em>, which we'll talk about in a moment.<\/p>\n<aside class=\"info\">\n<h2>Watch the colours!<\/h2>\n<p>Pay attention to these colours as you code. When they are not what you expect, there's often a typo that needs fixing.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nThe Python *interpreter* is a program that reads and runs your code. Just like your English teacher, it will complain if you make spelling or grammar errors, e.g. [i can has cheezburger?](https:\/\/en.wikipedia.org\/wiki\/I_Can_Has_Cheezburger%3F)\n\nUnlike people, the interpreter can't understand bad grammar at all! Instead, it will stop with an error, e.g. `SyntaxError` or `NameError`.\n\nHere we accidentally put `write` instead of `print`:\n\n```eg:name-error-write;lang:py3;\nwrite('Hi There')\n```\n\nPython doesn't know they mean the same thing, so gives an error:\n\n```eg:last;lang:py3;terminal;\nTraceback (most recent call last):\n  File \"program.py\", line 1, in <module>\n    write('Hi There')\nNameError: name 'write' is not defined\n\n```\n\nPython displays the error in red (it does not recognise the name `write`), including the type (*`lang:err;NameError`*) and where it occurred (*`lang:err;line 1`*).\n\n> ## Syntax highlighting saves the day!\n> Since `write` is not a builtin function, it didn't go purple like `print` does. The highlighting can help you catch syntax errors.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>One of the best things you can do as a teacher when helping students that are learning programming is to encourage them to try things even when they aren't sure what they will do. Teaching them that errors are a normal part of programming, and that the more often you see an error the easier it becomes to respond to the computer's feedback, is absolutely critical for building resilience so they can solve more challenging problems in future modules.<\/p>\n<p>Spend a bit of time looking at the output from the errors on the next few slides and understanding them yourself - you'll be debugging student code a lot when you're helping them, and being able to explain an error for a student will often be enough to get them over any barrier preventing them from progressing.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nOne of the best things you can do as a teacher when helping students that are learning programming is to encourage them to try things even when they aren't sure what they will do. Teaching them that errors are a normal part of programming, and that the more often you see an error the easier it becomes to respond to the computer's feedback, is absolutely critical for building resilience so they can solve more challenging problems in future modules.\n\nSpend a bit of time looking at the output from the errors on the next few slides and understanding them yourself - you'll be debugging student code a lot when you're helping them, and being able to explain an error for a student will often be enough to get them over any barrier preventing them from progressing."
                }
              ],
              "title":"When things go wrong...",
              "content_rendered":"<p>The Python <em>interpreter<\/em> is a program that reads and runs your code. Just like your English teacher, it will complain if you make spelling or grammar errors, e.g. <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/I_Can_Has_Cheezburger%3F\">i can has cheezburger?<\/a><\/p>\n<p>Unlike people, the interpreter can't understand bad grammar at all! Instead, it will stop with an error, e.g. <code data-lang=\"py3\">SyntaxError<\/code> or <code data-lang=\"py3\">NameError<\/code>.<\/p>\n<p>Here we accidentally put <code data-lang=\"py3\">write<\/code> instead of <code data-lang=\"py3\">print<\/code>:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"name-error-write\"><code data-lang=\"py3\">write('Hi There')\n<\/code><\/pre>\n<p>Python doesn't know they mean the same thing, so gives an error:<\/p>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"name-error-write\"><code data-lang=\"py3\"><o>Traceback (most recent call last):<\/o>\n<o>  File &quot;program.py&quot;, line 1, in &lt;module&gt;<\/o>\n<o>    write('Hi There')<\/o>\n<o>NameError: name 'write' is not defined<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>Python displays the error in red (it does not recognise the name <code data-lang=\"py3\">write<\/code>), including the type (<em><code data-lang=\"err\">NameError<\/code><\/em>) and where it occurred (<em><code data-lang=\"err\">line 1<\/code><\/em>).<\/p>\n<aside class=\"info\">\n<h2>Syntax highlighting saves the day!<\/h2>\n<p>Since <code data-lang=\"py3\">write<\/code> is not a builtin function, it didn't go purple like <code data-lang=\"py3\">print<\/code> does. The highlighting can help you catch syntax errors.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nIf you get an error, don't panic, they happen all the time \u2014 we'll learn to fix them! Luckily lots of the errors you will make are easy to fix. Run the following example with an error in it:\n\n```eg:error-no-closing-quote;lang:py3;\nprint('Hello)\n```\n\nWe forgot to end the string `'Hello` with a quote. Python complains with a `lang:err;SyntaxError` that it reached the *end of line* (EOL) without finding another quote. **Fix it by adding a quote right after `Hello`.**\n\nHere's another broken program:\n\n```eg:error-no-brackets;lang:py3;\nprint 'Hello'\n```\n\nThis time, we forgot the round brackets around what we wanted to `print`. Again, the interpreter say there is a `lang:err;SyntaxError` on line 1.\n\n> ## Python can't always find the error\n> The Python interpreter attempts to pinpoint the error, but it doesn't always get it right. If the highlighted bit doesn't seem like an error try looking earlier in the line or on the previous line.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"A SyntaxError?",
              "content_rendered":"<p>If you get an error, don't panic, they happen all the time \u2014 we'll learn to fix them! Luckily lots of the errors you will make are easy to fix. Run the following example with an error in it:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"error-no-closing-quote\"><code data-lang=\"py3\">print('Hello)\n<\/code><\/pre>\n<p>We forgot to end the string <code data-lang=\"py3\">'Hello<\/code> with a quote. Python complains with a <code data-lang=\"err\">SyntaxError<\/code> that it reached the <em>end of line<\/em> (EOL) without finding another quote. <strong>Fix it by adding a quote right after <code data-lang=\"py3\">Hello<\/code>.<\/strong><\/p>\n<p>Here's another broken program:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"error-no-brackets\"><code data-lang=\"py3\">print 'Hello'\n<\/code><\/pre>\n<p>This time, we forgot the round brackets around what we wanted to <code data-lang=\"py3\">print<\/code>. Again, the interpreter say there is a <code data-lang=\"err\">SyntaxError<\/code> on line 1.<\/p>\n<aside class=\"info\">\n<h2>Python can't always find the error<\/h2>\n<p>The Python interpreter attempts to pinpoint the error, but it doesn't always get it right. If the highlighted bit doesn't seem like an error try looking earlier in the line or on the previous line.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Hello, Biology!",
              "purpose":"",
              "problem":"aca-py3-bio-hello-biology",
              "type":1,
              "problem_id":4141
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nDid you forget to use capital letters or match the punctuation exactly? You might be thinking that it doesn't matter, because the program did what it was expected to do.\n\nEvery time you write a program you need to be very careful - tiny mistakes like [using the wrong coordinates](https:\/\/www.reuters.com\/article\/us-space-launch-russia-mistake\/russia-says-satellite-launch-failure-due-to-programming-error-idUSKBN1EL1G2) can lead to big, expensive problems. Always match your input and output *exactly* for all of the problems in this challenge.\n\nYou can copy and paste any example code into any editor window. Try copying the example output below into the code editor, and run the code to check the output matches.\n\n```lang:py3;terminal;eg:none;\nHello, Biology!\n```\n\n```eg:py3-be-careful;lang:py3;\nprint('the output here')\n```\n\nBy copying and pasting expected input and output, you can reduce the likelihood you'll make a mistake with capitalisation, punctuation or spelling.\n\n> ## Use this in questions!\n> By doing this in questions, you can be confident your answer will meet the requirements!\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>There are lots of great examples of tiny errors that can have catastrophic consequence. <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/List_of_software_bugs\">Wikipedia<\/a> has a list of software bugs, but a search online using terms like &quot;programming bug lose money&quot; or &quot;programming bug fail launch&quot; will identify plenty of examples that demonstrate the need to be very careful when writing code to specification.<\/p>\n<aside class=\"info curriculum\">\n<h2>Specification<\/h2>\n<p>Specification is one of the <a target=\"_blank\" href=\"https:\/\/australiancurriculum.edu.au\/f-10-curriculum\/technologies\/digital-technologies\/structure\/\">ten key concepts<\/a> in the Digital Technologies curriculum, and is reflected in the Year 7 and 8 Band through the <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP027\">ACTDIP027<\/a> content description.<\/p>\n<\/aside>\n<p>The first step of defining a problem clearly (and implementing a correct algorithm for its solution) is to make sure the requirements are clear and unambiguous.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nThere are lots of great examples of tiny errors that can have catastrophic consequence. [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/List_of_software_bugs) has a list of software bugs, but a search online using terms like \"programming bug lose money\" or \"programming bug fail launch\" will identify plenty of examples that demonstrate the need to be very careful when writing code to specification.\n\n> ## type:curriculum;Specification\n> Specification is one of the [ten key concepts](https:\/\/australiancurriculum.edu.au\/f-10-curriculum\/technologies\/digital-technologies\/structure\/) in the Digital Technologies curriculum, and is reflected in the Year 7 and 8 Band through the [ACTDIP027](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP027) content description.\n\nThe first step of defining a problem clearly (and implementing a correct algorithm for its solution) is to make sure the requirements are clear and unambiguous."
                }
              ],
              "title":"It pays to be careful",
              "content_rendered":"<p>Did you forget to use capital letters or match the punctuation exactly? You might be thinking that it doesn't matter, because the program did what it was expected to do.<\/p>\n<p>Every time you write a program you need to be very careful - tiny mistakes like <a target=\"_blank\" href=\"https:\/\/www.reuters.com\/article\/us-space-launch-russia-mistake\/russia-says-satellite-launch-failure-due-to-programming-error-idUSKBN1EL1G2\">using the wrong coordinates<\/a> can lead to big, expensive problems. Always match your input and output <em>exactly<\/em> for all of the problems in this challenge.<\/p>\n<p>You can copy and paste any example code into any editor window. Try copying the example output below into the code editor, and run the code to check the output matches.<\/p>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>Hello, Biology!<\/o>\n<o><\/o><\/code><\/pre>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-be-careful\"><code data-lang=\"py3\">print('the output here')\n<\/code><\/pre>\n<p>By copying and pasting expected input and output, you can reduce the likelihood you'll make a mistake with capitalisation, punctuation or spelling.<\/p>\n<aside class=\"info\">\n<h2>Use this in questions!<\/h2>\n<p>By doing this in questions, you can be confident your answer will meet the requirements!<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Do you know Mr DNA?",
              "purpose":"",
              "problem":"aca-py3-bio-mr-dna",
              "type":1,
              "problem_id":4364
            }
          ],
          "title":"Getting started"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nClassification involves sorting things into a group. \n\nThere are many different ways to classify. For example, you could classify lollies according to colour or taste.  \n\n<figure class=\"align-center\">\n  <img alt=\"Lots of jellybeans of different colours\" src=\"https:\/\/groklearning-cdn.com\/modules\/t8GtrzRwLzNBTL6txhaQv6\/jellybeans_1_8.jpg\" width=\"50%\">\n  <figcaption>How would you classify your jellybeans?<\/figcaption>\n<\/figure>\n\nLibraries classify books using a [Dewey Decimal number](https:\/\/en.wikipedia.org\/wiki\/Dewey_Decimal_Classification), so that all books on a particular subject are grouped together. It's much easier to find something that way than keeping books together based on colour of cover!\n\nIn biology, an *organism* is a living thing, and the classification of organisms is called *taxonomy*."
                }
              ],
              "layout":0,
              "notes_rendered":"<p>The biology content of the first module concentrates primarily on terminology and definitions. This is because printing output to the screen restricts how much you can do with your program.<\/p>\n<p>All questions in this challenge will use biology as the context of the problem. This will become more apparent later in the course when students are equipped with more programming skills.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nThe biology content of the first module concentrates primarily on terminology and definitions. This is because printing output to the screen restricts how much you can do with your program.\n\nAll questions in this challenge will use biology as the context of the problem. This will become more apparent later in the course when students are equipped with more programming skills."
                }
              ],
              "title":"Why classify?",
              "content_rendered":"<p>Classification involves sorting things into a group.<\/p>\n<p>There are many different ways to classify. For example, you could classify lollies according to colour or taste.<\/p>\n<figure class=\"align-center\">\n  <img alt=\"Lots of jellybeans of different colours\" src=\"https:\/\/groklearning-cdn.com\/modules\/t8GtrzRwLzNBTL6txhaQv6\/jellybeans_1_8.jpg\" width=\"50%\">\n  <figcaption>How would you classify your jellybeans?<\/figcaption>\n<\/figure>\n<p>Libraries classify books using a <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/Dewey_Decimal_Classification\">Dewey Decimal number<\/a>, so that all books on a particular subject are grouped together. It's much easier to find something that way than keeping books together based on colour of cover!<\/p>\n<p>In biology, an <em>organism<\/em> is a living thing, and the classification of organisms is called <em>taxonomy<\/em>.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nWhen we write things to the screen, we need to let the computer know how to understand it. We do this by using a *string*.\n\nA *string* (the green text) can contain any letters, digits, punctuation and spaces that you want, and it can be any length:\n\n```eg:py3-string-chars;lang:py3;\nprint('There are 4 species of kangaroo!')\n```\n\nThe individual letters, digits, symbols and spaces are called *characters* and the word string is short for *string of characters*.\n\nWhat if the character you want to use is a single quote? Python allows you to use double quotes around strings instead:\n\n```eg:py3-string-double-quote;lang:py3;\nprint(\"'Neigh!' - from the horse's mouth!\")\n```\n\n> ## `print` adds a newline\n> Notice that `print` also moves the output position (the *cursor*) to the next line (so the output ends on a blank line).  Programmers call this printing a *newline* character after the string.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>Students may not notice the subtlety of the use of single and double quotes if they skim over this slide.<\/p>\n<p>When questions require them to produce output with apostrophes or quotes in them (and there's one coming up!), they may struggle to produce the correct output string if they don't pay attention to the information on this slide.<\/p>\n<p>If that happens, direct them back to this slide, and talk them through the need for different ways of denoting strings.<\/p>",
              "notes":[
                {
                  "left":"#markdown\n\nStudents may not notice the subtlety of the use of single and double quotes if they skim over this slide.\n\nWhen questions require them to produce output with apostrophes or quotes in them (and there's one coming up!), they may struggle to produce the correct output string if they don't pay attention to the information on this slide.\n\nIf that happens, direct them back to this slide, and talk them through the need for different ways of denoting strings."
                }
              ],
              "title":"A string of characters",
              "content_rendered":"<p>When we write things to the screen, we need to let the computer know how to understand it. We do this by using a <em>string<\/em>.<\/p>\n<p>A <em>string<\/em> (the green text) can contain any letters, digits, punctuation and spaces that you want, and it can be any length:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-string-chars\"><code data-lang=\"py3\">print('There are 4 species of kangaroo!')\n<\/code><\/pre>\n<p>The individual letters, digits, symbols and spaces are called <em>characters<\/em> and the word string is short for <em>string of characters<\/em>.<\/p>\n<p>What if the character you want to use is a single quote? Python allows you to use double quotes around strings instead:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"py3-string-double-quote\"><code data-lang=\"py3\">print(&quot;'Neigh!' - from the horse's mouth!&quot;)\n<\/code><\/pre>\n<aside class=\"info\">\n<h2><code data-lang=\"py3\">print<\/code> adds a newline<\/h2>\n<p>Notice that <code data-lang=\"py3\">print<\/code> also moves the output position (the <em>cursor<\/em>) to the next line (so the output ends on a blank line).  Programmers call this printing a <em>newline<\/em> character after the string.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nOur programs would be pretty boring if they only printed one thing!\n\nWe can add multiple `print` statements to print multiple lines! Python will run the statements in order, so to print multiple lines you can use:\n\n```\nprint('An organism is a living thing.')\nprint('Classification of organisms is called taxonomy.')\n```\n\nEach message will be printed on it's own line, **run the example to check**!\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Printing multiple times",
              "content_rendered":"<p>Our programs would be pretty boring if they only printed one thing!<\/p>\n<p>We can add multiple <code data-lang=\"py3\">print<\/code> statements to print multiple lines! Python will run the statements in order, so to print multiple lines you can use:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-output-1-2-0\"><code data-lang=\"py3\">print('An organism is a living thing.')\nprint('Classification of organisms is called taxonomy.')\n<\/code><\/pre>\n<p>Each message will be printed on it's own line, <strong>run the example to check<\/strong>!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nWriting out a long message many times is a pain. It would be great if we could just store the message somewhere and reuse it.\n\n**A *variable* is that place for storing a value so we can use it later.**\n\nEach variable has a *name* which we use to set and get its value. We create a new variable using an equals sign:\n\n```\norganisms = 'An organism is a living thing.'\nprint(organisms)\nprint(organisms)\nprint(organisms)\nprint('Classification of organisms is called taxonomy.')\n```\n```eg:last;terminal;\nAn organism is a living thing.\nAn organism is a living thing.\nAn organism is a living thing.\nClassification of organisms is called taxonomy.\n\n```\n\nThe first statement creates a new variable called `organisms` and stores the string `'An organism is a living thing.'` We then `print` the\nvalue of the `organisms` variable three times.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Storing things in variables",
              "content_rendered":"<p>Writing out a long message many times is a pain. It would be great if we could just store the message somewhere and reuse it.<\/p>\n<p><strong>A <em>variable<\/em> is that place for storing a value so we can use it later.<\/strong><\/p>\n<p>Each variable has a <em>name<\/em> which we use to set and get its value. We create a new variable using an equals sign:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-output-1-3-0\"><code data-lang=\"py3\">organisms = 'An organism is a living thing.'\nprint(organisms)\nprint(organisms)\nprint(organisms)\nprint('Classification of organisms is called taxonomy.')\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-py-biology-yr7-output-1-3-0\"><code data-lang=\"py3\"><o>An organism is a living thing.<\/o>\n<o>An organism is a living thing.<\/o>\n<o>An organism is a living thing.<\/o>\n<o>Classification of organisms is called taxonomy.<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>The first statement creates a new variable called <code data-lang=\"py3\">organisms<\/code> and stores the string <code data-lang=\"py3\">'An organism is a living thing.'<\/code> We then <code data-lang=\"py3\">print<\/code> the\nvalue of the <code data-lang=\"py3\">organisms<\/code> variable three times.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nOur variables in Python store information, but sometimes we want to put that information *into* a string.\n\nPython let's us do that using f-strings! Let's take a look at how it works:\n```\nscience = 'Biology'\nprint(f'{science} is fun!')\n```\n```eg:last;terminal;\nBiology is fun!\n\n```\nThe `f'{science}'` is what does the magic for us. The `lang:str;f` in front of the string tells python this is an *f-string*, and the curly braces `lang:str;{science}` means put the contents of the `science` variable here! \n\nCompare that to a regular string:\n```\nscience = 'Biology'\nprint('{science} is fun!')\n```\n```eg:last;terminal;\n{science} is fun!\n\n```\n\nF-strings let us insert variables into strings!\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>F-strings are a new thing introduced in Python 3.6. So if you have an older version of python installed on your school computers, this won't work.<\/p>\n<p>We teach it because it's a much easier way of introducing inserting a variable into strings.<\/p>\n<p>F-strings can do so much more than that though! Inside the curly braces, you can run any python code. For example to repeat a string:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"giraffe-bio\"><code data-lang=\"py3\">animal = 'Giraffe'\nprint(f'{animal*5} lots of {animal}')\n<\/code><\/pre>\n<p>Here it repeats it 5 times because it multiples the text 5 times. We don't teach that in this course, other than to say that f-strings are really useful and powerful.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nF-strings are a new thing introduced in Python 3.6. So if you have an older version of python installed on your school computers, this won't work.\n\nWe teach it because it's a much easier way of introducing inserting a variable into strings.\n\nF-strings can do so much more than that though! Inside the curly braces, you can run any python code. For example to repeat a string:\n\n```eg:giraffe-bio;\nanimal = 'Giraffe'\nprint(f'{animal*5} lots of {animal}')\n```\n\nHere it repeats it 5 times because it multiples the text 5 times. We don't teach that in this course, other than to say that f-strings are really useful and powerful."
                }
              ],
              "title":"F-strings",
              "content_rendered":"<p>Our variables in Python store information, but sometimes we want to put that information <em>into<\/em> a string.<\/p>\n<p>Python let's us do that using f-strings! Let's take a look at how it works:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-output-1-4-0\"><code data-lang=\"py3\">science = 'Biology'\nprint(f'{science} is fun!')\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-py-biology-yr7-output-1-4-0\"><code data-lang=\"py3\"><o>Biology is fun!<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>The <code data-lang=\"py3\">f'{science}'<\/code> is what does the magic for us. The <code data-lang=\"str\">f<\/code> in front of the string tells python this is an <em>f-string<\/em>, and the curly braces <code data-lang=\"str\">{science}<\/code> means put the contents of the <code data-lang=\"py3\">science<\/code> variable here!<\/p>\n<p>Compare that to a regular string:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-output-1-4-1\"><code data-lang=\"py3\">science = 'Biology'\nprint('{science} is fun!')\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-py-biology-yr7-output-1-4-1\"><code data-lang=\"py3\"><o>{science} is fun!<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>F-strings let us insert variables into strings!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Organisms",
              "purpose":"",
              "problem":"aca-py3-bio-repeat-organisms",
              "type":1,
              "problem_id":4356
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Non-living things",
              "purpose":"",
              "problem":"aca-py3-bio-non-living",
              "type":1,
              "problem_id":4357
            }
          ],
          "title":"Printing multiple times"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Classification",
              "purpose":"",
              "problem":"aca-choices-bio-classification-intro",
              "type":1,
              "problem_id":4328
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: The study of living organisms",
              "purpose":"",
              "problem":"aca-choices-bio-living-orgs",
              "type":1,
              "problem_id":4368
            }
          ],
          "title":"Classification"
        }
      ],
      "title":"Output",
      "label":"aca-py-biology-yr7-output",
      "updated_at":"2018-05-14T06:56:07.486701+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nSo far our programs have been a simple sequence of steps.  The interpreter executes the statements from top to bottom, and so the program <em>runs the same way every time<\/em>.\n\nIn the real world, we **decide** to **take different steps** based on our situation. For example, if we were on a safari and wanted to take a photo of an animal - we might want to know if the animal not going to eat us (a *herbivore*), before moving closer.\n\nThis *flowchart* describes this process (or *algorithm*):\n\n<svg width=\"464px\" height=\"159px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 464 159\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>herbivore-photo<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-3\" points=\"50.7414365 0 100.741437 50 50.7414365 100 0.741436542 50\"><\/polygon>\n    <\/defs>\n    <g id=\"herbivore-photo\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"start\" transform=\"translate(0.000000, 73.000000)\">\n            <circle id=\"Oval\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n            <text id=\"See-an-animal\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"13.4935\" y=\"30\">See an<\/tspan>\n                <tspan x=\"13.567\" y=\"47\">animal<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"take-picture\" transform=\"translate(369.000000, 78.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"Take-the-picture\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"22.7325\" y=\"25\">Take the<\/tspan>\n                <tspan x=\"27.0725\" y=\"42\">picture<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"move-closer\" transform=\"translate(252.000000, 0.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"Move-closer\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"28.762\" y=\"25\">Move<\/tspan>\n                <tspan x=\"27.9395\" y=\"42\">closer<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"check-herbivore\" transform=\"translate(128.000000, 58.000000)\">\n            <g id=\"Rectangle-2\">\n                <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                <polygon points=\"50.7414365 0 100.741437 50 50.7414365 100 0.741436542 50\"><\/polygon>\n            <\/g>\n            <text id=\"Is-it-a-herbivore?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"33.6025\" y=\"40\">Is it a<\/tspan>\n                <tspan x=\"17.058\" y=\"57\">herbivore?<\/tspan>\n            <\/text>\n        <\/g>\n        <path d=\"M231.980011,108 L365.742717,108\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M365.742717,108 L354.942717,105 L354.942717,111 L365.742717,108 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M178.482446,30 L246.364294,30\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M246.364294,30 L235.564294,27 L235.564294,33 L246.364294,30 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M416.5,30 L350.019989,30\" id=\"Line-3\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M416.5,30 L416.5,75.4892969\" id=\"Line-2\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-2-decoration-1\" d=\"M416.5,75.4892969 L419.5,64.6892969 L413.5,64.6892969 L416.5,75.4892969 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M178.5,56.7632697 L178.5,30\" id=\"Line-4\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M73.1485435,108 L124.645118,108\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M124.645118,108 L113.845118,105 L113.845118,111 L124.645118,108 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <text id=\"yes\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"151.725\" y=\"49\">yes<\/tspan>\n        <\/text>\n        <text id=\"no\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"234.75\" y=\"122\">no<\/tspan>\n        <\/text>\n    <\/g>\n<\/svg>\n\nThe diamond requires a `yes` or `no` decision. The answer determines which line we follow. If the answer is `yes`, we do the extra step of moving closer. If the answer is no `no`, we skip it.\n\nWe can write this in Python using an `if` statement."
                }
              ],
              "layout":0,
              "notes_rendered":"<p>The Digital Technologies subject references the concept of decisions (or branching) throughout the processes and productions skills strand of the curriculum.<\/p>\n<p>Whether defining a problem, designing its solution or implementing that solution in code, understanding that how you progress is dependent on the data you are processing is absolutely critical for developing working computer programs.<\/p>\n<p>Flowcharts are a great way of visualising an algorithm, and can be used with students to design solutions to problems before they even sit at a computer to write their code. We recommend this for all but the simplest of algorithms!<\/p>\n<aside class=\"info curriculum\">\n<h2>Branching<\/h2>\n<p>Decisions and\/or branching is explicitly mentioned in the curriculum many times - in Years 3\u20134 (<a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP010\">ACTDIP010<\/a>, <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\">ACTDIP011<\/a>), 5\u20136 (<a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP019\">ACTDIP019<\/a>, <a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\">ACTDIP020<\/a> ), and 7\u20138 (<a target=\"_blank\" href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030\">ACTDIP030<\/a>).<\/p>\n<\/aside>",
              "notes":[
                {
                  "left":"#markdown\n\nThe Digital Technologies subject references the concept of decisions (or branching) throughout the processes and productions skills strand of the curriculum.\n\nWhether defining a problem, designing its solution or implementing that solution in code, understanding that how you progress is dependent on the data you are processing is absolutely critical for developing working computer programs.\n\nFlowcharts are a great way of visualising an algorithm, and can be used with students to design solutions to problems before they even sit at a computer to write their code. We recommend this for all but the simplest of algorithms!\n\n> ## type:curriculum;Branching\n> Decisions and\/or branching is explicitly mentioned in the curriculum many times - in Years 3\u20134 ([ACTDIP010](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP010), [ACTDIP011](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011)), 5\u20136 ([ACTDIP019](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP019), [ACTDIP020](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020) ), and 7\u20138 ([ACTDIP030](http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030))."
                }
              ],
              "title":"Why do we need decisions?",
              "content_rendered":"<p>So far our programs have been a simple sequence of steps.  The interpreter executes the statements from top to bottom, and so the program <em>runs the same way every time<\/em>.<\/p>\n<p>In the real world, we <strong>decide<\/strong> to <strong>take different steps<\/strong> based on our situation. For example, if we were on a safari and wanted to take a photo of an animal - we might want to know if the animal not going to eat us (a <em>herbivore<\/em>), before moving closer.<\/p>\n<p>This <em>flowchart<\/em> describes this process (or <em>algorithm<\/em>):<\/p>\n<svg width=\"464px\" height=\"159px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 464 159\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>herbivore-photo<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-3\" points=\"50.7414365 0 100.741437 50 50.7414365 100 0.741436542 50\"><\/polygon>\n    <\/defs>\n    <g id=\"herbivore-photo\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"start\" transform=\"translate(0.000000, 73.000000)\">\n            <circle id=\"Oval\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n            <text id=\"See-an-animal\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"13.4935\" y=\"30\">See an<\/tspan>\n                <tspan x=\"13.567\" y=\"47\">animal<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"take-picture\" transform=\"translate(369.000000, 78.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"Take-the-picture\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"22.7325\" y=\"25\">Take the<\/tspan>\n                <tspan x=\"27.0725\" y=\"42\">picture<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"move-closer\" transform=\"translate(252.000000, 0.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"Move-closer\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"28.762\" y=\"25\">Move<\/tspan>\n                <tspan x=\"27.9395\" y=\"42\">closer<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"check-herbivore\" transform=\"translate(128.000000, 58.000000)\">\n            <g id=\"Rectangle-2\">\n                <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                <polygon points=\"50.7414365 0 100.741437 50 50.7414365 100 0.741436542 50\"><\/polygon>\n            <\/g>\n            <text id=\"Is-it-a-herbivore?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"33.6025\" y=\"40\">Is it a<\/tspan>\n                <tspan x=\"17.058\" y=\"57\">herbivore?<\/tspan>\n            <\/text>\n        <\/g>\n        <path d=\"M231.980011,108 L365.742717,108\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M365.742717,108 L354.942717,105 L354.942717,111 L365.742717,108 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M178.482446,30 L246.364294,30\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M246.364294,30 L235.564294,27 L235.564294,33 L246.364294,30 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M416.5,30 L350.019989,30\" id=\"Line-3\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M416.5,30 L416.5,75.4892969\" id=\"Line-2\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-2-decoration-1\" d=\"M416.5,75.4892969 L419.5,64.6892969 L413.5,64.6892969 L416.5,75.4892969 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M178.5,56.7632697 L178.5,30\" id=\"Line-4\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M73.1485435,108 L124.645118,108\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M124.645118,108 L113.845118,105 L113.845118,111 L124.645118,108 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <text id=\"yes\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"151.725\" y=\"49\">yes<\/tspan>\n        <\/text>\n        <text id=\"no\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"234.75\" y=\"122\">no<\/tspan>\n        <\/text>\n    <\/g>\n<\/svg>\n<p>The diamond requires a <code data-lang=\"py3\">yes<\/code> or <code data-lang=\"py3\">no<\/code> decision. The answer determines which line we follow. If the answer is <code data-lang=\"py3\">yes<\/code>, we do the extra step of moving closer. If the answer is no <code data-lang=\"py3\">no<\/code>, we skip it.<\/p>\n<p>We can write this in Python using an <code data-lang=\"py3\">if<\/code> statement.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nLet's write our flowchart as a Python program:\n\n```lang:py3;eg:simple-if\nherbivore = input('Is it a herbivore (yes\/no)? ')\nif herbivore == 'yes':\n  print('Move a bit closer.')\nprint('Take the photo.')\n```\n\n**Try it! What happens when you say `yes`, `no`, or any other answer?**\n\nNotice that the first `print` is *indented* (by two spaces). This is the *body* of the `if` statement. The body must be indented.\n\nIf the value stored in `herbivore` *is equal to* `'yes'` (because the user entered `yes`), then the body is run. Otherwise, it is skipped.\n\nThe second `print` always runs, because it is not indented, and isn't controlled by the `if` statement.\n\n> ## An `if` statement is a *control structure*\n> The `if` statement *controls* how the program runs by deciding if the body is run or not.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>There's quite a bit of new terminology introduced in this slide. The structure of an <code data-lang=\"py3\">if<\/code> statement - especially the trailing colon <code data-lang=\"py3\">:<\/code> - needs to be emphasised. The structure of an <code data-lang=\"py3\">if<\/code> statement in Python feels quite natural - reading the line:<\/p>\n<pre style=\"\" data-runnable=\"false\" class=\"js-editor\" data-eg-id=\"\"><code data-lang=\"py3\">if herbivore == 'yes':\n<\/code><\/pre>\n<p>is almost like reading English - if the value of the variable <code data-lang=\"py3\">herbivore<\/code> is equal to <code data-lang=\"py3\">'yes'<\/code> then execute the body of the <code data-lang=\"py3\">if<\/code> statement.<\/p>\n<p>You can even think of the placement of the colon in control structures as being a bit like using the word &quot;then&quot; - if you are going to define some behaviour based on some condition, then the statement needs a colon at the end.<\/p>\n<p>Terms such as the <em>body<\/em> (also known as a code block) will make referring to the idea that you can write a block of code inside a control structure easier if students understand what these terms mean.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nThere's quite a bit of new terminology introduced in this slide. The structure of an `if` statement - especially the trailing colon `:` - needs to be emphasised. The structure of an `if` statement in Python feels quite natural - reading the line:\n\n```lang:py3;eg:none;norun\nif herbivore == 'yes':\n```\n\nis almost like reading English - if the value of the variable `herbivore` is equal to `'yes'` then execute the body of the `if` statement.\n\nYou can even think of the placement of the colon in control structures as being a bit like using the word \"then\" - if you are going to define some behaviour based on some condition, then the statement needs a colon at the end.\n\nTerms such as the *body* (also known as a code block) will make referring to the idea that you can write a block of code inside a control structure easier if students understand what these terms mean."
                }
              ],
              "title":"Making decisions",
              "content_rendered":"<p>Let's write our flowchart as a Python program:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"simple-if\"><code data-lang=\"py3\">herbivore = input('Is it a herbivore (yes\/no)? ')\nif herbivore == 'yes':\n  print('Move a bit closer.')\nprint('Take the photo.')\n<\/code><\/pre>\n<p><strong>Try it! What happens when you say <code data-lang=\"py3\">yes<\/code>, <code data-lang=\"py3\">no<\/code>, or any other answer?<\/strong><\/p>\n<p>Notice that the first <code data-lang=\"py3\">print<\/code> is <em>indented<\/em> (by two spaces). This is the <em>body<\/em> of the <code data-lang=\"py3\">if<\/code> statement. The body must be indented.<\/p>\n<p>If the value stored in <code data-lang=\"py3\">herbivore<\/code> <em>is equal to<\/em> <code data-lang=\"py3\">'yes'<\/code> (because the user entered <code data-lang=\"py3\">yes<\/code>), then the body is run. Otherwise, it is skipped.<\/p>\n<p>The second <code data-lang=\"py3\">print<\/code> always runs, because it is not indented, and isn't controlled by the <code data-lang=\"py3\">if<\/code> statement.<\/p>\n<aside class=\"info\">\n<h2>An <code data-lang=\"py3\">if<\/code> statement is a <em>control structure<\/em><\/h2>\n<p>The <code data-lang=\"py3\">if<\/code> statement <em>controls<\/em> how the program runs by deciding if the body is run or not.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nAn `if` statement can control more than one statement in its body.\n\nThese statements must have the same indentation, like this:\n\n```\nanimal = input('What is your favourite animal? ')\nif animal == 'Tardigrade':\n  print('A Tardigrade!')\n  print('I wish I could survive in outer space...')\nprint('Cool!')\n```\n\nIf the name matches `'Tardigrade'` then all the indented lines (the *block*) will be executed first, then continue on with the rest of the program.\n\nIf it's anything else, those lines will be skipped and the next not-indented line will be executed next.\n\n> ## Careful with spaces!\n> The number of spaces of indent must be to the same depth for every statement in the block. This example is broken because the indentation of the two lines is different:\n > ```animal = input('Name an animal? ')\n > if animal == 'Quokka':\n >   print('I love the Quokka!')\n >     print('You can find them on Rottnest Island!')\n > ```\n >   You can fix it by making both `print` statements indented by the same number of spaces (usually 2 or 4).\n\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>Python is very particular about indentation, so being consistent with how much indentation you use for each code block is important. Two spaces is nice when working in an editor like Grok Learning because it is easy to see and doesn't move the text too far to the right (which could potentially push it off the screen).<\/p>\n<p>Not all programming languages require indentation like Python does (most don't), but almost all of them recommend using indentation to make reading code easier. Python's insistence on consistent indentation encourages good programming practice, and makes it easier to debug common errors beginners make when using control structures, like inconsistent indentation of code blocks.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nPython is very particular about indentation, so being consistent with how much indentation you use for each code block is important. Two spaces is nice when working in an editor like Grok Learning because it is easy to see and doesn't move the text too far to the right (which could potentially push it off the screen).\n\nNot all programming languages require indentation like Python does (most don't), but almost all of them recommend using indentation to make reading code easier. Python's insistence on consistent indentation encourages good programming practice, and makes it easier to debug common errors beginners make when using control structures, like inconsistent indentation of code blocks."
                }
              ],
              "title":"Controlling a block of code",
              "content_rendered":"<p>An <code data-lang=\"py3\">if<\/code> statement can control more than one statement in its body.<\/p>\n<p>These statements must have the same indentation, like this:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-decisions-0-2-0\"><code data-lang=\"py3\">animal = input('What is your favourite animal? ')\nif animal == 'Tardigrade':\n  print('A Tardigrade!')\n  print('I wish I could survive in outer space...')\nprint('Cool!')\n<\/code><\/pre>\n<p>If the name matches <code data-lang=\"py3\">'Tardigrade'<\/code> then all the indented lines (the <em>block<\/em>) will be executed first, then continue on with the rest of the program.<\/p>\n<p>If it's anything else, those lines will be skipped and the next not-indented line will be executed next.<\/p>\n<aside class=\"info\">\n<h2>Careful with spaces!<\/h2>\n<p>The number of spaces of indent must be to the same depth for every statement in the block. This example is broken because the indentation of the two lines is different:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-decisions-0-2-1\"><code data-lang=\"py3\">if animal == 'Quokka':\n  print('I love the Quokka!')\n    print('You can find them on Rottnest Island!')\n<\/code><\/pre>\n<p>You can fix it by making both <code data-lang=\"py3\">print<\/code> statements indented by the same number of spaces (usually 2 or 4).<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nYou will notice in our examples that we are using two equals signs to check whether the variable is equal to a particular value:\n\n```\nspecies = 'Human'\nif species == 'Human':\n  print(\"Me too! Oh wait, I'm a robot.\")\n```\n\nThis can be very confusing for beginner programmers.\n\nA single `=` is used for *assignment*. This is what we do to set variables. \n\nThe first line of the program above is setting the variable `name` to the value `\"Human\"` using a single equals sign.\n\nA double `==` is used for *comparison*. This is what we do to check whether two things are equal. The second line of the program above is checking whether the variable `name` is equal to `'Human'` using a double equals sign.\n\nIf you do accidentally mix these up, Python will help by giving you a `SyntaxError`. For example, try running this program:\n\n```\nspecies = 'Human'\nif species = 'Human':\n  print(\"Me too! Oh wait, I'm a robot.\")\n\n```\n\n```eg:last;terminal;\nFile \"program.py\", line 2\n    if name = 'Human':\n            ^\nSyntaxError: invalid syntax\n```\n\nNotice the second line only has one equals sign where it should have two.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>When debugging code this is one of those things that is very easy to miss - the logic of the solution might be correct, but sometimes an incorrect use of comparison instead of assignment won't cause an error like the one shown in the slide.<\/p>\n<p>If students get confused about which operator to use, think of it like this:<\/p>\n<ul>\n<li><code data-lang=\"py3\">=<\/code> can be read as &quot;has the value of&quot;<\/li>\n<li><code data-lang=\"py3\">==<\/code> can be read as &quot;is equal to&quot;<\/li>\n<\/ul>\n<p>Thus:<\/p>\n<ul>\n<li><code data-lang=\"py3\">species = 'Human'<\/code> becomes <em>(the variable) species has the value of<\/em> <code data-lang=\"py3\">'Human'<\/code><\/li>\n<li><code data-lang=\"py3\">if species == 'Human':<\/code> is read as <em>if (the variable) species is equal to<\/em> <code data-lang=\"py3\">'Human'<\/code><\/li>\n<\/ul>\n<p>Even experienced programmers occasionally make this error - the trick is being able to quickly identify what the problem is so you can correct it when you make the mistake.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nWhen debugging code this is one of those things that is very easy to miss - the logic of the solution might be correct, but sometimes an incorrect use of comparison instead of assignment won't cause an error like the one shown in the slide.\n\nIf students get confused about which operator to use, think of it like this:\n\n* `=` can be read as \"has the value of\"\n* `==` can be read as \"is equal to\"\n\nThus:\n\n* `species = 'Human'` becomes *(the variable) species has the value of* `'Human'`\n* `if species == 'Human':` is read as *if (the variable) species is equal to* `'Human'`\n\nEven experienced programmers occasionally make this error - the trick is being able to quickly identify what the problem is so you can correct it when you make the mistake."
                }
              ],
              "title":"Assignment vs. comparison",
              "content_rendered":"<p>You will notice in our examples that we are using two equals signs to check whether the variable is equal to a particular value:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-decisions-0-3-0\"><code data-lang=\"py3\">species = 'Human'\nif species == 'Human':\n  print(&quot;Me too! Oh wait, I'm a robot.&quot;)\n<\/code><\/pre>\n<p>This can be very confusing for beginner programmers.<\/p>\n<p>A single <code data-lang=\"py3\">=<\/code> is used for <em>assignment<\/em>. This is what we do to set variables.<\/p>\n<p>The first line of the program above is setting the variable <code data-lang=\"py3\">name<\/code> to the value <code data-lang=\"py3\">&quot;Human&quot;<\/code> using a single equals sign.<\/p>\n<p>A double <code data-lang=\"py3\">==<\/code> is used for <em>comparison<\/em>. This is what we do to check whether two things are equal. The second line of the program above is checking whether the variable <code data-lang=\"py3\">name<\/code> is equal to <code data-lang=\"py3\">'Human'<\/code> using a double equals sign.<\/p>\n<p>If you do accidentally mix these up, Python will help by giving you a <code data-lang=\"py3\">SyntaxError<\/code>. For example, try running this program:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-decisions-0-3-1\"><code data-lang=\"py3\">species = 'Human'\nif species = 'Human':\n  print(&quot;Me too! Oh wait, I'm a robot.&quot;)\n\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-py-biology-yr7-decisions-0-3-1\"><code data-lang=\"py3\"><o>File &quot;program.py&quot;, line 2<\/o>\n<o>    if name = 'Human':<\/o>\n<o>            ^<\/o>\n<o>SyntaxError: invalid syntax<\/o>\n<o><\/o><\/code><\/pre>\n<p>Notice the second line only has one equals sign where it should have two.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: I love marsupials!",
              "purpose":"",
              "problem":"aca-py3-bio-pouch",
              "type":1,
              "problem_id":4369
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: The \"bin chicken\"",
              "purpose":"",
              "problem":"aca-py3-bio-bin-chicken",
              "type":1,
              "problem_id":4353
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n`if` statements allow you to make *yes* or *no* decisions. In Python these are called `True` and `False`.\n\nWhen you use an `if` statement Python works out if the condition is `True` or `False`. If the condition is `True` then the block controlled by the `if` statement will be run:\n\n```\nanimal = 'snake'\nif animal == 'snake':\n  print('Ssssssss')\n\n```\n\n```eg:last;terminal;\nSsssssss\n```\n\nIf we change the value stored in `animal` the expression will evaluate to `False` and the block of code will be skipped:\n\n```\nanimal = 'doggo'\nif animal == 'snake':\n  print('Ssssssss')\n```\n\n(note that when you run the program there is no output!)\n\n> ## Hint!\n> You can check whether the conditional expression is evaluating to `True` or `False` by testing it directly:\n> ```\n> animal = 'snake'\n> print(animal == 'snake')\n> ```\n> ```eg:last;terminal;\n> True\n> \n> ```\n> Try changing the `'snake'` on the first line above to something else and see what happens."
                }
              ],
              "layout":0,
              "notes_rendered":"<p>All conditions that need to be evaluated (in this course, the condition we focus on is that of equality, or <em>is equal to<\/em>) return a value of <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code>.<\/p>\n<p>When a value can only have two values, we call it a <em>boolean<\/em> value. Because digital systems are binary, all values can be represented using two-state booleans.<\/p>\n<p>People often refer to computers an binary as being <em>zeroes and ones<\/em>, but the reality is that the two values can be anything as long as they can be identified. Most programming languages have some concept of <code data-lang=\"py3\">True<\/code> and <code data-lang=\"py3\">False<\/code>, and some use the values <code data-lang=\"py3\">1<\/code> and <code data-lang=\"py3\">0<\/code> instead.<\/p>\n<p>When it comes to hardware, the two values may be different depending on how the hardware operates. For optical media (like CDs and DVDs), the drives work by measuring reflective light and read the values as <em>shiny<\/em> or <em>dull<\/em>. Magnetic drives use the polarities of <em>North<\/em> and <em>South<\/em>.<\/p>\n<p>The reason binary is important in computing is because of this concept. Computers use two states to store, read and process any type of data, and the way the data is structured determines the computer's response.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nAll conditions that need to be evaluated (in this course, the condition we focus on is that of equality, or *is equal to*) return a value of `True` or `False`.\n\nWhen a value can only have two values, we call it a *boolean* value. Because digital systems are binary, all values can be represented using two-state booleans.\n\nPeople often refer to computers an binary as being *zeroes and ones*, but the reality is that the two values can be anything as long as they can be identified. Most programming languages have some concept of `True` and `False`, and some use the values `1` and `0` instead.\n\nWhen it comes to hardware, the two values may be different depending on how the hardware operates. For optical media (like CDs and DVDs), the drives work by measuring reflective light and read the values as *shiny* or *dull*. Magnetic drives use the polarities of *North* and *South*.\n\nThe reason binary is important in computing is because of this concept. Computers use two states to store, read and process any type of data, and the way the data is structured determines the computer's response."
                }
              ],
              "title":"True or False?",
              "content_rendered":"<p><code data-lang=\"py3\">if<\/code> statements allow you to make <em>yes<\/em> or <em>no<\/em> decisions. In Python these are called <code data-lang=\"py3\">True<\/code> and <code data-lang=\"py3\">False<\/code>.<\/p>\n<p>When you use an <code data-lang=\"py3\">if<\/code> statement Python works out if the condition is <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code>. If the condition is <code data-lang=\"py3\">True<\/code> then the block controlled by the <code data-lang=\"py3\">if<\/code> statement will be run:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-decisions-0-6-0\"><code data-lang=\"py3\">animal = 'snake'\nif animal == 'snake':\n  print('Ssssssss')\n\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-py-biology-yr7-decisions-0-6-0\"><code data-lang=\"py3\"><o>Ssssssss<\/o>\n<o><\/o><\/code><\/pre>\n<p>If we change the value stored in <code data-lang=\"py3\">animal<\/code> the expression will evaluate to <code data-lang=\"py3\">False<\/code> and the block of code will be skipped:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-decisions-0-6-1\"><code data-lang=\"py3\">animal = 'doggo'\nif animal == 'snake':\n  print('Ssssssss')\n<\/code><\/pre>\n<p>(note that when you run the program there is no output!)<\/p>\n<aside class=\"info\">\n<h2>Hint!<\/h2>\n<p>You can check whether the conditional expression is evaluating to <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code> by testing it directly:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-decisions-0-6-2\"><code data-lang=\"py3\">animal = 'snake'\nprint(animal == 'snake')\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-py-biology-yr7-decisions-0-6-2\"><code data-lang=\"py3\"><o>True<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>Try changing the <code data-lang=\"py3\">'snake'<\/code> on the first line above to something else and see what happens.<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            }
          ],
          "title":"Making decisions"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nWhen sorting biological organisms (i.e. developing our taxonomy), we often make our decisions about how to classify the organism based on whether a particular feature is present or not. Because these decisions have two possible options, we refer to these decisions as **dichotomous keys**.\n\nWe can represent a dichotomous key in programming by making a decision when a condition is `True`, and doing *something else* when a condition is `False`.\n\n<svg width=\"359px\" height=\"241px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 359 241\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>warm-cold-blooded<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-3\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"warm-cold-blooded\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"start\" transform=\"translate(0.000000, 85.000000)\">\n            <circle id=\"Oval\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n            <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"take-picture\" transform=\"translate(264.000000, 181.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"It-is-cold-blooded\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"37.363\" y=\"18\">It is<\/tspan>\n                <tspan x=\"32.8445\" y=\"35\">cold-<\/tspan>\n                <tspan x=\"23.062\" y=\"52\">blooded<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"move-closer\" transform=\"translate(264.000000, 0.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"It-is-warm-blooded\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"35.363\" y=\"19\">It is<\/tspan>\n                <tspan x=\"26.291\" y=\"36\">warm-<\/tspan>\n                <tspan x=\"21.062\" y=\"53\">blooded<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"regulate-temperature\" transform=\"translate(130.000000, 60.000000)\">\n            <g id=\"Rectangle-2\">\n                <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n            <\/g>\n            <text id=\"Can-it-regulate-its\" font-family=\"Lato-Bold, Lato\" font-size=\"12\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"45.388\" y=\"35\">Can it<\/tspan>\n                <tspan x=\"31.336\" y=\"50\">regulate its <\/tspan>\n                <tspan x=\"47.728\" y=\"65\">body <\/tspan>\n                <tspan x=\"25.171\" y=\"80\">temperature?<\/tspan>\n            <\/text>\n        <\/g>\n        <path d=\"M191,30 L258.881848,30\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M258.881848,30 L248.081848,27 L248.081848,33 L258.881848,30 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M191,210 L258.881848,210\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M258.881848,210 L248.081848,207 L248.081848,213 L258.881848,210 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M191,56.7632697 L191,30\" id=\"Line-4\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M191,209.76327 L191,183\" id=\"Line-4\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M74,120 L125.496575,120\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <text id=\"yes\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"163.725\" y=\"61\">yes<\/tspan>\n        <\/text>\n        <text id=\"no\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"167.75\" y=\"195\">no<\/tspan>\n        <\/text>\n    <\/g>\n<\/svg>\n\nA characteristic of all warm-blooded animals is their ability to regulate their own body temperature. This allows them to keep their body temperature the same even when the weather changes.\n\nCold-blooded animals become hotter and colder when the temperature outside changes. At night their bodies get cooler, and during the day when they are in the sun they warm up.\n\nWe could write a program that asks if the animal can regulate its body temperature. If the user says `'yes'` it can, then it tells the user it is warm-blooded. Otherwise it says it is cold-blooded.\n\nWhat we want is an extra part to the `if` statement which is only run when the *condition* is `False`.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>Because dichotomous keys operate by checking for the presence of a feature they map perfectly to our <code data-lang=\"py3\">if-else<\/code> statements in python. All programming languages have some kind of branching construct like this.<\/p>\n<p>To use them effectively in a program, you need to frame your condition so that the statement is either <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code>, which is exactly what we do with a dichotomous key when we check the validity of a statement like &quot;The animal has a spine&quot;. If this is a correct or <code data-lang=\"py3\">True<\/code> statement, then we classify the animal one way (e.g. vertebrate), but if the statement is <code data-lang=\"py3\">False<\/code> then it is classified differently (e.g. invertebrate).<\/p>",
              "notes":[
                {
                  "left":"#markdown\nBecause dichotomous keys operate by checking for the presence of a feature they map perfectly to our `if-else` statements in python. All programming languages have some kind of branching construct like this.\n\nTo use them effectively in a program, you need to frame your condition so that the statement is either `True` or `False`, which is exactly what we do with a dichotomous key when we check the validity of a statement like \"The animal has a spine\". If this is a correct or `True` statement, then we classify the animal one way (e.g. vertebrate), but if the statement is `False` then it is classified differently (e.g. invertebrate).\n"
                }
              ],
              "title":"Dichotomous Keys",
              "content_rendered":"<p>When sorting biological organisms (i.e. developing our taxonomy), we often make our decisions about how to classify the organism based on whether a particular feature is present or not. Because these decisions have two possible options, we refer to these decisions as <strong>dichotomous keys<\/strong>.<\/p>\n<p>We can represent a dichotomous key in programming by making a decision when a condition is <code data-lang=\"py3\">True<\/code>, and doing <em>something else<\/em> when a condition is <code data-lang=\"py3\">False<\/code>.<\/p>\n<svg width=\"359px\" height=\"241px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 359 241\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>warm-cold-blooded<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-3\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"warm-cold-blooded\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"start\" transform=\"translate(0.000000, 85.000000)\">\n            <circle id=\"Oval\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n            <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"take-picture\" transform=\"translate(264.000000, 181.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"It-is-cold-blooded\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"37.363\" y=\"18\">It is<\/tspan>\n                <tspan x=\"32.8445\" y=\"35\">cold-<\/tspan>\n                <tspan x=\"23.062\" y=\"52\">blooded<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"move-closer\" transform=\"translate(264.000000, 0.000000)\">\n            <g id=\"Rectangle\">\n                <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n            <\/g>\n            <text id=\"It-is-warm-blooded\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"35.363\" y=\"19\">It is<\/tspan>\n                <tspan x=\"26.291\" y=\"36\">warm-<\/tspan>\n                <tspan x=\"21.062\" y=\"53\">blooded<\/tspan>\n            <\/text>\n        <\/g>\n        <g id=\"regulate-temperature\" transform=\"translate(130.000000, 60.000000)\">\n            <g id=\"Rectangle-2\">\n                <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n            <\/g>\n            <text id=\"Can-it-regulate-its\" font-family=\"Lato-Bold, Lato\" font-size=\"12\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                <tspan x=\"45.388\" y=\"35\">Can it<\/tspan>\n                <tspan x=\"31.336\" y=\"50\">regulate its <\/tspan>\n                <tspan x=\"47.728\" y=\"65\">body <\/tspan>\n                <tspan x=\"25.171\" y=\"80\">temperature?<\/tspan>\n            <\/text>\n        <\/g>\n        <path d=\"M191,30 L258.881848,30\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M258.881848,30 L248.081848,27 L248.081848,33 L258.881848,30 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M191,210 L258.881848,210\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M258.881848,210 L248.081848,207 L248.081848,213 L258.881848,210 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M191,56.7632697 L191,30\" id=\"Line-4\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M191,209.76327 L191,183\" id=\"Line-4\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path d=\"M74,120 L125.496575,120\" id=\"Line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <path id=\"Line-decoration-1\" d=\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n        <text id=\"yes\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"163.725\" y=\"61\">yes<\/tspan>\n        <\/text>\n        <text id=\"no\" font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n            <tspan x=\"167.75\" y=\"195\">no<\/tspan>\n        <\/text>\n    <\/g>\n<\/svg>\n<p>A characteristic of all warm-blooded animals is their ability to regulate their own body temperature. This allows them to keep their body temperature the same even when the weather changes.<\/p>\n<p>Cold-blooded animals become hotter and colder when the temperature outside changes. At night their bodies get cooler, and during the day when they are in the sun they warm up.<\/p>\n<p>We could write a program that asks if the animal can regulate its body temperature. If the user says <code data-lang=\"py3\">'yes'<\/code> it can, then it tells the user it is warm-blooded. Otherwise it says it is cold-blooded.<\/p>\n<p>What we want is an extra part to the <code data-lang=\"py3\">if<\/code> statement which is only run when the <em>condition<\/em> is <code data-lang=\"py3\">False<\/code>.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nIn Python the `else` keyword specifies the steps to follow if the condition is `False` (in this case if the animal can **not** regulate its temperature).\n\nIf the user says `yes` then the first *block* is executed, otherwise, the second *block* is executed instead:\n\n```eg:eg-g1-if-it-isnt-raining-0;lang:py3;\nregulate = input('Can it regulate its body temperature? ')\nif regulate == 'yes':\n  print('It is warm-blooded.')\nelse:\n  print('It is cold-blooded.')\n```\n\nHere, either the first or second `print` statement will be executed but not both. Notice the `else` keyword must be followed by a `:` character, just like the `if` statement.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>Note the indentation on the <code data-lang=\"py3\">else<\/code> part of the statement - unlike our examples in the previous section where we removed the indent because one of our statements was always being executed, the body of an <code data-lang=\"py3\">else<\/code> must be indented because it should <em>not<\/em> be executed if our <code data-lang=\"py3\">if<\/code> condition is <code data-lang=\"py3\">True<\/code>.<\/p>\n<p>If you forget to indent your <code data-lang=\"py3\">else<\/code> body Python will throw an <code data-lang=\"err\">IndentationError<\/code>:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"else-no-indent\"><code data-lang=\"py3\">regulate = input('Can it regulate its body temperature? ')\nif regulate == 'yes':\n  print('It is warm-blooded.')\nelse:\nprint('It is cold-blooded.')\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"else-no-indent\"><code data-lang=\"py3\"><o>  File &quot;program.py&quot;, line 5<\/o>\n<o>    print('It is cold-blooded.')<\/o>\n<o>        ^<\/o>\n<o>IndentationError: expected an indented block<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>See how the program <code data-lang=\"err\">expected an indented block<\/code>? This is because after an <code data-lang=\"py3\">else<\/code> you must include the contents of the <code data-lang=\"py3\">else<\/code> body inside an indented block to indicate where the <code data-lang=\"py3\">else<\/code> body starts and ends. Add two spaces in front of that last <code data-lang=\"py3\">print<\/code> line to fix the error. Run the program to see if your fix is correct.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nNote the indentation on the `else` part of the statement - unlike our examples in the previous section where we removed the indent because one of our statements was always being executed, the body of an `else` must be indented because it should *not* be executed if our `if` condition is `True`.\n\nIf you forget to indent your `else` body Python will throw an `lang:err;IndentationError`:\n\n```lang:py3;eg:else-no-indent\nregulate = input('Can it regulate its body temperature? ')\nif regulate == 'yes':\n  print('It is warm-blooded.')\nelse:\nprint('It is cold-blooded.')\n```\n\n```lang:py3;terminal;eg:last\n  File \"program.py\", line 5\n    print('It is cold-blooded.')\n        ^\nIndentationError: expected an indented block\n\n```\n\nSee how the program ```lang:err;expected an indented block```? This is because after an `else` you must include the contents of the `else` body inside an indented block to indicate where the `else` body starts and ends. Add two spaces in front of that last `print` line to fix the error. Run the program to see if your fix is correct."
                }
              ],
              "title":"Warm- or cold-blooded?",
              "content_rendered":"<p>In Python the <code data-lang=\"py3\">else<\/code> keyword specifies the steps to follow if the condition is <code data-lang=\"py3\">False<\/code> (in this case if the animal can <strong>not<\/strong> regulate its temperature).<\/p>\n<p>If the user says <code data-lang=\"py3\">yes<\/code> then the first <em>block<\/em> is executed, otherwise, the second <em>block<\/em> is executed instead:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"eg-g1-if-it-isnt-raining-0\"><code data-lang=\"py3\">regulate = input('Can it regulate its body temperature? ')\nif regulate == 'yes':\n  print('It is warm-blooded.')\nelse:\n  print('It is cold-blooded.')\n<\/code><\/pre>\n<p>Here, either the first or second <code data-lang=\"py3\">print<\/code> statement will be executed but not both. Notice the <code data-lang=\"py3\">else<\/code> keyword must be followed by a <code data-lang=\"py3\">:<\/code> character, just like the <code data-lang=\"py3\">if<\/code> statement.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Plant or animal?",
              "purpose":"",
              "problem":"aca-py3-bio-dichtomous-plant-animal",
              "type":1,
              "problem_id":4363
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Smells fishy",
              "purpose":"",
              "problem":"aca-py3-bio-dichtomous-fishy",
              "type":1,
              "problem_id":4367
            }
          ],
          "title":"Decisions with two options"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Dichotomous Keys",
              "purpose":"",
              "problem":"aca-choices-bio-dichotomous-keys",
              "type":1,
              "problem_id":4373
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Is it a shark?",
              "purpose":"",
              "problem":"aca-choices-bio-is-it-a-shark",
              "type":1,
              "problem_id":4384
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Australia's favourite bird",
              "purpose":"",
              "problem":"aca-choices-bio-magpie",
              "type":1,
              "problem_id":4383
            }
          ],
          "title":"Dichotomous keys"
        }
      ],
      "title":"Decisions",
      "label":"aca-py-biology-yr7-decisions",
      "updated_at":"2018-05-14T06:56:09.608815+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nSometimes we may want to test things that can have more than two possible answers. Let's start with a simple situation where we're checking to see what kind of diet an animal has.\n\n```\neats = input('What type of animal are you? ')\nif eats == 'carnivore':\n  print('You only eat meat.')\nelse:\n  print('You only eat plants.')\n```\n\nWe've seen questions like this before where the user types in a word and we check what that word is. Here, if the user doesn't type in `'carnivore'`, the program assumes that the animal only eats plants (i.e. is a `'herbivore'`).\n\nThis isn't right! It's possible that the animal eats both meat and plants, which would make it an `'omnivore'`. We need a way for our program to deal with that!"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"More difficult questions",
              "content_rendered":"<p>Sometimes we may want to test things that can have more than two possible answers. Let's start with a simple situation where we're checking to see what kind of diet an animal has.<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-decisions2-0-0-0\"><code data-lang=\"py3\">eats = input('What type of animal are you? ')\nif eats == 'carnivore':\n  print('You only eat meat.')\nelse:\n  print('You only eat plants.')\n<\/code><\/pre>\n<p>We've seen questions like this before where the user types in a word and we check what that word is. Here, if the user doesn't type in <code data-lang=\"py3\">'carnivore'<\/code>, the program assumes that the animal only eats plants (i.e. is a <code data-lang=\"py3\">'herbivore'<\/code>).<\/p>\n<p>This isn't right! It's possible that the animal eats both meat and plants, which would make it an <code data-lang=\"py3\">'omnivore'<\/code>. We need a way for our program to deal with that!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nIf we want to test if an animal is a *carnivore*, *herbivore* or *omnivore*, we need to add something extra to our `if` statement. Computers can only check one thing at a time and those statements always need to evaluate to `True` or `False`.\n\nThis means we need to check one condition first and, if that one is `False`, have the computer then check a different one. We use an `elif` to do this.\n\n\n`elif` is an abbreviation of `else` and `if` together, and allows us to write code that will check something else if our first condition is `False`. The code below demonstrates how to use an `elif`:\n\n```\neats = input('What type of animal are you? ')\nif eats == 'carnivore':\n  print('You only eat meat.')\nelif eats == 'herbivore':\n  print('You only eat plants.')\nelse:\n  print('You eat both meat and plants.')\n```\n\nThe program checks the value of `eats` and, if it is `'carnivore'`, prints out the meat message and skips over the rest. If it isn't `'carnivore'`, it checks if it is `'herbivore'`, and prints out the plants message if that is `True`. If that's still not correct, it prints the message in the `else` clause (i.e. that it is an omnivore)."
                }
              ],
              "layout":0,
              "notes_rendered":"<p>All decisions in computers are binary - they respond one way if a condition is <code data-lang=\"py3\">True<\/code> and another if that condition is <code data-lang=\"py3\">False<\/code>. The <code data-lang=\"py3\">elif<\/code> construct allows programmers to present a logical choice of more than two options while still performing binary comparisons.<\/p>\n<p>The <code data-lang=\"py3\">elif<\/code> is just a shorthand way of indicating that in the case where a condition is not met we should try a different condition which should be evaluated in the same way - as being <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code>.<\/p>\n<p>This <strong>only<\/strong> gets checked if the original test is <code data-lang=\"py3\">False<\/code> - the <code data-lang=\"py3\">'el'<\/code> at the front of <code data-lang=\"py3\">elif<\/code> is indicative that it is treated like an <code data-lang=\"py3\">else<\/code> statement, in that it is only checked if the initial <code data-lang=\"py3\">if<\/code> condition is <code data-lang=\"py3\">False<\/code>.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nAll decisions in computers are binary - they respond one way if a condition is `True` and another if that condition is `False`. The `elif` construct allows programmers to present a logical choice of more than two options while still performing binary comparisons.\n\nThe `elif` is just a shorthand way of indicating that in the case where a condition is not met we should try a different condition which should be evaluated in the same way - as being `True` or `False`.\n\nThis **only** gets checked if the original test is `False` - the `'el'` at the front of `elif` is indicative that it is treated like an `else` statement, in that it is only checked if the initial `if` condition is `False`."
                }
              ],
              "title":"More than two options",
              "content_rendered":"<p>If we want to test if an animal is a <em>carnivore<\/em>, <em>herbivore<\/em> or <em>omnivore<\/em>, we need to add something extra to our <code data-lang=\"py3\">if<\/code> statement. Computers can only check one thing at a time and those statements always need to evaluate to <code data-lang=\"py3\">True<\/code> or <code data-lang=\"py3\">False<\/code>.<\/p>\n<p>This means we need to check one condition first and, if that one is <code data-lang=\"py3\">False<\/code>, have the computer then check a different one. We use an <code data-lang=\"py3\">elif<\/code> to do this.<\/p>\n<p><code data-lang=\"py3\">elif<\/code> is an abbreviation of <code data-lang=\"py3\">else<\/code> and <code data-lang=\"py3\">if<\/code> together, and allows us to write code that will check something else if our first condition is <code data-lang=\"py3\">False<\/code>. The code below demonstrates how to use an <code data-lang=\"py3\">elif<\/code>:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-decisions2-0-1-0\"><code data-lang=\"py3\">eats = input('What type of animal are you? ')\nif eats == 'carnivore':\n  print('You only eat meat.')\nelif eats == 'herbivore':\n  print('You only eat plants.')\nelse:\n  print('You eat both meat and plants.')\n<\/code><\/pre>\n<p>The program checks the value of <code data-lang=\"py3\">eats<\/code> and, if it is <code data-lang=\"py3\">'carnivore'<\/code>, prints out the meat message and skips over the rest. If it isn't <code data-lang=\"py3\">'carnivore'<\/code>, it checks if it is <code data-lang=\"py3\">'herbivore'<\/code>, and prints out the plants message if that is <code data-lang=\"py3\">True<\/code>. If that's still not correct, it prints the message in the <code data-lang=\"py3\">else<\/code> clause (i.e. that it is an omnivore).<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nOur previous example assumed that if you weren't a `'carnivore'` or `'herbivore'` you had to be an `'omnivore'`, but it's possible the user might type something else in that isn't correct. To fix this, we want to also check if `'omnivore'` is typed in by the user, and we can do this with another `elif`:\n\n```\neats = input('What type of animal are you? ')\nif eats == 'carnivore':\n  print('You only eat meat.')\nelif eats == 'herbivore':\n  print('You only eat plants.')\nelif eats == 'omnivore':\n  print('You eat both meat and plants.')\nelse:\n  print('Are you an animal?')\n```\n\nYou can add as many `elif` clauses as you like, to deal with all the different cases you might have to catch.\n\nRemember that an `else` can always be used to catch anything that isn't matched by **any** of the `if` or `elif` conditions - it's a good way to make sure that you only execute the right code for correct values."
                }
              ],
              "layout":0,
              "notes_rendered":"<p>When we're checking the value of a variable against some matching criteria, the <code data-lang=\"py3\">elif<\/code> statement allows us to specify any number of conditions to check. This is particularly useful where we might want to respond differently in numerical ranges or where free text strings are involved.<\/p>\n<p>If you want to see some further examples of how <code data-lang=\"py3\">elif<\/code> can be used some of our other challenges explore this concept in much greater detail. It is used extensively in the <a target=\"_blank\" href=\"https:\/\/groklearning.com\/course\/aca-dt-78-py-chatbot\/\">Chatbot Challenge<\/a> where the final project requires responding differently depending on the phrase typed in by the user.<\/p>\n<p>Because this challenge focuses on dichotomous keys and their usefulness in a biological context, we'll focus primarily on the <code data-lang=\"py3\">if<\/code>-<code data-lang=\"py3\">else<\/code> type cases.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nWhen we're checking the value of a variable against some matching criteria, the `elif` statement allows us to specify any number of conditions to check. This is particularly useful where we might want to respond differently in numerical ranges or where free text strings are involved.\n\nIf you want to see some further examples of how `elif` can be used some of our other challenges explore this concept in much greater detail. It is used extensively in the [Chatbot Challenge](https:\/\/groklearning.com\/course\/aca-dt-78-py-chatbot\/) where the final project requires responding differently depending on the phrase typed in by the user.\n\nBecause this challenge focuses on dichotomous keys and their usefulness in a biological context, we'll focus primarily on the `if`-`else` type cases."
                }
              ],
              "title":"Even more options",
              "content_rendered":"<p>Our previous example assumed that if you weren't a <code data-lang=\"py3\">'carnivore'<\/code> or <code data-lang=\"py3\">'herbivore'<\/code> you had to be an <code data-lang=\"py3\">'omnivore'<\/code>, but it's possible the user might type something else in that isn't correct. To fix this, we want to also check if <code data-lang=\"py3\">'omnivore'<\/code> is typed in by the user, and we can do this with another <code data-lang=\"py3\">elif<\/code>:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-decisions2-0-2-0\"><code data-lang=\"py3\">eats = input('What type of animal are you? ')\nif eats == 'carnivore':\n  print('You only eat meat.')\nelif eats == 'herbivore':\n  print('You only eat plants.')\nelif eats == 'omnivore':\n  print('You eat both meat and plants.')\nelse:\n  print('Are you an animal?')\n<\/code><\/pre>\n<p>You can add as many <code data-lang=\"py3\">elif<\/code> clauses as you like, to deal with all the different cases you might have to catch.<\/p>\n<p>Remember that an <code data-lang=\"py3\">else<\/code> can always be used to catch anything that isn't matched by <strong>any<\/strong> of the <code data-lang=\"py3\">if<\/code> or <code data-lang=\"py3\">elif<\/code> conditions - it's a good way to make sure that you only execute the right code for correct values.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Feature to class",
              "purpose":"",
              "problem":"aca-py3-bio-feature-to-class",
              "type":1,
              "problem_id":4370
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Find the animal!",
              "purpose":"",
              "problem":"aca-py3-bio-find-the-animal",
              "type":1,
              "problem_id":4372
            }
          ],
          "title":"Decisions with more options"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nAs we move further down the classification taxonomy, we often need to ask multiple questions to be able to confidently identify where the animal should be categorised.\n\nLet's say we wanted to separate [Aves (Birds)](https:\/\/en.wikipedia.org\/wiki\/Bird), [Monotremes](https:\/\/en.wikipedia.org\/wiki\/Monotreme) and [Mammals](https:\/\/en.wikipedia.org\/wiki\/Mammal) into separate groups. We'll simplify things a bit and say that the only things we have information about are whether the animal can fly, and if it lays eggs.\n\nThis table summarises some simple facts about these three groups of animals:\n\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr>\n      <th><\/th>\n      <th>Bird<\/th>\n      <th>Monotreme<\/th>\n      <th>Mammal<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td><em>Can fly?<\/em><\/td>\n      <td><strong>Yes<\/strong><\/td>\n      <td>No<\/td>\n      <td>No<\/td>\n    <\/tr>\n    <tr>\n      <td><em>Lays eggs?<\/em><\/td>\n      <td><strong>Yes<\/strong><\/td>\n      <td><strong>Yes<\/strong><\/td>\n      <td>No<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n\nSo Birds both lay eggs and can fly, Monotremes lay eggs but don't fly, and mammals don't lay eggs and don't fly.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>Biological classification uses many different properties of species. Unlike the <code data-lang=\"py3\">elif<\/code> we just explored, we'll often want to capture this information in multiple variables rather than always asking for a text string.<\/p>\n<p>This example is critical to the upcoming mini-project, so making sure students can understand and complete the questions in this part of the module will be important.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nBiological classification uses many different properties of species. Unlike the `elif` we just explored, we'll often want to capture this information in multiple variables rather than always asking for a text string.\n\nThis example is critical to the upcoming mini-project, so making sure students can understand and complete the questions in this part of the module will be important."
                }
              ],
              "title":"Making complex decisions",
              "content_rendered":"<p>As we move further down the classification taxonomy, we often need to ask multiple questions to be able to confidently identify where the animal should be categorised.<\/p>\n<p>Let's say we wanted to separate <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/Bird\">Aves (Birds)<\/a>, <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/Monotreme\">Monotremes<\/a> and <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/Mammal\">Mammals<\/a> into separate groups. We'll simplify things a bit and say that the only things we have information about are whether the animal can fly, and if it lays eggs.<\/p>\n<p>This table summarises some simple facts about these three groups of animals:<\/p>\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr>\n      <th><\/th>\n      <th>Bird<\/th>\n      <th>Monotreme<\/th>\n      <th>Mammal<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td><em>Can fly?<\/em><\/td>\n      <td><strong>Yes<\/strong><\/td>\n      <td>No<\/td>\n      <td>No<\/td>\n    <\/tr>\n    <tr>\n      <td><em>Lays eggs?<\/em><\/td>\n      <td><strong>Yes<\/strong><\/td>\n      <td><strong>Yes<\/strong><\/td>\n      <td>No<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<p>So Birds both lay eggs and can fly, Monotremes lay eggs but don't fly, and mammals don't lay eggs and don't fly.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nThe flowchart below demonstrates how we can use the properties of `can_fly` and `lay_eggs` to determine which animal it is:\n\n<svg width=\"493px\" height=\"331px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 493 331\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>aves-mono-mammal<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-3\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-4\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n        <polygon id=\"path-5\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"aves-monotreme-mammal\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"aves-mono-mammal\">\n            <g id=\"start\" transform=\"translate(0.000000, 85.000000)\">\n                <circle id=\"oval_start\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n                <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n                <\/text>\n                <path d=\"M74,35 L125.496575,35\" id=\"start_line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"start_line-decoration-1\" d=\"M125.496575,35 L114.696575,32 L114.696575,38 L125.496575,35 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n            <\/g>\n            <g id=\"is-mammal\" transform=\"translate(398.000000, 271.000000)\">\n                <g id=\"mammal_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-mammal\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"21.068\" y=\"42\">mammal<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-monotreme\" transform=\"translate(398.000000, 90.000000)\">\n                <g id=\"mono_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-monotreme\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"11.2645\" y=\"42\">monotreme<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-bird\" transform=\"translate(264.000000, 0.000000)\">\n                <g id=\"bird_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-bird\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"35.2605\" y=\"42\">bird<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"can-fly\" transform=\"translate(130.000000, 60.000000)\">\n                <g id=\"fly_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-4\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"can-it-fly?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"28.8885\" y=\"62\">Can it fly?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_yes\" transform=\"translate(162.000000, 29.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"fly_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"fly_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_yes\" transform=\"translate(297.000000, 120.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"eggs_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"eggs_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_no\" transform=\"translate(166.000000, 183.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"fly_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"fly_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"lay-eggs\" transform=\"translate(266.000000, 150.000000)\">\n                <g id=\"eggs_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-5\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"lay-eggs?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"37.803\" y=\"54\">Does it<\/tspan>\n                    <tspan x=\"32.2905\" y=\"71\">lay eggs?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_no\" transform=\"translate(301.000000, 273.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"eggs_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"eggs_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n        <\/g>\n    <\/g>\n<\/svg>\n\nBecause only birds can fly, we can confidently say that a yes to our first question means we have a bird. \n\nWhether we ask the second question at all *depends* on the answer to the first!"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>The algorithms that we'll be presenting from this point on will often be easier to understand by having students draw flowcharts to clearly show how the program should behave in each case that is being tested.<\/p>\n<p>Because dichotomous keys rely on a yes\/no type answer, this flowchart presentation is similar in layout to what you might teach students when they're learning about representation of a dichotomous key for the first time.<\/p>\n<p>If a student is struggling with an example of problem and they have not drawn a flowchart of how it is expected to behave, having them do so will usually get them back on track.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nThe algorithms that we'll be presenting from this point on will often be easier to understand by having students draw flowcharts to clearly show how the program should behave in each case that is being tested.\n\nBecause dichotomous keys rely on a yes\/no type answer, this flowchart presentation is similar in layout to what you might teach students when they're learning about representation of a dichotomous key for the first time.\n\nIf a student is struggling with an example of problem and they have not drawn a flowchart of how it is expected to behave, having them do so will usually get them back on track."
                }
              ],
              "title":"Asking the right questions",
              "content_rendered":"<p>The flowchart below demonstrates how we can use the properties of <code data-lang=\"py3\">can_fly<\/code> and <code data-lang=\"py3\">lay_eggs<\/code> to determine which animal it is:<\/p>\n<svg width=\"493px\" height=\"331px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 493 331\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>aves-mono-mammal<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-3\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-4\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n        <polygon id=\"path-5\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"aves-monotreme-mammal\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"aves-mono-mammal\">\n            <g id=\"start\" transform=\"translate(0.000000, 85.000000)\">\n                <circle id=\"oval_start\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n                <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n                <\/text>\n                <path d=\"M74,35 L125.496575,35\" id=\"start_line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"start_line-decoration-1\" d=\"M125.496575,35 L114.696575,32 L114.696575,38 L125.496575,35 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n            <\/g>\n            <g id=\"is-mammal\" transform=\"translate(398.000000, 271.000000)\">\n                <g id=\"mammal_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-mammal\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"21.068\" y=\"42\">mammal<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-monotreme\" transform=\"translate(398.000000, 90.000000)\">\n                <g id=\"mono_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-monotreme\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"11.2645\" y=\"42\">monotreme<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-bird\" transform=\"translate(264.000000, 0.000000)\">\n                <g id=\"bird_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-bird\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"35.2605\" y=\"42\">bird<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"can-fly\" transform=\"translate(130.000000, 60.000000)\">\n                <g id=\"fly_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-4\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"can-it-fly?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"28.8885\" y=\"62\">Can it fly?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_yes\" transform=\"translate(162.000000, 29.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"fly_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"fly_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_yes\" transform=\"translate(297.000000, 120.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"eggs_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"eggs_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_no\" transform=\"translate(166.000000, 183.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"fly_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"fly_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"lay-eggs\" transform=\"translate(266.000000, 150.000000)\">\n                <g id=\"eggs_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-5\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"lay-eggs?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"37.803\" y=\"54\">Does it<\/tspan>\n                    <tspan x=\"32.2905\" y=\"71\">lay eggs?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_no\" transform=\"translate(301.000000, 273.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"eggs_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"eggs_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n        <\/g>\n    <\/g>\n<\/svg>\n<p>Because only birds can fly, we can confidently say that a yes to our first question means we have a bird.<\/p>\n<p>Whether we ask the second question at all <em>depends<\/em> on the answer to the first!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nThe body of an `if`, `elif` or `else` statement may contain another `if` statement. This is called *nesting*, and is how we represent our algorithm of a decision within a decision, in code.\n\nWhen using *dichotomous keys* in Biology, our goal is to reduce the number of species until there are no other possibilities.\n\nWhen we have eliminated all possibilities, we don't need to ask any more questions, so **asking more questions *depends* on the previous answer!**\n\nThis is the advantage of using nesting.\n\nIn the example from the previous slide, the second decision only happens inside the `'no'` case (or the `else` of our first question). Let's turn the flowchart into code!\n\n```\ncan_fly = input('Can it fly? ')\nif can_fly == 'y':\n  print('Aves (Bird)')\nelse:\n  lay_eggs = input('Does it lay eggs? ')\n  if lay_eggs == 'y':\n    print('Monotreme')\n  else:\n    print('Mammal')\n```\n\n```eg:last;terminal\nCan it fly? @@@n\nDoes it lay eggs? @@@n\nMammal\n\n```\n\nNotice how the indentation of the `print` and `input` functions looks a bit like the indentation of the rectangles in our flowchart? \n\n**Test the example by running the code above**. Try different answers to all of the questions. You'll also notice that if you answer `'y'` to the first question, the second question won't get asked at all!"
                }
              ],
              "layout":0,
              "notes_rendered":"<p><strong><em>This is the most important slide in the module, possibly the whole challenge!<\/em><\/strong><\/p>\n<p>The nesting of <code data-lang=\"py3\">if<\/code> statements is reflected exactly in the way dichotomous keys ask additional questions to classify species. Since we want students to be able to build their own classifier by the end of this course, it will rely heavily on students being able to nest <code data-lang=\"py3\">if<\/code> statements in the correct order to ask the relevant questions.<\/p>\n<p>Encourage students to experiment with the sample code on this slide so that they understand exactly how the program works.<\/p>\n<p>Nesting in Python requires precision - you need to choose an indentation amount and consistently use that for each <em>level<\/em> of indentation required. This means that if you choose 2 spaces as your indentation amount, you need to indent the code block inside the first <code data-lang=\"py3\">if<\/code> and the first <code data-lang=\"py3\">else<\/code> by that amount.<\/p>\n<p>Once you move into the second level of indentation (the <code data-lang=\"py3\">if<\/code> inside the <code data-lang=\"py3\">else<\/code>), then you need to indent by that amount again (i.e. by another 2 spaces). This means the code inside the second <code data-lang=\"py3\">if<\/code> and its associated <code data-lang=\"py3\">else<\/code> needs to be 4 spaces.<\/p>\n<p>Beginning programmers will often get the amount of indentation wrong, especially when working with nested statements. This is normal and can be frustrating, but lots of practice and referring back to working examples goes a long way in helping them to better understand.<\/p>",
              "notes":[
                {
                  "left":"#markdown\n***This is the most important slide in the module, possibly the whole challenge!***\n\nThe nesting of `if` statements is reflected exactly in the way dichotomous keys ask additional questions to classify species. Since we want students to be able to build their own classifier by the end of this course, it will rely heavily on students being able to nest `if` statements in the correct order to ask the relevant questions.\n\nEncourage students to experiment with the sample code on this slide so that they understand exactly how the program works.\n\nNesting in Python requires precision - you need to choose an indentation amount and consistently use that for each *level* of indentation required. This means that if you choose 2 spaces as your indentation amount, you need to indent the code block inside the first `if` and the first `else` by that amount.\n\nOnce you move into the second level of indentation (the `if` inside the `else`), then you need to indent by that amount again (i.e. by another 2 spaces). This means the code inside the second `if` and its associated `else` needs to be 4 spaces.\n\nBeginning programmers will often get the amount of indentation wrong, especially when working with nested statements. This is normal and can be frustrating, but lots of practice and referring back to working examples goes a long way in helping them to better understand.\n"
                }
              ],
              "title":"Decisions within decisions",
              "content_rendered":"<p>The body of an <code data-lang=\"py3\">if<\/code>, <code data-lang=\"py3\">elif<\/code> or <code data-lang=\"py3\">else<\/code> statement may contain another <code data-lang=\"py3\">if<\/code> statement. This is called <em>nesting<\/em>, and is how we represent our algorithm of a decision within a decision, in code.<\/p>\n<p>When using <em>dichotomous keys<\/em> in Biology, our goal is to reduce the number of species until there are no other possibilities.<\/p>\n<p>When we have eliminated all possibilities, we don't need to ask any more questions, so <strong>asking more questions <em>depends<\/em> on the previous answer!<\/strong><\/p>\n<p>This is the advantage of using nesting.<\/p>\n<p>In the example from the previous slide, the second decision only happens inside the <code data-lang=\"py3\">'no'<\/code> case (or the <code data-lang=\"py3\">else<\/code> of our first question). Let's turn the flowchart into code!<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-decisions2-1-2-0\"><code data-lang=\"py3\">can_fly = input('Can it fly? ')\nif can_fly == 'y':\n  print('Aves (Bird)')\nelse:\n  lay_eggs = input('Does it lay eggs? ')\n  if lay_eggs == 'y':\n    print('Monotreme')\n  else:\n    print('Mammal')\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aca-py-biology-yr7-decisions2-1-2-0\"><code data-lang=\"py3\"><o>Can it fly? <\/o><i>n<\/i>\n<o>Does it lay eggs? <\/o><i>n<\/i>\n<o>Mammal<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>Notice how the indentation of the <code data-lang=\"py3\">print<\/code> and <code data-lang=\"py3\">input<\/code> functions looks a bit like the indentation of the rectangles in our flowchart?<\/p>\n<p><strong>Test the example by running the code above<\/strong>. Try different answers to all of the questions. You'll also notice that if you answer <code data-lang=\"py3\">'y'<\/code> to the first question, the second question won't get asked at all!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nChanging the order that you ask your questions can change your algorithm. Look what happens to the flowchart if we ask if the animal lays eggs first:\n\n<svg width=\"494px\" height=\"331px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 494 331\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>aves-mono-mammal-eggs<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-3\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-4\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n        <polygon id=\"path-5\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"aves-monotreme-mammal\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"aves-mono-mammal-eggs\">\n            <g id=\"start\" transform=\"translate(0.000000, 175.000000)\">\n                <circle id=\"oval_start\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n                <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n                <\/text>\n                <path d=\"M74,35 L125.496575,35\" id=\"start_line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"start_line-decoration-1\" d=\"M125.496575,35 L114.696575,32 L114.696575,38 L125.496575,35 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n            <\/g>\n            <g id=\"is-mammal\" transform=\"translate(265.000000, 271.000000)\">\n                <g id=\"mammal_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-mammal\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"21.068\" y=\"42\">mammal<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-monotreme\" transform=\"translate(399.000000, 181.000000)\">\n                <g id=\"mono_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-monotreme\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"11.2645\" y=\"42\">monotreme<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-bird\" transform=\"translate(399.000000, 0.000000)\">\n                <g id=\"bird_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-bird\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"35.2605\" y=\"42\">bird<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"can-fly\" transform=\"translate(265.000000, 60.000000)\">\n                <g id=\"fly_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-4\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"can-it-fly?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"28.8885\" y=\"62\">Can it fly?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_yes\" transform=\"translate(297.000000, 29.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"fly_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"fly_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_yes\" transform=\"translate(164.000000, 120.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"eggs_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"eggs_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_no\" transform=\"translate(301.000000, 183.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"fly_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"fly_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"lay-eggs\" transform=\"translate(133.000000, 150.000000)\">\n                <g id=\"eggs_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-5\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"lay-eggs?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"37.803\" y=\"54\">Does it<\/tspan>\n                    <tspan x=\"32.2905\" y=\"71\">lay eggs?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_no\" transform=\"translate(168.000000, 273.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"eggs_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"eggs_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n        <\/g>\n    <\/g>\n<\/svg>\n\nThis algorithm requires asking the second question - can it fly? - inside the body of the first `if`, not the `else` like we did last time. You can see this by looking at where the second question gets asked in the flowchart - after the first answer is `'yes'`.\n\nThis changes how we nest our `if` statements, and changes the code to:\n\n```\nlay_eggs = input('Does it lay eggs? ')\nif lay_eggs == 'y':\n  can_fly = input('Can it fly? ')\n  if can_fly == 'y':\n    print('Aves (Bird)')\n  else:\n    print('Monotreme')\nelse:\n  print('Mammal')\n```\n\nRun this program to see how it works, and try different answers to the questions.\n\nBoth algorithms are correct even though the programs are different!"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>When students begin working on their classification projects (including the mini version in the next module), they'll be given flexibility to design their own algorithm which may mean asking different questions, or asking them in a different order.<\/p>\n<p>As long as the program generates correct results for all required inputs (and the auto-marker tests this), then a student's algorithm is correct. Thus, if they have a different answer to their peers or would like to try coming up with their own solution, this should be encouraged.<\/p>\n<p>It is also worth spending some time looking at the two versions of the flowchart next to each other, especially with students who may find this difficult. The easiest way to do this is to have students on adjacent computers open each of the slides, and walking through the differences and how it has an impact on the program's output. You can then verify their understanding by running the example code.<\/p>",
              "notes":[
                {
                  "left":"#markdown\nWhen students begin working on their classification projects (including the mini version in the next module), they'll be given flexibility to design their own algorithm which may mean asking different questions, or asking them in a different order.\n\nAs long as the program generates correct results for all required inputs (and the auto-marker tests this), then a student's algorithm is correct. Thus, if they have a different answer to their peers or would like to try coming up with their own solution, this should be encouraged.\n\nIt is also worth spending some time looking at the two versions of the flowchart next to each other, especially with students who may find this difficult. The easiest way to do this is to have students on adjacent computers open each of the slides, and walking through the differences and how it has an impact on the program's output. You can then verify their understanding by running the example code.\n"
                }
              ],
              "title":"Order matters!",
              "content_rendered":"<p>Changing the order that you ask your questions can change your algorithm. Look what happens to the flowchart if we ask if the animal lays eggs first:<\/p>\n<svg width=\"494px\" height=\"331px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 494 331\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>aves-mono-mammal-eggs<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-3\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-4\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n        <polygon id=\"path-5\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"aves-monotreme-mammal\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"aves-mono-mammal-eggs\">\n            <g id=\"start\" transform=\"translate(0.000000, 175.000000)\">\n                <circle id=\"oval_start\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n                <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n                <\/text>\n                <path d=\"M74,35 L125.496575,35\" id=\"start_line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"start_line-decoration-1\" d=\"M125.496575,35 L114.696575,32 L114.696575,38 L125.496575,35 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n            <\/g>\n            <g id=\"is-mammal\" transform=\"translate(265.000000, 271.000000)\">\n                <g id=\"mammal_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-mammal\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"21.068\" y=\"42\">mammal<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-monotreme\" transform=\"translate(399.000000, 181.000000)\">\n                <g id=\"mono_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-monotreme\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"11.2645\" y=\"42\">monotreme<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-bird\" transform=\"translate(399.000000, 0.000000)\">\n                <g id=\"bird_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"it's-a-bird\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"35.2605\" y=\"42\">bird<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"can-fly\" transform=\"translate(265.000000, 60.000000)\">\n                <g id=\"fly_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-4\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"can-it-fly?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"28.8885\" y=\"62\">Can it fly?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_yes\" transform=\"translate(297.000000, 29.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"fly_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"fly_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_yes\" transform=\"translate(164.000000, 120.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"eggs_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"eggs_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"fly_no\" transform=\"translate(301.000000, 183.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"fly_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"fly_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"fly_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"lay-eggs\" transform=\"translate(133.000000, 150.000000)\">\n                <g id=\"eggs_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-5\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"lay-eggs?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"37.803\" y=\"54\">Does it<\/tspan>\n                    <tspan x=\"32.2905\" y=\"71\">lay eggs?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eggs_no\" transform=\"translate(168.000000, 273.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"eggs_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"eggs_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"eggs_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n        <\/g>\n    <\/g>\n<\/svg>\n<p>This algorithm requires asking the second question - can it fly? - inside the body of the first <code data-lang=\"py3\">if<\/code>, not the <code data-lang=\"py3\">else<\/code> like we did last time. You can see this by looking at where the second question gets asked in the flowchart - after the first answer is <code data-lang=\"py3\">'yes'<\/code>.<\/p>\n<p>This changes how we nest our <code data-lang=\"py3\">if<\/code> statements, and changes the code to:<\/p>\n<pre style=\"\" class=\"js-editor\" data-eg-id=\"aca-py-biology-yr7-decisions2-1-3-0\"><code data-lang=\"py3\">lay_eggs = input('Does it lay eggs? ')\nif lay_eggs == 'y':\n  can_fly = input('Can it fly? ')\n  if can_fly == 'y':\n    print('Aves (Bird)')\n  else:\n    print('Monotreme')\nelse:\n  print('Mammal')\n<\/code><\/pre>\n<p>Run this program to see how it works, and try different answers to the questions.<\/p>\n<p>Both algorithms are correct even though the programs are different!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Which macropod?",
              "purpose":"",
              "problem":"aca-py3-bio-nesting-macropod",
              "type":1,
              "problem_id":4406
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: What's my diet?",
              "purpose":"",
              "problem":"aca-py3-bio-nesting-eats",
              "type":1,
              "problem_id":4386
            }
          ],
          "title":"Decisions and algorithms"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Nesting or elif?",
              "purpose":"",
              "problem":"aca-choices-bio-nesting-elif",
              "type":1,
              "problem_id":4409
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Which is it?",
              "purpose":"",
              "problem":"aca-choices-bio-flowchart-eats",
              "type":1,
              "problem_id":4410
            }
          ],
          "title":"Decision review"
        }
      ],
      "title":"Complex decisions",
      "label":"aca-py-biology-yr7-decisions2",
      "updated_at":"2018-05-14T06:56:07.711298+00:00",
      "concepts":[

      ]
    }
  ],
  "problems":[
    {
      "language":0,
      "title":"Lyrebird mimic",
      "notes":"<p>This solution is very similar to the discussion of <code data-lang=\"py3\">input<\/code> in the notes.<\/p>\n\n<p>Here, the first step is to use the <code data-lang=\"py3\">input<\/code> function to ask for the sound to repeat:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln1\"><code data-lang=\"py3\">sound = input('What sound do you want to make? ')\n<\/code><\/pre>\n\nThis prints out <code data-lang=\"out\">What sound do you want to make? <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <code data-lang=\"py3\">sound<\/code>.\n\n<p>The second step was to print out exactly what was typed. To do this you needed to print out whatever was read in from the user. <\/p>\n\n<p>Try running this to see how we built it up:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"squawk-soln\"><code data-lang=\"py3\">\nsound = 'Squawk!'\nprint(sound)\n<\/code><\/pre>\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>\n\n",
      "updated_at":"2018-03-02T06:36:03.800392+00:00",
      "label":"aca-py3-bio-lyrebird-echo",
      "content":"#markdown\n\nThe [Lyrebird](https:\/\/en.wikipedia.org\/wiki\/Lyrebird) is an Australian bird that has the ability to mimic sounds it hears in its environment. It can mimic not only natural sounds but [artifical ones too](https:\/\/youtu.be\/VjE0Kdfos4Y?t=58s)! It's also on the 10c coin.\n\n![Photo by Leon Wilson [CC-BY-2.0](https:\/\/creativecommons.org\/licenses\/by\/2.0\/)](https:\/\/groklearning-cdn.com\/problems\/rZYQ9vviu77fVsUR5FJ755\/lyrebird.jpg)\n\nWrite a program that simulates the lyrebird's mimic ability. You need to get input from the user and print back exactly what the user entered.\n\n```eg:none;terminal\nWhat sound do you want to make? @@@Squawk!\nSquawk!\n\n```\n\nYour program should work with anything the user types:\n\n```eg:none;terminal\nWhat sound do you want to make? @@@Blurrgh!\nBlurrgh!\n\n```\n> ## No f-string required\n> You don't need f-strings here because we're just printing the variable out on its own.",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\"]",
      "teacher_notes":"<p>This solution is very similar to the discussion of <code data-lang=\"py3\">input<\/code> in the notes.<\/p>\n\n<p>Here, the first step is to use the <code data-lang=\"py3\">input<\/code> function to ask for the sound to repeat:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln1\"><code data-lang=\"py3\">sound = input('What sound do you want to make? ')\n<\/code><\/pre>\n\nThis prints out <code data-lang=\"out\">What sound do you want to make? <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <code data-lang=\"py3\">sound<\/code>.\n\n<p>The second step was to print out exactly what was typed. To do this you needed to print out whatever was read in from the user. <\/p>\n\n<p>Try running this to see how we built it up:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"squawk-soln\"><code data-lang=\"py3\">\nsound = 'Squawk!'\nprint(sound)\n<\/code><\/pre>\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>\n\n"
    },
    {
      "language":0,
      "title":"Common genus",
      "notes":"#markdown\nTo solve this question, we'll use `input` as we did in the last few questions, except we'll need to read in three different bits of information: the genus and the two species.\n\n\n```\ngenus = input('What is the genus? ')\nspecies1 = input('What is species 1? ')\nspecies2 = input('What is species 2? ')\n```\n\nHere we've called our variables `genus`, `species1` and `species2`, to describe what we store in them!\n\nThe second step is to print out the messages, using strings and the contents of those variables:\n\n```\nprint(f'The first species is {genus} {species1}.')\nprint(f'The second species is {genus} {species2}.')\n```\n\nAnd that's it! So we can now piece these two steps together to form the final solution.\n",
      "updated_at":"2018-02-23T02:20:51.484435+00:00",
      "label":"aca-py3-bio-scientific-name-two",
      "content":"#markdown\nWhen two species have the same genus, they are very closely related. For example, the scientific name of the eastern grey kangaroo is the *Macropus giganteus* and the name for the Red-necked wallaby is *Macropus rufogriseus*.\n\nThis is called having a *common genus*.\n\nWrite a program that asks for a common genus, then *two* species names, then prints out the scientific name of each!\n\nHere is an example:\n\n```lang:py3;terminal;eg:none;\nWhat is the genus? @@@Macropus\nWhat is species 1? @@@giganteus\nWhat is species 2? @@@rufogriseus\nThe first species is Macropus giganteus.\nThe second species is Macropus rufogriseus.\n```\n\nHere's another example, comparing the bonobo and the chimpanzee:\n\n```lang:py3;terminal;eg:none;\nWhat is the genus? @@@Pan\nWhat is species 1? @@@paniscus\nWhat is species 2? @@@troglodytes\nThe first species is Pan paniscus\nThe second species is Pan troglodytes\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nTo solve this question, we'll use `input` as we did in the last few questions, except we'll need to read in three different bits of information: the genus and the two species.\n\n\n```\ngenus = input('What is the genus? ')\nspecies1 = input('What is species 1? ')\nspecies2 = input('What is species 2? ')\n```\n\nHere we've called our variables `genus`, `species1` and `species2`, to describe what we store in them!\n\nThe second step is to print out the messages, using strings and the contents of those variables:\n\n```\nprint(f'The first species is {genus} {species1}.')\nprint(f'The second species is {genus} {species2}.')\n```\n\nAnd that's it! So we can now piece these two steps together to form the final solution.\n"
    },
    {
      "language":0,
      "title":"Scientific name generator",
      "notes":"#markdown\nTo solve this question, we'll use `input` as we did in the last few questions, except we'll need to read in two different bits of information: the genus and the species\n\n```norun;\ngenus = input('What is the genus? ')\nspecies = input('What is the species? ')\n```\n\nHere we've called our variables `genus` and `species`, to describe what we store in them!\n\nThe second step is to print out the message, using strings and the contents of those variables. Since we are adding the variable into the string, we need to use the `f` to indicate it is a format string:\n\n```norun;\nprint(f'The scientific name is {genus} {species}!')\n```\n\nAnd that's it! So we can now piece these two steps together to form the final solution.\n\n",
      "updated_at":"2018-02-23T02:18:15.604759+00:00",
      "label":"aca-py3-bio-scientific-name",
      "content":"#markdown\nScientific names of an organism often consists of the *genus* and *species* joined together, with a space in between.\n\nWrite a program that asks for each, then prints out the scientific name!\n\nHere is an example:\n\n```lang:py3;terminal;eg:none;\nWhat is the genus? @@@Homo\nWhat is the species? @@@sapiens\nThe scientific name is Homo sapiens!\n```\n\nHere's another example:\n\n```lang:py3;terminal;eg:none;\nWhat is the genus? @@@Setonix\nWhat is the species? @@@brachyurus\nThe scientific name is Stonix brachyurus!\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nTo solve this question, we'll use `input` as we did in the last few questions, except we'll need to read in two different bits of information: the genus and the species\n\n```norun;\ngenus = input('What is the genus? ')\nspecies = input('What is the species? ')\n```\n\nHere we've called our variables `genus` and `species`, to describe what we store in them!\n\nThe second step is to print out the message, using strings and the contents of those variables. Since we are adding the variable into the string, we need to use the `f` to indicate it is a format string:\n\n```norun;\nprint(f'The scientific name is {genus} {species}!')\n```\n\nAnd that's it! So we can now piece these two steps together to form the final solution.\n"
    },
    {
      "language":20,
      "title":"Name an animal",
      "notes":"#markdown\nGood job on getting that right. \n\nEach of the incorrect answers demonstrates a common mistake people make when using `input` for the first time, so don't feel bad if you didn't get it right first time. Just remember that:\n\n* you should always assign `lang:py3;input` to a variable so you can then use that variable in your program; and\n* the text you put into the `lang:py3;input` function is the prompt value, not the value you want to store.",
      "updated_at":"2018-02-23T02:24:17.674608+00:00",
      "label":"aca-choices-bio-input-animalia",
      "content":"#markdown\n\n## Which of the following programs would correctly generate both outputs shown below?\n\n```lang:py3;eg:none;terminal\nName an animal: @@@cassowary\nThe cassowary is a member of the Animalia kingdom.\n```\n\n```lang:py3;eg:none;terminal\nName an animal: @@@emu\nThe emu is a member of the Animalia kingdom.\n```",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":2},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none\\\\nanimal = input(\\\\\\\"cassowary\\\\\\\")\\\\nprint(f\\\\\\\"The {animal} is a member of the Animalia kingdom.\\\\\\\")\\\\n```\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none\\\\ncassowary = input(\\\\\\\"Name an animal: \\\\\\\")\\\\nprint(f\\\\\\\"The cassowary is a member of the Animalia kingdom.\\\\\\\")\\\\n```\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none\\\\nanimal = input(\\\\\\\"Name an animal: \\\\\\\")\\\\nprint(f\\\\\\\"The {animal} is a member of the Animalia kingdom.\\\\\\\")\\\\n```\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none\\\\ninput(\\\\\\\"Name an animal: \\\\\\\")\\\\nprint(f\\\\\\\"The {input} is a member of the Animalia kingdom.\\\\\\\")\\\\n```\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[
        "input",
        "print",
        "variables"
      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none\\nanimal = input(\\\"cassowary\\\")\\nprint(f\\\"The {animal} is a member of the Animalia kingdom.\\\")\\n```\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"prompt-error\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none\\ncassowary = input(\\\"Name an animal: \\\")\\nprint(f\\\"The cassowary is a member of the Animalia kingdom.\\\")\\n```\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"variable-as-value\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none\\nanimal = input(\\\"Name an animal: \\\")\\nprint(f\\\"The {animal} is a member of the Animalia kingdom.\\\")\\n```\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"animalia-kingdom\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none\\ninput(\\\"Name an animal: \\\")\\nprint(f\\\"The {input} is a member of the Animalia kingdom.\\\")\\n```\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"no-input-var\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 2\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nAll of the incorrect answers are common mistakes made by students. \n\nWhen checking student code, always make sure that:\n* you should always assign `lang:py3;input` to a variable so you can then use that variable in your program; and\n* the text you put into the `lang:py3;input` function is the prompt value, not the value you want to store.\n* the text has been stored in a variable, which should not be inside the quotes used for delimiting a string."
    },
    {
      "language":20,
      "title":"Scientific names",
      "notes":"<p>The relationship between scientific name and the taxonomic ranks of Genus and Species is consistent for all biological species!<\/p>",
      "updated_at":"2018-02-22T23:57:17.323501+00:00",
      "label":"aca-choices-bio-scientific-names",
      "content":"#markdown\n\n\n## The scientific name of a species is made up of its...",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":1},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nGenus and Species\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nFamily and Species\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nFamily and Genus\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nOrder and Species\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"#markdown\\n\\nGenus and Species\",\n      \"is_correct\": true,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"GenusSpecies\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nFamily and Species\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"FamilySpecies\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nFamily and Genus\",\n      \"is_correct\": false,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"FamilyGenus\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nOrder and Species\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"OrderSpecies\"\n    }\n  ],\n  \"answers\": [\n    \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 1\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":""
    },
    {
      "language":20,
      "title":"Do you own a Felis catus?",
      "notes":"#markdown\nGreat work! The incorrect answers all had minor errors like missing quotes around strings, parentheses in print functions and incorrect variable names. They might seem annoying, but ocmputers rely on our instructions being exactly right to execute our code correctly.",
      "updated_at":"2018-02-23T02:28:34.630161+00:00",
      "label":"aca-choices-bio-felis-catus-felidae",
      "content":"#markdown\n\n## Which of the following code snippets will produce the output shown below?\n\n```lang:py3;eg:none;terminal\nThe scientific name of the common house cat is Felis catus.\nIt belongs to the Family Felidae.",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":2},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none\\\\nscientific_name = Felis catus\\\\nfamily = \\\\\\\"Felidae\\\\\\\"\\\\nprint(f\\\\\\\"The scientific name of the common house cat is {scientific_name}.\\\\\\\")\\\\nprint(f\\\\\\\"It belongs to the Family {family}.\\\\\\\")\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none\\\\nscientific_name = \\\\\\\"Felis catus\\\\\\\"\\\\nfamily = \\\\\\\"Felidae\\\\\\\"\\\\nprint(f\\\\\\\"The scientific name of the common house cat is {scientific}.\\\\\\\")\\\\nprint(f\\\\\\\"It belongs to the Family {family}.\\\\\\\")\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none\\\\nscientific_name = \\\\\\\"Felis catus\\\\\\\"\\\\nfamily = \\\\\\\"Felidae\\\\\\\"\\\\nprint(f\\\\\\\"The scientific name of the common house cat is {scientific_name}.\\\\\\\")\\\\nprint(f\\\\\\\"It belongs to the Family {family}.\\\\\\\")\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none\\\\nscientific_name = \\\\\\\"Felis catus\\\\\\\"\\\\nfamily = \\\\\\\"Felidae\\\\\\\"\\\\nprint f\\\\\\\"The scientific name of the common house cat is {scientific_name}.\\\\\\\"\\\\nprint f\\\\\\\"It belongs to the Family {family}.\\\\\\\"\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[
        "print",
        "variables"
      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none\\nscientific_name = Felis catus\\nfamily = \\\"Felidae\\\"\\nprint(f\\\"The scientific name of the common house cat is {scientific_name}.\\\")\\nprint(f\\\"It belongs to the Family {family}.\\\")\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"no-delimiters\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none\\nscientific_name = \\\"Felis catus\\\"\\nfamily = \\\"Felidae\\\"\\nprint(f\\\"The scientific name of the common house cat is {scientific}.\\\")\\nprint(f\\\"It belongs to the Family {family}.\\\")\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"incorrect-variable\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none\\nscientific_name = \\\"Felis catus\\\"\\nfamily = \\\"Felidae\\\"\\nprint(f\\\"The scientific name of the common house cat is {scientific_name}.\\\")\\nprint(f\\\"It belongs to the Family {family}.\\\")\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"felis-catus\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none\\nscientific_name = \\\"Felis catus\\\"\\nfamily = \\\"Felidae\\\"\\nprint f\\\"The scientific name of the common house cat is {scientific_name}.\\\"\\nprint f\\\"It belongs to the Family {family}.\\\"\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"no-parens\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 2\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThis question checks that students are being careful with how they write their code, checking for common typos and mistakes made by beginning programmers."
    },
    {
      "language":20,
      "title":"Taxonomic rank",
      "notes":"<p>You'll see these terms used in questions and notes throughout this challenge, and understanding the heirarchy helps you better understand which animals are related.<\/p>",
      "updated_at":"2018-04-02T21:59:02.820765+00:00",
      "label":"aca-choices-bio-taxonomic-rank",
      "content":"#markdown\n\n\n## The correct ordering of rank (from highest to lowest) in the taxonomic hierarchy is...",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":0},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n1. Kingdom\\\\n2. Phylum\\\\n3. Class\\\\n4. Order\\\\n5. Family\\\\n6. Genus\\\\n7. Species\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n1. Kingdom\\\\n2. Phylum\\\\n3. Order\\\\n4. Class\\\\n5. Family\\\\n6. Genus\\\\n7. Species\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n1. Kingdom\\\\n2. Class\\\\n3. Family\\\\n4. Phylum\\\\n5. Genus\\\\n6. Order\\\\n7. Species\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n1. Kingdom\\\\n2. Class\\\\n3. Order\\\\n4. Phylum\\\\n5. Family\\\\n6. Genus\\\\n7. Species\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"#markdown\\n\\n1. Kingdom\\n2. Phylum\\n3. Class\\n4. Order\\n5. Family\\n6. Genus\\n7. Species\",\n      \"is_correct\": true,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"option1\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n1. Kingdom\\n2. Phylum\\n3. Order\\n4. Class\\n5. Family\\n6. Genus\\n7. Species\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"option2\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n1. Kingdom\\n2. Class\\n3. Family\\n4. Phylum\\n5. Genus\\n6. Order\\n7. Species\",\n      \"is_correct\": false,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"option3\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n1. Kingdom\\n2. Class\\n3. Order\\n4. Phylum\\n5. Family\\n6. Genus\\n7. Species\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"option4\"\n    }\n  ],\n  \"answers\": [\n    \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 0\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":""
    },
    {
      "language":0,
      "title":"What we saw at the zoo",
      "notes":"#markdown\n\n<p>This solution is very similar to the last question, and the discussion of <code data-lang=\"py3\">input<\/code> in the notes.<\/p>\n\n<p>Here, the first step is to use the <code data-lang=\"py3\">input<\/code> function to ask what we saw:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln1\"><code data-lang=\"py3\">things = input(\"What did we see? \")\n<\/code><\/pre>\n\n<p>\n  This prints out <code data-lang=\"out\">What did we see? <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <code data-lang=\"py3\">things<\/code>.\n<\/p>\n\n<p>The second step was to print out <code data-lang=\"out\">We saw &lt;things&gt; at the zoo!<\/code> , replacing <code data-lang=\"py3\">things<\/code> with whatever the user typed in. To do this you needed to print out a string and whatever was read in from the user. <\/p>\n\n<p>When joining the variable to the other output text, making sure you had your spaces in the right place was important to match the required output exactly!<\/p>",
      "updated_at":"2018-02-23T01:56:51.827615+00:00",
      "label":"aca-py3-bio-join-strings-zoo",
      "content":"#markdown\nThere are lots of different things to see at the zoo and you want to remember all the things you saw! Write a program that prints out a sentence you can copy and paste into your diary for any of the things you saw.\n\n```eg:none;terminal\nWhat did we see? @@@elephants\nWe saw elephants at the zoo!\n\n```\n\nYour program should work with any friend's name:\n\n```eg:none;terminal\nWhat did we see? @@@wombats\nWe saw wombats at the zoo!\n\n```\n\nWhen you run your program, it should wait for you to type in what you saw, using `input`, then use the same thing that the user typed in when printing the message.\n\n> ## Get the prompt string right!\n> Make sure you give `input` the same prompt message in the example above, especially **the space after the question mark**.\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "variables"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\n\n<p>This solution is very similar to the last question, and the discussion of <code data-lang=\"py3\">input<\/code> in the notes.<\/p>\n\n<p>Here, the first step is to use the <code data-lang=\"py3\">input<\/code> function to ask what we saw:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln1\"><code data-lang=\"py3\">things = input(\"What did we see? \")\n<\/code><\/pre>\n\n<p>\n  This prints out <code data-lang=\"out\">What did we see? <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <code data-lang=\"py3\">things<\/code>.\n<\/p>\n\n<p>The second step was to print out <code data-lang=\"out\">We saw &lt;things&gt; at the zoo!<\/code> , replacing <code data-lang=\"py3\">things<\/code> with whatever the user typed in. To do this you needed to print out a string and whatever was read in from the user. <\/p>\n\n<p>When joining the variable to the other output text, making sure you had your spaces in the right place was important to match the required output exactly!<\/p>"
    },
    {
      "language":0,
      "title":"The animal is...",
      "notes":"<p>This solution is very similar to the discussion of <code data-lang=\"py3\">input<\/code> in the notes.<\/p>\n\n<p>Here, the first step is to use the <code data-lang=\"py3\">input<\/code> function to ask for the animal:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln1\"><code data-lang=\"py3\">animal = input('Animal: ')\n<\/code><\/pre>\n\n<p>This prints out <code data-lang=\"out\">Animal: <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <code data-lang=\"py3\">animal<\/code>.<\/p>\n\n<p>The second step was to print out <code data-lang=\"out\">The animal you wrote was: <\/code> using the animal's name. To do this you needed to print out a both a string and the <code data-lang=\"py3\">animal<\/code> that was read in from the user. <\/p>\n\n<p>Try running this to see how we built it up:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln\"><code data-lang=\"py3\">\nanimal = 'Pig'\nprint(f'The animal you wrote was: {animal}')\n<\/code><\/pre>\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>\n",
      "updated_at":"2018-02-23T02:08:30.915825+00:00",
      "label":"aca-py3-bio-the-animal-is",
      "content":"#markdown\nWrite a program to take an input species, and say it back to us:\n\n```lang:py3;eg:none;terminal\nAnimal: @@@human\nThe animal you wrote was: human\n```\n\nYour program should work with any animal name:\n\n```lang:py3;eg:none;terminal\nAnimal: @@@pig\nThe animal you wrote was: pig\n```\n\nWhen you run your program, it should wait for you to type in the animal name, using `input`, then use the same name that the user typed in when printing the message.\n\n> ## Get the prompt string right!\n> Make sure you give `input` the same prompt message in the example above, especially **the space after the colon**.\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "variables"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>This solution is very similar to the discussion of <code data-lang=\"py3\">input<\/code> in the notes.<\/p>\n\n<p>Here, the first step is to use the <code data-lang=\"py3\">input<\/code> function to ask for the animal:<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln1\"><code data-lang=\"py3\">animal = input('Animal: ')\n<\/code><\/pre>\n\n<p>This prints out <code data-lang=\"out\">Animal: <\/code> and waits for the user to type something in. Once they have, it is saved in the variable <code data-lang=\"py3\">animal<\/code>.<\/p>\n\n<p>The second step was to print out <code data-lang=\"out\">The animal you wrote was: <\/code> using the animal's name. To do this you needed to print out a both a string and the <code data-lang=\"py3\">animal<\/code> that was read in from the user. <\/p>\n\n<p>Try running this to see how we built it up:<\/p>\n<pre class=\"js-editor\" data-eg-id=\"nice-to-meet-you-soln\"><code data-lang=\"py3\">\nanimal = 'Pig'\nprint(f'The animal you wrote was: {animal}')\n<\/code><\/pre>\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>\n"
    },
    {
      "language":0,
      "title":"Biology classifier",
      "notes":"#markdown\n\nThe sample solution shows the alorithm you would use to evenly split the animals in half at each branch in your algorithm. The only feature that splits them into two pairs at the first step is whether or not the animal has Scales, so that should be our first question and condition:\n\n```norun\nscales = input(\"Scales: \")\nif scales == \"y\":\n```\n\nThe animals with scales are the Murray cod and the frilled-neck lizard, so now we need a feature that separates those. Since fish don't have claws but lizards do, we use that to identify each animal:\n\n```norun\neg:soln-input-scales\nscales = input(\"Scales: \")\nif scales == \"y\":\n  claws = input(\"Claws: \")\n  if claws == \"y\":\n    print(\"The species is Chlamydosaurus kingii.\")\n    print(\"Its common name is frilled-neck lizard.\")\n  else:\n    print(\"The species is Maccullochella peelii.\")\n    print(\"Its common name is Murray cod.\")\n```\n\nNotice the indentation here - we want to print both the scientific name and common name as indicated by the question, so we need two print statements, and each needs to be indented so they are inside the correct code block.\n\nWe then need to deal with our remaining animals - the kookaburra and koala - inside an `else` statement from the first question. The distinguishing feature for them is that the koala has fur (the kookaburra has feathers):\n\n```norun\neg:soln-input-scales\nscales = input(\"Scales: \")\nif scales == \"y\":\n  claws = input(\"Claws: \")\n  if claws == \"y\":\n    print(\"The species is Chlamydosaurus kingii.\")\n    print(\"Its common name is frilled-neck lizard.\")\n  else:\n    print(\"The species is Maccullochella peelii.\")\n    print(\"Its common name is Murray cod.\")\nelse:\n  fur = input(\"Fur: \")\n```\n\nFrom there, we add another `if-else`, which gets us to our final solution:\n",
      "updated_at":"2018-03-17T11:27:56.965630+00:00",
      "label":"aca-py3-bio-classifier-mini",
      "content":"#markdown\nNow that you've got a dichotomous tree worked out, the final step is to write the code that classifies the animals for us. The program will use features and questions you've identified in your algorithm to print out the scientific and common name of the animal selected.\n\nThe program will operate according to the following rules:\n\n* The input prompts specify just the feature being checked, followed by a colon, e.g. `lang:out;Fur:` or `lang:out;Eggs:`\n* Answers will be `\"y\"` or `\"n\"` for all features\n* Only features from the [trading cards](https:\/\/aca.edu.au\/public\/resources\/classifier-python-mini.pdf) are allowed\n* The order of the questions does not matter as long as the correct answer is found\n* You don't have to use every feature if it is not required\n* The same program will work for every animal in the data\n\nOne example that correctly identifies a koala might be:\n\n```eg:none;terminal\nScales: @@@n\nClaws: @@@y\nFur: @@@y\nThe species is Phascolarctos cinereus.\nIts common name is koala.\n\n```\n\nIt does not matter how many questions or features you use to identify each animal as long as you identify each one *uniquely* and *correctly*. **Challenge yourself and see if you can write a program that only asks two questions!**\n\nOnce the animal is identified, you should immediately print its scientific and common names to the screen. You must format the output of your program as shown in the example above.\n\n> ## Use your algorithm\n> If you've worked through the activities in each of the slides up to this point, you should be able to follow the same process we did in earlier modules to convert your algorithm into code.\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\n\nThe sample solution shows the alorithm you would use to evenly split the animals in half at each branch in your algorithm. The only feature that splits them into two pairs at the first step is whether or not the animal has Scales, so that should be our first question and condition:\n\n```norun\nscales = input(\"Scales: \")\nif scales == \"y\":\n```\n\nThe animals with scales are the Murray cod and the frilled-neck lizard, so now we need a feature that separates those. Since fish don't have claws but lizards do, we use that to identify each animal:\n\n```norun\neg:soln-input-scales\nscales = input(\"Scales: \")\nif scales == \"y\":\n  claws = input(\"Claws: \")\n  if claws == \"y\":\n    print(\"The species is Chlamydosaurus kingii.\")\n    print(\"Its common name is frilled-neck lizard.\")\n  else:\n    print(\"The species is Maccullochella peelii.\")\n    print(\"Its common name is Murray cod.\")\n```\n\nNotice the indentation here - we want to print both the scientific name and common name as indicated by the question, so we need two print statements, and each needs to be indented so they are inside the correct code block.\n\nWe then need to deal with our remaining animals - the kookaburra and koala - inside an `else` statement from the first question. The distinguishing feature for them is that the koala has fur (the kookaburra has feathers):\n\n```norun\neg:soln-input-scales\nscales = input(\"Scales: \")\nif scales == \"y\":\n  claws = input(\"Claws: \")\n  if claws == \"y\":\n    print(\"The species is Chlamydosaurus kingii.\")\n    print(\"Its common name is frilled-neck lizard.\")\n  else:\n    print(\"The species is Maccullochella peelii.\")\n    print(\"Its common name is Murray cod.\")\nelse:\n  fur = input(\"Fur: \")\n```\n\nFrom there, we add another `if-else`, which gets us to our final solution:\n"
    },
    {
      "language":20,
      "title":"Animal features",
      "notes":"#markdown\nExcellent! The features of each animal have been shown on the cards, and this table provides an easy to see summary of the ones that are common or distinct between animals.",
      "updated_at":"2018-03-17T11:28:07.806539+00:00",
      "label":"aca-choices-bio-classification-matrix-mini",
      "content":"#markdown\n\n## Using the information provided in the [set of trading cards](https:\/\/aca.edu.au\/public\/resources\/classifier-python-mini.pdf), identify the features of each animal that will be used for classification.\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":2,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":2},\\\"boolean_table\\\":{\\\"columns\\\":[{\\\"name\\\":\\\"Fur\\\",\\\"uuid\\\":\\\"50048478-a425-46c4-b4a9-0ebe3504def4\\\"},{\\\"name\\\":\\\"Eggs\\\",\\\"uuid\\\":\\\"6f4e61e6-dde8-4fb2-bada-1a5d93d96b75\\\"},{\\\"name\\\":\\\"Claws\\\",\\\"uuid\\\":\\\"0bec5744-73c3-484f-bb82-247aa8853a1f\\\"},{\\\"name\\\":\\\"Scales\\\",\\\"uuid\\\":\\\"025bb1a2-a518-4849-9789-052d41c7d550\\\"}],\\\"rows\\\":[{\\\"uuid\\\":\\\"cbbe2312-4f57-44cc-bd6f-9a86dd0ec227\\\",\\\"name\\\":\\\"Koala\\\"},{\\\"uuid\\\":\\\"e4ebec0f-036b-4fae-92a4-ca2019edfcd9\\\",\\\"name\\\":\\\"Frilled-neck Lizard\\\"},{\\\"uuid\\\":\\\"bc0af7d6-3b3b-4b52-a909-71a4b171c53e\\\",\\\"name\\\":\\\"Murray Cod\\\"},{\\\"uuid\\\":\\\"38c268d2-9acd-4365-9dc5-21988d21fe09\\\",\\\"name\\\":\\\"Laughing Kookaburra\\\"}]}}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"rows\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"{\n  \"type\": 2,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [],\n  \"answers\": [],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 2\n  },\n  \"boolean_table\": {\n    \"rows\": [\n      {\n        \"values\": [\n          true,\n          false,\n          true,\n          false\n        ],\n        \"name\": \"Koala\",\n        \"uuid\": \"cbbe2312-4f57-44cc-bd6f-9a86dd0ec227\"\n      },\n      {\n        \"values\": [\n          false,\n          true,\n          true,\n          true\n        ],\n        \"name\": \"Frilled-neck Lizard\",\n        \"uuid\": \"e4ebec0f-036b-4fae-92a4-ca2019edfcd9\"\n      },\n      {\n        \"values\": [\n          false,\n          true,\n          false,\n          true\n        ],\n        \"name\": \"Murray Cod\",\n        \"uuid\": \"bc0af7d6-3b3b-4b52-a909-71a4b171c53e\"\n      },\n      {\n        \"values\": [\n          false,\n          true,\n          true,\n          false\n        ],\n        \"name\": \"Laughing Kookaburra\",\n        \"uuid\": \"38c268d2-9acd-4365-9dc5-21988d21fe09\"\n      }\n    ],\n    \"columns\": [\n      {\n        \"name\": \"Fur\",\n        \"uuid\": \"50048478-a425-46c4-b4a9-0ebe3504def4\"\n      },\n      {\n        \"name\": \"Eggs\",\n        \"uuid\": \"6f4e61e6-dde8-4fb2-bada-1a5d93d96b75\"\n      },\n      {\n        \"name\": \"Claws\",\n        \"uuid\": \"0bec5744-73c3-484f-bb82-247aa8853a1f\"\n      },\n      {\n        \"name\": \"Scales\",\n        \"uuid\": \"025bb1a2-a518-4849-9789-052d41c7d550\"\n      }\n    ]\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nA correct answer on this question gives students a simple, table reference (another representation of the data from the cards) they can use to construct the algorithm they'll use for their classifier.\n\nThey should be able to identify features that can be used for their dichotomous keys."
    },
    {
      "language":20,
      "title":"The study of living organisms",
      "notes":"#markdown\nGreat work! \n\nThe `branch` variable is being used to store the correct branch of science. It is then added to the front of the rest of the message using the `{}` inside a format string, and output to the screen with the `lang:py3;print` function.",
      "updated_at":"2018-02-23T02:15:01.022252+00:00",
      "label":"aca-choices-bio-living-orgs",
      "content":"#markdown\n\n## Which of the following code snippets will correctly print the message below on the screen?\n\n```lang:py3;eg:none;terminal\nBiology is the study of living organisms.",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":2},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none\\\\nbranch = \\\\\\\"Biology\\\\\\\"\\\\nprint(f\\\\\\\"branch is the study of living organisms.\\\\\\\")\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none\\\\nbranch = \\\\\\\"Biology\\\\\\\"\\\\nprint(f\\\\\\\"Physics is the study of living organisms.\\\\\\\")\\\\n\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none\\\\nbranch = \\\\\\\"Biology\\\\\\\"\\\\nprint(f\\\\\\\"{branch} is the study of living organisms.\\\\\\\")\\\\n\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none\\\\nbranch = \\\\\\\"Biology\\\\\\\"\\\\nprint(f\\\\\\\"{branch}is the study of living organisms.\\\\\\\")\\\\n\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[
        "print",
        "variables"
      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none\\nbranch = \\\"Biology\\\"\\nprint(f\\\"branch is the study of living organisms.\\\")\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"no-braces\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none\\nbranch = \\\"Biology\\\"\\nprint(f\\\"Physics is the study of living organisms.\\\")\\n\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"unused-variable\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none\\nbranch = \\\"Biology\\\"\\nprint(f\\\"{branch} is the study of living organisms.\\\")\\n\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"biology\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none\\nbranch = \\\"Biology\\\"\\nprint(f\\\"{branch}is the study of living organisms.\\\")\\n\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"incorrect-space\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 2\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThis question reviews everything from this module - strings, `{}` in format strings, variables and the `lang:py3;print` function."
    },
    {
      "language":0,
      "title":"Do you know Mr DNA?",
      "notes":"<p>This solution is a way of trying some more complicated text in a print function. Great work getting it out!<\/p>",
      "updated_at":"2018-03-05T23:30:53.645212+00:00",
      "label":"aca-py3-bio-mr-dna",
      "content":"#markdown\nIn [Jurassic Park](http:\/\/www.imdb.com\/title\/tt0107290\/), the park scientists were able to re-create extinct animals using their [DNA](https:\/\/en.wikipedia.org\/wiki\/DNA).\n\n[Scientists don't believe this would actually be possible](http:\/\/www.iflscience.com\/technology\/could-jurassic-park-ever-come-true\/), but DNA does tell us how living things have changed over time.\n\n![DNA has a double-helix structure and contains your unique genetic code](https:\/\/groklearning-cdn.com\/problems\/Fy8wBtQDoe5inCMvvAsUGZ\/dna_1_7.jpg)\n\nIn the movie there is an educational video to explain how scientists used DNA to bring dinosaurs back to life. The video introduces Mr. DNA with the following phrase:\n\n```lang:py3;terminal;eg:none;\nOh, Mr. DNA! Where did you come from?\n\n```\n\nWrite a program that prints this same welcome to the screen.\n\nRemember that the marker is really picky about punctuation and spelling.\n\n> ## You don't have to type this out!\n> Remember what we said on the last slide about making sure your question meets the requirements exactly?",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "strings",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>This solution is a way of trying some more complicated text in a print function.<\/p>\n\n<p>The longer and more complicated text also serves as incentive to copy\/paste the expected output, reducing the likelihood students will fail tests due to mismatches of capitalisation or punctuation.<\/p>"
    },
    {
      "language":0,
      "title":"Non-living things",
      "notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <code data-lang=\"py3\">non_living<\/code> to be <code data-lang=\"str\">rock<\/code> instead of <code data-lang=\"str\">zombie<\/code>, run it to check it works, and then mark it.<\/p>",
      "updated_at":"2018-03-05T23:31:17.893366+00:00",
      "label":"aca-py3-bio-non-living",
      "content":"#markdown\nIn Biology, there are three categories we can use to classify all things\n\n* living - alive\n* non-living - was never alive\n* dead - no longer alive.\n\nThere are lots of important non-living things, like sunlight, water and air. These are things that enable life to exist, but are not living things themselves.\n\nWe've put a program in the editor that has a variable, `non_living`, that contains information to be printed.\n\n\nClick <button type=\"button\" style=\"\n                                   display: inline-block;\n                                   background: #f0f0f0;\n                                   border: none;\n                                   overflow: visible;\n                                   color: #1b79bf;\n                                   height: 46px;\n                                   width: 40px;\n                                   text-align: center;\n                                   font-size: 12px;\n                                   min-width: 40px;\n                                   padding: 7px 5px 5px 3px;\n                                   outline: 0 !important;\">\n      <span class=\"icon icon-play4 hide-shell-icon\" style=\"font-size: 18px;\"><\/span><br>\n      <span class=\"icon icon-cog shell-icon\" style=\"display: none\"><\/span>\n      <span class=\"title\" style=\"font-size: 12px\">Run<\/span>\n    <\/button> to see what it does.\n\n**Mistake!** The program is about a `zombie`, which is a fictional character that doesn't exist, and wouldn't be biologically correct even if it did. \n\n**Update the program** to bring it back to reality to work for a different object, a `rock`.\n  \nYour updated program should print the message:\n\n```lang:py3;eg:none;terminal\nA rock was never alive.\nIt's neither living nor dead, a rock is non-living.\n\n```\n\n> ## Only change the `non_living` variable!\n> You just need to change the value of `non_living` to be `rock` instead of `zombie`, run it to check it works, and then mark it.\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"non_living = 'zombie'\\nprint(f'A {non_living} was never alive.')\\nprint(f\\\"It's neither living nor dead, a {non_living} is non-living.\\\")\\n\",\"path\":\"program.py\",\"is_static\":false}]",
      "concepts":[
        "print",
        "variables"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <code data-lang=\"py3\">non_living<\/code> to be <code data-lang=\"str\">rock<\/code> instead of <code data-lang=\"str\">zombie<\/code>, run it to check it works, and then mark it.<\/p>\n\n<p>Again, it could be solved be rewriting the code to print each string explicitly, but discourage this solution and emphasise the importance of using variables.<\/p>"
    },
    {
      "language":0,
      "title":"Organisms",
      "notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <code data-lang=\"py3\">remember<\/code> to be <code data-lang=\"str\">Classifying organisms is taxonomy.<\/code> instead of <code data-lang=\"str\">An organism is a living thing.<\/code>, run it to check it works, and then mark it.<\/p>",
      "updated_at":"2018-03-05T04:10:03.204440+00:00",
      "label":"aca-py3-bio-repeat-organisms",
      "content":"#markdown\nSometimes, it's hard to remember a fact or statement. One way to do it is to repeat it multiple times so that you can remember!\n\nWe've written a program in the editor that repeats a statement.\n\nClick  <button type=\"button\" style=\"\n                                   display: inline-block;\n                                   background: #f0f0f0;\n                                   border: none;\n                                   overflow: visible;\n                                   color: #1b79bf;\n                                   height: 46px;\n                                   width: 40px;\n                                   text-align: center;\n                                   font-size: 12px;\n                                   min-width: 40px;\n                                   padding: 7px 5px 5px 3px;\n                                   outline: 0 !important;\">\n      <span class=\"icon icon-play4 hide-shell-icon\" style=\"font-size: 18px;\"><\/span><br>\n      <span class=\"icon icon-cog shell-icon\" style=\"display: none\"><\/span>\n      <span class=\"title\" style=\"font-size: 12px\">Run<\/span>\n    <\/button>\nto see what it does.\n\nThe statement is stored in a variable called `remember`.\n\n**Update this program so that it works for a different remember:** `'Classifying organisms is taxonomy.'`\n  Your updated program should print the message:\n\n```lang:py3;terminal;eg:none;\nClassifying organisms is taxonomy.\nClassifying organisms is taxonomy.\nClassifying organisms is taxonomy.\nClassifying organisms is taxonomy.\nClassifying organisms is taxonomy.\nI will remember! Classifying organisms is taxonomy.\n\n```\n\n> ## Only change the `remember` variable!\n> You just need to change the value of `remember` to be `'Classifying organisms is taxonomy.'` instead of `'An organism is a living thing.'`, run it to check it works, and then mark it.\n\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"content\":\"remember = 'An organism is a living thing.'\\nprint(remember)\\nprint(remember)\\nprint(remember)\\nprint(remember)\\nprint(remember)\\nprint(f'I will remember! {remember}')\",\"path\":\"program.py\",\"is_static\":false}]",
      "concepts":[
        "print",
        "variables"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <code data-lang=\"py3\">remember<\/code> to be <code data-lang=\"str\">Classifying organisms is taxonomy.<\/code> instead of <code data-lang=\"str\">An organism is a living thing.<\/code>, run it to check it works, and then mark it.<\/p>\n\n<p>It is possible for students to answer this question by printing the text out without any variables (by typing each string in separately), but if you do see this you should try to encourage them to this solution. Understanding variables is absolutely critical to being able to solve more challenging problems later on.<\/p>"
    },
    {
      "language":20,
      "title":"Classification",
      "notes":"<p>You'll be learning a heap of programming and biology terms throughout this challenge, so understanding what terms like *Taxonomy* means will help you understand what each problem wants you to solve.<\/p>",
      "updated_at":"2018-02-22T23:45:15.673027+00:00",
      "label":"aca-choices-bio-classification-intro",
      "content":"#markdown\n\n\n## The classification of organisms is know as...",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":1},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nOrganising\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nCategorising\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nTaxonomy\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nLabelling\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"#markdown\\n\\nOrganising\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"organising\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nCategorising\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"categorising\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nTaxonomy\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"taxonomy\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nLabelling\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"labelling\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 1\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>Throughout the challenge students will have their understanding of terminology and simple concepts tested through multiple-choice questions. These are intended to serve as reinforcement of ideas, and to help consolidate understanding of both biology and programming concepts.<\/p>"
    },
    {
      "language":0,
      "title":"Hello, Biology!",
      "notes":"<p>This problem was designed to be simple, but there were a few things to trip you up. Common issues were:<\/p>\n<ul>\n  <li>not realising that you had to submit a <em>complete program<\/em>, with a <code data-lang=\"py3\">print<\/code> function in it;<\/li>\n  <li>not <strong>reading the question carefully!<\/strong> and getting the output (including capitalisation, spaces and punctuation) exactly right.  This kind of attention to detail is critical to programming.<\/li>\n<\/ul>\n",
      "updated_at":"2018-02-22T23:26:04.640347+00:00",
      "label":"aca-py3-bio-hello-biology",
      "content":"#markdown\nWrite a program that prints out the message:\n\n```lang:py3;terminal;eg:none;\nHello, Biology!\n```\n\nIf you're not sure how to start writing the program, go back a few slides and take another look at the notes.\n\n<aside class=\"info\">\n  <h2>How do I submit?<\/h2>\n  <ol>\n    <li><p>Write your program (in the <code data-lang=\"txt\">program.py<\/code> file) in the editor<br>(large panel on the right);<\/p><\/li>\n    <li><p>Run your program by clicking \n      <button type=\"button\" style=\"\n                                   display: inline-block;\n                                   background: #f0f0f0;\n                                   border: none;\n                                   overflow: visible;\n                                   color: #1b79bf;\n                                   height: 46px;\n                                   width: 40px;\n                                   text-align: center;\n                                   font-size: 12px;\n                                   min-width: 40px;\n                                   padding: 7px 5px 5px 3px;\n                                   outline: 0 !important;\">\n      <span class=\"icon icon-play4 hide-shell-icon\" style=\"font-size: 18px;\"><\/span><br>\n      <span class=\"icon icon-cog shell-icon\" style=\"display: none\"><\/span>\n      <span class=\"title\" style=\"font-size: 12px\">Run<\/span>\n    <\/button> in the top right-hand menu bar.\n    The output will appear below your code. <strong>Check the program works correctly!<\/strong><\/p><\/li>\n    <li><p>Mark your program by clicking\n      <button type=\"button\" style=\"\n                                   display: inline-block;\n                                   background: #f0f0f0;\n                                   border: none;\n                                   overflow: visible;\n                                   color: #fb4251;\n                                   height: 46px;\n                                   width: 40px;\n                                   text-align: center;\n                                   font-size: 12px;\n                                   min-width: 40px;\n                                   padding: 7px 5px 5px 3px;\n                                   outline: 0 !important;\">\n      <span class=\"icon icon-star-full hide-marking-icon\" style=\"font-size: 18px;\"><\/span><br>\n      <span class=\"icon icon-cog marking-icon\" style=\"display: none\"><\/span>\n      <span class=\"title\" style=\"font-size: 12px\">Mark<\/span>\n      <\/button> and we will automatically check if your program is correct, and if not, give you some hints to fix it up.<\/p>\n    <\/li>\n  <\/ol>\n<\/aside>",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"exportable\":true,\"unrenamable\":true,\"content\":\"from grok.private.annotate import Annotate, a_or_an\\nimport re\\n\\nWORDS = ['hello', 'world', 'hi', 'there', 'howdy']\\n\\nDEFAULT_EXPLAIN = \\\"\\\"\\\"\\nThe Python interpreter stopped running your code because of {} `lang:err;{}`.\\n\\nThe *traceback* shows where it stopped (highlighted above in red).\\n\\\"\\\"\\\"\\n\\nSYNTAX_EXPLAIN = \\\"\\\"\\\"\\nA `lang:err;SyntaxError` means the Python interpreter could not understand your code.  Unlike people, the interpreter can't handle bad spelling or grammar at all, and so it stopped running your code.\\n\\nThe *traceback* shows where it stopped (highlighted above in red).\\n\\\"\\\"\\\".lstrip()\\n\\nEOL_EXPLAIN = SYNTAX_EXPLAIN + \\\"\\\"\\\"\\nThis error means Python reached the *end of line* (EOL) before it found another quote to end the string.\\n\\n**Maybe you're missing an end quote or used the wrong one?**\\n\\\"\\\"\\\"\\n\\nEOF_EXPLAIN = SYNTAX_EXPLAIN + \\\"\\\"\\\"\\nThis error means Python reached the *end of file* (EOF) before it found something it was expecting, e.g. a closing round bracket.\\n\\\"\\\"\\\"\\n\\nINVALID_CHAR_EXPLAIN = SYNTAX_EXPLAIN + \\\"\\\"\\\"\\nThis error means Python found a character it could not understand.  For example, it may contain *smart quotes*, like this: `lang:py3;\\u2018hello world\\u2019`.\\n\\\"\\\"\\\"\\n\\nPRINT_PAREN_EXPLAIN = SYNTAX_EXPLAIN + \\\"\\\"\\\"\\nYou must include round brackets when calling the `lang:py3;print` function. Before Python 3.0, this was different.\\n\\\"\\\"\\\"\\n\\nNAME_EXPLAIN = \\\"\\\"\\\"\\nA `lang:err;NameError` means the Python interpreter did not recognise the variable or function named `lang:py3;{}`, and so it stopped running your code.\\n\\nThe *traceback* shows where it stopped (highlighted above in red).\\n\\\"\\\"\\\"\\n\\nINDENT_EXPLAIN = \\\"\\\"\\\"\\nAn `lang:err;IndentationError` means the Python interpreter could not understand the layout of your code, and so it stopped running it.\\n\\n*Indenting* means putting spaces or tabs before a statement.  In Python, indenting your code means something special.  It means that one block of code is controlled by another statement.\\n\\\"\\\"\\\"\\n\\nNO_OUTPUT = \\\"\\\"\\\"\\nYour program produced no output.\\n\\\"\\\"\\\"\\n\\nclass HelloWorldAnnotate(Annotate):\\n  def __init__(self, strings):\\n    self.words = []\\n    for s in strings:\\n      self.words.extend(re.findall(r'\\\\w+', s))\\n    super().__init__()\\n\\n  def explain(self, etype, value, tb, limit, file):\\n    super().explain(etype, value, tb, limit, file)\\n    self.HANDLERS.get(etype, self._default.__func__)(self, value)\\n\\n  def annotate(self, etype, value, tb_list, index):\\n    pass\\n\\n  def marker(self, etype, value, tb):\\n    pass\\n\\n  def _default(self, err):\\n    name = err.__class__.__name__\\n    self.stdio.widget(-1, DEFAULT_EXPLAIN.format(a_or_an(name), name))\\n\\n  def _syntax(self, err):\\n    try:\\n      self.SYNTAX_HANDLERS[err.msg](self, err)\\n    except KeyError:\\n      if err.msg.startswith(\\\"(unicode error) 'unicodeescape' codec can't decode bytes\\\"):\\n        self._syntax_unicode(src, err)\\n\\n  def _name(self, err):\\n    match = re.match(r\\\"^name '([^']*)' is not defined$\\\", err.args[0])\\n    if not match:\\n      return\\n    name = match.group(1)\\n\\n    self.stdio.widget(-1, NAME_EXPLAIN.format(name))\\n\\n    msg = \\\"\\\"\\\"**Have you capitalised the `print` function**? In Python, capitalisation matters. `print` must be lowercase!\\\"\\\"\\\"\\n    if name != 'print':\\n      self.main.reject(r'print', msg, flags=re.I, text=name)\\n\\n    msg = \\\"\\\"\\\"**Have you called `lang:py3;{0}` instead of `lang:py3;print`**?  Python doesn't recognise `lang:py3;{0}`.\\\"\\\"\\\"\\n    self.main.reject(r'write', msg.format(name), flags=re.I, text=name)\\n\\n    if self.words:\\n      msg = \\\"\\\"\\\"**Is your message missing quotes around it?** The message needs to be inside single or double quotes, like `'Hello!'`, so Python treats it as a string, and not an instruction.\\n\\\"\\\"\\\"\\n      self.main.reject('|'.join(self.words), msg, flags=re.I, text=name)\\n\\n    msg = \\\"\\\"\\\"Python does not recognise the name `lang:py3;{}`. **Did you mistype a variable or function name** or use a variable before it was defined?\\\"\\\"\\\"\\n    self.main.reject('.', msg.format(name), text=name)\\n\\n  def _indent(self, err):\\n    self.stdio.widget(-1, INDENT_EXPLAIN)\\n\\n    msg = \\\"\\\"\\\"Have you put **spaces or tabs** to indent your code?  In Python, indenting means something special that you probably didn't intend.\\\"\\\"\\\"\\n    self.main.reject(r'^[ \\\\t]+', msg)\\n\\n  HANDLERS = {\\n    SyntaxError: _syntax,\\n    NameError: _name,\\n    IndentationError: _indent,\\n  }\\n\\n  def _syntax_invalid(self, err):\\n    self.stdio.widget(-1, SYNTAX_EXPLAIN)\\n\\n    msg = \\\"\\\"\\\"**Are there any messages in your code?** The message needs to be inside single or double quotes, like this `'Hello!'`, so Python treats it as a string, and not an instruction.\\\"\\\"\\\"\\n    self.main.require(r'[\\\"\\\\']', msg)\\n\\n    msg = \\\"\\\"\\\"Did you miss the **round brackets in the `lang:py3;print` function call**? It should be like this `print('Hello!')`.\\\"\\\"\\\"\\n    self.main.reject(r\\\"\\\"\\\"print['\\\"]\\\"\\\"\\\", msg)\\n\\n  def _syntax_str_eol(self, err):\\n    self.stdio.widget(-1, EOL_EXPLAIN)\\n\\n    msg = \\\"\\\"\\\"Are you missing a {} quote **just before the round bracket** at the end?\\\"\\\"\\\"\\n    self.main.reject(r\\\"\\\\('[^'\\\\\\\"(]*\\\\)\\\\w*$\\\", msg.format('single'), text=self.main.line)\\n    self.main.reject(r'\\\\(\\\"[^\\\"\\\\'(]*\\\\)\\\\w*$', msg.format('double'), text=self.main.line)\\n\\n    msg = \\\"\\\"\\\"Have you started a string with a {} quote, but **ended it with a {} quote**?\\\"\\\"\\\"\\n    self.main.reject(r\\\"'[^']*\\\\\\\"[^']*$\\\", msg.format('single', 'double'))\\n    self.main.reject(r'\\\"[^\\\"]*\\\\'[^\\\"]*$', msg.format('double', 'single'))\\n\\n    msg = \\\"\\\"\\\"Have you started a string with a {} quote, but **forgotten the end quote**?\\\"\\\"\\\"\\n    self.main.reject(r\\\"'[^']*$\\\", msg.format('single'))\\n    self.main.reject(r'\\\"[^\\\"]*$', msg.format('double'))\\n\\n  def _syntax_eof(self, err):\\n    self.stdio.widget(-1, EOF_EXPLAIN)\\n\\n    msg = \\\"\\\"\\\"Are you **missing the round bracket** at the end of the `print` call?\\\"\\\"\\\"\\n    self.main.reject(r\\\"print *\\\\([^)]*$\\\", msg, text=self.main.line)\\n\\n    msg = \\\"\\\"\\\"Are you **missing the round bracket** at the end of the `input` call?\\\"\\\"\\\"\\n    self.main.reject(r\\\"input *\\\\([^)]*$\\\", msg, text=self.main.line)\\n\\n    # want to generalise this as soon as we can collect groups and include them in messages\\n    msg = \\\"\\\"\\\"Are you **missing the round bracket** at the end of the function call?\\\"\\\"\\\"\\n    self.main.reject(r\\\"\\\\w+ *\\\\([^)]*$\\\", msg, text=self.main.line)\\n\\n  def _syntax_invalid_char(self, err):\\n    self.stdio.widget(-1, INVALID_CHAR_EXPLAIN)\\n\\n    msg = \\\"\\\"\\\"**Does your code include *smart {0} quotes***, e.g. from Microsoft Word, a PDF, or a webpage? Python does not recognise these. They need to be replaced with regular {0} quotes.\\\"\\\"\\\"\\n    self.main.reject(r'[\\u2018\\u2019]', msg.format('single'))\\n    self.main.reject(r'[\\u201c\\u201d]', msg.format('double'))\\n\\n  def _syntax_print_parens(self, err):\\n    self.stdio.widget(-1, PRINT_PAREN_EXPLAIN)\\n\\n    msg = \\\"\\\"\\\"Are you trying to **use `lang:py3;print` without round brackets**?  This *only* works in old versions of Python, so you might see it in older notes and textbooks.\\\"\\\"\\\"\\n    self.main.reject(r'print *[^( ]', msg.format('single'))\\n\\n  def _syntax_unicode(self, err):\\n    pass\\n\\n  SYNTAX_HANDLERS = {\\n    'invalid syntax': _syntax_invalid,\\n    'EOL while scanning string literal': _syntax_str_eol,\\n    'unexpected EOF while parsing': _syntax_eof,\\n    'invalid character in identifier': _syntax_invalid_char,\\n    \\\"Missing parentheses in call to 'print'\\\": _syntax_print_parens,\\n  }\\n\\nimport sys\\n\\nsys.stdout._write = sys.stdout.write\\nsys.stdout._written = False\\n\\ndef write(text, *args, **kwargs):\\n  sys.stdout._write(text, *args, **kwargs)\\n  if text:\\n    sys.stdout._written = True\\n\\nsys.stdout.write = write\\n\\na = HelloWorldAnnotate(WORDS)\\n\\nif not sys.stdout._written:\\n  a.stdio.widget(-1, NO_OUTPUT)\\n\\n  msg = \\\"\\\"\\\"Did you call the `lang:py3;print` function with a message, like this: `lang:py3;print('Hello!')`?\\\"\\\"\\\"\\n  a.main.require(r'print|stdout\\\\.(?:write|writelines)', msg)\\n\\n  msg = \\\"\\\"\\\"Did your `lang:py3;print` or other output function calls run?\\\"\\\"\\\"\\n  a.main.widget(-1, msg)\\n\",\"readonly\":true,\"path\":\"___exception.py\",\"hidden\":true,\"undeletable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"<p>This problem was designed to be simple, but there were a few things to trip up on. Common issues include:<\/p>\n<ul>\n  <li>not realising that you had to submit a <em>complete program<\/em>, with a <code data-lang=\"py3\">print<\/code> function in it;<\/li>\n  <li>not <strong>reading the question carefully!<\/strong> and getting the output (including capitalisation, spaces and punctuation) exactly right.  This kind of attention to detail is critical to programming.<\/li>\n<\/ul>\n"
    },
    {
      "language":20,
      "title":"Is it a shark?",
      "notes":"#markdown\nGreat job! Checking that the conditions we test in our `if` statements is the key to being able to confirm that your code matches your algorithm.",
      "updated_at":"2018-02-23T00:14:45.321920+00:00",
      "label":"aca-choices-bio-is-it-a-shark",
      "content":"#markdown\n\n## Choose the flowchart below that represents the following code snippet.\n\n```lang:py3;norun\nprint('Oh look! A fish!')\nshark = input('Is it a shark (yes\/no)? ')\nif shark == 'yes':\n  print('Swim to shore!')\nelse:\n  print('Keep swimming')\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":2},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"<svg width=\\\\\\\"359px\\\\\\\" height=\\\\\\\"241px\\\\\\\" viewBox=\\\\\\\"0 0 359 241\\\\\\\" version=\\\\\\\"1.1\\\\\\\" xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/2000\\\/svg\\\\\\\" xmlns:xlink=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xlink\\\\\\\">\\\\n    <!-- Generator: Sketch 48.2 (47327) - http:\\\/\\\/www.bohemiancoding.com\\\/sketch -->\\\\n    <title>no-shark<\\\/title>\\\\n    <desc>Created with Sketch.<\\\/desc>\\\\n    <defs>\\\\n        <rect id=\\\\\\\"apath-1\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <rect id=\\\\\\\"apath-2\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <polygon id=\\\\\\\"apath-3\\\\\\\" points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n    <\\\/defs>\\\\n    <g id=\\\\\\\"muti-choice-shark\\\\\\\" stroke=\\\\\\\"none\\\\\\\" stroke-width=\\\\\\\"1\\\\\\\" fill=\\\\\\\"none\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\">\\\\n        <g id=\\\\\\\"ano-shark\\\\\\\">\\\\n            <g id=\\\\\\\"astart\\\\\\\" transform=\\\\\\\"translate(0.000000, 85.000000)\\\\\\\">\\\\n                <circle id=\\\\\\\"aOval\\\\\\\" fill=\\\\\\\"#7B188F\\\\\\\" cx=\\\\\\\"35\\\\\\\" cy=\\\\\\\"35\\\\\\\" r=\\\\\\\"35\\\\\\\"><\\\/circle>\\\\n                <text id=\\\\\\\"aStart\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"19.943\\\\\\\" y=\\\\\\\"39\\\\\\\">Start<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"akeep-swimming\\\\\\\" transform=\\\\\\\"translate(264.000000, 181.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"aRectangle3\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#apath-1\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"aKeep-swimming\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"31.5085\\\\\\\" y=\\\\\\\"25\\\\\\\">Keep<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"15.881\\\\\\\" y=\\\\\\\"42\\\\\\\">swimming<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"aswim-to-shore\\\\\\\" transform=\\\\\\\"translate(264.000000, 0.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"aRectangle\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#apath-2\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"aSwim-to-shore\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"30.511\\\\\\\" y=\\\\\\\"25\\\\\\\">Swim<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"21.908\\\\\\\" y=\\\\\\\"42\\\\\\\">to shore<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"asee-fish\\\\\\\" transform=\\\\\\\"translate(130.000000, 60.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"aRectangle-2\\\\\\\">\\\\n                    <use fill=\\\\\\\"#FF5900\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#apath-3\\\\\\\"><\\\/use>\\\\n                    <polygon points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"aSee-a-fish?\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"48.695\\\\\\\" y=\\\\\\\"46\\\\\\\">See<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"56.4475\\\\\\\" y=\\\\\\\"63\\\\\\\">a<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"45.72\\\\\\\" y=\\\\\\\"80\\\\\\\">fish?<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <path d=\\\\\\\"M191,30 L258.881848,30\\\\\\\" id=\\\\\\\"aLineb\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"aLineb-decoration-1\\\\\\\" d=\\\\\\\"M258.881848,30 L248.081848,27 L248.081848,33 L258.881848,30 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M191,210 L258.881848,210\\\\\\\" id=\\\\\\\"aLinea\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"aLinea-decoration-1\\\\\\\" d=\\\\\\\"M258.881848,210 L248.081848,207 L248.081848,213 L258.881848,210 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M191,56.7632697 L191,30\\\\\\\" id=\\\\\\\"aLine-4\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M191,209.76327 L191,183\\\\\\\" id=\\\\\\\"aLine-4a\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M74,120 L125.496575,120\\\\\\\" id=\\\\\\\"aLine\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"aLine-decoration-1\\\\\\\" d=\\\\\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <text id=\\\\\\\"ayes\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"163.725\\\\\\\" y=\\\\\\\"61\\\\\\\">yes<\\\/tspan>\\\\n            <\\\/text>\\\\n            <text id=\\\\\\\"ano\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"167.75\\\\\\\" y=\\\\\\\"195\\\\\\\">no<\\\/tspan>\\\\n            <\\\/text>\\\\n        <\\\/g>\\\\n    <\\\/g>\\\\n<\\\/svg>\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"<svg width=\\\\\\\"359px\\\\\\\" height=\\\\\\\"241px\\\\\\\" viewBox=\\\\\\\"0 0 359 241\\\\\\\" version=\\\\\\\"1.1\\\\\\\" xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/2000\\\/svg\\\\\\\" xmlns:xlink=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xlink\\\\\\\">\\\\n    <!-- Generator: Sketch 48.2 (47327) - http:\\\/\\\/www.bohemiancoding.com\\\/sketch -->\\\\n    <title>no-print<\\\/title>\\\\n    <desc>Created with Sketch.<\\\/desc>\\\\n    <defs>\\\\n        <rect id=\\\\\\\"bpath-1\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <rect id=\\\\\\\"bpath-2\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <polygon id=\\\\\\\"bpath-3\\\\\\\" points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n    <\\\/defs>\\\\n    <g id=\\\\\\\"muti-choice-shark\\\\\\\" stroke=\\\\\\\"none\\\\\\\" stroke-width=\\\\\\\"1\\\\\\\" fill=\\\\\\\"none\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\">\\\\n        <g id=\\\\\\\"bno-print\\\\\\\">\\\\n            <g id=\\\\\\\"bstart\\\\\\\" transform=\\\\\\\"translate(0.000000, 85.000000)\\\\\\\">\\\\n                <circle id=\\\\\\\"bOval\\\\\\\" fill=\\\\\\\"#7B188F\\\\\\\" cx=\\\\\\\"35\\\\\\\" cy=\\\\\\\"35\\\\\\\" r=\\\\\\\"35\\\\\\\"><\\\/circle>\\\\n                <text id=\\\\\\\"bStart\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"19.943\\\\\\\" y=\\\\\\\"39\\\\\\\">Start<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"bkeep-swimming\\\\\\\" transform=\\\\\\\"translate(264.000000, 181.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"bRectangle4\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#bpath-1\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"bKeep-swimming\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"31.5085\\\\\\\" y=\\\\\\\"25\\\\\\\">Keep<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"15.881\\\\\\\" y=\\\\\\\"42\\\\\\\">swimming<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"bswim-to-shore\\\\\\\" transform=\\\\\\\"translate(264.000000, 0.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"bRectangle3\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#bpath-2\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"bSwim-to-shore\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"30.511\\\\\\\" y=\\\\\\\"25\\\\\\\">Swim<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"21.908\\\\\\\" y=\\\\\\\"42\\\\\\\">to shore<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"bis-shark\\\\\\\" transform=\\\\\\\"translate(130.000000, 60.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"bRectangle-2\\\\\\\">\\\\n                    <use fill=\\\\\\\"#FF5900\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#bpath-3\\\\\\\"><\\\/use>\\\\n                    <polygon points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"bIs-it-a-shark?\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"54.939\\\\\\\" y=\\\\\\\"46\\\\\\\">Is<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"50.3645\\\\\\\" y=\\\\\\\"63\\\\\\\">it a<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"39.8505\\\\\\\" y=\\\\\\\"80\\\\\\\">shark?<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <path d=\\\\\\\"M191,30 L258.881848,30\\\\\\\" id=\\\\\\\"bLineb\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"bLineb-decoration-1\\\\\\\" d=\\\\\\\"M258.881848,30 L248.081848,27 L248.081848,33 L258.881848,30 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M191,210 L258.881848,210\\\\\\\" id=\\\\\\\"bLinea\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"bLinea-decoration-1\\\\\\\" d=\\\\\\\"M258.881848,210 L248.081848,207 L248.081848,213 L258.881848,210 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M191,56.7632697 L191,30\\\\\\\" id=\\\\\\\"bLine-4a\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M191,209.76327 L191,183\\\\\\\" id=\\\\\\\"bLine-4\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M74,120 L125.496575,120\\\\\\\" id=\\\\\\\"bLine\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"bLine-decoration-1\\\\\\\" d=\\\\\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <text id=\\\\\\\"byes\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"163.725\\\\\\\" y=\\\\\\\"61\\\\\\\">yes<\\\/tspan>\\\\n            <\\\/text>\\\\n            <text id=\\\\\\\"bno\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"167.75\\\\\\\" y=\\\\\\\"195\\\\\\\">no<\\\/tspan>\\\\n            <\\\/text>\\\\n        <\\\/g>\\\\n    <\\\/g>\\\\n<\\\/svg>\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"<svg width=\\\\\\\"517px\\\\\\\" height=\\\\\\\"241px\\\\\\\" viewBox=\\\\\\\"0 0 517 241\\\\\\\" version=\\\\\\\"1.1\\\\\\\" xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/2000\\\/svg\\\\\\\" xmlns:xlink=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xlink\\\\\\\">\\\\n    <!-- Generator: Sketch 48.2 (47327) - http:\\\/\\\/www.bohemiancoding.com\\\/sketch -->\\\\n    <title>correct<\\\/title>\\\\n    <desc>Created with Sketch.<\\\/desc>\\\\n    <defs>\\\\n        <rect id=\\\\\\\"dpath-1\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <rect id=\\\\\\\"dpath-2\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <rect id=\\\\\\\"dpath-3\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <polygon id=\\\\\\\"dpath-4\\\\\\\" points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n    <\\\/defs>\\\\n    <g id=\\\\\\\"muti-choice-shark\\\\\\\" stroke=\\\\\\\"none\\\\\\\" stroke-width=\\\\\\\"1\\\\\\\" fill=\\\\\\\"none\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\">\\\\n        <g id=\\\\\\\"dcorrect\\\\\\\">\\\\n            <g id=\\\\\\\"dstart\\\\\\\" transform=\\\\\\\"translate(0.000000, 85.000000)\\\\\\\">\\\\n                <circle id=\\\\\\\"dOval\\\\\\\" fill=\\\\\\\"#7B188F\\\\\\\" cx=\\\\\\\"35\\\\\\\" cy=\\\\\\\"35\\\\\\\" r=\\\\\\\"35\\\\\\\"><\\\/circle>\\\\n                <text id=\\\\\\\"dStart\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"19.943\\\\\\\" y=\\\\\\\"39\\\\\\\">Start<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"dkeep-swimming\\\\\\\" transform=\\\\\\\"translate(422.000000, 181.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"dRectangle4\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#dpath-1\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"dKeep-swimming\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"31.5085\\\\\\\" y=\\\\\\\"25\\\\\\\">Keep<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"15.881\\\\\\\" y=\\\\\\\"42\\\\\\\">swimming<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"dsee-fish\\\\\\\" transform=\\\\\\\"translate(131.000000, 89.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"dRectangle3\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#dpath-2\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"dSee-a-fish\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"18.0125\\\\\\\" y=\\\\\\\"34\\\\\\\">See a fish<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"dswim-to-shore\\\\\\\" transform=\\\\\\\"translate(422.000000, 0.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"dRectangle\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#dpath-3\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"dSwim-to-shore\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"30.511\\\\\\\" y=\\\\\\\"25\\\\\\\">Swim<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"21.908\\\\\\\" y=\\\\\\\"42\\\\\\\">to shore<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"dis-shark\\\\\\\" transform=\\\\\\\"translate(288.000000, 60.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"dRectangle-2\\\\\\\">\\\\n                    <use fill=\\\\\\\"#FF5900\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#dpath-4\\\\\\\"><\\\/use>\\\\n                    <polygon points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"dIs-it-a-shark?\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"54.939\\\\\\\" y=\\\\\\\"46\\\\\\\">Is<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"50.3645\\\\\\\" y=\\\\\\\"63\\\\\\\">it a<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"39.8505\\\\\\\" y=\\\\\\\"80\\\\\\\">shark?<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <path d=\\\\\\\"M349,30 L416.881848,30\\\\\\\" id=\\\\\\\"dLinec\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"dLinec-decoration-1\\\\\\\" d=\\\\\\\"M416.881848,30 L406.081848,27 L406.081848,33 L416.881848,30 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M349,210 L416.881848,210\\\\\\\" id=\\\\\\\"dLineb\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"dLineb-decoration-1\\\\\\\" d=\\\\\\\"M416.881848,210 L406.081848,207 L406.081848,213 L416.881848,210 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M349,56.7632697 L349,30\\\\\\\" id=\\\\\\\"dLine-4a\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M349,209.76327 L349,183\\\\\\\" id=\\\\\\\"dLine-4\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M74,120 L125.496575,120\\\\\\\" id=\\\\\\\"dLinea\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"dLinea-decoration-1\\\\\\\" d=\\\\\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M232,120 L283.496575,120\\\\\\\" id=\\\\\\\"dLine\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"dLine-decoration-1\\\\\\\" d=\\\\\\\"M283.496575,120 L272.696575,117 L272.696575,123 L283.496575,120 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <text id=\\\\\\\"dyes\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"321.725\\\\\\\" y=\\\\\\\"61\\\\\\\">yes<\\\/tspan>\\\\n            <\\\/text>\\\\n            <text id=\\\\\\\"dno\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"325.75\\\\\\\" y=\\\\\\\"195\\\\\\\">no<\\\/tspan>\\\\n            <\\\/text>\\\\n        <\\\/g>\\\\n    <\\\/g>\\\\n<\\\/svg>\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"<svg width=\\\\\\\"517px\\\\\\\" height=\\\\\\\"241px\\\\\\\" viewBox=\\\\\\\"0 0 517 241\\\\\\\" version=\\\\\\\"1.1\\\\\\\" xmlns=\\\\\\\"http:\\\/\\\/www.w3.org\\\/2000\\\/svg\\\\\\\" xmlns:xlink=\\\\\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xlink\\\\\\\">\\\\n    <!-- Generator: Sketch 48.2 (47327) - http:\\\/\\\/www.bohemiancoding.com\\\/sketch -->\\\\n    <title>flip-yes-no<\\\/title>\\\\n    <desc>Created with Sketch.<\\\/desc>\\\\n    <defs>\\\\n        <rect id=\\\\\\\"path-1\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <rect id=\\\\\\\"path-2\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <rect id=\\\\\\\"path-3\\\\\\\" x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n        <polygon id=\\\\\\\"path-4\\\\\\\" points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n    <\\\/defs>\\\\n    <g id=\\\\\\\"muti-choice-shark\\\\\\\" stroke=\\\\\\\"none\\\\\\\" stroke-width=\\\\\\\"1\\\\\\\" fill=\\\\\\\"none\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\">\\\\n        <g id=\\\\\\\"cflip-yes-no\\\\\\\">\\\\n            <g id=\\\\\\\"cstart\\\\\\\" transform=\\\\\\\"translate(0.000000, 85.000000)\\\\\\\">\\\\n                <circle id=\\\\\\\"cOval\\\\\\\" fill=\\\\\\\"#7B188F\\\\\\\" cx=\\\\\\\"35\\\\\\\" cy=\\\\\\\"35\\\\\\\" r=\\\\\\\"35\\\\\\\"><\\\/circle>\\\\n                <text id=\\\\\\\"cStart\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"19.943\\\\\\\" y=\\\\\\\"39\\\\\\\">Start<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"cswim-to-shore\\\\\\\" transform=\\\\\\\"translate(422.000000, 181.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"cRectangle4\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#path-1\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"cSwim-to-shore\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"22.2125\\\\\\\" y=\\\\\\\"25\\\\\\\">Swim to <\\\/tspan>\\\\n                    <tspan x=\\\\\\\"30.2065\\\\\\\" y=\\\\\\\"42\\\\\\\">shore<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"csee-a-fish\\\\\\\" transform=\\\\\\\"translate(131.000000, 89.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"cRectangle3\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#path-2\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"cSee-a-fish\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"18.0125\\\\\\\" y=\\\\\\\"34\\\\\\\">See a fish<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"ckeep-swimming\\\\\\\" transform=\\\\\\\"translate(422.000000, 0.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"cRectangle\\\\\\\">\\\\n                    <use fill=\\\\\\\"#7B188F\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#path-3\\\\\\\"><\\\/use>\\\\n                    <rect x=\\\\\\\"0\\\\\\\" y=\\\\\\\"0\\\\\\\" width=\\\\\\\"95\\\\\\\" height=\\\\\\\"60\\\\\\\"><\\\/rect>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"cKeep-swimming\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"31.5085\\\\\\\" y=\\\\\\\"25\\\\\\\">Keep<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"15.881\\\\\\\" y=\\\\\\\"42\\\\\\\">swimming<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <g id=\\\\\\\"cis-shark\\\\\\\" transform=\\\\\\\"translate(288.000000, 60.000000)\\\\\\\">\\\\n                <g id=\\\\\\\"cRectangle-2\\\\\\\">\\\\n                    <use fill=\\\\\\\"#FF5900\\\\\\\" fill-rule=\\\\\\\"evenodd\\\\\\\" xlink:href=\\\\\\\"#path-4\\\\\\\"><\\\/use>\\\\n                    <polygon points=\\\\\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\\\\\"><\\\/polygon>\\\\n                <\\\/g>\\\\n                <text id=\\\\\\\"cIs-it-a-shark?\\\\\\\" font-family=\\\\\\\"Lato-Bold, Lato\\\\\\\" font-size=\\\\\\\"14\\\\\\\" font-weight=\\\\\\\"bold\\\\\\\" fill=\\\\\\\"#FFFFFF\\\\\\\">\\\\n                    <tspan x=\\\\\\\"54.939\\\\\\\" y=\\\\\\\"46\\\\\\\">Is<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"50.3645\\\\\\\" y=\\\\\\\"63\\\\\\\">it a<\\\/tspan>\\\\n                    <tspan x=\\\\\\\"39.8505\\\\\\\" y=\\\\\\\"80\\\\\\\">shark?<\\\/tspan>\\\\n                <\\\/text>\\\\n            <\\\/g>\\\\n            <path d=\\\\\\\"M349,30 L416.881848,30\\\\\\\" id=\\\\\\\"cLinec\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"cLinec-decoration-1\\\\\\\" d=\\\\\\\"M416.881848,30 L406.081848,27 L406.081848,33 L416.881848,30 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M349,210 L416.881848,210\\\\\\\" id=\\\\\\\"cLineb\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"cLineb-decoration-1\\\\\\\" d=\\\\\\\"M416.881848,210 L406.081848,207 L406.081848,213 L416.881848,210 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M349,56.7632697 L349,30\\\\\\\" id=\\\\\\\"cLine-4a\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M349,209.76327 L349,183\\\\\\\" id=\\\\\\\"cLine-4\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M74,120 L125.496575,120\\\\\\\" id=\\\\\\\"cLinea\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"cLinea-decoration-1\\\\\\\" d=\\\\\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path d=\\\\\\\"M232,120 L283.496575,120\\\\\\\" id=\\\\\\\"cLine\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <path id=\\\\\\\"cLine-decoration-1\\\\\\\" d=\\\\\\\"M283.496575,120 L272.696575,117 L272.696575,123 L283.496575,120 Z\\\\\\\" stroke=\\\\\\\"#000000\\\\\\\" fill=\\\\\\\"#000000\\\\\\\" stroke-linecap=\\\\\\\"square\\\\\\\"><\\\/path>\\\\n            <text id=\\\\\\\"cyes\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"321.725\\\\\\\" y=\\\\\\\"61\\\\\\\">yes<\\\/tspan>\\\\n            <\\\/text>\\\\n            <text id=\\\\\\\"cno\\\\\\\" font-family=\\\\\\\"Lato-Regular, Lato\\\\\\\" font-size=\\\\\\\"12\\\\\\\" font-weight=\\\\\\\"normal\\\\\\\" fill=\\\\\\\"#000000\\\\\\\">\\\\n                <tspan x=\\\\\\\"325.75\\\\\\\" y=\\\\\\\"195\\\\\\\">no<\\\/tspan>\\\\n            <\\\/text>\\\\n        <\\\/g>\\\\n    <\\\/g>\\\\n<\\\/svg>\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"<svg width=\\\"359px\\\" height=\\\"241px\\\" viewBox=\\\"0 0 359 241\\\" version=\\\"1.1\\\" xmlns=\\\"http:\/\/www.w3.org\/2000\/svg\\\" xmlns:xlink=\\\"http:\/\/www.w3.org\/1999\/xlink\\\">\\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\\n    <title>no-shark<\/title>\\n    <desc>Created with Sketch.<\/desc>\\n    <defs>\\n        <rect id=\\\"apath-1\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <rect id=\\\"apath-2\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <polygon id=\\\"apath-3\\\" points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n    <\/defs>\\n    <g id=\\\"muti-choice-shark\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\\n        <g id=\\\"ano-shark\\\">\\n            <g id=\\\"astart\\\" transform=\\\"translate(0.000000, 85.000000)\\\">\\n                <circle id=\\\"aOval\\\" fill=\\\"#7B188F\\\" cx=\\\"35\\\" cy=\\\"35\\\" r=\\\"35\\\"><\/circle>\\n                <text id=\\\"aStart\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"19.943\\\" y=\\\"39\\\">Start<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"akeep-swimming\\\" transform=\\\"translate(264.000000, 181.000000)\\\">\\n                <g id=\\\"aRectangle3\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#apath-1\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"aKeep-swimming\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"31.5085\\\" y=\\\"25\\\">Keep<\/tspan>\\n                    <tspan x=\\\"15.881\\\" y=\\\"42\\\">swimming<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"aswim-to-shore\\\" transform=\\\"translate(264.000000, 0.000000)\\\">\\n                <g id=\\\"aRectangle\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#apath-2\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"aSwim-to-shore\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"30.511\\\" y=\\\"25\\\">Swim<\/tspan>\\n                    <tspan x=\\\"21.908\\\" y=\\\"42\\\">to shore<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"asee-fish\\\" transform=\\\"translate(130.000000, 60.000000)\\\">\\n                <g id=\\\"aRectangle-2\\\">\\n                    <use fill=\\\"#FF5900\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#apath-3\\\"><\/use>\\n                    <polygon points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n                <\/g>\\n                <text id=\\\"aSee-a-fish?\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"48.695\\\" y=\\\"46\\\">See<\/tspan>\\n                    <tspan x=\\\"56.4475\\\" y=\\\"63\\\">a<\/tspan>\\n                    <tspan x=\\\"45.72\\\" y=\\\"80\\\">fish?<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <path d=\\\"M191,30 L258.881848,30\\\" id=\\\"aLineb\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"aLineb-decoration-1\\\" d=\\\"M258.881848,30 L248.081848,27 L248.081848,33 L258.881848,30 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M191,210 L258.881848,210\\\" id=\\\"aLinea\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"aLinea-decoration-1\\\" d=\\\"M258.881848,210 L248.081848,207 L248.081848,213 L258.881848,210 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M191,56.7632697 L191,30\\\" id=\\\"aLine-4\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M191,209.76327 L191,183\\\" id=\\\"aLine-4a\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M74,120 L125.496575,120\\\" id=\\\"aLine\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"aLine-decoration-1\\\" d=\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <text id=\\\"ayes\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"163.725\\\" y=\\\"61\\\">yes<\/tspan>\\n            <\/text>\\n            <text id=\\\"ano\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"167.75\\\" y=\\\"195\\\">no<\/tspan>\\n            <\/text>\\n        <\/g>\\n    <\/g>\\n<\/svg>\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"no-shark\"\n    },\n    {\n      \"content\": \"<svg width=\\\"359px\\\" height=\\\"241px\\\" viewBox=\\\"0 0 359 241\\\" version=\\\"1.1\\\" xmlns=\\\"http:\/\/www.w3.org\/2000\/svg\\\" xmlns:xlink=\\\"http:\/\/www.w3.org\/1999\/xlink\\\">\\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\\n    <title>no-print<\/title>\\n    <desc>Created with Sketch.<\/desc>\\n    <defs>\\n        <rect id=\\\"bpath-1\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <rect id=\\\"bpath-2\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <polygon id=\\\"bpath-3\\\" points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n    <\/defs>\\n    <g id=\\\"muti-choice-shark\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\\n        <g id=\\\"bno-print\\\">\\n            <g id=\\\"bstart\\\" transform=\\\"translate(0.000000, 85.000000)\\\">\\n                <circle id=\\\"bOval\\\" fill=\\\"#7B188F\\\" cx=\\\"35\\\" cy=\\\"35\\\" r=\\\"35\\\"><\/circle>\\n                <text id=\\\"bStart\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"19.943\\\" y=\\\"39\\\">Start<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"bkeep-swimming\\\" transform=\\\"translate(264.000000, 181.000000)\\\">\\n                <g id=\\\"bRectangle4\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#bpath-1\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"bKeep-swimming\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"31.5085\\\" y=\\\"25\\\">Keep<\/tspan>\\n                    <tspan x=\\\"15.881\\\" y=\\\"42\\\">swimming<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"bswim-to-shore\\\" transform=\\\"translate(264.000000, 0.000000)\\\">\\n                <g id=\\\"bRectangle3\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#bpath-2\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"bSwim-to-shore\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"30.511\\\" y=\\\"25\\\">Swim<\/tspan>\\n                    <tspan x=\\\"21.908\\\" y=\\\"42\\\">to shore<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"bis-shark\\\" transform=\\\"translate(130.000000, 60.000000)\\\">\\n                <g id=\\\"bRectangle-2\\\">\\n                    <use fill=\\\"#FF5900\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#bpath-3\\\"><\/use>\\n                    <polygon points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n                <\/g>\\n                <text id=\\\"bIs-it-a-shark?\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"54.939\\\" y=\\\"46\\\">Is<\/tspan>\\n                    <tspan x=\\\"50.3645\\\" y=\\\"63\\\">it a<\/tspan>\\n                    <tspan x=\\\"39.8505\\\" y=\\\"80\\\">shark?<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <path d=\\\"M191,30 L258.881848,30\\\" id=\\\"bLineb\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"bLineb-decoration-1\\\" d=\\\"M258.881848,30 L248.081848,27 L248.081848,33 L258.881848,30 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M191,210 L258.881848,210\\\" id=\\\"bLinea\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"bLinea-decoration-1\\\" d=\\\"M258.881848,210 L248.081848,207 L248.081848,213 L258.881848,210 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M191,56.7632697 L191,30\\\" id=\\\"bLine-4a\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M191,209.76327 L191,183\\\" id=\\\"bLine-4\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M74,120 L125.496575,120\\\" id=\\\"bLine\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"bLine-decoration-1\\\" d=\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <text id=\\\"byes\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"163.725\\\" y=\\\"61\\\">yes<\/tspan>\\n            <\/text>\\n            <text id=\\\"bno\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"167.75\\\" y=\\\"195\\\">no<\/tspan>\\n            <\/text>\\n        <\/g>\\n    <\/g>\\n<\/svg>\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"no-print\"\n    },\n    {\n      \"content\": \"<svg width=\\\"517px\\\" height=\\\"241px\\\" viewBox=\\\"0 0 517 241\\\" version=\\\"1.1\\\" xmlns=\\\"http:\/\/www.w3.org\/2000\/svg\\\" xmlns:xlink=\\\"http:\/\/www.w3.org\/1999\/xlink\\\">\\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\\n    <title>correct<\/title>\\n    <desc>Created with Sketch.<\/desc>\\n    <defs>\\n        <rect id=\\\"dpath-1\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <rect id=\\\"dpath-2\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <rect id=\\\"dpath-3\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <polygon id=\\\"dpath-4\\\" points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n    <\/defs>\\n    <g id=\\\"muti-choice-shark\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\\n        <g id=\\\"dcorrect\\\">\\n            <g id=\\\"dstart\\\" transform=\\\"translate(0.000000, 85.000000)\\\">\\n                <circle id=\\\"dOval\\\" fill=\\\"#7B188F\\\" cx=\\\"35\\\" cy=\\\"35\\\" r=\\\"35\\\"><\/circle>\\n                <text id=\\\"dStart\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"19.943\\\" y=\\\"39\\\">Start<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"dkeep-swimming\\\" transform=\\\"translate(422.000000, 181.000000)\\\">\\n                <g id=\\\"dRectangle4\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#dpath-1\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"dKeep-swimming\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"31.5085\\\" y=\\\"25\\\">Keep<\/tspan>\\n                    <tspan x=\\\"15.881\\\" y=\\\"42\\\">swimming<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"dsee-fish\\\" transform=\\\"translate(131.000000, 89.000000)\\\">\\n                <g id=\\\"dRectangle3\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#dpath-2\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"dSee-a-fish\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"18.0125\\\" y=\\\"34\\\">See a fish<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"dswim-to-shore\\\" transform=\\\"translate(422.000000, 0.000000)\\\">\\n                <g id=\\\"dRectangle\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#dpath-3\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"dSwim-to-shore\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"30.511\\\" y=\\\"25\\\">Swim<\/tspan>\\n                    <tspan x=\\\"21.908\\\" y=\\\"42\\\">to shore<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"dis-shark\\\" transform=\\\"translate(288.000000, 60.000000)\\\">\\n                <g id=\\\"dRectangle-2\\\">\\n                    <use fill=\\\"#FF5900\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#dpath-4\\\"><\/use>\\n                    <polygon points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n                <\/g>\\n                <text id=\\\"dIs-it-a-shark?\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"54.939\\\" y=\\\"46\\\">Is<\/tspan>\\n                    <tspan x=\\\"50.3645\\\" y=\\\"63\\\">it a<\/tspan>\\n                    <tspan x=\\\"39.8505\\\" y=\\\"80\\\">shark?<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <path d=\\\"M349,30 L416.881848,30\\\" id=\\\"dLinec\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"dLinec-decoration-1\\\" d=\\\"M416.881848,30 L406.081848,27 L406.081848,33 L416.881848,30 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M349,210 L416.881848,210\\\" id=\\\"dLineb\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"dLineb-decoration-1\\\" d=\\\"M416.881848,210 L406.081848,207 L406.081848,213 L416.881848,210 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M349,56.7632697 L349,30\\\" id=\\\"dLine-4a\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M349,209.76327 L349,183\\\" id=\\\"dLine-4\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M74,120 L125.496575,120\\\" id=\\\"dLinea\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"dLinea-decoration-1\\\" d=\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M232,120 L283.496575,120\\\" id=\\\"dLine\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"dLine-decoration-1\\\" d=\\\"M283.496575,120 L272.696575,117 L272.696575,123 L283.496575,120 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <text id=\\\"dyes\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"321.725\\\" y=\\\"61\\\">yes<\/tspan>\\n            <\/text>\\n            <text id=\\\"dno\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"325.75\\\" y=\\\"195\\\">no<\/tspan>\\n            <\/text>\\n        <\/g>\\n    <\/g>\\n<\/svg>\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"see-shark\"\n    },\n    {\n      \"content\": \"<svg width=\\\"517px\\\" height=\\\"241px\\\" viewBox=\\\"0 0 517 241\\\" version=\\\"1.1\\\" xmlns=\\\"http:\/\/www.w3.org\/2000\/svg\\\" xmlns:xlink=\\\"http:\/\/www.w3.org\/1999\/xlink\\\">\\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\\n    <title>flip-yes-no<\/title>\\n    <desc>Created with Sketch.<\/desc>\\n    <defs>\\n        <rect id=\\\"path-1\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <rect id=\\\"path-2\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <rect id=\\\"path-3\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n        <polygon id=\\\"path-4\\\" points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n    <\/defs>\\n    <g id=\\\"muti-choice-shark\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\\n        <g id=\\\"cflip-yes-no\\\">\\n            <g id=\\\"cstart\\\" transform=\\\"translate(0.000000, 85.000000)\\\">\\n                <circle id=\\\"cOval\\\" fill=\\\"#7B188F\\\" cx=\\\"35\\\" cy=\\\"35\\\" r=\\\"35\\\"><\/circle>\\n                <text id=\\\"cStart\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"19.943\\\" y=\\\"39\\\">Start<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"cswim-to-shore\\\" transform=\\\"translate(422.000000, 181.000000)\\\">\\n                <g id=\\\"cRectangle4\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#path-1\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"cSwim-to-shore\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"22.2125\\\" y=\\\"25\\\">Swim to <\/tspan>\\n                    <tspan x=\\\"30.2065\\\" y=\\\"42\\\">shore<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"csee-a-fish\\\" transform=\\\"translate(131.000000, 89.000000)\\\">\\n                <g id=\\\"cRectangle3\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#path-2\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"cSee-a-fish\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"18.0125\\\" y=\\\"34\\\">See a fish<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"ckeep-swimming\\\" transform=\\\"translate(422.000000, 0.000000)\\\">\\n                <g id=\\\"cRectangle\\\">\\n                    <use fill=\\\"#7B188F\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#path-3\\\"><\/use>\\n                    <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"95\\\" height=\\\"60\\\"><\/rect>\\n                <\/g>\\n                <text id=\\\"cKeep-swimming\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"31.5085\\\" y=\\\"25\\\">Keep<\/tspan>\\n                    <tspan x=\\\"15.881\\\" y=\\\"42\\\">swimming<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <g id=\\\"cis-shark\\\" transform=\\\"translate(288.000000, 60.000000)\\\">\\n                <g id=\\\"cRectangle-2\\\">\\n                    <use fill=\\\"#FF5900\\\" fill-rule=\\\"evenodd\\\" xlink:href=\\\"#path-4\\\"><\/use>\\n                    <polygon points=\\\"60.5 0 121 60.5 60.5 121 0 60.5\\\"><\/polygon>\\n                <\/g>\\n                <text id=\\\"cIs-it-a-shark?\\\" font-family=\\\"Lato-Bold, Lato\\\" font-size=\\\"14\\\" font-weight=\\\"bold\\\" fill=\\\"#FFFFFF\\\">\\n                    <tspan x=\\\"54.939\\\" y=\\\"46\\\">Is<\/tspan>\\n                    <tspan x=\\\"50.3645\\\" y=\\\"63\\\">it a<\/tspan>\\n                    <tspan x=\\\"39.8505\\\" y=\\\"80\\\">shark?<\/tspan>\\n                <\/text>\\n            <\/g>\\n            <path d=\\\"M349,30 L416.881848,30\\\" id=\\\"cLinec\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"cLinec-decoration-1\\\" d=\\\"M416.881848,30 L406.081848,27 L406.081848,33 L416.881848,30 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M349,210 L416.881848,210\\\" id=\\\"cLineb\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"cLineb-decoration-1\\\" d=\\\"M416.881848,210 L406.081848,207 L406.081848,213 L416.881848,210 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M349,56.7632697 L349,30\\\" id=\\\"cLine-4a\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M349,209.76327 L349,183\\\" id=\\\"cLine-4\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M74,120 L125.496575,120\\\" id=\\\"cLinea\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"cLinea-decoration-1\\\" d=\\\"M125.496575,120 L114.696575,117 L114.696575,123 L125.496575,120 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path d=\\\"M232,120 L283.496575,120\\\" id=\\\"cLine\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <path id=\\\"cLine-decoration-1\\\" d=\\\"M283.496575,120 L272.696575,117 L272.696575,123 L283.496575,120 Z\\\" stroke=\\\"#000000\\\" fill=\\\"#000000\\\" stroke-linecap=\\\"square\\\"><\/path>\\n            <text id=\\\"cyes\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"321.725\\\" y=\\\"61\\\">yes<\/tspan>\\n            <\/text>\\n            <text id=\\\"cno\\\" font-family=\\\"Lato-Regular, Lato\\\" font-size=\\\"12\\\" font-weight=\\\"normal\\\" fill=\\\"#000000\\\">\\n                <tspan x=\\\"325.75\\\" y=\\\"195\\\">no<\/tspan>\\n            <\/text>\\n        <\/g>\\n    <\/g>\\n<\/svg>\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"flip-yes-no\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 2\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"Whenever an algorithm branches (represented by the orange diamond in the flowchart), it usually requires the use of an `if` statement in code. From there, the challenge is making sure you travel down the correct branch based on the variable's value, and that is what is being tested in this question."
    },
    {
      "language":20,
      "title":"Australia's favourite bird",
      "notes":"#markdown\nGreat work! \n\nThe incorrect answers all had minor errors like missing quotes around strings, parentheses in print functions and incorrect variable names. They might seem annoying, but computers rely on our instructions being exactly right to execute our code correctly.",
      "updated_at":"2018-02-23T02:51:15.558860+00:00",
      "label":"aca-choices-bio-magpie",
      "content":"#markdown\n\n## Which of the following code snippets will produce the output?\n\n```lang:py3;eg:none;terminal\nName a bird? @@@magpie\nThat's Australia's favourite bird!\n```\n\n```lang:py3;eg:none;terminal\nName a bird? @@@swan\nI like that bird.\n```\n\n```lang:py3;eg:none;terminal\nName a bird? @@@tiger\nI like that bird.\n```\n\n\\* according to [The Guardian](https:\/\/www.theguardian.com\/environment\/live\/2017\/dec\/11\/bird-of-the-year-150000-votes-counted-as-ibis-fans-anxiously-await-results) poll, anyway.",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":2},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none;norun;\\\\nbird = input('Name a bird? ')\\\\nif bird == 'magpie':\\\\n  print('That's Australia's favourite bird!')\\\\nprint('I like that bird.')\\\\n```\\\\n\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none;norun;\\\\nmagpie = input('Name a bird? ')\\\\nif bird == 'magpie':\\\\n  print(\\\\\\\"That's Australia's favourite bird!\\\\\\\")\\\\nelse:\\\\n  print(\\\\\\\"I like that bird.\\\\\\\")\\\\n```\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none;norun;\\\\nbird = input('Name a bird? ')\\\\nif bird == 'magpie':\\\\n  print(\\\\\\\"That's Australia's favourite bird!\\\\\\\")\\\\nelse:\\\\n  print(\\\\\\\"I like that bird.\\\\\\\")\\\\n```\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```lang:py3;eg:none;norun;\\\\nbird = input('Name a bird? ')\\\\nif bird == 'magpie':\\\\n  print(f\\\\\\\"A {bird}\\\\\\\")\\\\nelse:\\\\n  print(\\\\\\\"I like that bird.\\\\\\\")\\\\n```\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[
        "input",
        "if-else",
        "print",
        "variables"
      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none;norun;\\nbird = input('Name a bird? ')\\nif bird == 'magpie':\\n  print('That's Australia's favourite bird!')\\nprint('I like that bird.')\\n```\\n\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"no-else\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none;norun;\\nmagpie = input('Name a bird? ')\\nif bird == 'magpie':\\n  print(\\\"That's Australia's favourite bird!\\\")\\nelse:\\n  print(\\\"I like that bird.\\\")\\n```\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"incorrect-variable\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none;norun;\\nbird = input('Name a bird? ')\\nif bird == 'magpie':\\n  print(\\\"That's Australia's favourite bird!\\\")\\nelse:\\n  print(\\\"I like that bird.\\\")\\n```\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"magpie\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```lang:py3;eg:none;norun;\\nbird = input('Name a bird? ')\\nif bird == 'magpie':\\n  print(f\\\"A {bird}\\\")\\nelse:\\n  print(\\\"I like that bird.\\\")\\n```\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"incorrect-print\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 2\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThis question checks that students are being careful with how they write their code, checking for common typos and mistakes made by beginning programmers."
    },
    {
      "language":20,
      "title":"Dichotomous Keys",
      "notes":"#markdown\nA dichotomous key is a tool that allows the user to determine the identity of items in the natural world, such as trees, wildflowers, mammals, reptiles, rocks, and fish. \n\nKeys consist of a series of choices that lead the user to the correct name of a given item. \"Dichotomous\" means \"divided into two parts\". Therefore, dichotomous keys always give two choices in each step. ",
      "updated_at":"2018-02-23T00:09:17.075867+00:00",
      "label":"aca-choices-bio-dichotomous-keys",
      "content":"#markdown\n\n## What is a *dichotomous key*?\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":0},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nAn `if`-`else` statement in Python.\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nA taxonomic rank.\\\\n\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nA tool to identify organisms by dividing groups into two categories. \\\\n\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nAn `if`-`elif`-`else` block of code.\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"#markdown\\n\\nAn `if`-`else` statement in Python.\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"if-else\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nA taxonomic rank.\\n\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"taxonomic-rank\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nA tool to identify organisms by dividing groups into two categories. \\n\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"identify-organisms\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nAn `if`-`elif`-`else` block of code.\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"incorrect-space\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 0\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":""
    },
    {
      "language":0,
      "title":"I love marsupials!",
      "notes":"#markdown \nDescribing the problem in your own words helps you *understand it better*, and *identify the pieces of code* you need to solve it:\n\n**The program must *decide* what messages to print, based on user input.**\n\nOnce you've got the pieces, you need to work out where they go.  Here, the `if` *controls* one of the `print` statements, but it needs the `input` *before* it can make a decision.  The correct order is:\n\n1. `input` for reading user input;\n2. `print` the first message.\n3. `if` statement for deciding to run some code to print a second message (or not);\n\nWe get input in the usual way, choosing `feature` as the variable name:\n\n```norun;\nfeature = input('What is the feature? ')\n```\n\nSince the `lang:out;That's a cool feature!` message is printed every time, we use no indentation, so our first `print` occurs straight after we ask for input:\n\n```norun\nfeature = input('What is the feature? ')\nprint(\"That's a cool feature.\")\n```\n\nThen, we check if `feature` is equal to `'pouch'`. If so, we `print` our optional message saying `'I love marsupials!'`, which gives us our final answer:\n",
      "updated_at":"2018-03-05T23:32:47.384149+00:00",
      "label":"aca-py3-bio-pouch",
      "content":"#markdown\nYou're in science class and the teacher is teaching you different features of animals.\n\n[Marsupials](https:\/\/en.wikipedia.org\/wiki\/Marsupial) are animals that have pouches, like a kangaroo!\n\n<figure class=\"align-center\">\n  <img alt=\"A kangaroo with its joey in its pouch\" src=\"https:\/\/groklearning-cdn.com\/problems\/ezy28J3bVFGVmHb2LxPoYC\/kangaroo_joey_3_4.jpg\" width=\"60%\">\n  <figcaption>A kangaroo carries its young, or *joey*, in its pouch<\/figcaption>\n<\/figure>\n\n\nWrite a program to check the feature the teacher says. Since all animal features are pretty cool, no matter what feature it is your program still should print out `lang:out;That's a cool feature.`\n\n```eg:none;terminal;\nWhat is the feature? @@@feathers\nThat's a cool feature.\n```\n\nIf it's a <code data-lang=\"in\">pouch<\/code>, the program should also print <code data-lang=\"out\">I love marsupials!<\/code> For example:\n\n```eg:none;terminal;\nWhat is the feature? @@@pouch\nThat's a cool feature.\nI love marsupials!\n```\n\nHere is another example, with a different feature:\n\n```eg:none;terminal;\nWhat is the feature? @@@gills\nThat's a cool feature.\n```\n\nRemember that you should always print out `lang:out;That's a cool feature.`, whether that feature is a <code data-lang=\"in\">pouch<\/code> or not.\n\n> ## Double quotes\n> Remember if you have a single quote *inside* the string, you will need to use *double-quotes* to display it. \n> \n> For example: `\"She's cool.\"`",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if",
        "string:eq"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown \nDescribing the problem in your own words helps you *understand it better*, and *identify the pieces of code* you need to solve it:\n\n**The program must *decide* what messages to print, based on user input.**\n\nOnce you've got the pieces, you need to work out where they go.  Here, the `if` *controls* one of the `print` statements, but it needs the `input` *before* it can make a decision.  The correct order is:\n\n1. `input` for reading user input;\n2. `print` the first message.\n3. `if` statement for deciding to run some code to print a second message (or not);\n\nWe get input in the usual way, choosing `feature` as the variable name:\n\n```norun\nfeature = input('What is the feature? ')\n```\n\nSince the `lang:out;That's a cool feature!` message is printed every time, we use no indentation, so our first `print` occurs straight after we ask for input:\n\n```norun\nfeature = input('What is the feature? ')\nprint(\"That's a cool feature.\")\n```\n\nThen, we check if `feature` is equal to `'pouch'`. If so, we `print` our optional message saying `'I love marsupials!'`, which gives us our final answer:\n"
    },
    {
      "language":0,
      "title":"Smells fishy",
      "notes":"#markdown\nThis solution is very similar to the last one. We start by creating a variable (`gills` is a good name) and getting some `input` from the user:\n\n```norun\ngills = input('Does the creature have gills? ')\n```\n\n`if` the value entered is `'yes'`:\n\n```norun\ngills = input('Does the creature have gills? ')\nif gills == 'yes':\n  print('It is a fish!')\n```\n\nThe we add the `else` clause for any other value (i.e. when the condition is `False`) to get the solution:\n",
      "updated_at":"2018-02-23T02:47:26.444229+00:00",
      "label":"aca-py3-bio-dichtomous-fishy",
      "content":"#markdown\nWe can also classify animals based on their *features* or *characteristics*.\n\nLet's make another *dichotomous key* to tell if an animal is a fish, or not.\n\nWhen choosing a characteristic, it helps to try and be precise, for example all fish are *cold-blooded*, but that is also a characteristic of *reptiles*.\n\nSo instead, we can use *gills*. All fish have gills so they can breathe underwater. \n\nWrite a program to ask if the creature has gills, and if the answer is `yes`, then it should respond `lang:out;It is a fish!`.\n\nHere's an example:\n\n```terminal;eg:none;\nDoes the creature have gills? @@@yes\nIt is a fish!\n\n```\n\nIf they say *anything* else, you should say, `The creature is not a fish.` \n\n```terminal;eg:none;\nDoes the creature have gills? @@@no\nThe creature is not a fish.\n\n```\n\nIf the answer is not *exactly* `yes`, you should still print out the other message. For example, your programs does not understand slang:\n\n```terminal;eg:none;\nDoes the creature have gills? @@@yeah\nThe creature is not a fish.\n\n```\n",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-else",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThis solution is very similar to the last one. We start by creating a variable (`gills` is a good name) and getting some `input` from the user:\n\n```norun\ngills = input('Does the creature have gills? ')\n```\n\n`if` the value entered is `'yes'`:\n\n```norun\ngills = input('Does the creature have gills? ')\nif gills == 'yes':\n  print('It is a fish!')\n```\n\nThe we add the `else` clause for any other value (i.e. when the condition is `False`) to get the solution:\n"
    },
    {
      "language":0,
      "title":"Plant or animal?",
      "notes":"#markdown\nYour program needs to *decide* which message to print based on user input. So you need `input` and an `if` statement.\n\nThe `input` value should be stored in a variable, let's call it `cell_wall` (we can't have spaces in our variable names, so we can use the underscore to indicate that it is two words):\n\n```norun\ncell_wall = input('Does it have a cell wall? ')\n```\n\nTo handle the plant case, the `if` checks that the value entered is equal to `'yes'`.  **Watch the spelling and remember that you have to type the whole word!**\n\n```norun\ncell_wall = input('Does it have a cell wall? ')\nif cell_wall == 'yes':\n  print(\"Then it's a plant!\")\n```\n\nThe program needs to do something *else* (hint hint!) for any other value of `cell_wall`. We use an `else` clause that prints `\"It's probably an animal.\"` when the condition is `False`:\n\n```norun\ncell_wall = input('Does it have a cell wall? ')\nif cell_wall == 'yes':\n  print(\"Then it's a plant!\")\nelse:\n  print(\"It's probably an animal.\")\n```\n\nIt is also possible to do this with two separate `if` statements. The second one would need to use `cell_wall != 'yes'` (*is not equal to*) instead.\n",
      "updated_at":"2018-02-23T02:45:08.125684+00:00",
      "label":"aca-py3-bio-dichtomous-plant-animal",
      "content":"#markdown\nLet's create our first *dichotomous key* to classify if an organism is a plant or an animal.\n\nScientifically, the difference between a plant and animal is that plants have a cell wall, while animals do not. \n\nWrite to program to check if the organism is a plant or an animal, if the user types in `yes`, then it should say `lang:out;Then it's a plant!`.\n\nHere's an example:\n\n```terminal;eg:none;\nDoes it have a cell wall? @@@yes\nThen it's a plant!\n\n```\n\nIf they say *anything* else, you should say, `lang:out;It's probably an animal.` \n\n```lang:py3;terminal;eg:none;\nDoes it have a cell wall? @@@no\nIt's probably an animal.\n\n```\n\nIf the answer is not *exactly* `yes`, you should still print out the other message. For example, your programs does not understand slang:\n\n```terminal;eg:none;\nDoes it have a cell wall? @@@yesssss\nIt's probably an animal.\n\n```\n\n> ## Hint!\n> Remeber when we print a `'` in our string, we need to use double-quotes `\"` around our message.",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-else",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nYour program needs to *decide* which message to print based on user input. So you need `input` and an `if` statement.\n\nThe `input` value should be stored in a variable, let's call it `cell_wall` (we can't have spaces in our variable names, so we can use the underscore to indicate that it is two words):\n\n```norun\ncell_wall = input('Does it have a cell wall? ')\n```\n\nTo handle the plant case, the `if` checks that the value entered is equal to `'yes'`.  **Watch the spelling and remember that you have to type the whole word!**\n\n```norun\ncell_wall = input('Does it have a cell wall? ')\nif cell_wall == 'yes':\n  print(\"Then it's a plant!\")\n```\n\nThe program needs to do something *else* (hint hint!) for any other value of `cell_wall`. We use an `else` clause that prints `\"It's probably an animal.\"` when the condition is `False`:\n\n```norun\ncell_wall = input('Does it have a cell wall? ')\nif cell_wall == 'yes':\n  print(\"Then it's a plant!\")\nelse:\n  print(\"It's probably an animal.\")\n```\n\nIt is also possible to do this with two separate `if` statements. The second one would need to use `cell_wall != 'yes'` (*is not equal to*) instead.\n"
    },
    {
      "language":0,
      "title":"The \"bin chicken\"",
      "notes":"#markdown\nLike the last program, we *decide* which message to print based on user input.\n\nThe first thing we do is get the animal, so a good variable name to store that `input` is `animal`:\n\n```lang:py3;eg:bin-chicken-input;norun;\nanimal = input('What animal is it? ')\n```\n\nThere are two possible lines of output, one `if` the `animal` variable contains the string `'ibis'`, and another line that never changes.\n\nWe check if `animal` is equal to `'ibis'` and if it is we `print` the excited response:\n\n```lang:py3;eg:bin-chicken-if;norun;\nanimal = input('What animal is it? ')\nif animal == 'ibis':\n  print('A Bin Chicken!')\n```\n\nAnd, since we always print the last message regardless of what the user types in, we add a `print` statement including the `animal` in the output. We don't indent it because it is not part of the body of the `if` statement. This gives us our final solution:\n",
      "updated_at":"2018-03-28T03:28:44.164033+00:00",
      "label":"aca-py3-bio-bin-chicken",
      "content":"#markdown\nYou're wandering around the streets of Sydney and see a mysterious animal nearby. Lots of animals native to Australia are now forced to live in cities because humans have altered their natural environments. This can make survival difficult for these species.\n\nWhatever the `input` from the user, your program should print `lang:out;I hope the {animal} can survive out there...`, **substituting the animal's name into the output**. For example:\n\n```eg:none;terminal;\nWhat animal is it? @@@bat\nI hope the bat can survive out there...\n\n```\n\nThere's a good chance in large cities you'll see an [ibis](https:\/\/en.wikipedia.org\/wiki\/Australian_white_ibis), which local residents refer to informally as the [Bin Chicken](http:\/\/www.nationalgeographic.com.au\/australia\/magpie-beats-bin-chicken-for-aus-bird-of-the-year.aspx).\n\n<figure class=\"align-center\">\n  <img alt=\"An ibis standing in the grass\" src=\"https:\/\/groklearning-cdn.com\/problems\/p77FrePhW2KBM98pNkusxB\/ibis_3_5.jpg\" width=\"60%\">\n  <figcaption>The Australian white ibis<\/figcaption>\n<\/figure>\n\nIf the animal is an `lang:in;ibis`, exclaim that you've seen `lang:out;A Bin Chicken!`.\n\n```eg:none;terminal;\nWhat animal is it? @@@ibis\nA Bin Chicken!\nI hope the ibis can survive out there...\n\n```\n\nAny answer other than `lang:in;ibis` should work the same way:\n\n```eg:none;terminal;\nWhat animal is it? @@@quokka\nI hope the quokka can survive out there...\n\n```\n\n> ## The sad story of the Ibis\n> The *Australian White Ibis* has been [forced to live off rubbish in urban environments](https:\/\/www.gizmodo.com.au\/2017\/11\/in-defence-of-the-bin-chicken\/) due to human development gradually forcing it out of its natural habitat. Eating rubbish isn't good for them, and restoring their wetlands would go a long way to improving their long-term survival.",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if",
        "string:eq",
        "variables"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nLike the last program, we *decide* which message to print based on user input.\n\nThe first thing we do is get the animal, so a good variable name to store that `input` is `animal`:\n\n```lang:py3;eg:bin-chicken-input;norun;\nanimal = input('What animal is it? ')\n```\n\nThere are two possible lines of output, one `if` the `animal` variable contains the string `'ibis'`, and another line that never changes.\n\nWe check if `animal` is equal to `'ibis'` and if it is we `print` the excited response:\n\n```lang:py3;eg:bin-chicken-if;norun\nanimal = input('What animal is it? ')\nif animal == 'ibis':\n  print('A Bin Chicken!')\n```\n\nAnd, since we always print the last message regardless of what the user types in, we add a `print` statement including the `animal` in the output. We don't indent it because it is not part of the body of the `if` statement. This gives us our final solution:\n"
    },
    {
      "language":0,
      "title":"What's my diet?",
      "notes":"#markdown\nThere are a few different approaches you can take to write your solution to this question. Here we'll describe one where you build up the final answer from the \"outside in\".\n\nThe first step is to ask the user the first question, `'Does it eat meat? '` with our `input` function:\n\n```norun\nmeat = input('Does it eat meat? ')\n```\n\nNext, we know that if the user does not answer `'yes'` we print `\"It's a herbivore!\"`, so we can write the `if` statement for the `meat` condition:\n\n```norun\nmeat = input('Does it eat meat? ')\nif meat == \"y\":\n  # ask the next question\nelse:\n  print(\"It's a Herbivore!\")\n```\n\nWe've used a comment here as a placeholder for our second question and nested `if` statement, but have filled in the `else` with the correct output. By doing it this way, we can make sure we have our indentation correct.\n\n*The above example won't run (because there is nothing inside the `if` block), but it is still a good way of geting the indentation right for each of your code blocks.*\n\nWith that done, we add our second question and the second `if` statement, which gets you to the final solution. This strategy is an effective way of nesting statements such that you don't get confused about which `else` belongs to which `if` and keep your indentation correct.\n",
      "updated_at":"2018-02-23T03:10:52.795810+00:00",
      "label":"aca-py3-bio-nesting-eats",
      "content":"#markdown\n\nIn our earlier notes we saw how we could use an `elif` statement to print different messages for animals that were `'carnivore'`, `'herbivore'` or `'omnivore'`. We'll use what we just learned about nesting to do this a little bit differently.\n\nWrite a program that asks the user if the animal eats meat or plants and depending on their answer identifies the diet of the animal. It should ask about meat first.\n\nYou must ask each question separately and in the correct order, and you should only ask the second question if it is required. Here is how the program behaves when you answer `'no'` to `'Does it eat meat?' `:\n\n```eg:none;terminal;\nDoes it eat meat? @@@no\nIt's a herbivore!\n\n```\n\nIf you answer `'yes'` to the first question, ask `'Does it eat plants? '`:\n\n```eg:none;terminal;\nDoes it eat meat? @@@yes\nDoes it eat plants? @@@no\nIt's a carnivore!\n\n```\n\nAnd `'yes'` to both questions:\n\n```eg:none;terminal;\nDoes it eat meat? @@@yes\nDoes it eat plants? @@@yes\nIt's an omnivore!\n\n```\n\n> ## Hint!\n> If you're having trouble with the nesting, a flowchart might help you work out how to nest your `if` statements.",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "nested-if"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThere are a few different approaches you can take to write your solution to this question. Here we'll describe one where you build up the final answer from the \"outside in\".\n\nThe first step is to ask the user the first question, `'Does it eat meat? '` with our `input` function:\n\n```norun\nmeat = input('Does it eat meat? ')\n```\n\nNext, we know that if the user does not answer `'yes'` we print `\"It's a herbivore!\"`, so we can write the `if` statement for the `meat` condition:\n\n```norun\nmeat = input('Does it eat meat? ')\nif meat == \"y\":\n  # ask the next question\nelse:\n  print(\"It's a Herbivore!\")\n```\n\nWe've used a comment here as a placeholder for our second question and nested `if` statement, but have filled in the `else` with the correct output. By doing it this way, we can make sure we have our indentation correct.\n\n*The above example won't run (because there is nothing inside the `if` block), but it is still a good way of geting the indentation right for each of your code blocks.*\n\nWith that done, we add our second question and the second `if` statement, which gets you to the final solution. This strategy is an effective way of nesting statements such that you don't get confused about which `else` belongs to which `if` and keep your indentation correct.\n"
    },
    {
      "language":20,
      "title":"Which is it?",
      "notes":"#markdown\nWe call checking the correctness of our code without running it *tracing*. For algorithms like this, we should be checking the conditions in our `if` statements, and whether or not we print the correct output when we move down each branch.",
      "updated_at":"2018-02-23T00:15:41.887562+00:00",
      "label":"aca-choices-bio-flowchart-eats",
      "content":"#markdown\n\n## Which of the programs is the correct representation of the algorithm shown in the flowchart below?\n\n<svg width=\"494px\" height=\"331px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 494 331\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>nested-eats<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-3\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-4\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n        <polygon id=\"path-5\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"nested-eats\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g>\n            <g id=\"start\" transform=\"translate(0.000000, 175.000000)\">\n                <circle id=\"oval_start\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n                <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n                <\/text>\n                <path d=\"M74,35 L125.496575,35\" id=\"start_line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"start_line-decoration-1\" d=\"M125.496575,35 L114.696575,32 L114.696575,38 L125.496575,35 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n            <\/g>\n            <g id=\"is-herbi\" transform=\"translate(265.000000, 271.000000)\">\n                <g id=\"herbi_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"herbivore\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"15.6325\" y=\"42\">herbivore!<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-carni\" transform=\"translate(399.000000, 181.000000)\">\n                <g id=\"carni_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"carnivore\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"33.206\" y=\"25\">It\u2019s a<\/tspan>\n                    <tspan x=\"16.4165\" y=\"42\">carnivore!<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"is-omni\" transform=\"translate(399.000000, 0.000000)\">\n                <g id=\"omni_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"omnivore\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"29.258\" y=\"25\">It\u2019s an<\/tspan>\n                    <tspan x=\"16.07\" y=\"42\">omnivore!<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eat-plants\" transform=\"translate(265.000000, 60.000000)\">\n                <g id=\"plants_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-4\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"eat-plants?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"26.2565\" y=\"53\">Does it eat <\/tspan>\n                    <tspan x=\"38.0515\" y=\"70\">plants?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"plants_yes\" transform=\"translate(297.000000, 29.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"plants_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"plants_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"plants_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"meat_yes\" transform=\"translate(164.000000, 120.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"meat_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"meat_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"meat_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"plants_no\" transform=\"translate(301.000000, 183.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"plants_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"plants_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"plants_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"eat-meat\" transform=\"translate(133.000000, 150.000000)\">\n                <g id=\"meat_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-5\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"eat-meat?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"37.803\" y=\"54\">Does it<\/tspan>\n                    <tspan x=\"29.5255\" y=\"71\">eat meat?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"meat_no\" transform=\"translate(168.000000, 273.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"meat_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"meat_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"meat_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n        <\/g>\n    <\/g>\n<\/svg>",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":0},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```\\\\nmeat = input('Does it eat meat? ')\\\\nif meat == 'yes':\\\\n  plants = input('Does it eat plants? ')\\\\n  if plants == 'yes':\\\\n    print(\\\\\\\"It's a carnivore!\\\\\\\")\\\\n  else:\\\\n    print(\\\\\\\"It's an omnivore!\\\\\\\")\\\\nelse:\\\\n  print(\\\\\\\"It's a herbivore!\\\\\\\")\\\\n```\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```\\\\nmeat = input('Does it eat meat? ')\\\\nif meat == 'no':\\\\n  plants = input('Does it eat plants? ')\\\\n  if plants == 'yes':\\\\n    print(\\\\\\\"It's a herbivore!\\\\\\\")\\\\n  else:\\\\n    print(\\\\\\\"It's an omnivore!\\\\\\\")\\\\nelse:\\\\n  print(\\\\\\\"It's a carnivore!\\\\\\\")\\\\n```\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```\\\\nmeat = input('Does it eat meat? ')\\\\nif meat == 'yes':\\\\n  plants = input('Does it eat plants? ')\\\\n  if plants == 'yes':\\\\n    print(\\\\\\\"It's an omnivore!\\\\\\\")\\\\n  else:\\\\n    print(\\\\\\\"It's a carnivore!\\\\\\\")\\\\nelse:\\\\n  print(\\\\\\\"It's a herbivore!\\\\\\\")\\\\n```\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\n```\\\\nmeat = input('Does it eat meat? ')\\\\nif meat == 'no':\\\\n  print(\\\\\\\"It's a herbivore!\\\\\\\")\\\\nelse:\\\\n  plants = input('Does it eat plants? ')\\\\n  if plants == 'yes':\\\\n    print(\\\\\\\"It's a carnivore!\\\\\\\")\\\\n  else:\\\\n    print(\\\\\\\"It's an omnivore!\\\\\\\")\\\\n```\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"#markdown\\n\\n```\\nmeat = input('Does it eat meat? ')\\nif meat == 'yes':\\n  plants = input('Does it eat plants? ')\\n  if plants == 'yes':\\n    print(\\\"It's a carnivore!\\\")\\n  else:\\n    print(\\\"It's an omnivore!\\\")\\nelse:\\n  print(\\\"It's a herbivore!\\\")\\n```\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"carni-omni\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```\\nmeat = input('Does it eat meat? ')\\nif meat == 'no':\\n  plants = input('Does it eat plants? ')\\n  if plants == 'yes':\\n    print(\\\"It's a herbivore!\\\")\\n  else:\\n    print(\\\"It's an omnivore!\\\")\\nelse:\\n  print(\\\"It's a carnivore!\\\")\\n```\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"no-answers\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```\\nmeat = input('Does it eat meat? ')\\nif meat == 'yes':\\n  plants = input('Does it eat plants? ')\\n  if plants == 'yes':\\n    print(\\\"It's an omnivore!\\\")\\n  else:\\n    print(\\\"It's a carnivore!\\\")\\nelse:\\n  print(\\\"It's a herbivore!\\\")\\n```\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"flowchart-algo\"\n    },\n    {\n      \"content\": \"#markdown\\n\\n```\\nmeat = input('Does it eat meat? ')\\nif meat == 'no':\\n  print(\\\"It's a herbivore!\\\")\\nelse:\\n  plants = input('Does it eat plants? ')\\n  if plants == 'yes':\\n    print(\\\"It's a carnivore!\\\")\\n  else:\\n    print(\\\"It's an omnivore!\\\")\\n```\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"no-yes\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 0\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThis question tests the student's ability to *trace* their algorithm. This involves working through the code line by line without running it, and checking that the code does what you expect it to do at each stage by comparing it with your algorithm. Sometimes this process is referred to as *desk-checking*.\n\nFor algorithms like this, we should be checking the conditions in our `if` statements, and whether or not we print the correct output when we move down each branch."
    },
    {
      "language":20,
      "title":"Nesting or elif?",
      "notes":"#markdown\nIf you're only checking the value of a single variable for different options, it makes sense to use an `elif` because the variable can only be one of the possible values.\n\nIf you're checking more than one variable, then by checking them in order it is possible you can reduce the number of conditions you need to test to work out what your program should do. In this case, nesting is the best option.",
      "updated_at":"2018-02-27T20:42:06.672622+00:00",
      "label":"aca-choices-bio-nesting-elif",
      "content":"#markdown\n\n## When is it better to use nesting instead of an `lang:py3;elif`?\n",
      "options":"{}",
      "editor":0,
      "workspace":"[{\"is_static\":false,\"unrenamable\":true,\"content\":\"{\\\"type\\\":0,\\\"settings\\\":{\\\"random\\\":true,\\\"layout\\\":0},\\\"choices\\\":[{\\\"uuid\\\":\\\"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nWhen there are more than two possible answers to a single question.\\\"},{\\\"uuid\\\":\\\"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nUsing `lang:py3;elif` is always the best option.\\\\n\\\"},{\\\"uuid\\\":\\\"ae57280b-48b2-407f-9963-7f6755ec060f\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nWhen you want to check something that depends on a previous condition.\\\\n\\\"},{\\\"uuid\\\":\\\"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\\\",\\\"content\\\":\\\"#markdown\\\\n\\\\nUsing nesting is always the best option.\\\"}]}\",\"readonly\":true,\"path\":\"question.json\",\"undeletable\":true},{\"content\":\"{\\\"choices\\\":[]}\",\"path\":\"answer.json\",\"is_static\":false,\"undeletable\":true,\"unrenamable\":true}]",
      "concepts":[

      ],
      "choices":"{\n  \"type\": 0,\n  \"correct_message\": \"That's right!\",\n  \"incorrect_message\": \"Hmmm... that doesn't seem right.\",\n  \"options\": [\n    {\n      \"content\": \"#markdown\\n\\nWhen there are more than two possible answers to a single question.\",\n      \"is_correct\": false,\n      \"uuid\": \"d6362e1a-b58a-4a41-86b6-a258f7ea4f76\",\n      \"label\": \"more-than-two-options\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nUsing `lang:py3;elif` is always the best option.\\n\",\n      \"is_correct\": false,\n      \"uuid\": \"40daf4f5-90c1-40ef-a7e1-5eed3dc0296f\",\n      \"label\": \"always-elif\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nWhen you want to check something that depends on a previous condition.\\n\",\n      \"is_correct\": true,\n      \"uuid\": \"ae57280b-48b2-407f-9963-7f6755ec060f\",\n      \"label\": \"multi-vars\"\n    },\n    {\n      \"content\": \"#markdown\\n\\nUsing nesting is always the best option.\",\n      \"is_correct\": false,\n      \"uuid\": \"5c3f4ede-4260-479d-a7a5-c0bc8bf35310\",\n      \"label\": \"always-nest\"\n    }\n  ],\n  \"answers\": [\n    \"ae57280b-48b2-407f-9963-7f6755ec060f\"\n  ],\n  \"settings\": {\n    \"random\": true,\n    \"layout\": 0\n  },\n  \"boolean_table\": {\n    \"rows\": [],\n    \"columns\": []\n  }\n}",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nYou can often represent any algorithm using both of these constructs, but as a general rule nesting is the preferred approach when testing multiple variables in cases like the ones we've shown in this module.\n\nThere are other ways of testing multiple conditions at the same time using boolean operators, but it is beyond the scope of this challenge."
    },
    {
      "language":0,
      "title":"Which macropod?",
      "notes":"#markdown\nWe start our program by asking the user the first question, `'Is it noctural? '` with our `input` function:\n\n```norun\nnoctural = input('Is it nocturnal? ')\n```\n\nIf the user answers `'yes'` we print `\"Is is from the genus Petrogale.\"`, so we can write the `if` statement for when `noctural == 'yes'`:\n\n```norun\nnocturnal = input('Is it nocturnal? ')\nif nocturnal == \"yes\":\n    print('It is from the genus Petrogale.')\n```\n\nWith that done, we can think about what needs to go into our `else` clause. Since we'll be asking another question, let's go ahead and do that:\n\n```norun\nnocturnal = input('Is it nocturnal? ')\nif nocturnal == \"yes\":\n  print('It is from the genus Petrogale.')\nelse:\n  spur = input('Does it have a spur on its tail? ')\n```\n\nIf the answer to that question is `yes`, it is from the genus `'Onychogalea'`:\n\n\n```norun\nnocturnal = input('Is it nocturnal? ')\nif nocturnal == \"yes\":\n  print('It is from the genus Petrogale.')\nelse:\n  spur = input('Does it have a spur on its tail? ')\n  if spur == \"yes\":\n    print('It is from the genus Onychogalea.')\n```\n\nWe can then add our final `else` - being very careful with our indentation - for the `Macropus` case, giving us our final solution:\n",
      "updated_at":"2018-02-23T03:06:52.728467+00:00",
      "label":"aca-py3-bio-nesting-macropod",
      "content":"#markdown\n\nThere are lots of different types of wallaby, and many of them have distinctive features that place them into different genus groups inside the family [Macropodidae](https:\/\/en.wikipedia.org\/wiki\/Macropodidae). Distinctive features of some genuses include:\n\n* [Onychogalea](https:\/\/en.wikipedia.org\/wiki\/Nail-tail_wallaby) - Nail-tail wallabies have a horny spur on the end of their tails\n* [Petrogale](https:\/\/en.wikipedia.org\/wiki\/Rock-wallaby) - Rock-wallabies are very agile. These nocturnal wallabies live in rocky locations where they can find refuge during the day\n* [Macropus](https:\/\/en.wikipedia.org\/wiki\/Macropus) - The largest of the genuses in this family, many macropods that live on the ground are in this group.\n\nWrite a program that will identify the genus according to the algorithm shown below:\n\n<svg width=\"493px\" height=\"331px\" style=\"position: relative; display: block; margin: 10 auto; width: 90%\" viewBox=\"0 0 493 331\" version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n    <!-- Generator: Sketch 48.2 (47327) - http:\/\/www.bohemiancoding.com\/sketch -->\n    <title>nested-macropod<\/title>\n    <desc>Created with Sketch.<\/desc>\n    <defs>\n        <rect id=\"path-1\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-2\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <rect id=\"path-3\" x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n        <polygon id=\"path-4\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n        <polygon id=\"path-5\" points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n    <\/defs>\n    <g id=\"nested-macropod\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g>\n            <g id=\"start\" transform=\"translate(0.000000, 85.000000)\">\n                <circle id=\"oval_start\" fill=\"#7B188F\" cx=\"35\" cy=\"35\" r=\"35\"><\/circle>\n                <text id=\"Start\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"19.943\" y=\"39\">Start<\/tspan>\n                <\/text>\n                <path d=\"M74,35 L125.496575,35\" id=\"start_line\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"start_line-decoration-1\" d=\"M125.496575,35 L114.696575,32 L114.696575,38 L125.496575,35 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n            <\/g>\n            <g id=\"macro\" transform=\"translate(398.000000, 271.000000)\">\n                <g id=\"macro_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"macropus\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"16.518\" y=\"33\">Macropus<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"onych\" transform=\"translate(398.000000, 90.000000)\">\n                <g id=\"onych_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-2\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"onychogalea\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"7.379\" y=\"34\">Onychogalea<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"petro\" transform=\"translate(264.000000, 0.000000)\">\n                <g id=\"petro_rect\">\n                    <use fill=\"#7B188F\" fill-rule=\"evenodd\" xlink:href=\"#path-3\"><\/use>\n                    <rect x=\"0\" y=\"0\" width=\"95\" height=\"60\"><\/rect>\n                <\/g>\n                <text id=\"petrogale\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"17.7955\" y=\"35\">Petrogale<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"nocturnal\" transform=\"translate(130.000000, 60.000000)\">\n                <g id=\"noct_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-4\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"is-nocturnal?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"48.856\" y=\"53\">Is it <\/tspan>\n                    <tspan x=\"27.0335\" y=\"70\">nocturnal?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"noct_yes\" transform=\"translate(162.000000, 29.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"noct_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"noct_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"noct_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"spur_yes\" transform=\"translate(297.000000, 120.000000)\">\n                <path d=\"M29,1 L96.8818484,1\" id=\"spur_yes_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"spur_yes_line1-decoration-1\" d=\"M96.8818484,1 L86.0818484,-2 L86.0818484,4 L96.8818484,1 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M29,27.7632697 L29,1\" id=\"spur_yes_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.725\" y=\"32\">yes<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"noct_no\" transform=\"translate(166.000000, 183.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"noct_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"noct_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"noct_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"has-spur\" transform=\"translate(266.000000, 150.000000)\">\n                <g id=\"spur_rect\">\n                    <use fill=\"#FF5900\" fill-rule=\"evenodd\" xlink:href=\"#path-5\"><\/use>\n                    <polygon points=\"60.5 0 121 60.5 60.5 121 0 60.5\"><\/polygon>\n                <\/g>\n                <text id=\"has-spur?\" font-family=\"Lato-Bold, Lato\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFFFFF\">\n                    <tspan x=\"21.3635\" y=\"56\">Does it have <\/tspan>\n                    <tspan x=\"22.452\" y=\"73\">a spur on its <\/tspan>\n                    <tspan x=\"47.106\" y=\"90\">tail?<\/tspan>\n                <\/text>\n            <\/g>\n            <g id=\"spur_no\" transform=\"translate(301.000000, 273.000000)\">\n                <path d=\"M25,27 L92.8818484,27\" id=\"spur_no_line1\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path id=\"spur_no_line1-decoration-1\" d=\"M92.8818484,27 L82.0818484,24 L82.0818484,30 L92.8818484,27 Z\" stroke=\"#000000\" fill=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <path d=\"M25,26.7632697 L25,0\" id=\"spur_no_line\" stroke=\"#000000\" stroke-linecap=\"square\"><\/path>\n                <text font-family=\"Lato-Regular, Lato\" font-size=\"12\" font-weight=\"normal\" fill=\"#000000\">\n                    <tspan x=\"1.75\" y=\"12\">no<\/tspan>\n                <\/text>\n            <\/g>\n        <\/g>\n    <\/g>\n<\/svg>\n\nThe first question is `'Is it nocturnal? '`. if it is, it is from genus `'Petrogale'`:\n\n```eg:none;terminal;\nIs it nocturnal? @@@yes\nIt is from the genus Petrogale.\n\n```\n\nIf the answer to the first question is `'no'`, ask `'Does it have a spur on its tail? '` to see if it is `'Onychogalea'`:\n\n```eg:none;terminal;\nIs it nocturnal? @@@no\nDoes it have a spur on its tail? @@@yes\nIt is from the genus Onychogalea.\n\n```\n\nIf the answer to the spur question is `'no'`:\n\n```eg:none;terminal;\nIs it nocturnal? @@@no\nDoes it have a spur on its tail? @@@no\nIt is from the genus Macropus.\n\n```\n\n> ## Hint!\n> Remember that the algorithm in the flowchart provides hints about how to nest your `if` statements.",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-else",
        "nested-if"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nWe start our program by asking the user the first question, `'Is it noctural? '` with our `input` function:\n\n```norun\nnoctural = input('Is it nocturnal? ')\n```\n\nIf the user answers `'yes'` we print `\"Is is from the genus Petrogale.\"`, so we can write the `if` statement for when `noctural == 'yes'`:\n\n```norun\nnocturnal = input('Is it nocturnal? ')\nif nocturnal == \"yes\":\n    print('It is from the genus Petrogale.')\n```\n\nWith that done, we can think about what needs to go into our `else` clause. Since we'll be asking another question, let's go ahead and do that:\n\n```norun\nnocturnal = input('Is it nocturnal? ')\nif nocturnal == \"yes\":\n  print('It is from the genus Petrogale.')\nelse:\n  spur = input('Does it have a spur on its tail? ')\n```\n\nIf the answer to that question is `yes`, it is from the genus `'Onychogalea'`:\n\n\n```norun\nnocturnal = input('Is it nocturnal? ')\nif nocturnal == \"yes\":\n  print('It is from the genus Petrogale.')\nelse:\n  spur = input('Does it have a spur on its tail? ')\n  if spur == \"yes\":\n    print('It is from the genus Onychogalea.')\n```\n\nWe can then add our final `else` - being very careful with our indentation - for the `Macropus` case, giving us our final solution:\n\n"
    },
    {
      "language":0,
      "title":"Find the animal!",
      "notes":"#markdown\nThis is basically the same as the previous question.\n\nThe key to this problem is to use an `if`-`elif`-`elif`-`else` structure. This is how you attach a single `else` block to a lot of `if`'s so that we can catch the words which are not known.\n\nWe start by getting the feature:\n```norun\nfeature = input('Characteristic? ')\n```\nThen checking that input against the cases from the table, `'No spine'`, `'Lives in water'` and `'Flying'`, and match up to their corresponding output.\n```norun\nif feature == 'Pouch':\n  print('Kangaroo!')\nelif feature == 'Casque':\n  print('Cassowary!')\nelif feature == 'Claws':\n  print('Goanna!')\n```\nFinally, adding an `else` to catch everything else\n```norun\nelse:\n  print(\"I do not know.\")\n```\n",
      "updated_at":"2018-02-23T03:03:05.677974+00:00",
      "label":"aca-py3-bio-find-the-animal",
      "content":"#markdown\n\nIn Biology, we can use the *characteristics* of an animal to classify them, or separate one from another.\n\nYour teacher has given you a list of Australian animals with a characteristic of each. Write a program to accept an `input` characteristic, and print out the correct animal from the table.\n\n<table class=\"table table-bordered\">\n  <thead>\n    <tr>\n      <th>Animal<\/th>\n      <th>Characteristic<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>Kangaroo<\/td>\n      <td>Pouch<\/td>\n    <\/tr>\n    <tr>\n      <td>Cassowary<\/td>\n      <td>Casque<\/td>\n    <\/tr>\n    <tr>\n      <td>Goanna<\/td>\n      <td>Claws<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n\nYour program should ask for the characteristic then print out the corresponding animal. For example:\n\n```lang:py3;terminal;eg:none;\nCharacteristic? @@@Pouch\nKangaroo!\n\n```\n\nNotice that there is an exclamation mark at the end of the output!\n\nHere is another example:\n\n```lang:py3;terminal;eg:none;\nCharacteristic? @@@Casque\nCassowary!\n\n```\n\nIf the feature isn't one of the three above, your program should print <code data-lang=\"out\">I do not know.<\/code> For example:\n\n```lang:py3;terminal;eg:none;\nCharacteristic? @@@Hooves\nI do not know.\n\n```",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-elif-else",
        "print",
        "variables"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThis is basically the same as the previous question.\n\nThe key to this problem is to use an `if`-`elif`-`elif`-`else` structure. This is how you attach a single `else` block to a lot of `if`'s so that we can catch the words which are not known.\n\nWe start by getting the feature:\n```norun\nfeature = input('Characteristic? ')\n```\nThen checking that input against the cases from the table, `'No spine'`, `'Lives in water'` and `'Flying'`, and match up to their corresponding output.\n```norun\nif feature == 'Pouch':\n  print('Kangaroo!')\nelif feature == 'Casque':\n  print('Cassowary!')\nelif feature == 'Claws':\n  print('Goanna!')\n```\nFinally, adding an `else` to catch everything else\n```norun\nelse:\n  print(\"I do not know.\")\n```\n"
    },
    {
      "language":0,
      "title":"Feature to class",
      "notes":"#markdown\nThe key to this problem is to use an `if`-`elif`-`elif`-`else` structure. This is how you attach a single `else` block to a lot of `if`'s so that we can catch the words which are not known.\n\nWe start by getting the feature:\n```norun\nfeature = input('What is the feature? ')\n```\nThen checking that input against the cases from the table, `'No spine'`, `'Lives in water'` and `'Flying'`, and match up to their corresponding output.\n```norun\nif feature == 'No spine':\n  print('Invertebrate')\nelif feature == 'Lives in water':\n  print('Osteichthyes')\nelif feature == 'Flying':\n  print('Aves')\n```\nFinally, adding an `else` to catch everything else\n```norun\nelse:\n  print(\"I'm not sure.\")\n```",
      "updated_at":"2018-02-23T02:59:18.831898+00:00",
      "label":"aca-py3-bio-feature-to-class",
      "content":"#markdown\nThe **class** of an animal describes what general type of animal it is, such as *mammal*, *reptile* or *fish*.\n\nWrite a program to classify all three *classes* of animal in the table below, based on the feature from the table:\n\n<table class=\"table table-bordered\">\n  <thead>\n    <tr>\n      <th>Class<\/th>\n      <th>Feature<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>Invertebrate<\/td>\n      <td>No spine<\/td>\n    <\/tr>\n    <tr>\n      <td>Osteichthyes<\/td>\n      <td>Lives in water<\/td>\n    <\/tr>\n    <tr>\n      <td>Aves<\/td>\n      <td>Flying<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n\nOsteichthyes are fish, and Aves are birds.\n\nYour program should ask for the feature then print out the Class of animal that feature corresponds to. For example:\n\n```lang:py3;terminal;eg:none;\nWhat is the feature? @@@No spine\nInvertebrate\n\n```\n\nHere is another example:\n\n```lang:py3;terminal;eg:none;\nWhat is the feature? @@@Lives in water\nOsteichthyes\n\n```\n\nIf the feature isn't one of the three above, your program should print <code data-lang=\"out\">I'm not sure.<\/code> For example:\n\n```lang:py3;terminal;eg:none;\nWhat is the feature? @@@Fur\nI'm not sure.\n\n```",
      "options":"{}",
      "editor":0,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-elif-else",
        "print",
        "variables"
      ],
      "choices":"",
      "blockly_blocks":"[]",
      "teacher_notes":"#markdown\nThe key to this problem is to use an `if`-`elif`-`elif`-`else` structure. This is how you attach a single `else` block to a lot of `if`'s so that we can catch the words which are not known.\n\nWe start by getting the feature:\n```norun\nfeature = input('What is the feature? ')\n```\nThen checking that input against the cases from the table, `'No spine'`, `'Lives in water'` and `'Flying'`, and match up to their corresponding output.\n```norun\nif feature == 'No spine':\n  print('Invertebrate')\nelif feature == 'Lives in water':\n  print('Osteichthyes')\nelif feature == 'Flying':\n  print('Aves')\n```\nFinally, adding an `else` to catch everything else\n```norun\nelse:\n  print(\"I'm not sure.\")\n```"
    }
  ],
  "lead_text":"Combine Biology and Digital Technologies to build an animal classifier!",
  "short_title":"DT 7 Python + Biology",
  "export_version":1,
  "slug":"aca-dt-7-py-biology",
  "outline":""
}