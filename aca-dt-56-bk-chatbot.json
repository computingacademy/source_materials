{
  "description":"Write programs to solve problems with code and create word games! In this DT Challenge, you'll learn how to play Mad Libs, Questions, Taboo, and Word Chain, and even write your very own Pirate Chatbot! Can you fool your friends into thinking they're talking to a real person?\n\nLearn how to create a series of word games with code. You'll start out with simple word games and work up to creating your very own Pirate Chatbot! Arrr, me hearties! So get cracking and we'll have you hacking like a pirate in no time!\n\nThis course is recommend for Years 5 and 6.",
  "title":"DT Challenge Blockly \u2013 Chatbot",
  "modules":[
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Blockly can do maths too!\n<\/p>\n\n<p>\n  Let's calculate how many minutes there are in a day:\n<\/p>\n\n<p class=\"text-center\"><b>60 minutes per hour &times; 24 hours per day<\/b><\/p>\n\n<p>\n  In Blockly, this calculation looks like:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-s-per-day\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"15\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"math_arithmetic\" id=\"8\" inline=\"true\">\n        <field name=\"OP\">MULTIPLY<\/field>\n        <value name=\"A\">\n          <block type=\"math_number\" id=\"18\">\n            <field name=\"NUM\">60<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"math_number\" id=\"19\">\n            <field name=\"NUM\">24<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\nThe same calculation can be done with variables:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-s-per-hr1-var\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"8\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">mins per hour<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"3\">\n        <field name=\"NUM\">60<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"13\" inline=\"true\">\n        <field name=\"VAR\">hrs per day<\/field>\n        <value name=\"VALUE\">\n          <block type=\"math_number\" id=\"14\">\n            <field name=\"NUM\">24<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"1\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"math_arithmetic\" id=\"2\" inline=\"true\">\n                <field name=\"OP\">MULTIPLY<\/field>\n                <value name=\"A\">\n                  <block type=\"variables_get\" id=\"15\">\n                    <field name=\"VAR\">mins per hour<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"variables_get\" id=\"16\">\n                    <field name=\"VAR\">hrs per day<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>This code is longer, but a lot easier to understand.<\/strong>\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>\n  <strong>Numbers are a distinct type of data<\/strong>.  Blockly uses <bk class=\"math\">blue<\/bk> to indicate a block returns a number, and <bk class=\"str\">green<\/bk> for a string.\n<\/p>\n\n<p>\n  Computers represent numbers in two ways: one for whole numbers (<em>integers<\/em>) and another for decimals (<em>floating point<\/em> values, or <em>floats<\/em>).\n<\/p>\n\n<p>\n  Computers have different instructions for processing strings, integers, and floats. Each data type has different behaviour, and advantages\/disadvantages for representing particular information.\n<\/p>\n\n<p>\n  For simplicity, Blockly doesn't distinguish integers and floats, treating numbers as a one data type.\n  Division always creates a decimal value, even when the numbers divide evenly:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-division-result-float\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"15\" inline=\"true\" x=\"10\" y=\"25\">\n    <value name=\"ANY0\">\n      <block type=\"math_arithmetic\" id=\"8\" inline=\"true\">\n        <field name=\"OP\">DIVIDE<\/field>\n        <value name=\"A\">\n          <block type=\"math_number\" id=\"18\">\n            <field name=\"NUM\">60<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"math_number\" id=\"19\">\n            <field name=\"NUM\">20<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  For newbies, we try to design problems that use whole numbers and avoid division where possible.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    AC:DT requires students to <em>recognise different types of data<\/em> from Year 3-4 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIK008\" target=\"_blank\">ACTDIK008<\/a> onwards.\n    In later bands, students learn about the underlying whole number (integer), and then binary, representation of these data types.\n  <\/p>\n  <p>\n    Student have now been exposed to numbers, as distinct from strings. They will see their different behaviour shortly.\n  <\/p>\n<\/aside>\n",
              "notes":[
                {
                  "left":"<p>\n  <strong>Numbers are a distinct type of data<\/strong>.  Blockly uses <bk class=\"math\">blue<\/bk> to indicate a block returns a number, and <bk class=\"str\">green<\/bk> for a string.\n<\/p>\n\n<p>\n  Computers represent numbers in two ways: one for whole numbers (<em>integers<\/em>) and another for decimals (<em>floating point<\/em> values, or <em>floats<\/em>).\n<\/p>\n\n<p>\n  Computers have different instructions for processing strings, integers, and floats. Each data type has different behaviour, and advantages\/disadvantages for representing particular information.\n<\/p>\n\n<p>\n  For simplicity, Blockly doesn't distinguish integers and floats, treating numbers as a one data type.\n  Division always creates a decimal value, even when the numbers divide evenly:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-division-result-float\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"15\" inline=\"true\" x=\"10\" y=\"25\">\n    <value name=\"ANY0\">\n      <block type=\"math_arithmetic\" id=\"8\" inline=\"true\">\n        <field name=\"OP\">DIVIDE<\/field>\n        <value name=\"A\">\n          <block type=\"math_number\" id=\"18\">\n            <field name=\"NUM\">60<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"math_number\" id=\"19\">\n            <field name=\"NUM\">20<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  For newbies, we try to design problems that use whole numbers and avoid division where possible.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    AC:DT requires students to <em>recognise different types of data<\/em> from Year 3-4 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIK008\" target=\"_blank\">ACTDIK008<\/a> onwards.\n    In later bands, students learn about the underlying whole number (integer), and then binary, representation of these data types.\n  <\/p>\n  <p>\n    Student have now been exposed to numbers, as distinct from strings. They will see their different behaviour shortly.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "title":"Blockly, the calculator",
              "content_rendered":"<p>\n  Blockly can do maths too!\n<\/p>\n\n<p>\n  Let's calculate how many minutes there are in a day:\n<\/p>\n\n<p class=\"text-center\"><b>60 minutes per hour &times; 24 hours per day<\/b><\/p>\n\n<p>\n  In Blockly, this calculation looks like:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-s-per-day\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"15\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"math_arithmetic\" id=\"8\" inline=\"true\">\n        <field name=\"OP\">MULTIPLY<\/field>\n        <value name=\"A\">\n          <block type=\"math_number\" id=\"18\">\n            <field name=\"NUM\">60<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"math_number\" id=\"19\">\n            <field name=\"NUM\">24<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\nThe same calculation can be done with variables:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-s-per-hr1-var\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"8\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">mins per hour<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"3\">\n        <field name=\"NUM\">60<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"13\" inline=\"true\">\n        <field name=\"VAR\">hrs per day<\/field>\n        <value name=\"VALUE\">\n          <block type=\"math_number\" id=\"14\">\n            <field name=\"NUM\">24<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"1\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"math_arithmetic\" id=\"2\" inline=\"true\">\n                <field name=\"OP\">MULTIPLY<\/field>\n                <value name=\"A\">\n                  <block type=\"variables_get\" id=\"15\">\n                    <field name=\"VAR\">mins per hour<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"variables_get\" id=\"16\">\n                    <field name=\"VAR\">hrs per day<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>This code is longer, but a lot easier to understand.<\/strong>\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\nBlockly can do all the maths a calculator can do:\n<\/p>\n\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr><th>Sign<\/th> <th>Name<\/th><\/tr>\n  <\/thead>\n  <tbody>\n    <tr><td><code data-lang=\"txt\">+<\/code><\/td> <td>add<\/td><\/tr>\n    <tr><td><code data-lang=\"txt\">-<\/code><\/td> <td>subtract<\/td><\/tr>\n    <tr><td><code data-lang=\"txt\">\u00d7<\/code><\/td> <td>multiply<\/td><\/tr>\n    <tr><td><code data-lang=\"txt\">\u00f7<\/code><\/td> <td>divide<\/td><\/tr>\n  <\/tbody>\n<\/table>\n\n<p>\n  <strong>Click on the sign in the maths block to change what it does.<\/strong>\n<\/p>\n\n<p>\n  Blockly calculates the inner maths blocks first, so:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-py3-nested-maths\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n      <block id=\"2\" type=\"math_arithmetic\" inline=\"true\">\n        <field name=\"OP\">MULTIPLY<\/field>\n        <value name=\"A\">\n          <block id=\"3\" type=\"math_number\">\n            <field name=\"NUM\">5<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block id=\"4\" type=\"math_arithmetic\" inline=\"true\">\n            <field name=\"OP\">ADD<\/field>\n            <value name=\"A\">\n              <block id=\"5\" type=\"math_number\">\n                <field name=\"NUM\">4<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block id=\"6\" type=\"math_number\">\n                <field name=\"NUM\">3<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  calculates the <code data-lang=\"py3\">4<\/code>&nbsp;+&nbsp;<code data-lang=\"py3\">3<\/code> first (to give <code data-lang=\"py3\">7<\/code>) and then does <code data-lang=\"py3\">5<\/code>&nbsp;\u00d7&nbsp;<code data-lang=\"py3\">7<\/code>.\n<\/p>\n\n<p>\n  In maths, we use brackets like this: 5\u00d7(4 + 3) to say <em>do the add before the multiply<\/em>.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>\n  Blockly imposes an order of operations explicitly on calculations.  <strong>The innermost blocks are always evaluated first<\/strong>, working outwards until the entire calculation is complete.\n<\/p>\n\n<p>\n   It is equivalent to using brackets for every expression in maths.  For example, if an add block is inside a multiply block, then the add is done first, because it is like (<code data-lang=\"py3\">5<\/code>&nbsp;\u00d7&nbsp;(<code data-lang=\"py3\">4<\/code>&nbsp;+&nbsp;<code data-lang=\"py3\">3<\/code>)) in maths:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-bk-py3-nested-maths\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n      <block id=\"2\" type=\"math_arithmetic\" inline=\"true\">\n        <field name=\"OP\">MULTIPLY<\/field>\n        <value name=\"A\">\n          <block id=\"3\" type=\"math_number\">\n            <field name=\"NUM\">5<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block id=\"4\" type=\"math_arithmetic\" inline=\"true\">\n            <field name=\"OP\">ADD<\/field>\n            <value name=\"A\">\n              <block id=\"5\" type=\"math_number\">\n                <field name=\"NUM\">4<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block id=\"6\" type=\"math_number\">\n                <field name=\"NUM\">3<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  calculates the <code data-lang=\"py3\">4<\/code>&nbsp;+&nbsp;<code data-lang=\"py3\">3<\/code> first (to give <code data-lang=\"py3\">7<\/code>) and then does <code data-lang=\"py3\">5<\/code>&nbsp;\u00d7&nbsp;<code data-lang=\"py3\">7<\/code>.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Mathemantics: Order of operations<\/h2>\n  <p>\n    Since Blockly makes the <a href=\"http:\/\/www.australiancurriculum.edu.au\/Glossary\/Index?a=M&t=Order+of+operations\" target=\"_blank\">order of operations<\/a> explicit, this is a great opportunity to discuss them in maths.  Students learn to use <em>brackets and order of operations<\/em> in Year 6 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACMNA134\" target=\"_blank\">ACMNA134<\/a>.\n  <\/p>\n  <p>\n    The essential idea is when two operations are next to each other, e.g. 5&nbsp;\u00d7&nbsp;4&nbsp;+&nbsp;3, it is <strong>ambiguous which should happen first<\/strong>. Do you add 4&nbsp;+&nbsp;3 first or multiply 5&nbsp;\u00d7&nbsp;4 first? They give a different answer, so we had better be consistent!\n  <\/p>\n  <p>\n    <em>Order of operations<\/em> is simply a <strong>convention<\/strong> to resolve this ambiguity by evaluating:\n  <\/p>\n  <ol>\n    <li>brackets (<em>parentheses<\/em>) e.g. (5&nbsp;+&nbsp;3)<\/li>\n    <li>exponents (<em>indices<\/em>) e.g. 4<sup>2<\/sup><\/li>\n    <li>multiply and divide<\/li>\n    <li>add and subtract<\/li>\n  <\/ol>\n  <p>\n    If you want to do an addition before a multiplication, the convention says you must put brackets around the addition.\n  <\/p>\n<\/aside>\n",
              "notes":[
                {
                  "left":"<p>\n  Blockly imposes an order of operations explicitly on calculations.  <strong>The innermost blocks are always evaluated first<\/strong>, working outwards until the entire calculation is complete.\n<\/p>\n\n<p>\n   It is equivalent to using brackets for every expression in maths.  For example, if an add block is inside a multiply block, then the add is done first, because it is like (<code data-lang=\"py3\">5<\/code>&nbsp;\u00d7&nbsp;(<code data-lang=\"py3\">4<\/code>&nbsp;+&nbsp;<code data-lang=\"py3\">3<\/code>)) in maths:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-bk-py3-nested-maths\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n      <block id=\"2\" type=\"math_arithmetic\" inline=\"true\">\n        <field name=\"OP\">MULTIPLY<\/field>\n        <value name=\"A\">\n          <block id=\"3\" type=\"math_number\">\n            <field name=\"NUM\">5<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block id=\"4\" type=\"math_arithmetic\" inline=\"true\">\n            <field name=\"OP\">ADD<\/field>\n            <value name=\"A\">\n              <block id=\"5\" type=\"math_number\">\n                <field name=\"NUM\">4<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block id=\"6\" type=\"math_number\">\n                <field name=\"NUM\">3<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  calculates the <code data-lang=\"py3\">4<\/code>&nbsp;+&nbsp;<code data-lang=\"py3\">3<\/code> first (to give <code data-lang=\"py3\">7<\/code>) and then does <code data-lang=\"py3\">5<\/code>&nbsp;\u00d7&nbsp;<code data-lang=\"py3\">7<\/code>.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Mathemantics: Order of operations<\/h2>\n  <p>\n    Since Blockly makes the <a href=\"http:\/\/www.australiancurriculum.edu.au\/Glossary\/Index?a=M&t=Order+of+operations\" target=\"_blank\">order of operations<\/a> explicit, this is a great opportunity to discuss them in maths.  Students learn to use <em>brackets and order of operations<\/em> in Year 6 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACMNA134\" target=\"_blank\">ACMNA134<\/a>.\n  <\/p>\n  <p>\n    The essential idea is when two operations are next to each other, e.g. 5&nbsp;\u00d7&nbsp;4&nbsp;+&nbsp;3, it is <strong>ambiguous which should happen first<\/strong>. Do you add 4&nbsp;+&nbsp;3 first or multiply 5&nbsp;\u00d7&nbsp;4 first? They give a different answer, so we had better be consistent!\n  <\/p>\n  <p>\n    <em>Order of operations<\/em> is simply a <strong>convention<\/strong> to resolve this ambiguity by evaluating:\n  <\/p>\n  <ol>\n    <li>brackets (<em>parentheses<\/em>) e.g. (5&nbsp;+&nbsp;3)<\/li>\n    <li>exponents (<em>indices<\/em>) e.g. 4<sup>2<\/sup><\/li>\n    <li>multiply and divide<\/li>\n    <li>add and subtract<\/li>\n  <\/ol>\n  <p>\n    If you want to do an addition before a multiplication, the convention says you must put brackets around the addition.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "title":"Doing maths",
              "content_rendered":"<p>\nBlockly can do all the maths a calculator can do:\n<\/p>\n\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr><th>Sign<\/th> <th>Name<\/th><\/tr>\n  <\/thead>\n  <tbody>\n    <tr><td><code data-lang=\"txt\">+<\/code><\/td> <td>add<\/td><\/tr>\n    <tr><td><code data-lang=\"txt\">-<\/code><\/td> <td>subtract<\/td><\/tr>\n    <tr><td><code data-lang=\"txt\">\u00d7<\/code><\/td> <td>multiply<\/td><\/tr>\n    <tr><td><code data-lang=\"txt\">\u00f7<\/code><\/td> <td>divide<\/td><\/tr>\n  <\/tbody>\n<\/table>\n\n<p>\n  <strong>Click on the sign in the maths block to change what it does.<\/strong>\n<\/p>\n\n<p>\n  Blockly calculates the inner maths blocks first, so:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-py3-nested-maths\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n      <block id=\"2\" type=\"math_arithmetic\" inline=\"true\">\n        <field name=\"OP\">MULTIPLY<\/field>\n        <value name=\"A\">\n          <block id=\"3\" type=\"math_number\">\n            <field name=\"NUM\">5<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block id=\"4\" type=\"math_arithmetic\" inline=\"true\">\n            <field name=\"OP\">ADD<\/field>\n            <value name=\"A\">\n              <block id=\"5\" type=\"math_number\">\n                <field name=\"NUM\">4<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block id=\"6\" type=\"math_number\">\n                <field name=\"NUM\">3<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  calculates the <code data-lang=\"py3\">4<\/code>&nbsp;+&nbsp;<code data-lang=\"py3\">3<\/code> first (to give <code data-lang=\"py3\">7<\/code>) and then does <code data-lang=\"py3\">5<\/code>&nbsp;\u00d7&nbsp;<code data-lang=\"py3\">7<\/code>.\n<\/p>\n\n<p>\n  In maths, we use brackets like this: 5\u00d7(4 + 3) to say <em>do the add before the multiply<\/em>.\n<\/p>\n",
              "purpose":"",
              "type":0
            }
          ],
          "title":"Numbers"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Let's ask the user for two numbers and then add them together:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-concat-numbers\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">a<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"143\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"144\">\n            <field name=\"TEXT\">Enter a number:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"131\" inline=\"true\">\n        <field name=\"VAR\">b<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"145\" inline=\"true\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"146\">\n                <field name=\"TEXT\">Enter another number:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"8\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"math_arithmetic\" id=\"165\" inline=\"true\">\n                <field name=\"OP\">ADD<\/field>\n                <value name=\"A\">\n                  <block type=\"variables_get\" id=\"138\">\n                    <field name=\"VAR\">a<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"variables_get\" id=\"166\">\n                    <field name=\"VAR\">b<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>Run this, you'll be surprised by the result!<\/strong>\n  Try entering <code data-lang=\"in\">5<\/code> and <code data-lang=\"in\">6<\/code>:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"blockly-concat-numbers\"><code data-lang=\"blockly\">\n<o>Enter a number: <\/o><i>5\n<\/i><o>Enter another number: <\/o><i>6\n<\/i><o>56\n<\/o>\n<\/code><\/pre>\n\n<p>\n  That's unexpected!\n  The answer should be <code data-lang=\"out\">11<\/code>, but we got <code data-lang=\"out\">56<\/code>.\n<\/p>\n\n<p>\n  <strong>Strings and numbers are different types of data<\/strong>.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>\n  <strong>Understanding this slide is really important!<\/strong>\n<\/p>\n\n<p>\n  If we ask the user for a number with the green <bk class=\"str\">ask<\/bk> block, the <strong>result will always be a string, no matter what the user types.<\/strong>\n<\/p>\n\n<p>\n  Blockly does not interpret the contents of a string automatically.  So even if a string contains only digits, e.g. <bk class=\"str lit\"><bk class=\"inner\">5<\/bk><\/bk>, it is still a string, and will behave like a string, not a number.\n<\/p>\n\n<p>\n  <strong>Values behave according to their data type, not their contents.<\/strong>\n<\/p>\n\n<p>\n  The behaviour for adding two strings together is to join them:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-blockly-concat-numbers-simple\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"33\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text_concat2\" id=\"14\" inline=\"true\">\n        <value name=\"TEXT0\">\n          <block type=\"text\" id=\"20\">\n            <field name=\"TEXT\">5<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text\" id=\"26\">\n            <field name=\"TEXT\">6<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  which is why the result is <code data-lang=\"out\">56<\/code> rather than <code data-lang=\"out\">11<\/code>.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Type checking in Blockly<\/h2>\n  <p>\n    Blockly will not allow you to use the wrong type of value for an operation.  So you cannot put strings in the blue maths block, or numbers in the green addition (<em>concatenation<\/em>) block. \n  <\/p>\n  <p>\n    However, Blockly does not track the type of variables, so in the example on the slide, Blockly doesn't know that the two variables hold strings, and so it lets you use the blue maths block with them.\n  <\/p>\n<\/aside>\n",
              "notes":[
                {
                  "left":"<p>\n  <strong>Understanding this slide is really important!<\/strong>\n<\/p>\n\n<p>\n  If we ask the user for a number with the green <bk class=\"str\">ask<\/bk> block, the <strong>result will always be a string, no matter what the user types.<\/strong>\n<\/p>\n\n<p>\n  Blockly does not interpret the contents of a string automatically.  So even if a string contains only digits, e.g. <bk class=\"str lit\"><bk class=\"inner\">5<\/bk><\/bk>, it is still a string, and will behave like a string, not a number.\n<\/p>\n\n<p>\n  <strong>Values behave according to their data type, not their contents.<\/strong>\n<\/p>\n\n<p>\n  The behaviour for adding two strings together is to join them:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-blockly-concat-numbers-simple\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"33\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text_concat2\" id=\"14\" inline=\"true\">\n        <value name=\"TEXT0\">\n          <block type=\"text\" id=\"20\">\n            <field name=\"TEXT\">5<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text\" id=\"26\">\n            <field name=\"TEXT\">6<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  which is why the result is <code data-lang=\"out\">56<\/code> rather than <code data-lang=\"out\">11<\/code>.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Type checking in Blockly<\/h2>\n  <p>\n    Blockly will not allow you to use the wrong type of value for an operation.  So you cannot put strings in the blue maths block, or numbers in the green addition (<em>concatenation<\/em>) block. \n  <\/p>\n  <p>\n    However, Blockly does not track the type of variables, so in the example on the slide, Blockly doesn't know that the two variables hold strings, and so it lets you use the blue maths block with them.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "title":"Trying to add numbers from the user",
              "content_rendered":"<p>\n  Let's ask the user for two numbers and then add them together:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-concat-numbers\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">a<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"143\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"144\">\n            <field name=\"TEXT\">Enter a number:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"131\" inline=\"true\">\n        <field name=\"VAR\">b<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"145\" inline=\"true\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"146\">\n                <field name=\"TEXT\">Enter another number:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"8\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"math_arithmetic\" id=\"165\" inline=\"true\">\n                <field name=\"OP\">ADD<\/field>\n                <value name=\"A\">\n                  <block type=\"variables_get\" id=\"138\">\n                    <field name=\"VAR\">a<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"variables_get\" id=\"166\">\n                    <field name=\"VAR\">b<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>Run this, you'll be surprised by the result!<\/strong>\n  Try entering <code data-lang=\"in\">5<\/code> and <code data-lang=\"in\">6<\/code>:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"blockly-concat-numbers\"><code data-lang=\"blockly\">\n<o>Enter a number: <\/o><i>5\n<\/i><o>Enter another number: <\/o><i>6\n<\/i><o>56\n<\/o>\n<\/code><\/pre>\n\n<p>\n  That's unexpected!\n  The answer should be <code data-lang=\"out\">11<\/code>, but we got <code data-lang=\"out\">56<\/code>.\n<\/p>\n\n<p>\n  <strong>Strings and numbers are different types of data<\/strong>.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  The computer uses <bk class=\"str lit\"><bk class=\"inner\">5<\/bk><\/bk> and <bk class=\"math\"><bk class=\"inner\">5<\/bk><\/bk> in different ways, even though they look the same to us, because <strong>they are different data types<\/strong>.\n<\/p>\n\n<p>\n  Blockly uses colour to show the data type: the <bk class=\"str\">green<\/bk> blocks are strings and the <bk class=\"math\">blue<\/bk> blocks are numbers.\n<\/p>\n\n<p>\n  If you add two strings, the computer doesn't try to understand what's in them. It just joins the strings together:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-concat-numbers-simple\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"33\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text_concat2\" id=\"14\" inline=\"true\">\n        <value name=\"TEXT0\">\n          <block type=\"text\" id=\"20\">\n            <field name=\"TEXT\">5<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text\" id=\"26\">\n            <field name=\"TEXT\">6<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  If you add two numbers, the computer knows how to sum them:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-sum-numbers-simple\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"33\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"math_arithmetic\" id=\"36\" inline=\"true\">\n        <field name=\"OP\">ADD<\/field>\n        <value name=\"A\">\n          <block type=\"math_number\" id=\"44\">\n            <field name=\"NUM\">5<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"math_number\" id=\"45\">\n            <field name=\"NUM\">6<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Strings and numbers are two ways of <strong>representing<\/strong> the value <code data-lang=\"in\">5<\/code>.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Operations have types too!<\/h2>\n  <p>\n    Adding strings creates a new string, and so the block that adds strings is <bk class=\"str\">green<\/bk>. It appears in the <code data-lang=\"txt\">Strings<\/code> menu in the editor.\n  <\/p>\n  <p>\n    Adding numbers creates a new number, so its block is <bk class=\"math\">blue<\/bk>.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>\n  <strong>Values behave according to their type, not their contents.<\/strong>\n<\/p>\n\n<p>\n  By <em>behave<\/em> we really mean, what operations can you do on the value? and how do they work?\n<\/p>\n\n<p>\n  <strong>Addition is a behaviour difference between strings and numbers.<\/strong>\n<\/p>\n\n<p>\n  For strings, addition (the sign or operator) means joining (we call this <em>concatenation<\/em>) the two values.\n  For numbers, addition means sum their values.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Students must <em>recognise different types of data<\/em> from Year 3-4 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIK008\" target=\"_blank\">ACTDIK008<\/a>. They have now seen both strings and numbers.\n  <\/p>\n  <p>\n    Students should explore many data types (in coding and elsewhere), but these are the absolute minimum requirement.\n  <\/p>\n  <p>\n    The challenging part of <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIK008\" target=\"_blank\">ACTDIK008<\/a> is students must <em>explore how the same data can be represented in different ways<\/em>.\n  <\/p>\n  <p>\n    This slide introduces this <strong>fundamental part of representation<\/strong>: the value of 5 can be <em>represented<\/em> as a string <bk class=\"str lit\"><bk class=\"inner\">5<\/bk><\/bk> or a number <bk class=\"math\"><bk class=\"inner\">5<\/bk><\/bk>, <strong>depending on how we want to use it<\/strong>.\n  <\/p>\n<\/aside>\n",
              "notes":[
                {
                  "left":"<p>\n  <strong>Values behave according to their type, not their contents.<\/strong>\n<\/p>\n\n<p>\n  By <em>behave<\/em> we really mean, what operations can you do on the value? and how do they work?\n<\/p>\n\n<p>\n  <strong>Addition is a behaviour difference between strings and numbers.<\/strong>\n<\/p>\n\n<p>\n  For strings, addition (the sign or operator) means joining (we call this <em>concatenation<\/em>) the two values.\n  For numbers, addition means sum their values.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Students must <em>recognise different types of data<\/em> from Year 3-4 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIK008\" target=\"_blank\">ACTDIK008<\/a>. They have now seen both strings and numbers.\n  <\/p>\n  <p>\n    Students should explore many data types (in coding and elsewhere), but these are the absolute minimum requirement.\n  <\/p>\n  <p>\n    The challenging part of <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIK008\" target=\"_blank\">ACTDIK008<\/a> is students must <em>explore how the same data can be represented in different ways<\/em>.\n  <\/p>\n  <p>\n    This slide introduces this <strong>fundamental part of representation<\/strong>: the value of 5 can be <em>represented<\/em> as a string <bk class=\"str lit\"><bk class=\"inner\">5<\/bk><\/bk> or a number <bk class=\"math\"><bk class=\"inner\">5<\/bk><\/bk>, <strong>depending on how we want to use it<\/strong>.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "title":"Different types of data",
              "content_rendered":"<p>\n  The computer uses <bk class=\"str lit\"><bk class=\"inner\">5<\/bk><\/bk> and <bk class=\"math\"><bk class=\"inner\">5<\/bk><\/bk> in different ways, even though they look the same to us, because <strong>they are different data types<\/strong>.\n<\/p>\n\n<p>\n  Blockly uses colour to show the data type: the <bk class=\"str\">green<\/bk> blocks are strings and the <bk class=\"math\">blue<\/bk> blocks are numbers.\n<\/p>\n\n<p>\n  If you add two strings, the computer doesn't try to understand what's in them. It just joins the strings together:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-concat-numbers-simple\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"33\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text_concat2\" id=\"14\" inline=\"true\">\n        <value name=\"TEXT0\">\n          <block type=\"text\" id=\"20\">\n            <field name=\"TEXT\">5<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text\" id=\"26\">\n            <field name=\"TEXT\">6<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  If you add two numbers, the computer knows how to sum them:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-sum-numbers-simple\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"33\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"math_arithmetic\" id=\"36\" inline=\"true\">\n        <field name=\"OP\">ADD<\/field>\n        <value name=\"A\">\n          <block type=\"math_number\" id=\"44\">\n            <field name=\"NUM\">5<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"math_number\" id=\"45\">\n            <field name=\"NUM\">6<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Strings and numbers are two ways of <strong>representing<\/strong> the value <code data-lang=\"in\">5<\/code>.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Operations have types too!<\/h2>\n  <p>\n    Adding strings creates a new string, and so the block that adds strings is <bk class=\"str\">green<\/bk>. It appears in the <code data-lang=\"txt\">Strings<\/code> menu in the editor.\n  <\/p>\n  <p>\n    Adding numbers creates a new number, so its block is <bk class=\"math\">blue<\/bk>.\n  <\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  The green <bk class=\"str\">ask<\/bk> block always returns a string.  If you want to read in a number, use the blue <bk class=\"math\">ask<\/bk> block instead:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-number\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"235\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"231\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"232\">\n            <field name=\"TEXT\">Enter number:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This block tries to interpret what the user types as a number.\n<\/p>\n\n<p>\n  Let's have another go at adding two numbers:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-int-5-plus-6-fixed\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">a<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"143\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"144\">\n            <field name=\"TEXT\">Enter a number:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"131\" inline=\"true\">\n        <field name=\"VAR\">b<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_num\" id=\"145\" inline=\"true\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"146\">\n                <field name=\"TEXT\">Enter another number:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"8\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"math_arithmetic\" id=\"165\" inline=\"true\">\n                <field name=\"OP\">ADD<\/field>\n                <value name=\"A\">\n                  <block type=\"variables_get\" id=\"138\">\n                    <field name=\"VAR\">a<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"variables_get\" id=\"166\">\n                    <field name=\"VAR\">b<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This gives us the answer we expect:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"blockly-int-5-plus-6-fixed\"><code data-lang=\"py3\">\n<o>Enter a number: <\/o><i>5\n<\/i><o>Enter another number: <\/o><i>6\n<\/i><o>11\n<\/o>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"<p>\n  Students are now (hopefully) aware of the colour for each data type.  So, they know that the green <bk class=\"str\">ask<\/bk> block will return a string.\n<\/p>\n\n<p>\n  We can now introduce a blue <bk class=\"math\">ask<\/bk> block that <strong>reads in a number<\/strong>.\n<\/p>\n\n<p>\n  We can store the returned number in a variable, e.g. <bk class=\"var\"><bk class=\"inner\">age<\/bk><\/bk>, and then use it like any other number:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-simple-ask-mult\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" movable=\"false\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">age<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">How old are you?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print2\" id=\"23\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"25\">\n            <field name=\"TEXT\">Soon you will be<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"math_arithmetic\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">ADD<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"6\">\n                <field name=\"VAR\">age<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"7\">\n                <field name=\"NUM\">1<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>What if the user doesn't enter a number?<\/h2>\n  <p>\n    The <bk class=\"math\">ask<\/bk> block expects the user to type in a number.\n  <\/p>\n  <p>\n    If they don't, you get an angry red Python error message:\n  <\/p>\n  <pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>How old are you? <\/o><i>lots\n<\/i><o>Traceback (most recent call last):\n  File \"program.py\", line 1, in &lt;module>\n    age = int(input('How old are you?' + ' '))\nValueError: invalid literal for int() with base 10: 'lots'\n<\/o>\n<\/code><\/pre>\n  <p>\n    The error message says that <code data-lang=\"in\">lots<\/code> was not a base 10 number.\n  <\/p>\n  <h2>So why is it in Python?<\/h2>\n  <p>\n    We translate Blockly programs into Python, so you can see the <strong>relationship between visual and general-purpose programming<\/strong>.\n  <\/p>\n  <p>\n    Click <span class=\"icon-file-xml\"><\/span> on any example to see the corresponding Python code. The editor shows the Python code below the Blockly version.\n  <\/p>\n  <p>\n    Unfortunately, we can't always hide Python's complexity while making the code simple to read.  Mostly it appears in error messages, when the student's program has a bug or the user does not provide the expected input.\n  <\/p>\n<\/aside>\n",
              "notes":[
                {
                  "left":"<p>\n  Students are now (hopefully) aware of the colour for each data type.  So, they know that the green <bk class=\"str\">ask<\/bk> block will return a string.\n<\/p>\n\n<p>\n  We can now introduce a blue <bk class=\"math\">ask<\/bk> block that <strong>reads in a number<\/strong>.\n<\/p>\n\n<p>\n  We can store the returned number in a variable, e.g. <bk class=\"var\"><bk class=\"inner\">age<\/bk><\/bk>, and then use it like any other number:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-simple-ask-mult\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" movable=\"false\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">age<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">How old are you?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print2\" id=\"23\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"25\">\n            <field name=\"TEXT\">Soon you will be<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"math_arithmetic\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">ADD<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"6\">\n                <field name=\"VAR\">age<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"7\">\n                <field name=\"NUM\">1<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>What if the user doesn't enter a number?<\/h2>\n  <p>\n    The <bk class=\"math\">ask<\/bk> block expects the user to type in a number.\n  <\/p>\n  <p>\n    If they don't, you get an angry red Python error message:\n  <\/p>\n  <pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>How old are you? <\/o><i>lots\n<\/i><o>Traceback (most recent call last):\n  File \"program.py\", line 1, in &lt;module>\n    age = int(input('How old are you?' + ' '))\nValueError: invalid literal for int() with base 10: 'lots'\n<\/o>\n<\/code><\/pre>\n  <p>\n    The error message says that <code data-lang=\"in\">lots<\/code> was not a base 10 number.\n  <\/p>\n  <h2>So why is it in Python?<\/h2>\n  <p>\n    We translate Blockly programs into Python, so you can see the <strong>relationship between visual and general-purpose programming<\/strong>.\n  <\/p>\n  <p>\n    Click <span class=\"icon-file-xml\"><\/span> on any example to see the corresponding Python code. The editor shows the Python code below the Blockly version.\n  <\/p>\n  <p>\n    Unfortunately, we can't always hide Python's complexity while making the code simple to read.  Mostly it appears in error messages, when the student's program has a bug or the user does not provide the expected input.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "title":"Reading in numbers",
              "content_rendered":"<p>\n  The green <bk class=\"str\">ask<\/bk> block always returns a string.  If you want to read in a number, use the blue <bk class=\"math\">ask<\/bk> block instead:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-number\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"235\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"231\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"232\">\n            <field name=\"TEXT\">Enter number:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This block tries to interpret what the user types as a number.\n<\/p>\n\n<p>\n  Let's have another go at adding two numbers:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-int-5-plus-6-fixed\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">a<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"143\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"144\">\n            <field name=\"TEXT\">Enter a number:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"131\" inline=\"true\">\n        <field name=\"VAR\">b<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_num\" id=\"145\" inline=\"true\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"146\">\n                <field name=\"TEXT\">Enter another number:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"8\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"math_arithmetic\" id=\"165\" inline=\"true\">\n                <field name=\"OP\">ADD<\/field>\n                <value name=\"A\">\n                  <block type=\"variables_get\" id=\"138\">\n                    <field name=\"VAR\">a<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"variables_get\" id=\"166\">\n                    <field name=\"VAR\">b<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This gives us the answer we expect:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"blockly-int-5-plus-6-fixed\"><code data-lang=\"py3\">\n<o>Enter a number: <\/o><i>5\n<\/i><o>Enter another number: <\/o><i>6\n<\/i><o>11\n<\/o>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Next Olympics",
              "purpose":"",
              "problem":"bk-py3-next-olympics",
              "type":1,
              "problem_id":2625
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Letter from the Queen",
              "purpose":"",
              "problem":"bk-py3-letter-from-the-queen",
              "type":1,
              "problem_id":2647
            }
          ],
          "title":"Data types"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown \n<p>\nAs well as printing multiple strings on one line, we can also join or add them together to create larger strings:\n<\/p>\n\n<p>To print the word <code data-lang=\"str\">Harry<\/code> followed by the word <code data-lang=\"str\">Potter<\/code>, we can use:<\/p>\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-concat\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"68\" inline=\"true\" x=\"15\" y=\"15\">\n    <value name=\"ANY0\">\n      <block type=\"text_concat2\" id=\"74\" inline=\"true\">\n        <value name=\"TEXT0\">\n          <block type=\"text\" id=\"80\">\n            <field name=\"TEXT\">Harry<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text\" id=\"86\">\n            <field name=\"TEXT\">Potter<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n\nThis doesn't add any extra spaces, so you need to add them yourself if you want some:\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-concat-space\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"68\" inline=\"true\" x=\"15\" y=\"15\">\n    <value name=\"ANY0\">\n      <block type=\"text_concat3\" id=\"100\" inline=\"true\">\n        <value name=\"TEXT0\">\n          <block type=\"text\" id=\"80\">\n            <field name=\"TEXT\">Harry<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text\" id=\"106\">\n            <field name=\"TEXT\"> <\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT2\">\n          <block type=\"text\" id=\"86\">\n            <field name=\"TEXT\">Potter<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\nProgrammers call adding strings together <em>string concatenation<\/em>, which is often abbreviated to <em>concat<\/em> or just <em>cat<\/em>.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Joining strings together",
              "content_rendered":"<p>\nAs well as printing multiple strings on one line, we can also join or add them together to create larger strings:\n<\/p>\n<p>To print the word <code data-lang=\"str\">Harry<\/code> followed by the word <code data-lang=\"str\">Potter<\/code>, we can use:<\/p>\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-concat\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"68\" inline=\"true\" x=\"15\" y=\"15\">\n    <value name=\"ANY0\">\n      <block type=\"text_concat2\" id=\"74\" inline=\"true\">\n        <value name=\"TEXT0\">\n          <block type=\"text\" id=\"80\">\n            <field name=\"TEXT\">Harry<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text\" id=\"86\">\n            <field name=\"TEXT\">Potter<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n<p>This doesn't add any extra spaces, so you need to add them yourself if you want some:<\/p>\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-concat-space\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"68\" inline=\"true\" x=\"15\" y=\"15\">\n    <value name=\"ANY0\">\n      <block type=\"text_concat3\" id=\"100\" inline=\"true\">\n        <value name=\"TEXT0\">\n          <block type=\"text\" id=\"80\">\n            <field name=\"TEXT\">Harry<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text\" id=\"106\">\n            <field name=\"TEXT\"> <\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT2\">\n          <block type=\"text\" id=\"86\">\n            <field name=\"TEXT\">Potter<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n<p>\nProgrammers call adding strings together <em>string concatenation<\/em>, which is often abbreviated to <em>concat<\/em> or just <em>cat<\/em>.\n<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\nWe can already add two strings (<em>concatenation<\/em>):\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"string-addition-2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"24\" inline=\"true\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">word<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"65\">\n        <field name=\"TEXT\">ab<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"8\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_concat2\" id=\"3\" inline=\"true\">\n            <value name=\"TEXT0\">\n              <block type=\"variables_get\" id=\"70\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT1\">\n              <block type=\"variables_get\" id=\"75\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\nSince multiplication is like repeated addition, it turns out we can also multiply a string by a number, say 10. It is like adding the string to itself until you have 10 copies of it:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-mult\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"24\" inline=\"true\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">word<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"65\">\n        <field name=\"TEXT\">ab<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"8\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_mult\" id=\"3\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"math_number\" id=\"25\">\n                <field name=\"NUM\">5<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"50\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\nNote that subtraction and division don't work with strings (and integers) because it isn't obvious what they would do.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Multiplying strings",
              "content_rendered":"<p>\nWe can already add two strings (<em>concatenation<\/em>):\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"string-addition-2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"24\" inline=\"true\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">word<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"65\">\n        <field name=\"TEXT\">ab<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"8\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_concat2\" id=\"3\" inline=\"true\">\n            <value name=\"TEXT0\">\n              <block type=\"variables_get\" id=\"70\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT1\">\n              <block type=\"variables_get\" id=\"75\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\nSince multiplication is like repeated addition, it turns out we can also multiply a string by a number, say 10. It is like adding the string to itself until you have 10 copies of it:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-mult\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"24\" inline=\"true\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">word<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"65\">\n        <field name=\"TEXT\">ab<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"8\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_mult\" id=\"3\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"math_number\" id=\"25\">\n                <field name=\"NUM\">5<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"50\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\nNote that subtraction and division don't work with strings (and integers) because it isn't obvious what they would do.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Nooooooo",
              "purpose":"",
              "problem":"bk-py3-nooooo",
              "type":1,
              "problem_id":2646
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Pull a happy face",
              "purpose":"",
              "problem":"bk-py3-how-happy-emoji",
              "type":1,
              "problem_id":3722
            }
          ],
          "title":"Multiplying strings"
        }
      ],
      "title":"Data types: numbers and strings",
      "label":"aca-blockly-yr56-module2-calculating-things",
      "updated_at":"2018-05-14T06:56:11.638178+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Let's write your very first program in Blockly:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-print-hello-world\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Hello, World!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  You can run it by clicking the <span class=\"icon-play4\" style=\"font-size: 16px\"><\/span> button (above).\n<\/p>\n\n<p>\n  When you run the program, you can see that it writes a message. That's what the <bk class=\"io\">print<\/bk> block does, it prints messages.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Writing Blockly or Python?<\/h2>\n  <p>\n    Blockly uses <em>visual programming<\/em>, like <a href=\"https:\/\/scratch.mit.edu\/\" target=\"_blank\">Scratch<\/a>. The blocks are code, just like any real-world language, such as <a href=\"https:\/\/python.org\" target=\"_blank\">Python<\/a>.\n  <\/p>\n  <p>\n    You can see the Python version by clicking the <span class=\"icon-file-xml\" style=\"font-size: 16px\"><\/span> button.\n  <\/p>\n  <p>\n    If you want to learn Python, try the <a href=\"https:\/\/groklearning.com\/course\/aca-dt-78-py-chatbot\/\" target=\"_blank\">Python<\/a> version instead.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "title":"Hello, World!",
              "notes":[
                {
                  "left":"<p>\n  Thanks for giving the DT Challenge a go!\n<\/p>\n\n<p>\n  If you get stuck or have feedback, don't hesitate to talk to us on the <a href=\"\/forums\/category\/ch16-teachers\" target=\"_blank\">Challenge teacher's forum<\/a> or private message our tutors (link at the bottom of each problem). \n<\/p>\n\n<p>\n  <strong>The most important thing is to get kids exploring the examples.<\/strong>\n<\/p>\n\n<p>\n  Students who run, modify, and then rerun the examples have a much better chance of understanding how the code works.\n<\/p>\n\n<p>\n  <strong>It's even better if they break the code so it doesn't work any more!<\/strong>\n<\/p>\n\n<p>\n  That way, they learn how code breaks, and can fix it themselves. They can swap back to the original by clicking the <span class=\"icon-undo2\" style=\"font-size: 16px\"><\/span> button.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Creative Commons Attribution 4.0 licence<\/h2>\n  <p>All of the material in this Australian Digital Technologies Challenge has been licensed under Creative Commonts Attribution 4.0.  This means you can copy and adapt the material for any purpose, as long as you include an attribution for the Australian Computing Academy.<\/p>\n<\/aside>\n"
                }
              ],
              "notes_rendered":"<p>\n  Thanks for giving the DT Challenge a go!\n<\/p>\n\n<p>\n  If you get stuck or have feedback, don't hesitate to talk to us on the <a href=\"\/forums\/category\/ch16-teachers\" target=\"_blank\">Challenge teacher's forum<\/a> or private message our tutors (link at the bottom of each problem). \n<\/p>\n\n<p>\n  <strong>The most important thing is to get kids exploring the examples.<\/strong>\n<\/p>\n\n<p>\n  Students who run, modify, and then rerun the examples have a much better chance of understanding how the code works.\n<\/p>\n\n<p>\n  <strong>It's even better if they break the code so it doesn't work any more!<\/strong>\n<\/p>\n\n<p>\n  That way, they learn how code breaks, and can fix it themselves. They can swap back to the original by clicking the <span class=\"icon-undo2\" style=\"font-size: 16px\"><\/span> button.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Creative Commons Attribution 4.0 licence<\/h2>\n  <p>All of the material in this Australian Digital Technologies Challenge has been licensed under Creative Commonts Attribution 4.0.  This means you can copy and adapt the material for any purpose, as long as you include an attribution for the Australian Computing Academy.<\/p>\n<\/aside>\n",
              "content_rendered":"<p>\n  Let's write your very first program in Blockly:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-print-hello-world\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Hello, World!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  You can run it by clicking the <span class=\"icon-play4\" style=\"font-size: 16px\"><\/span> button (above).\n<\/p>\n\n<p>\n  When you run the program, you can see that it writes a message. That's what the <bk class=\"io\">print<\/bk> block does, it prints messages.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Writing Blockly or Python?<\/h2>\n  <p>\n    Blockly uses <em>visual programming<\/em>, like <a href=\"https:\/\/scratch.mit.edu\/\" target=\"_blank\">Scratch<\/a>. The blocks are code, just like any real-world language, such as <a href=\"https:\/\/python.org\" target=\"_blank\">Python<\/a>.\n  <\/p>\n  <p>\n    You can see the Python version by clicking the <span class=\"icon-file-xml\" style=\"font-size: 16px\"><\/span> button.\n  <\/p>\n  <p>\n    If you want to learn Python, try the <a href=\"https:\/\/groklearning.com\/course\/aca-dt-78-py-chatbot\/\" target=\"_blank\">Python<\/a> version instead.\n  <\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\nWhat do the coloured blocks mean?\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-print-hello-world-2\" data-codegen=\"false\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"io\">print<\/bk> block is an <em>instruction<\/em> for the computer to follow.  The hole in the block means it needs extra information to do its job.\n<\/p>\n\n<p>\n You need to tell the computer what to print.  Here is a message:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-no-print\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"text\" x=\"15\" y=\"10\" movable=\"false\">\n    <field name=\"TEXT\">Hello, World!<\/field>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This message block doesn't do anything by itself. It's just a message, not an <em>instruction<\/em>.  So if you press play, nothing happens!\n<\/p>\n\n<p>\n  Put them together and you have an instruction that the computer can understand and run:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-print-hello-world-3\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n      <block type=\"text\">\n       <field name=\"TEXT\">Hello, World!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p><small>LEGO<sup>\u00ae<\/sup> is a registered trademark of the LEGO Group.<\/small><\/p>\n"
                }
              ],
              "layout":0,
              "title":"Is this just LEGO!?",
              "notes":[
                {
                  "left":"<p>\n  This slide is about breaking down a program into pieces.\n<\/p>\n\n<p>\n  The smallest piece of standalone code is called an <em>instruction<\/em> or more technically, a <em>statement<\/em>.\n  A program is made up of a <em>sequence<\/em> of one or more statements.\n<\/p>\n\n<p>\n  The <bk class=\"io\">print<\/bk> block is an example of a statement. This block needs another piece of information, the message it will print, to do its job. This is why it has a hole in the block.\n<\/p>\n\n<p>\n  Until the hole is filled with a message, like <bk class=\"str lit\"><bk class=\"inner\">Hello, World!<\/bk><\/bk>, the statement is invalid, and the program won't run.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Statements are the building blocks of code. They are needed for implementation in Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a>, 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>, 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030\" target=\"_blank\">ACTDIP030<\/a>, and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP041\" target=\"_blank\">ACTDIP041<\/a> even though statements are not mentioned explicitly in the content descriptions.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "notes_rendered":"<p>\n  This slide is about breaking down a program into pieces.\n<\/p>\n\n<p>\n  The smallest piece of standalone code is called an <em>instruction<\/em> or more technically, a <em>statement<\/em>.\n  A program is made up of a <em>sequence<\/em> of one or more statements.\n<\/p>\n\n<p>\n  The <bk class=\"io\">print<\/bk> block is an example of a statement. This block needs another piece of information, the message it will print, to do its job. This is why it has a hole in the block.\n<\/p>\n\n<p>\n  Until the hole is filled with a message, like <bk class=\"str lit\"><bk class=\"inner\">Hello, World!<\/bk><\/bk>, the statement is invalid, and the program won't run.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Statements are the building blocks of code. They are needed for implementation in Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a>, 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>, 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP030\" target=\"_blank\">ACTDIP030<\/a>, and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP041\" target=\"_blank\">ACTDIP041<\/a> even though statements are not mentioned explicitly in the content descriptions.\n  <\/p>\n<\/aside>\n",
              "content_rendered":"<p>\nWhat do the coloured blocks mean?\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-print-hello-world-2\" data-codegen=\"false\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"io\">print<\/bk> block is an <em>instruction<\/em> for the computer to follow.  The hole in the block means it needs extra information to do its job.\n<\/p>\n\n<p>\n You need to tell the computer what to print.  Here is a message:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-no-print\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"text\" x=\"15\" y=\"10\" movable=\"false\">\n    <field name=\"TEXT\">Hello, World!<\/field>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This message block doesn't do anything by itself. It's just a message, not an <em>instruction<\/em>.  So if you press play, nothing happens!\n<\/p>\n\n<p>\n  Put them together and you have an instruction that the computer can understand and run:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-print-hello-world-3\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"io_print1\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n      <block type=\"text\">\n       <field name=\"TEXT\">Hello, World!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p><small>LEGO<sup>\u00ae<\/sup> is a registered trademark of the LEGO Group.<\/small><\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Hello, World!",
              "purpose":"",
              "problem":"bk-py3-hello-world",
              "type":1,
              "problem_id":1259
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Therefore, I rock!",
              "purpose":"Reinforcement",
              "problem":"bk-py3-therefore-aca",
              "type":1,
              "problem_id":3521
            }
          ],
          "title":"Writing your first program"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Computers don't understand <code data-lang=\"str\">Hello, World!<\/code>, or any other human language.\n  To a computer, they are just a <em>string<\/em> of letters.\n<\/p>\n\n<p>\n  The green string block can contain any letters, numbers, punctuation and spaces that you want to use in a message:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-chars\" data-codegen=\"false\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"1\" inline=\"true\" x=\"15\" y=\"15\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"2\">\n        <field name=\"TEXT\">abc ABC 123 @!?.#<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The individual letters, digits, symbols and spaces are called <em>characters<\/em> and the word string is short for <em>string of characters<\/em>.\n<\/p>\n"
                }
              ],
              "layout":0,
              "title":"A string of characters",
              "notes":[
                {
                  "left":"<p>\n  In Blockly, we use a <bk class=\"str\">green<\/bk> <em>string<\/em> block to hold a message.\n<\/p>\n\n<p>\n  <strong>A <em>string<\/em> is the first <em>type of data<\/em> that students discover.<\/strong>\n<\/p>\n\n<p>\n  A string stores text for displaying to the user (and soon, reading from the user). A string can contain letters, digits, punctuation and other symbols, and spaces \u2013\u00a0each of these is called a <em>character<\/em>.\n<\/p>\n\n<p>\n  There are characters for most languages, not just the base Latin alphabet (<code data-lang=\"str\">a<\/code>...<code data-lang=\"str\">z<\/code> and <code data-lang=\"str\">A<\/code>...<code data-lang=\"str\">Z<\/code>). These include accented Latin characters, Chinese and Japanese characters, and mathematical symbols.\n<\/p>\n\n<p>\n  <strong>The computer does not typically interpret the contents of a string.<\/strong>\n<\/p>\n\n<p>\n  Strings are separated from instructions in code so that the computer knows that it doesn't need to understand their contents.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    AC:DT requires students to <em>recognise different types of data<\/em> from Year 3-4 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIK008\" target=\"_blank\">ACTDIK008<\/a>. Here, students will learn about strings and (soon) numbers, which allows them to <em>explore how the same data can be represented in different ways<\/em> (also part of <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIK008\" target=\"_blank\">ACTDIK008<\/a>).\n  <\/p>\n<\/aside>\n"
                }
              ],
              "notes_rendered":"<p>\n  In Blockly, we use a <bk class=\"str\">green<\/bk> <em>string<\/em> block to hold a message.\n<\/p>\n\n<p>\n  <strong>A <em>string<\/em> is the first <em>type of data<\/em> that students discover.<\/strong>\n<\/p>\n\n<p>\n  A string stores text for displaying to the user (and soon, reading from the user). A string can contain letters, digits, punctuation and other symbols, and spaces \u2013\u00a0each of these is called a <em>character<\/em>.\n<\/p>\n\n<p>\n  There are characters for most languages, not just the base Latin alphabet (<code data-lang=\"str\">a<\/code>...<code data-lang=\"str\">z<\/code> and <code data-lang=\"str\">A<\/code>...<code data-lang=\"str\">Z<\/code>). These include accented Latin characters, Chinese and Japanese characters, and mathematical symbols.\n<\/p>\n\n<p>\n  <strong>The computer does not typically interpret the contents of a string.<\/strong>\n<\/p>\n\n<p>\n  Strings are separated from instructions in code so that the computer knows that it doesn't need to understand their contents.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    AC:DT requires students to <em>recognise different types of data<\/em> from Year 3-4 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIK008\" target=\"_blank\">ACTDIK008<\/a>. Here, students will learn about strings and (soon) numbers, which allows them to <em>explore how the same data can be represented in different ways<\/em> (also part of <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIK008\" target=\"_blank\">ACTDIK008<\/a>).\n  <\/p>\n<\/aside>\n",
              "content_rendered":"<p>\n  Computers don't understand <code data-lang=\"str\">Hello, World!<\/code>, or any other human language.\n  To a computer, they are just a <em>string<\/em> of letters.\n<\/p>\n\n<p>\n  The green string block can contain any letters, numbers, punctuation and spaces that you want to use in a message:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-chars\" data-codegen=\"false\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"1\" inline=\"true\" x=\"15\" y=\"15\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"2\">\n        <field name=\"TEXT\">abc ABC 123 @!?.#<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The individual letters, digits, symbols and spaces are called <em>characters<\/em> and the word string is short for <em>string of characters<\/em>.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\nTo print multiple messages, you just attach <bk class=\"io\">print<\/bk> blocks together:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-happy-birthday\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"2\">\n        <field name=\"TEXT\">Happy Birthday to you!<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"3\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"4\">\n            <field name=\"TEXT\">Happy Birthday to you!<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"16\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"24\">\n                <field name=\"TEXT\">Happy Birthday dear Grok.<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"25\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"26\">\n                    <field name=\"TEXT\">Happy Birthday to you!<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\nEach message is printed on its own line. <strong>Run it to check.<\/strong>\n<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Printing more messages",
              "notes":[
                {
                  "left":"<p>\n  Attaching blocks together creates a <em>sequence of statements<\/em>.\n<\/p>\n\n<p>\n  The statements in a sequence always run (or <em>executed<\/em>) in the same order\u00a0\u2013\u00a0top to bottom. Next week, we will see how to change which statements get run based on input from the user.\n<\/p>\n\n<p>\n  <strong>Make sure the blocks are actually attached together.<\/strong> Blockly will snap the blocks together when they are close enough. The yellow highlighting of the notch shows when this is about to happen:\n<\/p>\n\n<figure class=\"align-center\">\n  <img alt=\"Attaching blocks in the Blockly editor\" src=\"https:\/\/groklearning-cdn.com\/modules\/2KgLLBPSNDYTCbXqSYdX97\/blockly-snap-to-blocks.png\" width=\"378px\">\n<\/figure>\n\n<p>\n  Blockly will try to run the program top to bottom if they are not, but the ordering might not quite be what you are expecting.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    AC:DT requires students to describe\/follow <em>a sequence of steps<\/em> in algorithms in Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP010\" target=\"_blank\">ACTDIP010<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP019\" target=\"_blank\">ACTDIP019<\/a>.\n  <\/p>\n  <p>\n    Designing and tracing algorithms implicitly requires <em>a sequence of steps<\/em> in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a> and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP040\" target=\"_blank\">ACTDIP040<\/a>.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "notes_rendered":"<p>\n  Attaching blocks together creates a <em>sequence of statements<\/em>.\n<\/p>\n\n<p>\n  The statements in a sequence always run (or <em>executed<\/em>) in the same order\u00a0\u2013\u00a0top to bottom. Next week, we will see how to change which statements get run based on input from the user.\n<\/p>\n\n<p>\n  <strong>Make sure the blocks are actually attached together.<\/strong> Blockly will snap the blocks together when they are close enough. The yellow highlighting of the notch shows when this is about to happen:\n<\/p>\n\n<figure class=\"align-center\">\n  <img alt=\"Attaching blocks in the Blockly editor\" src=\"https:\/\/groklearning-cdn.com\/modules\/2KgLLBPSNDYTCbXqSYdX97\/blockly-snap-to-blocks.png\" width=\"378px\">\n<\/figure>\n\n<p>\n  Blockly will try to run the program top to bottom if they are not, but the ordering might not quite be what you are expecting.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    AC:DT requires students to describe\/follow <em>a sequence of steps<\/em> in algorithms in Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP010\" target=\"_blank\">ACTDIP010<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP019\" target=\"_blank\">ACTDIP019<\/a>.\n  <\/p>\n  <p>\n    Designing and tracing algorithms implicitly requires <em>a sequence of steps<\/em> in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a> and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP040\" target=\"_blank\">ACTDIP040<\/a>.\n  <\/p>\n<\/aside>\n",
              "content_rendered":"<p>\nTo print multiple messages, you just attach <bk class=\"io\">print<\/bk> blocks together:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-happy-birthday\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"2\">\n        <field name=\"TEXT\">Happy Birthday to you!<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"3\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"4\">\n            <field name=\"TEXT\">Happy Birthday to you!<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"16\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"24\">\n                <field name=\"TEXT\">Happy Birthday dear Grok.<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"25\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"26\">\n                    <field name=\"TEXT\">Happy Birthday to you!<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\nEach message is printed on its own line. <strong>Run it to check.<\/strong>\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Bash\u014d Haiku",
              "purpose":"Multiple print blocks",
              "problem":"bk-py3-basho-haiku",
              "type":1,
              "problem_id":2512
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Ancient Riddle",
              "purpose":"",
              "problem":"bk-py3-ancient-riddle",
              "type":1,
              "problem_id":3528
            }
          ],
          "title":"Strings and printing"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Writing a long message many times is a pain. It would be great if we could store the message somewhere and reuse it.\n<\/p>\n\n<p>\n  A <em>variable<\/em> is that place!  Each variable has a <em>name<\/em> which we use to set and get the message:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-jolly-good-fellow\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"34\" inline=\"true\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">line<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"2\">\n        <field name=\"TEXT\">For she's a jolly good fellow.<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"1\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"44\">\n            <field name=\"VAR\">line<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"45\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"variables_get\" id=\"46\">\n                <field name=\"VAR\">line<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"47\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"variables_get\" id=\"48\">\n                    <field name=\"VAR\">line<\/field>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print1\" id=\"49\" inline=\"true\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"56\">\n                        <field name=\"TEXT\">And so say all of us!<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"var\">set <bk class=\"inner\">line<\/bk><\/bk> block creates a new variable called <code data-lang=\"py3\">line<\/code>. It holds the message <bk class=\"str lit\"><bk class=\"inner\">For she's a jolly good fellow.<\/bk><\/bk>.\n  We can then use the <bk class=\"var\"><bk class=\"inner\">line<\/bk><\/bk> block to print that message as often as we want.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Creating a variable<\/h2>\n  <p>\n    To create a new variable, click the down arrow next to the variable name and select <strong>New Variable...<\/strong>\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "title":"Remember messages with variables",
              "notes":[
                {
                  "left":"<p>\n  Variables are <em>extremely<\/em> powerful.  <strong>Variables allow the program to store information and retrieve it for future use.<\/strong>  Any substantial program will use many variables.\n<\/p>\n\n<p>\n  Variables help avoid duplicate code, by saving repeatedly used values.\n  <strong>They also make the code easier to understand.<\/strong>  Well-chosen variable names help explain what the program is doing and why.\n<\/p>\n\n<p>\n  Blockly creates a variable called <bk class=\"var\"><bk class=\"inner\">item<\/bk><\/bk> by default:\n<\/p>\n\n<figure class=\"align-center\">\n  <img alt=\"Blockly's default variable\" src=\"https:\/\/groklearning-cdn.com\/modules\/8tr95KARX7utt2SvYKwwYF\/blockly-default-variable.png\" width=\"300px\">\n<\/figure>\n\n<p>\n  After you drag the <bk class=\"var\">set <bk class=\"inner\">item<\/bk><\/bk> onto the workspace, you can click on the variable name to rename <code class=\"txt\">item<\/code> to something else, e.g. <code data-lang=\"py3\">line<\/code>: \n<\/p>\n\n<figure class=\"align-center\">\n  <img alt=\"Rename a variable\" src=\"https:\/\/groklearning-cdn.com\/modules\/4ax6CRAP4d8RV2ED26c2zT\/blockly-rename-var.png\" width=\"300px\">\n<\/figure>\n\n<p>\n  Now the <strong>Variables<\/strong> menu will show a set block <bk class=\"var\">set <bk class=\"inner\">line<\/bk><\/bk> and get block <bk class=\"var\"><bk class=\"inner\">line<\/bk><\/bk> for your new variable.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    AC:DT does not explicitly mention variables. However, variables are central to any collecting, storing, and processing of data (and responding to user input) in a program.\n  <\/p>\n  <p>\n   Spreadsheet cells and database columns also act as variables.  This includes Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP009\" target=\"_blank\">ACTDIP009<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP016\" target=\"_blank\">ACTDIP016<\/a>.\n  <\/p>\n  <p>\n    Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP026\" target=\"_blank\">ACTDIP026<\/a> and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP037\" target=\"_blank\">ACTDIP037<\/a> include structured data, which we cover in the other Challenge streams.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "notes_rendered":"<p>\n  Variables are <em>extremely<\/em> powerful.  <strong>Variables allow the program to store information and retrieve it for future use.<\/strong>  Any substantial program will use many variables.\n<\/p>\n\n<p>\n  Variables help avoid duplicate code, by saving repeatedly used values.\n  <strong>They also make the code easier to understand.<\/strong>  Well-chosen variable names help explain what the program is doing and why.\n<\/p>\n\n<p>\n  Blockly creates a variable called <bk class=\"var\"><bk class=\"inner\">item<\/bk><\/bk> by default:\n<\/p>\n\n<figure class=\"align-center\">\n  <img alt=\"Blockly's default variable\" src=\"https:\/\/groklearning-cdn.com\/modules\/8tr95KARX7utt2SvYKwwYF\/blockly-default-variable.png\" width=\"300px\">\n<\/figure>\n\n<p>\n  After you drag the <bk class=\"var\">set <bk class=\"inner\">item<\/bk><\/bk> onto the workspace, you can click on the variable name to rename <code class=\"txt\">item<\/code> to something else, e.g. <code data-lang=\"py3\">line<\/code>: \n<\/p>\n\n<figure class=\"align-center\">\n  <img alt=\"Rename a variable\" src=\"https:\/\/groklearning-cdn.com\/modules\/4ax6CRAP4d8RV2ED26c2zT\/blockly-rename-var.png\" width=\"300px\">\n<\/figure>\n\n<p>\n  Now the <strong>Variables<\/strong> menu will show a set block <bk class=\"var\">set <bk class=\"inner\">line<\/bk><\/bk> and get block <bk class=\"var\"><bk class=\"inner\">line<\/bk><\/bk> for your new variable.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    AC:DT does not explicitly mention variables. However, variables are central to any collecting, storing, and processing of data (and responding to user input) in a program.\n  <\/p>\n  <p>\n   Spreadsheet cells and database columns also act as variables.  This includes Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP009\" target=\"_blank\">ACTDIP009<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP016\" target=\"_blank\">ACTDIP016<\/a>.\n  <\/p>\n  <p>\n    Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP026\" target=\"_blank\">ACTDIP026<\/a> and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP037\" target=\"_blank\">ACTDIP037<\/a> include structured data, which we cover in the other Challenge streams.\n  <\/p>\n<\/aside>\n",
              "content_rendered":"<p>\n  Writing a long message many times is a pain. It would be great if we could store the message somewhere and reuse it.\n<\/p>\n\n<p>\n  A <em>variable<\/em> is that place!  Each variable has a <em>name<\/em> which we use to set and get the message:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-jolly-good-fellow\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"34\" inline=\"true\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">line<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"2\">\n        <field name=\"TEXT\">For she's a jolly good fellow.<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"1\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"44\">\n            <field name=\"VAR\">line<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"45\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"variables_get\" id=\"46\">\n                <field name=\"VAR\">line<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"47\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"variables_get\" id=\"48\">\n                    <field name=\"VAR\">line<\/field>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print1\" id=\"49\" inline=\"true\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"56\">\n                        <field name=\"TEXT\">And so say all of us!<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"var\">set <bk class=\"inner\">line<\/bk><\/bk> block creates a new variable called <code data-lang=\"py3\">line<\/code>. It holds the message <bk class=\"str lit\"><bk class=\"inner\">For she's a jolly good fellow.<\/bk><\/bk>.\n  We can then use the <bk class=\"var\"><bk class=\"inner\">line<\/bk><\/bk> block to print that message as often as we want.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Creating a variable<\/h2>\n  <p>\n    To create a new variable, click the down arrow next to the variable name and select <strong>New Variable...<\/strong>\n  <\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  What if you want to print more than one message on a line?\n<\/p>\n\n<p>\n  Blockly has <bk class=\"io\">print<\/bk> blocks with more than one hole, e.g.:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-print-multi-args1\" data-runnable=\"false\" data-codegen=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print2\" id=\"79\" inline=\"true\" x=\"10\" y=\"10\"><\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  You can use these with multiple strings, like this:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-print-multi-args2\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"io_print2\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Harry<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block id=\"3\" type=\"text\">\n        <field name=\"TEXT\">Potter<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  When you run it, notice that the output is not <code data-lang=\"out\">HarryPotter<\/code>.\n<\/p>\n\n<p>\n  <strong>The <bk class=\"io\">print<\/bk> automatically adds a space between the two strings.<\/strong>\n<\/p>\n"
                }
              ],
              "layout":0,
              "title":"More <bk class=\"io\">print<\/bk> blocks",
              "notes":[
                {
                  "left":"<p>\n  For each problem, we provide one or more <bk class=\"io\">print<\/bk> blocks to use.\n<\/p>\n\n<p>\n  Rather than providing all of the <bk class=\"io\">print<\/bk> blocks (with 0\u20136 holes), we just provide the ones needed to solve the problem.  This stops the block menus becoming overwhelming, especially on small screens.\n<\/p>\n\n<p>\n  Often, a program can be written using different blocks, for example:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-print2-harry-potter\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print2\" id=\"11\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"15\">\n        <field name=\"TEXT\">Harry<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"text\" id=\"16\">\n        <field name=\"TEXT\">Potter<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>produces exactly the same output as:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-print1-harry-potter\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"19\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"15\">\n        <field name=\"TEXT\">Harry Potter<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
                }
              ],
              "notes_rendered":"<p>\n  For each problem, we provide one or more <bk class=\"io\">print<\/bk> blocks to use.\n<\/p>\n\n<p>\n  Rather than providing all of the <bk class=\"io\">print<\/bk> blocks (with 0\u20136 holes), we just provide the ones needed to solve the problem.  This stops the block menus becoming overwhelming, especially on small screens.\n<\/p>\n\n<p>\n  Often, a program can be written using different blocks, for example:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-print2-harry-potter\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print2\" id=\"11\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"15\">\n        <field name=\"TEXT\">Harry<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"text\" id=\"16\">\n        <field name=\"TEXT\">Potter<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>produces exactly the same output as:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-print1-harry-potter\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print1\" id=\"19\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"15\">\n        <field name=\"TEXT\">Harry Potter<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
              "content_rendered":"<p>\n  What if you want to print more than one message on a line?\n<\/p>\n\n<p>\n  Blockly has <bk class=\"io\">print<\/bk> blocks with more than one hole, e.g.:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-print-multi-args1\" data-runnable=\"false\" data-codegen=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print2\" id=\"79\" inline=\"true\" x=\"10\" y=\"10\"><\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  You can use these with multiple strings, like this:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-print-multi-args2\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"io_print2\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <value name=\"ANY0\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Harry<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block id=\"3\" type=\"text\">\n        <field name=\"TEXT\">Potter<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  When you run it, notice that the output is not <code data-lang=\"out\">HarryPotter<\/code>.\n<\/p>\n\n<p>\n  <strong>The <bk class=\"io\">print<\/bk> automatically adds a space between the two strings.<\/strong>\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  We can now use <bk class=\"io\">print<\/bk> to print a mix of strings and variables:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"print-multi-args3\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"87\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">colour<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"92\">\n        <field name=\"TEXT\">blue<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print2\" id=\"79\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"102\">\n            <field name=\"VAR\">colour<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"text\" id=\"95\">\n            <field name=\"TEXT\">is my favourite colour!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This example uses a 3-hole block to print the variable in the middle:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"print-multi-args4\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"52\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">weather<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"53\">\n        <field name=\"TEXT\">sunny<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print3\" id=\"54\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"55\">\n            <field name=\"TEXT\">The weather is<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"56\">\n            <field name=\"VAR\">weather<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY2\">\n          <block type=\"text\" id=\"57\">\n            <field name=\"TEXT\">today!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"io\">print<\/bk> block puts a space between <em>each<\/em> value.\n<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Mixing messages and variables",
              "notes":[
                {
                  "left":"<p>\n  Variables can be used anywhere a value (like a <bk class=\"str\">string<\/bk>) can be used.\n<\/p>\n\n<p>\n  Every time a variable is mentioned, e.g. <bk class=\"var\"><bk class=\"inner\">colour<\/bk><\/bk>, the <strong>value stored in the variable is retrieved and used in place of the variable<\/strong>. So:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-var-as-value1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"87\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">colour<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"92\">\n        <field name=\"TEXT\">blue<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print2\" id=\"79\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"102\">\n            <field name=\"VAR\">colour<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"text\" id=\"95\">\n            <field name=\"TEXT\">is my favourite colour!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  is really the same as writing:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-var-as-value2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print2\" id=\"6\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"8\">\n        <field name=\"TEXT\">blue<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"text\" id=\"9\">\n        <field name=\"TEXT\">is my favourite colour!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  because when we mention <bk class=\"var\"><bk class=\"inner\">colour<\/bk><\/bk>, we get back what's stored inside, which we previously set to <bk class=\"str lit\"><bk class=\"inner\">blue<\/bk><\/bk>.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2><em>Tracing<\/em>: \"running\" code by hand<\/h2>\n  <p>\n    AC:DT requires students to <em>trace<\/em> algorithms and code (aka <em>desk checking<\/em>) in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a> and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP016\" target=\"_blank\">ACTDIP040<\/a>.\n  <\/p>\n  \n  <p>\n    <strong>However, it is a great way for all ages to understand variables.<\/strong>\n  <\/p>\n  <p>\n    It works best on a whiteboard. Split it (vertically): \u2153 <em>code blocks<\/em>, \u2153 <em>variables<\/em>, and \u2153 <em>output<\/em>.\n  <\/p>\n  <p>\n    <strong>You and the class are the computer.<\/strong> \"Run\" the code block by block, from top to bottom.  Point to the block you are running.\n  <\/p>\n  <p>\n    When you reach a <bk class=\"io\">print<\/bk> block, \"print\" the values to the <em>output<\/em>.  Explicitly print the value in each hole (on a single line) with a space between each one. Each <bk class=\"io\">print<\/bk> writes one line.\n  <\/p>\n  <p>\n    When a variable is first set, draw a box in <em>variables<\/em>.  Write the variable name above the box, and \"store\" (write) its value inside.\n  <\/p>\n  <p>\n    To get the value of a variable, explicitly \"read\" it out of the box.\n  <\/p>\n  <p>\n    To set a new value in a variable, erase the old value, and \"store\" the new value in the box.\n  <\/p>\n  <p>\n    <strong>Finally, compare the <em>output<\/em> against running the program in Grok.<\/strong>\n  <\/p>\n<\/aside>\n"
                }
              ],
              "notes_rendered":"<p>\n  Variables can be used anywhere a value (like a <bk class=\"str\">string<\/bk>) can be used.\n<\/p>\n\n<p>\n  Every time a variable is mentioned, e.g. <bk class=\"var\"><bk class=\"inner\">colour<\/bk><\/bk>, the <strong>value stored in the variable is retrieved and used in place of the variable<\/strong>. So:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-var-as-value1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"87\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">colour<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"92\">\n        <field name=\"TEXT\">blue<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print2\" id=\"79\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"102\">\n            <field name=\"VAR\">colour<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"text\" id=\"95\">\n            <field name=\"TEXT\">is my favourite colour!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  is really the same as writing:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"teacher-var-as-value2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print2\" id=\"6\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"8\">\n        <field name=\"TEXT\">blue<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"text\" id=\"9\">\n        <field name=\"TEXT\">is my favourite colour!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  because when we mention <bk class=\"var\"><bk class=\"inner\">colour<\/bk><\/bk>, we get back what's stored inside, which we previously set to <bk class=\"str lit\"><bk class=\"inner\">blue<\/bk><\/bk>.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2><em>Tracing<\/em>: \"running\" code by hand<\/h2>\n  <p>\n    AC:DT requires students to <em>trace<\/em> algorithms and code (aka <em>desk checking<\/em>) in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a> and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP016\" target=\"_blank\">ACTDIP040<\/a>.\n  <\/p>\n  \n  <p>\n    <strong>However, it is a great way for all ages to understand variables.<\/strong>\n  <\/p>\n  <p>\n    It works best on a whiteboard. Split it (vertically): \u2153 <em>code blocks<\/em>, \u2153 <em>variables<\/em>, and \u2153 <em>output<\/em>.\n  <\/p>\n  <p>\n    <strong>You and the class are the computer.<\/strong> \"Run\" the code block by block, from top to bottom.  Point to the block you are running.\n  <\/p>\n  <p>\n    When you reach a <bk class=\"io\">print<\/bk> block, \"print\" the values to the <em>output<\/em>.  Explicitly print the value in each hole (on a single line) with a space between each one. Each <bk class=\"io\">print<\/bk> writes one line.\n  <\/p>\n  <p>\n    When a variable is first set, draw a box in <em>variables<\/em>.  Write the variable name above the box, and \"store\" (write) its value inside.\n  <\/p>\n  <p>\n    To get the value of a variable, explicitly \"read\" it out of the box.\n  <\/p>\n  <p>\n    To set a new value in a variable, erase the old value, and \"store\" the new value in the box.\n  <\/p>\n  <p>\n    <strong>Finally, compare the <em>output<\/em> against running the program in Grok.<\/strong>\n  <\/p>\n<\/aside>\n",
              "content_rendered":"<p>\n  We can now use <bk class=\"io\">print<\/bk> to print a mix of strings and variables:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"print-multi-args3\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"87\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">colour<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"92\">\n        <field name=\"TEXT\">blue<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print2\" id=\"79\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"102\">\n            <field name=\"VAR\">colour<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"text\" id=\"95\">\n            <field name=\"TEXT\">is my favourite colour!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This example uses a 3-hole block to print the variable in the middle:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"print-multi-args4\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"52\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">weather<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"53\">\n        <field name=\"TEXT\">sunny<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print3\" id=\"54\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"55\">\n            <field name=\"TEXT\">The weather is<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"56\">\n            <field name=\"VAR\">weather<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY2\">\n          <block type=\"text\" id=\"57\">\n            <field name=\"TEXT\">today!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"io\">print<\/bk> block puts a space between <em>each<\/em> value.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Library Day",
              "purpose":"",
              "problem":"bk-py3-library-day",
              "type":1,
              "problem_id":3638
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: I have no homework",
              "purpose":"",
              "problem":"bk-py3-no-homework-variable",
              "type":1,
              "problem_id":3642
            }
          ],
          "title":"Variables"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Let's write a program that asks the user for their name:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-input-name\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"io_ask_text\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block id=\"3\" type=\"text\">\n            <field name=\"TEXT\">What is your name?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"4\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"5\" type=\"variables_get\">\n          <field name=\"VAR\">name<\/field>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Run this program. Even if you haven't run any so far, run this one!\n<\/p>\n\n<p>\n  <strong>You will need to type a name and press <kbd>Enter<\/kbd><\/strong>:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"bk-input-name\"><code data-lang=\"py3\">\n<o>What is your name? <\/o><i>Grok\n<\/i><o>Grok\n<\/o>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"str\">ask<\/bk> block needs a question string to <em>ask the user<\/em>. It returns the user's answer to our program as a new string. Our program stores the answer in the <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk> variable so we can print it later.\n<\/p>\n\n<p>\n  <strong>Run it again with a different name.  Then try changing the question.<\/strong>\n<\/p>"
                }
              ],
              "layout":0,
              "title":"Asking the user for information",
              "notes":[
                {
                  "left":"<p>\n  <strong>Students really (really!) need to run this slide's example!<\/strong> It is worth running it on a big screen so everyone sees it at least once.\n<\/p>\n\n<p>\n  It is their first <em>interactive<\/em> program \u2013\u00a0i.e. it responds to their input.\n<\/p>\n\n<p>\n  When the program runs, it waits for the user to answer:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>What is your name? <\/o>\n<\/code><\/pre>\n\n<p>\n  It won't keep going until the user enters a name and presses <kbd>Enter<\/kbd>.\n<\/p>\n\n<p>\n  The text that the user enters is <em>returned<\/em> by the <bk class=\"str\">ask<\/bk> block. The <bk class=\"var\">set <bk class=\"inner\">name<\/bk><\/bk> block stores that text in the <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk> variable.  Finally, the <bk class=\"io\">print<\/bk> block then prints out this stored text.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Text and numbers are two important types of user input.\n  <\/p>\n  <p>\n    AC:DT requires students to write programs involving <em>user input<\/em> from Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>.\n    Students must <em>predict output for a given input<\/em> in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a>.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "notes_rendered":"<p>\n  <strong>Students really (really!) need to run this slide's example!<\/strong> It is worth running it on a big screen so everyone sees it at least once.\n<\/p>\n\n<p>\n  It is their first <em>interactive<\/em> program \u2013\u00a0i.e. it responds to their input.\n<\/p>\n\n<p>\n  When the program runs, it waits for the user to answer:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>What is your name? <\/o>\n<\/code><\/pre>\n\n<p>\n  It won't keep going until the user enters a name and presses <kbd>Enter<\/kbd>.\n<\/p>\n\n<p>\n  The text that the user enters is <em>returned<\/em> by the <bk class=\"str\">ask<\/bk> block. The <bk class=\"var\">set <bk class=\"inner\">name<\/bk><\/bk> block stores that text in the <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk> variable.  Finally, the <bk class=\"io\">print<\/bk> block then prints out this stored text.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    Text and numbers are two important types of user input.\n  <\/p>\n  <p>\n    AC:DT requires students to write programs involving <em>user input<\/em> from Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>.\n    Students must <em>predict output for a given input<\/em> in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a>.\n  <\/p>\n<\/aside>\n",
              "content_rendered":"<p>\n  Let's write a program that asks the user for their name:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-input-name\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"io_ask_text\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block id=\"3\" type=\"text\">\n            <field name=\"TEXT\">What is your name?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"4\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"5\" type=\"variables_get\">\n          <field name=\"VAR\">name<\/field>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Run this program. Even if you haven't run any so far, run this one!\n<\/p>\n\n<p>\n  <strong>You will need to type a name and press <kbd>Enter<\/kbd><\/strong>:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"bk-input-name\"><code data-lang=\"py3\">\n<o>What is your name? <\/o><i>Grok\n<\/i><o>Grok\n<\/o>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"str\">ask<\/bk> block needs a question string to <em>ask the user<\/em>. It returns the user's answer to our program as a new string. Our program stores the answer in the <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk> variable so we can print it later.\n<\/p>\n\n<p>\n  <strong>Run it again with a different name.  Then try changing the question.<\/strong>\n<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Echo! Echo!",
              "purpose":"",
              "problem":"bk-py3-echo-echo",
              "type":1,
              "problem_id":3709
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Now we see why variables are called <em>variables<\/em>! When you run the program and ask the user a question, they could type anything:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-py3-variable-vars\" data-codegen=\"false\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">animal<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"io_ask_text_simple\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block id=\"3\" type=\"text\">\n            <field name=\"TEXT\">Favourite animal? <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"4\" type=\"io_print3\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"5\" type=\"text\">\n          <field name=\"TEXT\">I like<\/field>\n        <\/block>\n      <\/value>\n      <value name=\"ANY1\">\n        <block id=\"6\" type=\"variables_get\">\n          <field name=\"VAR\">animal<\/field>\n        <\/block>\n      <\/value>\n      <value name=\"ANY2\">\n        <block id=\"7\" type=\"text\">\n          <field name=\"TEXT\">too!<\/field>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"bk-py3-variable-vars\"><code data-lang=\"py3\">\n<o>Favourite animal? <\/o><i>tigers\n<\/i><o>I like tigers too!\n<\/o>\n<\/code><\/pre>\n\n<p>Here, the <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> variable contains the message <bk class=\"str lit\"><bk class=\"inner\">tigers<\/bk><\/bk>, but if the user types in something else, it will contain something else:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\">\n<o>Favourite animal? <\/o><i>pineapple\n<\/i><o>I like pineapple too!\n<\/o>\n<\/code><\/pre>\n\n<p>\n  This time, the <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> variable contains <bk class=\"str lit\"><bk class=\"inner\">pineapple<\/bk><\/bk>.\n<\/p>\n\n<p>\n  Variables are <em>variable<\/em> because you may not know their value when you write the program, it could be <em>anything<\/em>!\n<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Variable variables!",
              "notes":[
                {
                  "left":"<p>\n  Here we demonstrate the dynamic nature of variables: their <em>value can change<\/em> while the program is running.\n<\/p>\n\n<p>\n  In fact, if the variable depends on user input, then <em>we don't even know<\/em> what the value will be before it runs.\n<\/p>\n\n<p>\n  The second example shows a a couple of different things:\n<\/p>\n\n<ul>\n  <li>users don't always do what they're asked! The program prompt asked for an animal, but the <strong>user can enter anything<\/strong>;<\/li>\n  <li>as a result, the input prompt and the name of the variable the value is stored in <strong>don't guarantee its contents<\/strong>.\n<\/ul>\n\n<p>\n  To be sure the input is what we expect, we must check it (we'll do this later in the course).\n<\/p>\n"
                }
              ],
              "notes_rendered":"<p>\n  Here we demonstrate the dynamic nature of variables: their <em>value can change<\/em> while the program is running.\n<\/p>\n\n<p>\n  In fact, if the variable depends on user input, then <em>we don't even know<\/em> what the value will be before it runs.\n<\/p>\n\n<p>\n  The second example shows a a couple of different things:\n<\/p>\n\n<ul>\n  <li>users don't always do what they're asked! The program prompt asked for an animal, but the <strong>user can enter anything<\/strong>;<\/li>\n  <li>as a result, the input prompt and the name of the variable the value is stored in <strong>don't guarantee its contents<\/strong>.\n<\/ul>\n\n<p>\n  To be sure the input is what we expect, we must check it (we'll do this later in the course).\n<\/p>\n",
              "content_rendered":"<p>\n  Now we see why variables are called <em>variables<\/em>! When you run the program and ask the user a question, they could type anything:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-py3-variable-vars\" data-codegen=\"false\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">animal<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"io_ask_text_simple\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block id=\"3\" type=\"text\">\n            <field name=\"TEXT\">Favourite animal? <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"4\" type=\"io_print3\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"5\" type=\"text\">\n          <field name=\"TEXT\">I like<\/field>\n        <\/block>\n      <\/value>\n      <value name=\"ANY1\">\n        <block id=\"6\" type=\"variables_get\">\n          <field name=\"VAR\">animal<\/field>\n        <\/block>\n      <\/value>\n      <value name=\"ANY2\">\n        <block id=\"7\" type=\"text\">\n          <field name=\"TEXT\">too!<\/field>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"bk-py3-variable-vars\"><code data-lang=\"py3\">\n<o>Favourite animal? <\/o><i>tigers\n<\/i><o>I like tigers too!\n<\/o>\n<\/code><\/pre>\n\n<p>Here, the <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> variable contains the message <bk class=\"str lit\"><bk class=\"inner\">tigers<\/bk><\/bk>, but if the user types in something else, it will contain something else:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\">\n<o>Favourite animal? <\/o><i>pineapple\n<\/i><o>I like pineapple too!\n<\/o>\n<\/code><\/pre>\n\n<p>\n  This time, the <bk class=\"var\"><bk class=\"inner\">animal<\/bk><\/bk> variable contains <bk class=\"str lit\"><bk class=\"inner\">pineapple<\/bk><\/bk>.\n<\/p>\n\n<p>\n  Variables are <em>variable<\/em> because you may not know their value when you write the program, it could be <em>anything<\/em>!\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Meet the puppy",
              "purpose":"",
              "problem":"bk-py3-meet-the-puppy",
              "type":1,
              "problem_id":2621
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Cheer me on!",
              "purpose":"",
              "problem":"bk-py3-cheer-me-on",
              "type":1,
              "problem_id":3710
            }
          ],
          "title":"Reading user input"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  You can create as many variables as you need, as long as they have different names (otherwise, you're setting an existing variable).\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-py3-var-full-names\"><code data-lang=\"blockly\" style=\"display: none\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">first<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"io_ask_text\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block id=\"3\" type=\"text\">\n            <field name=\"TEXT\">First name?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block id=\"4\" type=\"variables_set\" inline=\"true\">\n        <field name=\"VAR\">middle<\/field>\n        <value name=\"VALUE\">\n          <block id=\"5\" type=\"io_ask_text\" inline=\"true\">\n            <value name=\"TEXT\">\n              <block id=\"6\" type=\"text\">\n                <field name=\"TEXT\">Middle name?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block id=\"7\" type=\"variables_set\" inline=\"true\">\n            <field name=\"VAR\">last<\/field>\n            <value name=\"VALUE\">\n              <block id=\"8\" type=\"io_ask_text\" inline=\"true\">\n                <value name=\"TEXT\">\n                  <block id=\"9\" type=\"text\">\n                    <field name=\"TEXT\">Last name?<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block id=\"10\" type=\"io_print4\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block id=\"11\" type=\"text\">\n                    <field name=\"TEXT\">Full name:<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block id=\"12\" type=\"variables_get\">\n                    <field name=\"VAR\">first<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY2\">\n                  <block id=\"13\" type=\"variables_get\">\n                    <field name=\"VAR\">middle<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY3\">\n                  <block id=\"14\" type=\"variables_get\">\n                    <field name=\"VAR\">last<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The variable names make it very clear our program makes a full name out of a first, middle and last name:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"bk-py3-var-full-names\"><code data-lang=\"py3\">\n<o>First name? <\/o><i>Hans\n<\/i><o>Middle name? <\/o><i>Christian\n<\/i><o>Last name? <\/o><i>Andersen\n<\/i><o>Full name: Hans Christian Andersen\n<\/o>\n<\/code><\/pre>\n\n<p>\n  <strong>Good variable names help explain what the code does!<\/strong>\n<\/p>\n"
                }
              ],
              "layout":0,
              "title":"Using multiple variables",
              "notes":[
                {
                  "left":"<p>\n  If we want to store and use different pieces of information at once, we need multiple variables: one for each bit of data.\n<\/p>\n\n<p>\n  This is where variable names are important.  <strong>Each variable name must clearly describe what is stored in that variable.<\/strong>\n<\/p>\n\n<p>\n  Ideally, the names shouldn't be too short (so they're ambiguous), or too long (so they're annoying to type and read).\n<\/p>\n\n<aside class=\"info\">\n  <h2>Rename versus new variable...<\/h2>\n  <p>\n    To create multiple variables, you can choose <strong>Rename variable...<\/strong> on the default <bk class=\"var\"><bk class=\"inner\">item<\/bk><\/bk> variable. This creates a new variable each time, like this:\n  <\/p>\n  <figure class=\"align-center\">\n    <img alt=\"Rename a variable\" src=\"https:\/\/groklearning-cdn.com\/modules\/4ax6CRAP4d8RV2ED26c2zT\/blockly-rename-var.png\" width=\"300px\">\n  <\/figure>\n  <p>\n    Or you can use any other variable block (e.g. <bk class=\"var\"><bk class=\"inner\">first<\/bk><\/bk>), and then choose <strong>New variable...<\/strong>, like this:\n  <\/p>\n  <figure class=\"align-center\">\n    <img alt=\"Create a new variable\" src=\"https:\/\/groklearning-cdn.com\/modules\/fV3KixPNqCicLGVYY2ZsK8\/blockly-new-var.png\" width=\"300px\">\n  <\/figure>\n  <p>\n    If you use <strong>Rename variable...<\/strong> on an existing variable (like <bk class=\"var\"><bk class=\"inner\">first<\/bk><\/bk>), it will change the variable name in all blocks that use the variable, not just the currently selected one.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "notes_rendered":"<p>\n  If we want to store and use different pieces of information at once, we need multiple variables: one for each bit of data.\n<\/p>\n\n<p>\n  This is where variable names are important.  <strong>Each variable name must clearly describe what is stored in that variable.<\/strong>\n<\/p>\n\n<p>\n  Ideally, the names shouldn't be too short (so they're ambiguous), or too long (so they're annoying to type and read).\n<\/p>\n\n<aside class=\"info\">\n  <h2>Rename versus new variable...<\/h2>\n  <p>\n    To create multiple variables, you can choose <strong>Rename variable...<\/strong> on the default <bk class=\"var\"><bk class=\"inner\">item<\/bk><\/bk> variable. This creates a new variable each time, like this:\n  <\/p>\n  <figure class=\"align-center\">\n    <img alt=\"Rename a variable\" src=\"https:\/\/groklearning-cdn.com\/modules\/4ax6CRAP4d8RV2ED26c2zT\/blockly-rename-var.png\" width=\"300px\">\n  <\/figure>\n  <p>\n    Or you can use any other variable block (e.g. <bk class=\"var\"><bk class=\"inner\">first<\/bk><\/bk>), and then choose <strong>New variable...<\/strong>, like this:\n  <\/p>\n  <figure class=\"align-center\">\n    <img alt=\"Create a new variable\" src=\"https:\/\/groklearning-cdn.com\/modules\/fV3KixPNqCicLGVYY2ZsK8\/blockly-new-var.png\" width=\"300px\">\n  <\/figure>\n  <p>\n    If you use <strong>Rename variable...<\/strong> on an existing variable (like <bk class=\"var\"><bk class=\"inner\">first<\/bk><\/bk>), it will change the variable name in all blocks that use the variable, not just the currently selected one.\n  <\/p>\n<\/aside>\n",
              "content_rendered":"<p>\n  You can create as many variables as you need, as long as they have different names (otherwise, you're setting an existing variable).\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-py3-var-full-names\"><code data-lang=\"blockly\" style=\"display: none\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">first<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"io_ask_text\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block id=\"3\" type=\"text\">\n            <field name=\"TEXT\">First name?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block id=\"4\" type=\"variables_set\" inline=\"true\">\n        <field name=\"VAR\">middle<\/field>\n        <value name=\"VALUE\">\n          <block id=\"5\" type=\"io_ask_text\" inline=\"true\">\n            <value name=\"TEXT\">\n              <block id=\"6\" type=\"text\">\n                <field name=\"TEXT\">Middle name?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block id=\"7\" type=\"variables_set\" inline=\"true\">\n            <field name=\"VAR\">last<\/field>\n            <value name=\"VALUE\">\n              <block id=\"8\" type=\"io_ask_text\" inline=\"true\">\n                <value name=\"TEXT\">\n                  <block id=\"9\" type=\"text\">\n                    <field name=\"TEXT\">Last name?<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block id=\"10\" type=\"io_print4\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block id=\"11\" type=\"text\">\n                    <field name=\"TEXT\">Full name:<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block id=\"12\" type=\"variables_get\">\n                    <field name=\"VAR\">first<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY2\">\n                  <block id=\"13\" type=\"variables_get\">\n                    <field name=\"VAR\">middle<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY3\">\n                  <block id=\"14\" type=\"variables_get\">\n                    <field name=\"VAR\">last<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The variable names make it very clear our program makes a full name out of a first, middle and last name:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"bk-py3-var-full-names\"><code data-lang=\"py3\">\n<o>First name? <\/o><i>Hans\n<\/i><o>Middle name? <\/o><i>Christian\n<\/i><o>Last name? <\/o><i>Andersen\n<\/i><o>Full name: Hans Christian Andersen\n<\/o>\n<\/code><\/pre>\n\n<p>\n  <strong>Good variable names help explain what the code does!<\/strong>\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Match of the year!",
              "purpose":"",
              "problem":"bk-py3-match-of-the-year",
              "type":1,
              "problem_id":2623
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Best New Ice Cream Combination",
              "purpose":"",
              "problem":"bk-py3-ice-cream-combo",
              "type":1,
              "problem_id":3715
            }
          ],
          "title":"Multiple variables"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Congratulations, you have completed the first module!\n<\/p>\n\n<p>\n  You should now be able to write and explain code like this:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-input-echo-echo\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"io_ask_text\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block id=\"3\" type=\"text\">\n            <field name=\"TEXT\">Echo?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"4\" type=\"io_print4\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"5\" type=\"variables_get\">\n          <field name=\"VAR\">msg<\/field>\n        <\/block>\n      <\/value>\n      <value name=\"ANY1\">\n        <block id=\"6\" type=\"text\">\n          <field name=\"TEXT\">...<\/field>\n        <\/block>\n      <\/value>\n      <value name=\"ANY2\">\n        <block id=\"7\" type=\"variables_get\">\n          <field name=\"VAR\">msg<\/field>\n        <\/block>\n      <\/value>\n      <value name=\"ANY3\">\n        <block id=\"8\" type=\"text\">\n          <field name=\"TEXT\">...<\/field>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<ol>\n  <li>the <bk class=\"str\">ask<\/bk> block asks for a string with prompt <bk class=\"str\"><bk class=\"inner\">Echo?<\/bk><\/bk>;<\/li>\n  <li>the string is stored in <bk class=\"var\"><bk class=\"inner\">msg<\/bk><\/bk> (short for <em>message<\/em>);<\/li>\n  <li>the <bk class=\"io\">print<\/bk> block prints message and <code data-lang=\"out\">...<\/code> twice on one line.<\/li>\n<\/li>\n<\/ol>\n"
                }
              ],
              "layout":0,
              "title":"Congratulations!",
              "notes_rendered":"",
              "content_rendered":"<p>\n  Congratulations, you have completed the first module!\n<\/p>\n\n<p>\n  You should now be able to write and explain code like this:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-input-echo-echo\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"io_ask_text\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block id=\"3\" type=\"text\">\n            <field name=\"TEXT\">Echo?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"4\" type=\"io_print4\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"5\" type=\"variables_get\">\n          <field name=\"VAR\">msg<\/field>\n        <\/block>\n      <\/value>\n      <value name=\"ANY1\">\n        <block id=\"6\" type=\"text\">\n          <field name=\"TEXT\">...<\/field>\n        <\/block>\n      <\/value>\n      <value name=\"ANY2\">\n        <block id=\"7\" type=\"variables_get\">\n          <field name=\"VAR\">msg<\/field>\n        <\/block>\n      <\/value>\n      <value name=\"ANY3\">\n        <block id=\"8\" type=\"text\">\n          <field name=\"TEXT\">...<\/field>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<ol>\n  <li>the <bk class=\"str\">ask<\/bk> block asks for a string with prompt <bk class=\"str\"><bk class=\"inner\">Echo?<\/bk><\/bk>;<\/li>\n  <li>the string is stored in <bk class=\"var\"><bk class=\"inner\">msg<\/bk><\/bk> (short for <em>message<\/em>);<\/li>\n  <li>the <bk class=\"io\">print<\/bk> block prints message and <code data-lang=\"out\">...<\/code> twice on one line.<\/li>\n<\/li>\n<\/ol>\n",
              "purpose":"",
              "type":0
            }
          ],
          "title":"Congratulations"
        }
      ],
      "title":"Getting started with code",
      "label":"aca-blockly-yr56-module1-variables",
      "updated_at":"2018-05-14T06:56:11.505355+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  So far our programs have been just a sequence of steps that run from top to bottom. The programs <em>run the same way every time<\/em>.\n<\/p>\n\n<p>\n  In the real world, we <strong>decide<\/strong> to <strong>take different steps<\/strong> based on our situation. For example, if it's raining, we do an <em>extra step<\/em> of taking an umbrella before leaving the house.\n<\/p>\n\n<p>\n  This <em>flowchart<\/em> describes this process (or <em>algorithm<\/em>):\n<\/p>\n\n<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xl=\"http:\/\/www.w3.org\/1999\/xlink\" version=\"1.1\" viewBox=\"-2 -2 344 134\" width=\"344pt\" height=\"134pt\" style=\"position: relative; display: block; margin: 0 auto; width: 90%\">\n<defs><marker orient=\"auto\" overflow=\"visible\" markerUnits=\"strokeWidth\" id=\"FilledArrow_Marker\" viewBox=\"-1 -3 7 6\" markerWidth=\"7\" markerHeight=\"6\" color=\"black\"><g><path d=\"M 4.8000002 0 L 0 -1.8000001 L 0 1.8000001 Z\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\"\/><\/g><\/marker><font-face font-family=\"Lato\" font-size=\"12\" panose-1=\"2 15 5 2 2 2 4 3 2 3\" units-per-em=\"1000\" underline-position=\"-51.5\" underline-thickness=\"97\" slope=\"0\" x-height=\"514\" cap-height=\"724\" ascent=\"986.9995\" descent=\"-212.99744\" font-weight=\"500\"><font-face-src><font-face-name name=\"Lato-Regular\"\/><\/font-face-src><\/font-face><\/defs><g stroke=\"none\" stroke-opacity=\"1\" stroke-dasharray=\"none\" fill=\"none\" fill-opacity=\"1\"><g><line x1=\"50.500013\" y1=\"90\" x2=\"66.1\" y2=\"90\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><path d=\"M 120 50 L 120 25 L 157.1 25\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(94.5 30.04491)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"black\" x=\".62619825\" y=\"12\" textLength=\"6.186\">y<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"black\" x=\"6.6441982\" y=\"12\" textLength=\"11.5319996\">es<\/tspan><\/text><path d=\"M 250 25 L 301.5 25 L 301.5 51.5\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><line x1=\"160\" y1=\"90\" x2=\"246.1\" y2=\"90\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(163 95)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".25\" y=\"12\" textLength=\"13.5\">no<\/tspan><\/text><rect x=\"170\" y=\"0\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"170\" y=\"0\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(175 10)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.248\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"20.966\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"32.684\" y=\"12\" textLength=\"22.068001\">e an<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"12.317\" y=\"27\" textLength=\"27.648\">umbr<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"39.719\" y=\"27\" textLength=\"17.964001\">ella<\/tspan><\/text><path d=\"M 120 50 L 160 90 L 120 130 L 80 90 Z\" fill=\"#ff5900\"\/><path d=\"M 120 50 L 160 90 L 120 130 L 80 90 Z\" stroke=\"#ff5900\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(95.8 71)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.685\" y=\"12\" textLength=\"3.3599999\">I<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"18.865\" y=\"12\" textLength=\"18.521999\">s it <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"4.501\" y=\"27\" textLength=\"4.368\">r<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.773\" y=\"27\" textLength=\"36.726002\">aining?<\/tspan><\/text><rect x=\"260\" y=\"65\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"260\" y=\"65\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(265 75)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"9.302\" y=\"12\" textLength=\"54.468\">Leave the <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"19.139\" y=\"27\" textLength=\"31.722\">house<\/tspan><\/text><circle cx=\"25\" cy=\"90\" r=\"25.00004\" fill=\"#7b188f\"\/><circle cx=\"25\" cy=\"90\" r=\"25.00004\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\"\/><text transform=\"translate(10 82.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"2.412\" y=\"12\" textLength=\"6.5100002\">S<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.652\" y=\"12\" textLength=\"18.936001\">tart<\/tspan><\/text><\/g><\/g><\/svg>\n\n<p>\n  The diamond requires a <code data-lang=\"in\">yes<\/code> or <code data-lang=\"in\">no<\/code> decision.  The answer determines which line we follow.  If the answer is <code data-lang=\"in\">yes<\/code>, we do the extra step of taking an umbrella. If the answer is <code data-lang=\"in\">no<\/code>, we skip it.\n<\/p>\n\n<p>\n  We can write this in Blockly using an <bk class=\"control\">if<\/bk> block.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Why do we need decisions?",
              "content_rendered":"<p>\n  So far our programs have been just a sequence of steps that run from top to bottom. The programs <em>run the same way every time<\/em>.\n<\/p>\n\n<p>\n  In the real world, we <strong>decide<\/strong> to <strong>take different steps<\/strong> based on our situation. For example, if it's raining, we do an <em>extra step<\/em> of taking an umbrella before leaving the house.\n<\/p>\n\n<p>\n  This <em>flowchart<\/em> describes this process (or <em>algorithm<\/em>):\n<\/p>\n\n<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xl=\"http:\/\/www.w3.org\/1999\/xlink\" version=\"1.1\" viewBox=\"-2 -2 344 134\" width=\"344pt\" height=\"134pt\" style=\"position: relative; display: block; margin: 0 auto; width: 90%\">\n<defs><marker orient=\"auto\" overflow=\"visible\" markerUnits=\"strokeWidth\" id=\"FilledArrow_Marker\" viewBox=\"-1 -3 7 6\" markerWidth=\"7\" markerHeight=\"6\" color=\"black\"><g><path d=\"M 4.8000002 0 L 0 -1.8000001 L 0 1.8000001 Z\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\"\/><\/g><\/marker><font-face font-family=\"Lato\" font-size=\"12\" panose-1=\"2 15 5 2 2 2 4 3 2 3\" units-per-em=\"1000\" underline-position=\"-51.5\" underline-thickness=\"97\" slope=\"0\" x-height=\"514\" cap-height=\"724\" ascent=\"986.9995\" descent=\"-212.99744\" font-weight=\"500\"><font-face-src><font-face-name name=\"Lato-Regular\"\/><\/font-face-src><\/font-face><\/defs><g stroke=\"none\" stroke-opacity=\"1\" stroke-dasharray=\"none\" fill=\"none\" fill-opacity=\"1\"><g><line x1=\"50.500013\" y1=\"90\" x2=\"66.1\" y2=\"90\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><path d=\"M 120 50 L 120 25 L 157.1 25\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(94.5 30.04491)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"black\" x=\".62619825\" y=\"12\" textLength=\"6.186\">y<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"black\" x=\"6.6441982\" y=\"12\" textLength=\"11.5319996\">es<\/tspan><\/text><path d=\"M 250 25 L 301.5 25 L 301.5 51.5\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><line x1=\"160\" y1=\"90\" x2=\"246.1\" y2=\"90\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(163 95)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".25\" y=\"12\" textLength=\"13.5\">no<\/tspan><\/text><rect x=\"170\" y=\"0\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"170\" y=\"0\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(175 10)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.248\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"20.966\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"32.684\" y=\"12\" textLength=\"22.068001\">e an<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"12.317\" y=\"27\" textLength=\"27.648\">umbr<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"39.719\" y=\"27\" textLength=\"17.964001\">ella<\/tspan><\/text><path d=\"M 120 50 L 160 90 L 120 130 L 80 90 Z\" fill=\"#ff5900\"\/><path d=\"M 120 50 L 160 90 L 120 130 L 80 90 Z\" stroke=\"#ff5900\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(95.8 71)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.685\" y=\"12\" textLength=\"3.3599999\">I<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"18.865\" y=\"12\" textLength=\"18.521999\">s it <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"4.501\" y=\"27\" textLength=\"4.368\">r<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.773\" y=\"27\" textLength=\"36.726002\">aining?<\/tspan><\/text><rect x=\"260\" y=\"65\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"260\" y=\"65\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(265 75)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"9.302\" y=\"12\" textLength=\"54.468\">Leave the <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"19.139\" y=\"27\" textLength=\"31.722\">house<\/tspan><\/text><circle cx=\"25\" cy=\"90\" r=\"25.00004\" fill=\"#7b188f\"\/><circle cx=\"25\" cy=\"90\" r=\"25.00004\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\"\/><text transform=\"translate(10 82.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"2.412\" y=\"12\" textLength=\"6.5100002\">S<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.652\" y=\"12\" textLength=\"18.936001\">tart<\/tspan><\/text><\/g><\/g><\/svg>\n\n<p>\n  The diamond requires a <code data-lang=\"in\">yes<\/code> or <code data-lang=\"in\">no<\/code> decision.  The answer determines which line we follow.  If the answer is <code data-lang=\"in\">yes<\/code>, we do the extra step of taking an umbrella. If the answer is <code data-lang=\"in\">no<\/code>, we skip it.\n<\/p>\n\n<p>\n  We can write this in Blockly using an <bk class=\"control\">if<\/bk> block.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  The computer decides what steps to run with an <bk class=\"control\">if<\/bk> block.\n<\/p>\n\n<p>\n  <em>If<\/em> the two strings <strong>are the same<\/strong> then the message is printed:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-strings-are-equal\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"decisions_if\" id=\"227\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"228\" inline=\"true\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"text\" id=\"233\">\n            <field name=\"TEXT\">dog<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"230\">\n            <field name=\"TEXT\">dog<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"231\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"232\">\n            <field name=\"TEXT\">They are the same.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <bk class=\"str lit\"><bk class=\"inner\">dog<\/bk><\/bk> is <em>equal to<\/em> (the same as) <bk class=\"str lit\"><bk class=\"inner\">dog<\/bk><\/bk>, so the <bk class=\"io\">print<\/bk> is run.\n<\/p>\n\n<p>\n  If the strings are <strong>not equal<\/strong>, then the message is not printed:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-not-the-same\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"decisions_if\" id=\"227\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"228\" inline=\"true\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"text\" id=\"233\">\n            <field name=\"TEXT\">dog<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"230\">\n            <field name=\"TEXT\">cat<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"231\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"232\">\n            <field name=\"TEXT\">They are the same.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"io\">print<\/bk> is not run because <bk class=\"str lit\"><bk class=\"inner\">dog<\/bk><\/bk> is not <em>equal to<\/em> <bk class=\"str lit\"><bk class=\"inner\">cat<\/bk><\/bk>.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Huh, these run the same way each time!?<\/h2>\n  <p>\n    Yes, but we don't normally compare two string blocks. These examples just show you how <bk class=\"control\">if<\/bk> blocks work.\n  <\/p>\n  <p>\n    <strong>We normally use <bk class=\"control\">if<\/bk> blocks with variables.<\/strong> The <bk class=\"control\">if<\/bk> runs the <bk class=\"control\">do<\/bk> part only if the value in the variable matches the string.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Are two strings the same?",
              "content_rendered":"<p>\n  The computer decides what steps to run with an <bk class=\"control\">if<\/bk> block.\n<\/p>\n\n<p>\n  <em>If<\/em> the two strings <strong>are the same<\/strong> then the message is printed:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-strings-are-equal\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"decisions_if\" id=\"227\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"228\" inline=\"true\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"text\" id=\"233\">\n            <field name=\"TEXT\">dog<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"230\">\n            <field name=\"TEXT\">dog<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"231\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"232\">\n            <field name=\"TEXT\">They are the same.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <bk class=\"str lit\"><bk class=\"inner\">dog<\/bk><\/bk> is <em>equal to<\/em> (the same as) <bk class=\"str lit\"><bk class=\"inner\">dog<\/bk><\/bk>, so the <bk class=\"io\">print<\/bk> is run.\n<\/p>\n\n<p>\n  If the strings are <strong>not equal<\/strong>, then the message is not printed:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-not-the-same\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"decisions_if\" id=\"227\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"228\" inline=\"true\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"text\" id=\"233\">\n            <field name=\"TEXT\">dog<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"230\">\n            <field name=\"TEXT\">cat<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"231\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"232\">\n            <field name=\"TEXT\">They are the same.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"io\">print<\/bk> is not run because <bk class=\"str lit\"><bk class=\"inner\">dog<\/bk><\/bk> is not <em>equal to<\/em> <bk class=\"str lit\"><bk class=\"inner\">cat<\/bk><\/bk>.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Huh, these run the same way each time!?<\/h2>\n  <p>\n    Yes, but we don't normally compare two string blocks. These examples just show you how <bk class=\"control\">if<\/bk> blocks work.\n  <\/p>\n  <p>\n    <strong>We normally use <bk class=\"control\">if<\/bk> blocks with variables.<\/strong> The <bk class=\"control\">if<\/bk> runs the <bk class=\"control\">do<\/bk> part only if the value in the variable matches the string.\n  <\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Now we can write a program for our <em>flowchart<\/em>!\n<\/p>\n\n<p>\n  We can check if the contents of <bk class=\"var\"><bk class=\"inner\">raining<\/bk><\/bk> is equal to <bk class=\"str lit\"><bk class=\"inner\">yes<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-raining-if\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">raining<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Is it raining (yes\/no)?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"6\">\n                <field name=\"VAR\">raining<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"7\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"8\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"9\">\n                <field name=\"TEXT\">Take an umbrella.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <next>\n          <block type=\"io_print1\" id=\"10\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"11\">\n                <field name=\"TEXT\">Leave the house.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>Try it! What happens when you say <code data-lang=\"in\">yes<\/code>, <code data-lang=\"in\">no<\/code>, or any other answer?<\/strong>\n<\/p>\n\n<p>\n  If the user enters <code data-lang=\"in\">yes<\/code>, the <bk class=\"var\"><bk class=\"inner\">raining<\/bk><\/bk> variable will be equal to <bk class=\"str lit\"><bk class=\"inner\">yes<\/bk><\/bk> and so <code data-lang=\"out\">Take an umbrella.<\/code> is printed. If the user enters <code data-lang=\"in\">no<\/code>, or anything else, it isn't printed.\n<\/p>\n\n<p>\n  The second <bk class=\"io\">print<\/bk> always runs, because it isn't inside the <bk class=\"control\">if<\/bk> block.\n<\/p>\n\n<aside class=\"info\">\n  <h2>An <code data-lang=\"py3\">if<\/code> block is a <em>control structure<\/em><\/h2>\n  <p>\n    The <bk class=\"control\">if<\/bk> block <em>controls<\/em> the program by deciding which blocks run.\n  <\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"What if it is raining?",
              "content_rendered":"<p>\n  Now we can write a program for our <em>flowchart<\/em>!\n<\/p>\n\n<p>\n  We can check if the contents of <bk class=\"var\"><bk class=\"inner\">raining<\/bk><\/bk> is equal to <bk class=\"str lit\"><bk class=\"inner\">yes<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-raining-if\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">raining<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Is it raining (yes\/no)?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"6\">\n                <field name=\"VAR\">raining<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"7\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"8\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"9\">\n                <field name=\"TEXT\">Take an umbrella.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <next>\n          <block type=\"io_print1\" id=\"10\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"11\">\n                <field name=\"TEXT\">Leave the house.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>Try it! What happens when you say <code data-lang=\"in\">yes<\/code>, <code data-lang=\"in\">no<\/code>, or any other answer?<\/strong>\n<\/p>\n\n<p>\n  If the user enters <code data-lang=\"in\">yes<\/code>, the <bk class=\"var\"><bk class=\"inner\">raining<\/bk><\/bk> variable will be equal to <bk class=\"str lit\"><bk class=\"inner\">yes<\/bk><\/bk> and so <code data-lang=\"out\">Take an umbrella.<\/code> is printed. If the user enters <code data-lang=\"in\">no<\/code>, or anything else, it isn't printed.\n<\/p>\n\n<p>\n  The second <bk class=\"io\">print<\/bk> always runs, because it isn't inside the <bk class=\"control\">if<\/bk> block.\n<\/p>\n\n<aside class=\"info\">\n  <h2>An <code data-lang=\"py3\">if<\/code> block is a <em>control structure<\/em><\/h2>\n  <p>\n    The <bk class=\"control\">if<\/bk> block <em>controls<\/em> the program by deciding which blocks run.\n  <\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  You can put as many blocks inside the <bk class=\"control\">if<\/bk> block as you want. The code <em>controlled<\/em> by the <bk class=\"control\">if<\/bk> (in the <bk class=\"control\">do<\/bk> part) is called its <em>body<\/em>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-what-food\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" x=\"10\" y=\"10\" id=\"13\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">food<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"16\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"17\">\n            <field name=\"TEXT\">What food do you like?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"21\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"33\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"26\">\n                <field name=\"VAR\">food<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"43\">\n                <field name=\"TEXT\">cake<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"58\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"68\">\n                <field name=\"TEXT\">Wow, I like cake too!<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"69\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"70\">\n                    <field name=\"TEXT\">I really really like cake...<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n\n<\/code><\/pre>\n\n<p>\n  Here, we ask the user what food they like.  If they answer <code data-lang=\"in\">cake<\/code>, the value in <bk class=\"var\"><bk class=\"inner\">food<\/bk><\/bk> will be equal to <bk class=\"str lit\"><bk class=\"inner\">cake<\/bk><\/bk>, and <em>both<\/em> <bk class=\"io\">print<\/bk> blocks in the body will run.\n<\/p>\n\n<p>\n  If they answer anything else, both the <bk class=\"io\">print<\/bk> blocks will be skipped.\n<\/p>\n\n<p>\n  Move a <bk class=\"io\">print<\/bk> outside of the <bk class=\"control\">if<\/bk> body to see the difference.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Controlling more blocks",
              "content_rendered":"<p>\n  You can put as many blocks inside the <bk class=\"control\">if<\/bk> block as you want. The code <em>controlled<\/em> by the <bk class=\"control\">if<\/bk> (in the <bk class=\"control\">do<\/bk> part) is called its <em>body<\/em>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-what-food\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" x=\"10\" y=\"10\" id=\"13\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">food<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"16\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"17\">\n            <field name=\"TEXT\">What food do you like?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"21\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"33\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"26\">\n                <field name=\"VAR\">food<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"43\">\n                <field name=\"TEXT\">cake<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"58\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"68\">\n                <field name=\"TEXT\">Wow, I like cake too!<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"69\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"70\">\n                    <field name=\"TEXT\">I really really like cake...<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n\n<\/code><\/pre>\n\n<p>\n  Here, we ask the user what food they like.  If they answer <code data-lang=\"in\">cake<\/code>, the value in <bk class=\"var\"><bk class=\"inner\">food<\/bk><\/bk> will be equal to <bk class=\"str lit\"><bk class=\"inner\">cake<\/bk><\/bk>, and <em>both<\/em> <bk class=\"io\">print<\/bk> blocks in the body will run.\n<\/p>\n\n<p>\n  If they answer anything else, both the <bk class=\"io\">print<\/bk> blocks will be skipped.\n<\/p>\n\n<p>\n  Move a <bk class=\"io\">print<\/bk> outside of the <bk class=\"control\">if<\/bk> body to see the difference.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"bk-py3-cheap-tuesdays",
              "type":1,
              "problem_id":2642
            }
          ],
          "title":"Making decisions"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  An <bk class=\"control\">if<\/bk> block allows your program to make <em>yes or no<\/em> decisions. In programming, yes is called <code data-lang=\"txt\">True<\/code>, and no is called <code data-lang=\"txt\">False<\/code>.<\/p>\n\n<p>\n  The body of the <bk class=\"control\">if<\/bk> block runs when the comparison (the <bk class=\"logic\">=<\/bk> block) is <code data-lang=\"txt\">True<\/code>. It doesn't run if the comparison is <code data-lang=\"txt\">False<\/code>.\n<\/p>\n\n<p>\n  Calculations that result in <code data-lang=\"txt\">True<\/code> or <code data-lang=\"txt\">False<\/code> values are called <em>Boolean expressions<\/em>.  We can print their value directly:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-grok-true\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Grok<\/field>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"3\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"4\" type=\"logic_compare\" inline=\"true\">\n          <field name=\"OP\">EQ<\/field>\n          <value name=\"A\">\n            <block id=\"5\" type=\"variables_get\">\n              <field name=\"VAR\">name<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"B\">\n            <block id=\"6\" type=\"text\">\n              <field name=\"TEXT\">Grok<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>If we change <code data-lang=\"py3\">name<\/code>, the conditional expression will be <code data-lang=\"py3\">False<\/code>:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-grok-false\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Bob<\/field>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"3\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"4\" type=\"logic_compare\" inline=\"true\">\n          <field name=\"OP\">EQ<\/field>\n          <value name=\"A\">\n            <block id=\"5\" type=\"variables_get\">\n              <field name=\"VAR\">name<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"B\">\n            <block id=\"6\" type=\"text\">\n              <field name=\"TEXT\">Grok<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"True or False?",
              "content_rendered":"<p>\n  An <bk class=\"control\">if<\/bk> block allows your program to make <em>yes or no<\/em> decisions. In programming, yes is called <code data-lang=\"txt\">True<\/code>, and no is called <code data-lang=\"txt\">False<\/code>.<\/p>\n\n<p>\n  The body of the <bk class=\"control\">if<\/bk> block runs when the comparison (the <bk class=\"logic\">=<\/bk> block) is <code data-lang=\"txt\">True<\/code>. It doesn't run if the comparison is <code data-lang=\"txt\">False<\/code>.\n<\/p>\n\n<p>\n  Calculations that result in <code data-lang=\"txt\">True<\/code> or <code data-lang=\"txt\">False<\/code> values are called <em>Boolean expressions<\/em>.  We can print their value directly:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-grok-true\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Grok<\/field>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"3\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"4\" type=\"logic_compare\" inline=\"true\">\n          <field name=\"OP\">EQ<\/field>\n          <value name=\"A\">\n            <block id=\"5\" type=\"variables_get\">\n              <field name=\"VAR\">name<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"B\">\n            <block id=\"6\" type=\"text\">\n              <field name=\"TEXT\">Grok<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>If we change <code data-lang=\"py3\">name<\/code>, the conditional expression will be <code data-lang=\"py3\">False<\/code>:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-grok-false\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Bob<\/field>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"3\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"4\" type=\"logic_compare\" inline=\"true\">\n          <field name=\"OP\">EQ<\/field>\n          <value name=\"A\">\n            <block id=\"5\" type=\"variables_get\">\n              <field name=\"VAR\">name<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"B\">\n            <block id=\"6\" type=\"text\">\n              <field name=\"TEXT\">Grok<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Our examples so far have done something when the Boolean expression is <code data-lang=\"txt\">True<\/code>, but nothing when the expression is <code data-lang=\"txt\">False<\/code>.\n<\/p>\n\n<p>\n  In the real world, we often want to do one thing for the <code data-lang=\"txt\">True<\/code> case, and something different for the <code data-lang=\"txt\">False<\/code> case.\n<\/p>\n\n<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xl=\"http:\/\/www.w3.org\/1999\/xlink\" version=\"1.1\" viewBox=\"-2 248 344 184\" width=\"344pt\" height=\"184pt\" style=\"position: relative; display: block; margin: 0 auto; width: 90%\"><defs><marker orient=\"auto\" overflow=\"visible\" markerUnits=\"strokeWidth\" id=\"FilledArrow_Marker\" viewBox=\"-1 -3 7 6\" markerWidth=\"7\" markerHeight=\"6\" color=\"black\"><g><path d=\"M 4.8000002 0 L 0 -1.8000001 L 0 1.8000001 Z\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\"\/><\/g><\/marker><font-face font-family=\"Lato\" font-size=\"12\" panose-1=\"2 15 5 2 2 2 4 3 2 3\" units-per-em=\"1000\" underline-position=\"-51.5\" underline-thickness=\"97\" slope=\"0\" x-height=\"514\" cap-height=\"724\" ascent=\"986.9995\" descent=\"-212.99744\" font-weight=\"500\"><font-face-src><font-face-name name=\"Lato-Regular\"\/><\/font-face-src><\/font-face><\/defs><g stroke=\"none\" stroke-opacity=\"1\" stroke-dasharray=\"none\" fill=\"none\" fill-opacity=\"1\"><g><path d=\"M 120 380 L 120 405 L 157.5 405\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><line x1=\"50.500013\" y1=\"340\" x2=\"66.1\" y2=\"340\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><path d=\"M 120 300 L 120 275 L 157.1 275\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(94.5 280.04491)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".62619825\" y=\"12\" textLength=\"6.186\">y<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\"6.6441982\" y=\"12\" textLength=\"11.5319996\">es<\/tspan><\/text><path d=\"M 250 275 L 300 275 L 300 300\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><rect x=\"170\" y=\"250\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"170\" y=\"250\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(175 260)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.248\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"20.966\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"32.684\" y=\"12\" textLength=\"22.068001\">e an<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"12.317\" y=\"27\" textLength=\"27.648\">umbr<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"39.719\" y=\"27\" textLength=\"17.964001\">ella<\/tspan><\/text><path d=\"M 120 300 L 160 340 L 120 380 L 80 340 Z\" fill=\"#ff5900\"\/><path d=\"M 120 300 L 160 340 L 120 380 L 80 340 Z\" stroke=\"#ff5900\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(95.8 321)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.685\" y=\"12\" textLength=\"3.3599999\">I<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"18.865\" y=\"12\" textLength=\"18.521999\">s it <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"4.501\" y=\"27\" textLength=\"4.368\">r<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.773\" y=\"27\" textLength=\"36.726002\">aining?<\/tspan><\/text><rect x=\"260\" y=\"315\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"260\" y=\"315\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(265 325)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"9.302\" y=\"12\" textLength=\"54.468\">Leave the <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"19.139\" y=\"27\" textLength=\"31.722\">house<\/tspan><\/text><circle cx=\"25\" cy=\"340\" r=\"25.00004\" fill=\"#7b188f\"\/><circle cx=\"25\" cy=\"340\" r=\"25.00004\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\"\/><text transform=\"translate(10 332.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"2.412\" y=\"12\" textLength=\"6.5100002\">S<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.652\" y=\"12\" textLength=\"18.936001\">tart<\/tspan><\/text><rect x=\"170\" y=\"380\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"170\" y=\"380\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(175 397.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.618\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"14.336\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"26.054\" y=\"12\" textLength=\"31.104\">e a ha<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"57.08\" y=\"12\" textLength=\"4.302\">t<\/tspan><\/text><text transform=\"translate(96.9012 382.9551)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".25\" y=\"12\" textLength=\"13.5\">no<\/tspan><\/text><path d=\"M 250 405 L 300 404.91018 L 300 378.9\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><\/g><\/g><\/svg>\n\n\n<p>\n  If the user says <code data-lang=\"in\">yes<\/code>, it is raining, then the program should respond <code data-lang=\"out\">Take an umbrella.<\/code> but otherwise it should respond <code data-lang=\"out\">Take a hat.<\/code>\n<\/p>\n\n<p>\n  What we want is an extra part to the <bk class=\"control\">if<\/bk> block which only run when the Boolean expression is <code data-lang=\"txt\">False<\/code>.<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Decisions with two options",
              "content_rendered":"<p>\n  Our examples so far have done something when the Boolean expression is <code data-lang=\"txt\">True<\/code>, but nothing when the expression is <code data-lang=\"txt\">False<\/code>.\n<\/p>\n\n<p>\n  In the real world, we often want to do one thing for the <code data-lang=\"txt\">True<\/code> case, and something different for the <code data-lang=\"txt\">False<\/code> case.\n<\/p>\n\n<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xl=\"http:\/\/www.w3.org\/1999\/xlink\" version=\"1.1\" viewBox=\"-2 248 344 184\" width=\"344pt\" height=\"184pt\" style=\"position: relative; display: block; margin: 0 auto; width: 90%\"><defs><marker orient=\"auto\" overflow=\"visible\" markerUnits=\"strokeWidth\" id=\"FilledArrow_Marker\" viewBox=\"-1 -3 7 6\" markerWidth=\"7\" markerHeight=\"6\" color=\"black\"><g><path d=\"M 4.8000002 0 L 0 -1.8000001 L 0 1.8000001 Z\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\"\/><\/g><\/marker><font-face font-family=\"Lato\" font-size=\"12\" panose-1=\"2 15 5 2 2 2 4 3 2 3\" units-per-em=\"1000\" underline-position=\"-51.5\" underline-thickness=\"97\" slope=\"0\" x-height=\"514\" cap-height=\"724\" ascent=\"986.9995\" descent=\"-212.99744\" font-weight=\"500\"><font-face-src><font-face-name name=\"Lato-Regular\"\/><\/font-face-src><\/font-face><\/defs><g stroke=\"none\" stroke-opacity=\"1\" stroke-dasharray=\"none\" fill=\"none\" fill-opacity=\"1\"><g><path d=\"M 120 380 L 120 405 L 157.5 405\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><line x1=\"50.500013\" y1=\"340\" x2=\"66.1\" y2=\"340\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><path d=\"M 120 300 L 120 275 L 157.1 275\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(94.5 280.04491)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".62619825\" y=\"12\" textLength=\"6.186\">y<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\"6.6441982\" y=\"12\" textLength=\"11.5319996\">es<\/tspan><\/text><path d=\"M 250 275 L 300 275 L 300 300\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><rect x=\"170\" y=\"250\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"170\" y=\"250\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(175 260)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.248\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"20.966\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"32.684\" y=\"12\" textLength=\"22.068001\">e an<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"12.317\" y=\"27\" textLength=\"27.648\">umbr<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"39.719\" y=\"27\" textLength=\"17.964001\">ella<\/tspan><\/text><path d=\"M 120 300 L 160 340 L 120 380 L 80 340 Z\" fill=\"#ff5900\"\/><path d=\"M 120 300 L 160 340 L 120 380 L 80 340 Z\" stroke=\"#ff5900\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(95.8 321)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"15.685\" y=\"12\" textLength=\"3.3599999\">I<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"18.865\" y=\"12\" textLength=\"18.521999\">s it <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"4.501\" y=\"27\" textLength=\"4.368\">r<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.773\" y=\"27\" textLength=\"36.726002\">aining?<\/tspan><\/text><rect x=\"260\" y=\"315\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"260\" y=\"315\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(265 325)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"9.302\" y=\"12\" textLength=\"54.468\">Leave the <\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"19.139\" y=\"27\" textLength=\"31.722\">house<\/tspan><\/text><circle cx=\"25\" cy=\"340\" r=\"25.00004\" fill=\"#7b188f\"\/><circle cx=\"25\" cy=\"340\" r=\"25.00004\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\"\/><text transform=\"translate(10 332.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"2.412\" y=\"12\" textLength=\"6.5100002\">S<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.652\" y=\"12\" textLength=\"18.936001\">tart<\/tspan><\/text><rect x=\"170\" y=\"380\" width=\"80\" height=\"50\" fill=\"#7b188f\"\/><rect x=\"170\" y=\"380\" width=\"80\" height=\"50\" stroke=\"#7b188f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><text transform=\"translate(175 397.5)\" fill=\"white\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"8.618\" y=\"12\" textLength=\"7.086\">T<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"14.336\" y=\"12\" textLength=\"12.0600004\">ak<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"26.054\" y=\"12\" textLength=\"31.104\">e a ha<\/tspan><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" fill=\"white\" x=\"57.08\" y=\"12\" textLength=\"4.302\">t<\/tspan><\/text><text transform=\"translate(96.9012 382.9551)\" fill=\"black\"><tspan font-family=\"Lato\" font-size=\"12\" font-weight=\"500\" x=\".25\" y=\"12\" textLength=\"13.5\">no<\/tspan><\/text><path d=\"M 250 405 L 300 404.91018 L 300 378.9\" marker-end=\"url(#FilledArrow_Marker)\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\/><\/g><\/g><\/svg>\n\n\n<p>\n  If the user says <code data-lang=\"in\">yes<\/code>, it is raining, then the program should respond <code data-lang=\"out\">Take an umbrella.<\/code> but otherwise it should respond <code data-lang=\"out\">Take a hat.<\/code>\n<\/p>\n\n<p>\n  What we want is an extra part to the <bk class=\"control\">if<\/bk> block which only run when the Boolean expression is <code data-lang=\"txt\">False<\/code>.<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Let's implement the two options in the new flowchart using a <bk class=\"control\">if<\/bk> block with an <bk class=\"control\">else<\/bk> part:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-grok-if\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">raining<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Is it raining (yes\/no)? <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"6\">\n                <field name=\"VAR\">raining<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"7\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"8\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"9\">\n                <field name=\"TEXT\">Take an umbrella.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"10\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"11\">\n                <field name=\"TEXT\">Take a hat.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <next>\n          <block type=\"io_print1\" id=\"12\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"13\">\n                <field name=\"TEXT\">Leave the house.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>Here, either the first or second <bk class=\"io\">print<\/bk> block will be run, depending on the answer, <strong>but not both.<\/strong><\/p>\n\n<p>\n  The third <bk class=\"io\">print<\/bk> always runs, since it is outside of the <bk class=\"control\">if<\/bk> body, and so is not controlled by the <bk class=\"control\">if<\/bk> block.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"If it isn't raining...",
              "content_rendered":"<p>\n  Let's implement the two options in the new flowchart using a <bk class=\"control\">if<\/bk> block with an <bk class=\"control\">else<\/bk> part:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-grok-if\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">raining<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Is it raining (yes\/no)? <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"6\">\n                <field name=\"VAR\">raining<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"7\">\n                <field name=\"TEXT\">yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"8\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"9\">\n                <field name=\"TEXT\">Take an umbrella.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"10\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"11\">\n                <field name=\"TEXT\">Take a hat.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <next>\n          <block type=\"io_print1\" id=\"12\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"13\">\n                <field name=\"TEXT\">Leave the house.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>Here, either the first or second <bk class=\"io\">print<\/bk> block will be run, depending on the answer, <strong>but not both.<\/strong><\/p>\n\n<p>\n  The third <bk class=\"io\">print<\/bk> always runs, since it is outside of the <bk class=\"control\">if<\/bk> body, and so is not controlled by the <bk class=\"control\">if<\/bk> block.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  The <bk class=\"control\">if<\/bk>\/<bk class=\"control\">else<\/bk> block is great for making decisions with only two options (friend or foe, wet or dry, day or night). When there are more than two possibilities, it can get confusing.<\/p>\n\n<p>This program tries to decide if you are an <code data-lang=\"out\">Earthling<\/code> or <code data-lang=\"out\">Martian<\/code>:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-martian\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"13\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">planet<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"85\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"86\">\n            <field name=\"TEXT\">What planet are you from? <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"106\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"33\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"26\">\n                <field name=\"VAR\">planet<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"78\">\n                <field name=\"TEXT\">Earth<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"58\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"68\">\n                <field name=\"TEXT\">Hello Earthling.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"87\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"88\">\n                <field name=\"TEXT\">Hello Martian.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  If the user enters <code data-lang=\"in\">Earth<\/code> or <code data-lang=\"in\">Mars<\/code> the response is correct.  However, if the user enters <code data-lang=\"in\">Jupiter<\/code> the response is wrong (try it)!\n<\/p>\n\n<aside class=\"info\">\n  <h2><bk class=\"control\">else<\/bk> catches <em>everything<\/em> else!<\/h2>\n  <p>\n    Remember: the <bk class=\"control\">else<\/bk> runs whenever the Boolean expression is <code data-lang=\"txt\">False<\/code>.  Here, we were expecting <code data-lang=\"in\">Earth<\/code> or <code data-lang=\"in\">Mars<\/code>, but anything that is not <code data-lang=\"in\">Earth<\/code> will also return <code data-lang=\"txt\">False<\/code>.\n<\/aside>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"When options are limited",
              "content_rendered":"<p>\n  The <bk class=\"control\">if<\/bk>\/<bk class=\"control\">else<\/bk> block is great for making decisions with only two options (friend or foe, wet or dry, day or night). When there are more than two possibilities, it can get confusing.<\/p>\n\n<p>This program tries to decide if you are an <code data-lang=\"out\">Earthling<\/code> or <code data-lang=\"out\">Martian<\/code>:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-martian\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"13\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">planet<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"85\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"86\">\n            <field name=\"TEXT\">What planet are you from? <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"106\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"33\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"26\">\n                <field name=\"VAR\">planet<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"78\">\n                <field name=\"TEXT\">Earth<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"58\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"68\">\n                <field name=\"TEXT\">Hello Earthling.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"87\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"88\">\n                <field name=\"TEXT\">Hello Martian.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  If the user enters <code data-lang=\"in\">Earth<\/code> or <code data-lang=\"in\">Mars<\/code> the response is correct.  However, if the user enters <code data-lang=\"in\">Jupiter<\/code> the response is wrong (try it)!\n<\/p>\n\n<aside class=\"info\">\n  <h2><bk class=\"control\">else<\/bk> catches <em>everything<\/em> else!<\/h2>\n  <p>\n    Remember: the <bk class=\"control\">else<\/bk> runs whenever the Boolean expression is <code data-lang=\"txt\">False<\/code>.  Here, we were expecting <code data-lang=\"in\">Earth<\/code> or <code data-lang=\"in\">Mars<\/code>, but anything that is not <code data-lang=\"in\">Earth<\/code> will also return <code data-lang=\"txt\">False<\/code>.\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"bk-py3-preferred-pokemon-favourite",
              "type":1,
              "problem_id":2643
            }
          ],
          "title":"Decisions with two options"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>So far we have only checked whether two strings are equal. However, there are other <em>comparison operators<\/em>, including:<\/p>\n\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr><th>Operation<\/th><th>Operator<\/th><\/tr>\n  <\/thead>\n  <tbody>\n    <tr><td>equal to<\/td><td>=<\/td><\/tr>\n    <tr><td>not equal to<\/td><td>\u2260<\/td><\/tr>\n    <tr><td>less than<\/td><td>&lt;<\/td><\/tr>\n    <tr><td>less than or equal to<\/td><td>\u2264<\/td><\/tr>\n    <tr><td>greater than<\/td><td>><\/td><\/tr>\n    <tr><td>greater than or equal to<\/td><td>\u2265<\/td><\/tr>\n  <\/tbody>\n<\/table>\n\n<p>We can use these to test whether a number is bigger or smaller than other number:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-less-than\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"13\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"134\">\n        <field name=\"NUM\">3<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"143\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">LT<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"137\">\n                <field name=\"NUM\">10<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>This prints <code data-lang=\"out\">True<\/code> because 3 is less than 10.<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-greater-than\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"134\">\n        <field name=\"NUM\">3<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"143\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">GT<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"137\">\n                <field name=\"NUM\">10<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n\n<p>This prints <code data-lang=\"out\">False<\/code> because 3 is not greater than 10.<\/p>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"How do we compare things?",
              "content_rendered":"<p>So far we have only checked whether two strings are equal. However, there are other <em>comparison operators<\/em>, including:<\/p>\n\n<table class=\"table table-hover table-bordered\">\n  <thead>\n    <tr><th>Operation<\/th><th>Operator<\/th><\/tr>\n  <\/thead>\n  <tbody>\n    <tr><td>equal to<\/td><td>=<\/td><\/tr>\n    <tr><td>not equal to<\/td><td>\u2260<\/td><\/tr>\n    <tr><td>less than<\/td><td>&lt;<\/td><\/tr>\n    <tr><td>less than or equal to<\/td><td>\u2264<\/td><\/tr>\n    <tr><td>greater than<\/td><td>><\/td><\/tr>\n    <tr><td>greater than or equal to<\/td><td>\u2265<\/td><\/tr>\n  <\/tbody>\n<\/table>\n\n<p>We can use these to test whether a number is bigger or smaller than other number:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-less-than\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"13\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"134\">\n        <field name=\"NUM\">3<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"143\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">LT<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"137\">\n                <field name=\"NUM\">10<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>This prints <code data-lang=\"out\">True<\/code> because 3 is less than 10.<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-greater-than\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"134\">\n        <field name=\"NUM\">3<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"143\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">GT<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"137\">\n                <field name=\"NUM\">10<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n\n<p>This prints <code data-lang=\"out\">False<\/code> because 3 is not greater than 10.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Let's try some more examples to see how conditional operators work. Firstly, we have less than or equal to (\u2264):<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-op-lte\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"134\">\n        <field name=\"NUM\">5<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"143\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">LTE<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"137\">\n                <field name=\"NUM\">10<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>Setting <code data-lang=\"py3\">num<\/code> up to <em>and including<\/em> 10 will give <code data-lang=\"txt\">True<\/code>. Setting <code data-lang=\"py3\">num<\/code> greater than 10 will give <code data-lang=\"txt\">False<\/code>. Greater than or equal to (\u2265) works in reverse.\nChange the example and see for yourself!\n<\/p>\n\n<p>Another important operator is not equal to (\u2260):<\/p>\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-op-gte\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"134\">\n        <field name=\"NUM\">5<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"143\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">NEQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"137\">\n                <field name=\"NUM\">10<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>Notice this program prints <code data-lang=\"out\">True<\/code> because 5 is not equal to 10. This can be a bit confusing &mdash; see what happens if you change the value of <code data-lang=\"py3\">num<\/code> to 10.<\/p>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Experimenting with comparison",
              "content_rendered":"<p>Let's try some more examples to see how conditional operators work. Firstly, we have less than or equal to (\u2264):<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-op-lte\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"134\">\n        <field name=\"NUM\">5<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"143\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">LTE<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"137\">\n                <field name=\"NUM\">10<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>Setting <code data-lang=\"py3\">num<\/code> up to <em>and including<\/em> 10 will give <code data-lang=\"txt\">True<\/code>. Setting <code data-lang=\"py3\">num<\/code> greater than 10 will give <code data-lang=\"txt\">False<\/code>. Greater than or equal to (\u2265) works in reverse.\nChange the example and see for yourself!\n<\/p>\n\n<p>Another important operator is not equal to (\u2260):<\/p>\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-op-gte\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"134\">\n        <field name=\"NUM\">5<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"143\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">NEQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"137\">\n                <field name=\"NUM\">10<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>Notice this program prints <code data-lang=\"out\">True<\/code> because 5 is not equal to 10. This can be a bit confusing &mdash; see what happens if you change the value of <code data-lang=\"py3\">num<\/code> to 10.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Now we can write programs that make decisions based on numbers.\n  The example below makes a decision based on the water temperature:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-eg-boiling-water\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">water temp<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"math_number\">\n        <field name=\"NUM\">120<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block id=\"3\" type=\"decisions_if_else\" inline=\"true\">\n        <value name=\"IF0\">\n          <block id=\"4\" type=\"logic_compare\" inline=\"true\">\n            <field name=\"OP\">GTE<\/field>\n            <value name=\"A\">\n              <block id=\"5\" type=\"variables_get\">\n                <field name=\"VAR\">water temp<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block id=\"6\" type=\"math_number\">\n                <field name=\"NUM\">100<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block id=\"7\" type=\"io_print1\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block id=\"8\" type=\"text\">\n                <field name=\"TEXT\">The water is boiling, put in the pasta.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block id=\"9\" type=\"io_print1\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block id=\"10\" type=\"text\">\n                <field name=\"TEXT\">The water is not boiling yet.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Change the value in <bk class=\"var\"><bk class=\"inner\">water temp<\/bk><\/bk> to see what happens.\n<\/p>\n\n<p>\n  We can do something similar with numbers entered by the user:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-eg-age-to-vote\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">age<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"io_ask_num\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block id=\"3\" type=\"text\">\n            <field name=\"TEXT\">How old are you?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block id=\"4\" type=\"decisions_if_else\" inline=\"true\">\n        <value name=\"IF0\">\n          <block id=\"5\" type=\"logic_compare\" inline=\"true\">\n            <field name=\"OP\">LT<\/field>\n            <value name=\"A\">\n              <block id=\"6\" type=\"variables_get\">\n                <field name=\"VAR\">age<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block id=\"7\" type=\"math_number\">\n                <field name=\"NUM\">18<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block id=\"8\" type=\"io_print1\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block id=\"9\" type=\"text\">\n                <field name=\"TEXT\">Not old enough to vote.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block id=\"10\" type=\"io_print1\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block id=\"11\" type=\"text\">\n                <field name=\"TEXT\">You can vote in the next election.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Making decisions with numbers",
              "content_rendered":"<p>\n  Now we can write programs that make decisions based on numbers.\n  The example below makes a decision based on the water temperature:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-eg-boiling-water\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">water temp<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"math_number\">\n        <field name=\"NUM\">120<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block id=\"3\" type=\"decisions_if_else\" inline=\"true\">\n        <value name=\"IF0\">\n          <block id=\"4\" type=\"logic_compare\" inline=\"true\">\n            <field name=\"OP\">GTE<\/field>\n            <value name=\"A\">\n              <block id=\"5\" type=\"variables_get\">\n                <field name=\"VAR\">water temp<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block id=\"6\" type=\"math_number\">\n                <field name=\"NUM\">100<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block id=\"7\" type=\"io_print1\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block id=\"8\" type=\"text\">\n                <field name=\"TEXT\">The water is boiling, put in the pasta.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block id=\"9\" type=\"io_print1\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block id=\"10\" type=\"text\">\n                <field name=\"TEXT\">The water is not boiling yet.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Change the value in <bk class=\"var\"><bk class=\"inner\">water temp<\/bk><\/bk> to see what happens.\n<\/p>\n\n<p>\n  We can do something similar with numbers entered by the user:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-eg-age-to-vote\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">age<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"io_ask_num\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block id=\"3\" type=\"text\">\n            <field name=\"TEXT\">How old are you?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block id=\"4\" type=\"decisions_if_else\" inline=\"true\">\n        <value name=\"IF0\">\n          <block id=\"5\" type=\"logic_compare\" inline=\"true\">\n            <field name=\"OP\">LT<\/field>\n            <value name=\"A\">\n              <block id=\"6\" type=\"variables_get\">\n                <field name=\"VAR\">age<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block id=\"7\" type=\"math_number\">\n                <field name=\"NUM\">18<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block id=\"8\" type=\"io_print1\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block id=\"9\" type=\"text\">\n                <field name=\"TEXT\">Not old enough to vote.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block id=\"10\" type=\"io_print1\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block id=\"11\" type=\"text\">\n                <field name=\"TEXT\">You can vote in the next election.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"bk-py3-soil-sensor",
              "type":1,
              "problem_id":2644
            }
          ],
          "title":"Decisions about numbers"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  The <em>body<\/em> of an <bk class=\"control\">if<\/bk> block can contain another <bk class=\"control\">if<\/bk> block. This is called <em>nesting<\/em> or <em>nested if blocks<\/em>.\n<\/p>\n\n<p>\n  In the program below, we have one <bk class=\"control\">if<\/bk> block inside another one. That means the second comparison will only be tested if the first comparison is <code data-lang=\"txt\">True<\/code>.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-nested-if-statement\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"10\" y=\"10\" movable=\"false\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"196\">\n        <field name=\"NUM\">2<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"200\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">LTE<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"137\">\n                <field name=\"NUM\">3<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"143\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"183\">\n                <field name=\"TEXT\">num is less than or equal to three<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"decisions_if\" id=\"204\" inline=\"true\">\n                <value name=\"IF0\">\n                  <block type=\"logic_compare\" id=\"205\" inline=\"true\">\n                    <field name=\"OP\">GTE<\/field>\n                    <value name=\"A\">\n                      <block type=\"variables_get\" id=\"206\">\n                        <field name=\"VAR\">num<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"B\">\n                      <block type=\"math_number\" id=\"207\">\n                        <field name=\"NUM\">3<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <statement name=\"DO0\">\n                  <block type=\"io_print1\" id=\"208\" inline=\"true\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"209\">\n                        <field name=\"TEXT\">num is greater than or equal to three<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/statement>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  There is only one value for <bk class=\"var\"><bk class=\"inner\">num<\/bk><\/bk> that will cause both messages to be printed. Can you work out what it is\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Decisions within decisions",
              "content_rendered":"<p>\n  The <em>body<\/em> of an <bk class=\"control\">if<\/bk> block can contain another <bk class=\"control\">if<\/bk> block. This is called <em>nesting<\/em> or <em>nested if blocks<\/em>.\n<\/p>\n\n<p>\n  In the program below, we have one <bk class=\"control\">if<\/bk> block inside another one. That means the second comparison will only be tested if the first comparison is <code data-lang=\"txt\">True<\/code>.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-nested-if-statement\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"10\" y=\"10\" movable=\"false\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"196\">\n        <field name=\"NUM\">2<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"200\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">LTE<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"137\">\n                <field name=\"NUM\">3<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"143\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"183\">\n                <field name=\"TEXT\">num is less than or equal to three<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"decisions_if\" id=\"204\" inline=\"true\">\n                <value name=\"IF0\">\n                  <block type=\"logic_compare\" id=\"205\" inline=\"true\">\n                    <field name=\"OP\">GTE<\/field>\n                    <value name=\"A\">\n                      <block type=\"variables_get\" id=\"206\">\n                        <field name=\"VAR\">num<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"B\">\n                      <block type=\"math_number\" id=\"207\">\n                        <field name=\"NUM\">3<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <statement name=\"DO0\">\n                  <block type=\"io_print1\" id=\"208\" inline=\"true\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"209\">\n                        <field name=\"TEXT\">num is greater than or equal to three<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/statement>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  There is only one value for <bk class=\"var\"><bk class=\"inner\">num<\/bk><\/bk> that will cause both messages to be printed. Can you work out what it is\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Continuing our previous example, if we want to print each case (<em>less than<\/em>, <em>equal to<\/em>, or <em>greater than<\/em>) separately, we need to change both <bk class=\"control\">if<\/bk> blocks to use an <bk class=\"control\">else<\/bk> part, like this:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-else-statement-nesting\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"196\">\n        <field name=\"NUM\">5<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"217\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">LT<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"137\">\n                <field name=\"NUM\">3<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"143\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"183\">\n                <field name=\"TEXT\">num is less than three<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"decisions_if_else\" id=\"221\" inline=\"true\">\n            <value name=\"IF0\">\n              <block type=\"logic_compare\" id=\"205\" inline=\"true\">\n                <field name=\"OP\">EQ<\/field>\n                <value name=\"A\">\n                  <block type=\"variables_get\" id=\"206\">\n                    <field name=\"VAR\">num<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"math_number\" id=\"207\">\n                    <field name=\"NUM\">3<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <statement name=\"DO0\">\n              <block type=\"io_print1\" id=\"222\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"223\">\n                    <field name=\"TEXT\">num is equal to three<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <statement name=\"ELSE\">\n              <block type=\"io_print1\" id=\"208\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"209\">\n                    <field name=\"TEXT\">num is greater than three<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>Nesting gets messy when we've got lots of different cases to test.<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Decisions with multiple options",
              "content_rendered":"<p>\n  Continuing our previous example, if we want to print each case (<em>less than<\/em>, <em>equal to<\/em>, or <em>greater than<\/em>) separately, we need to change both <bk class=\"control\">if<\/bk> blocks to use an <bk class=\"control\">else<\/bk> part, like this:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-else-statement-nesting\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"196\">\n        <field name=\"NUM\">5<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"217\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">LT<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"137\">\n                <field name=\"NUM\">3<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"143\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"183\">\n                <field name=\"TEXT\">num is less than three<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"decisions_if_else\" id=\"221\" inline=\"true\">\n            <value name=\"IF0\">\n              <block type=\"logic_compare\" id=\"205\" inline=\"true\">\n                <field name=\"OP\">EQ<\/field>\n                <value name=\"A\">\n                  <block type=\"variables_get\" id=\"206\">\n                    <field name=\"VAR\">num<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"math_number\" id=\"207\">\n                    <field name=\"NUM\">3<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <statement name=\"DO0\">\n              <block type=\"io_print1\" id=\"222\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"223\">\n                    <field name=\"TEXT\">num is equal to three<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <statement name=\"ELSE\">\n              <block type=\"io_print1\" id=\"208\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"209\">\n                    <field name=\"TEXT\">num is greater than three<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>Nesting gets messy when we've got lots of different cases to test.<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Another, neater, way of making multiple decisions is to use an <bk class=\"control\">elif<\/bk> block. <bk class=\"control\">elif<\/bk> is a combination of the words <bk class=\"control\">else<\/bk> and <bk class=\"control\">if<\/bk> together.\n<\/p>\n\n<p>\n  Each Boolean expression is evaluated in order, from top to bottom.  It stops at the first expression to return <code data-lang=\"txt\">True<\/code> and runs its <bk class=\"control\">do<\/bk> part.  If none of the expressions return <code data-lang=\"txt\">True<\/code>, then the <bk class=\"control\">else<\/bk> part is run:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-elif\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"196\">\n        <field name=\"NUM\">5<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_elif_else\" id=\"227\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">LT<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"137\">\n                <field name=\"NUM\">3<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"143\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"183\">\n                <field name=\"TEXT\">num is less than three<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_compare\" id=\"205\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"206\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"207\">\n                <field name=\"NUM\">3<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"222\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"223\">\n                <field name=\"TEXT\">num is equal to three<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"208\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"209\">\n                <field name=\"TEXT\">num is greater than three<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Decisions with elif",
              "content_rendered":"<p>\n  Another, neater, way of making multiple decisions is to use an <bk class=\"control\">elif<\/bk> block. <bk class=\"control\">elif<\/bk> is a combination of the words <bk class=\"control\">else<\/bk> and <bk class=\"control\">if<\/bk> together.\n<\/p>\n\n<p>\n  Each Boolean expression is evaluated in order, from top to bottom.  It stops at the first expression to return <code data-lang=\"txt\">True<\/code> and runs its <bk class=\"control\">do<\/bk> part.  If none of the expressions return <code data-lang=\"txt\">True<\/code>, then the <bk class=\"control\">else<\/bk> part is run:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-elif\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"151\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"196\">\n        <field name=\"NUM\">5<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_elif_else\" id=\"227\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">LT<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"137\">\n                <field name=\"NUM\">3<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"143\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"183\">\n                <field name=\"TEXT\">num is less than three<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_compare\" id=\"205\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"206\">\n                <field name=\"VAR\">num<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"207\">\n                <field name=\"NUM\">3<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"222\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"223\">\n                <field name=\"TEXT\">num is equal to three<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"208\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"209\">\n                <field name=\"TEXT\">num is greater than three<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Remember our program that tried to greet interplanetary visitors correctly?  We can now extend this so that it makes sense regardless of what planet the user is from.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-elif-planet\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"240\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">planet<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"230\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"231\">\n            <field name=\"TEXT\">What planet are you from?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_elif_else\" id=\"227\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">planet<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"241\">\n                <field name=\"TEXT\">Earth<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"143\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"183\">\n                <field name=\"TEXT\">Hello Earthling.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_compare\" id=\"205\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"206\">\n                <field name=\"VAR\">planet<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"242\">\n                <field name=\"TEXT\">Mars<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"222\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"223\">\n                <field name=\"TEXT\">Hello Martian.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"208\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"209\">\n                <field name=\"TEXT\">I don't know what to call you!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Interplanetary visitor",
              "content_rendered":"<p>\n  Remember our program that tried to greet interplanetary visitors correctly?  We can now extend this so that it makes sense regardless of what planet the user is from.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-elif-planet\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"240\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">planet<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"230\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"231\">\n            <field name=\"TEXT\">What planet are you from?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_elif_else\" id=\"227\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"122\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"159\">\n                <field name=\"VAR\">planet<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"241\">\n                <field name=\"TEXT\">Earth<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"143\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"183\">\n                <field name=\"TEXT\">Hello Earthling.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_compare\" id=\"205\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"206\">\n                <field name=\"VAR\">planet<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"242\">\n                <field name=\"TEXT\">Mars<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"222\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"223\">\n                <field name=\"TEXT\">Hello Martian.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"208\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"209\">\n                <field name=\"TEXT\">I don't know what to call you!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"bk-py3-portuguese-phrases",
              "type":1,
              "problem_id":2645
            }
          ],
          "title":"Making complex decisions"
        }
      ],
      "title":"Making decisions",
      "label":"aca-blockly-yr56-decisions",
      "updated_at":"2018-05-14T06:56:38.120160+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  So far, we've learnt how to tell the computer to do specific things like ask for input or make decisions.\n  Now, we'll learn how to make a computer do a specific thing lots of times using the <bk class=\"control\">repeat<\/bk> block.\n<\/p>\n\n<p>\n  In this case, we want to print <code data-lang=\"txt\">Hello<\/code> three times:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-repeat\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"HQ+WV5zZ)t[R#pQ|l8mG\">num<\/variable>\n  <\/variables>\n  <block type=\"loops_repeat_ext\" id=\"@OswvIYQu1j9PLiG;}g6\" x=\"-2\" y=\"4\">\n    <value name=\"TIMES\">\n      <block type=\"math_number\" id=\"(;pTPvJa+ec09|a[hg;H\">\n        <field name=\"NUM\">3<\/field>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print1\" id=\"[%01ndP::P,$#q6qb9lo\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"829;(bb]~e$ZU9dvP-Lx\">\n            <field name=\"TEXT\">Hello<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n\n<p>\n  We can also read in a number and use it in the <bk class=\"control\">repeat<\/bk> block. Here, you can choose how many times to print out <bk class=\"str lit\"><bk class=\"inner\">Hello<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-repeat2\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"28\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"13\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"14\">\n            <field name=\"TEXT\">How many times?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_repeat_ext\" id=\"4\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"variables_get\" id=\"5\">\n            <field name=\"VAR\">num<\/field>\n          <\/block>\n        <\/value>\n        <statement name=\"DO\">\n          <block type=\"io_print1\" id=\"16\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"30\">\n                <field name=\"TEXT\">Hello<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"How (not) to repeat yourself",
              "content_rendered":"<p>\n  So far, we've learnt how to tell the computer to do specific things like ask for input or make decisions.\n  Now, we'll learn how to make a computer do a specific thing lots of times using the <bk class=\"control\">repeat<\/bk> block.\n<\/p>\n\n<p>\n  In this case, we want to print <code data-lang=\"txt\">Hello<\/code> three times:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-repeat\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"HQ+WV5zZ)t[R#pQ|l8mG\">num<\/variable>\n  <\/variables>\n  <block type=\"loops_repeat_ext\" id=\"@OswvIYQu1j9PLiG;}g6\" x=\"-2\" y=\"4\">\n    <value name=\"TIMES\">\n      <block type=\"math_number\" id=\"(;pTPvJa+ec09|a[hg;H\">\n        <field name=\"NUM\">3<\/field>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print1\" id=\"[%01ndP::P,$#q6qb9lo\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"829;(bb]~e$ZU9dvP-Lx\">\n            <field name=\"TEXT\">Hello<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n\n<p>\n  We can also read in a number and use it in the <bk class=\"control\">repeat<\/bk> block. Here, you can choose how many times to print out <bk class=\"str lit\"><bk class=\"inner\">Hello<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-repeat2\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"28\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">num<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"13\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"14\">\n            <field name=\"TEXT\">How many times?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_repeat_ext\" id=\"4\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"variables_get\" id=\"5\">\n            <field name=\"VAR\">num<\/field>\n          <\/block>\n        <\/value>\n        <statement name=\"DO\">\n          <block type=\"io_print1\" id=\"16\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"30\">\n                <field name=\"TEXT\">Hello<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  We might want to ask the user a question repeatedly.\nIf we know how many times we want to ask the question, we could try something like this:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-loop-input-months\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"xuH\/rS]34Ud6VVLY*!G^\">planet<\/variable>\n    <variable type=\"\" id=\"Q@41C@=5T,Xd`XecR_rF\">size<\/variable>\n  <\/variables>\n  <block type=\"io_print1\" id=\"p*TErxOM3An?*jY}8(nE\" x=\"9\" y=\"3\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"~5rrmwJ_PKxvJNerY0x?\">\n        <field name=\"TEXT\">How many planets can you name?<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_repeat_ext\" id=\"4\">\n        <value name=\"TIMES\">\n          <block type=\"math_number\" id=\"rX^,7dCq].?N;~!y}g*Y\">\n            <field name=\"NUM\">8<\/field>\n          <\/block>\n        <\/value>\n        <statement name=\"DO\">\n          <block type=\"variables_set\" id=\"6\">\n            <field name=\"VAR\" id=\"xuH\/rS]34Ud6VVLY*!G^\" variabletype=\"\">planet<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\"7\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\"8\">\n                    <field name=\"TEXT\">Planet:<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print2\" id=\"ySufp^Df2GoSid-g_pcg\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"Xc:Y.N@9S(6FW4?O|7{l\">\n                    <field name=\"TEXT\">You said:<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"variables_get\" id=\"+pxhn1Rx3sJ`}o=VUwKO\">\n                    <field name=\"VAR\" id=\"xuH\/rS]34Ud6VVLY*!G^\" variabletype=\"\">planet<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n<p>\n  But what if the user only knows 5 planets? Or they know more than 8 (perhaps they didn't get <a href=\"http:\/\/news.nationalgeographic.com\/news\/2006\/08\/060824-pluto-planet.html\" target=\"_blank\">the news about Pluto<\/a>!)\n<\/p>\n\n<p>\n  <strong>We need to keep asking until the user runs out of answers.<\/strong>\n<\/p>\n\n<p>\n  If we want to loop <em>until<\/em> something happens, <bk class=\"control\">repeat<\/bk>can't help us.\n  We need a <bk class=\"control\">repeat while<\/bk> block!\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"When can we stop?",
              "content_rendered":"<p>\n  We might want to ask the user a question repeatedly.\nIf we know how many times we want to ask the question, we could try something like this:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-loop-input-months\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"xuH\/rS]34Ud6VVLY*!G^\">planet<\/variable>\n    <variable type=\"\" id=\"Q@41C@=5T,Xd`XecR_rF\">size<\/variable>\n  <\/variables>\n  <block type=\"io_print1\" id=\"p*TErxOM3An?*jY}8(nE\" x=\"9\" y=\"3\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"~5rrmwJ_PKxvJNerY0x?\">\n        <field name=\"TEXT\">How many planets can you name?<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_repeat_ext\" id=\"4\">\n        <value name=\"TIMES\">\n          <block type=\"math_number\" id=\"rX^,7dCq].?N;~!y}g*Y\">\n            <field name=\"NUM\">8<\/field>\n          <\/block>\n        <\/value>\n        <statement name=\"DO\">\n          <block type=\"variables_set\" id=\"6\">\n            <field name=\"VAR\" id=\"xuH\/rS]34Ud6VVLY*!G^\" variabletype=\"\">planet<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\"7\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\"8\">\n                    <field name=\"TEXT\">Planet:<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print2\" id=\"ySufp^Df2GoSid-g_pcg\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"Xc:Y.N@9S(6FW4?O|7{l\">\n                    <field name=\"TEXT\">You said:<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"variables_get\" id=\"+pxhn1Rx3sJ`}o=VUwKO\">\n                    <field name=\"VAR\" id=\"xuH\/rS]34Ud6VVLY*!G^\" variabletype=\"\">planet<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n<p>\n  But what if the user only knows 5 planets? Or they know more than 8 (perhaps they didn't get <a href=\"http:\/\/news.nationalgeographic.com\/news\/2006\/08\/060824-pluto-planet.html\" target=\"_blank\">the news about Pluto<\/a>!)\n<\/p>\n\n<p>\n  <strong>We need to keep asking until the user runs out of answers.<\/strong>\n<\/p>\n\n<p>\n  If we want to loop <em>until<\/em> something happens, <bk class=\"control\">repeat<\/bk>can't help us.\n  We need a <bk class=\"control\">repeat while<\/bk> block!\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Asking the user multiple questions is so common, Blockly has a <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block to make it easier:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"simplified-read-loop\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"bhPZOqZ%9$JlKy`ZyUIS\">guess<\/variable>\n  <\/variables>\n  <block type=\"loops_read_ask\" id=\"mM3O?r4BnQqFK9drDm).\" x=\"7\" y=\"4\">\n    <field name=\"VAR\" id=\"bhPZOqZ%9$JlKy`ZyUIS\" variabletype=\"\">guess<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"ZFaidWZ2SqAeCIh%Aih9\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"kn%g}-#JN{8f){y}+tID\">\n            <field name=\"TEXT\">Guess my favourite colour:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_compare\" id=\"]Sg~og@AsCB5ClE?i.*#\">\n        <field name=\"OP\">NEQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"Da74#60XRx(iwPht4K{`\">\n            <field name=\"VAR\" id=\"bhPZOqZ%9$JlKy`ZyUIS\" variabletype=\"\">guess<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"5Il~F]bx3KmUk{SV|1Et\">\n            <field name=\"TEXT\">yellow<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print1\" id=\"n9]Z#SEsdrg~69q$eL.0\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"$Iq:0{-v|Kf9;CLec+ki\">\n            <field name=\"TEXT\">Nope! Try again!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <next>\n      <block type=\"io_print1\" id=\"EmL3Iv4NH@=f_Wo?:Xm{\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"VhOX3th-(_E1~_!1}A}*\">\n            <field name=\"TEXT\">You got it!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block does several steps:\n<\/p>\n\n<ol>\n  <li><bk class=\"str\">ask<\/bk> the user for a string;<\/li>\n  <li>store the answer in <bk class=\"var\"><bk class=\"inner\">guess<\/bk><\/bk>;<\/li>\n  <li>if the condition is <code data-lang=\"txt\">True<\/code> (the user correctly guessed that my favourite colour is <bk class=\"str lit\"><bk class=\"inner\">yellow<\/bk><\/bk>, run the body and go back to step 1;<\/li>\n  <li>if the condition is <code data-lang=\"txt\">False<\/code>, stop looping immediately.<\/li>\n<\/ol>\n\n<p>\n  In this example, <em>while<\/em> the guess is not equal to <bk class=\"str lit\"><bk class=\"inner\">yellow<\/bk><\/bk>, it will <bk class=\"io\">print<\/bk> <bk class=\"str lit\"><bk class=\"inner\">Nope! Try again!<\/bk><\/bk>, and redo the loop.\n<\/p>\n<p>\n  When the user enters <bk class=\"str lit\"><bk class=\"inner\">yellow<\/bk><\/bk>, the condition is <code data-lang=\"txt\">False<\/code>, the loop stops, and the next <bk class=\"io\">print<\/bk> block is run, telling the user they guessed correctly.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Simplified read loop",
              "content_rendered":"<p>\n  Asking the user multiple questions is so common, Blockly has a <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block to make it easier:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"simplified-read-loop\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"bhPZOqZ%9$JlKy`ZyUIS\">guess<\/variable>\n  <\/variables>\n  <block type=\"loops_read_ask\" id=\"mM3O?r4BnQqFK9drDm).\" x=\"7\" y=\"4\">\n    <field name=\"VAR\" id=\"bhPZOqZ%9$JlKy`ZyUIS\" variabletype=\"\">guess<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"ZFaidWZ2SqAeCIh%Aih9\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"kn%g}-#JN{8f){y}+tID\">\n            <field name=\"TEXT\">Guess my favourite colour:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_compare\" id=\"]Sg~og@AsCB5ClE?i.*#\">\n        <field name=\"OP\">NEQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"Da74#60XRx(iwPht4K{`\">\n            <field name=\"VAR\" id=\"bhPZOqZ%9$JlKy`ZyUIS\" variabletype=\"\">guess<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"5Il~F]bx3KmUk{SV|1Et\">\n            <field name=\"TEXT\">yellow<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print1\" id=\"n9]Z#SEsdrg~69q$eL.0\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"$Iq:0{-v|Kf9;CLec+ki\">\n            <field name=\"TEXT\">Nope! Try again!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <next>\n      <block type=\"io_print1\" id=\"EmL3Iv4NH@=f_Wo?:Xm{\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"VhOX3th-(_E1~_!1}A}*\">\n            <field name=\"TEXT\">You got it!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block does several steps:\n<\/p>\n\n<ol>\n  <li><bk class=\"str\">ask<\/bk> the user for a string;<\/li>\n  <li>store the answer in <bk class=\"var\"><bk class=\"inner\">guess<\/bk><\/bk>;<\/li>\n  <li>if the condition is <code data-lang=\"txt\">True<\/code> (the user correctly guessed that my favourite colour is <bk class=\"str lit\"><bk class=\"inner\">yellow<\/bk><\/bk>, run the body and go back to step 1;<\/li>\n  <li>if the condition is <code data-lang=\"txt\">False<\/code>, stop looping immediately.<\/li>\n<\/ol>\n\n<p>\n  In this example, <em>while<\/em> the guess is not equal to <bk class=\"str lit\"><bk class=\"inner\">yellow<\/bk><\/bk>, it will <bk class=\"io\">print<\/bk> <bk class=\"str lit\"><bk class=\"inner\">Nope! Try again!<\/bk><\/bk>, and redo the loop.\n<\/p>\n<p>\n  When the user enters <bk class=\"str lit\"><bk class=\"inner\">yellow<\/bk><\/bk>, the condition is <code data-lang=\"txt\">False<\/code>, the loop stops, and the next <bk class=\"io\">print<\/bk> block is run, telling the user they guessed correctly.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Here's another example using the <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block. <\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"simplified-read-loop2\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"bhPZOqZ%9$JlKy`ZyUIS\">cmd<\/variable>\n  <\/variables>\n  <block type=\"loops_read_ask\" id=\"mM3O?r4BnQqFK9drDm).\" x=\"7\" y=\"4\">\n    <field name=\"VAR\" id=\"bhPZOqZ%9$JlKy`ZyUIS\" variabletype=\"\">cmd<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"ZFaidWZ2SqAeCIh%Aih9\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"kn%g}-#JN{8f){y}+tID\">\n            <field name=\"TEXT\">Enter a command:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_compare\" id=\"]Sg~og@AsCB5ClE?i.*#\">\n        <field name=\"OP\">NEQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"Da74#60XRx(iwPht4K{`\">\n            <field name=\"VAR\" id=\"bhPZOqZ%9$JlKy`ZyUIS\" variabletype=\"\">cmd<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"5Il~F]bx3KmUk{SV|1Et\">\n            <field name=\"TEXT\">quit<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print2\" id=\",:y@%L.e={d@sdKSkY~j\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"$Iq:0{-v|Kf9;CLec+ki\">\n            <field name=\"TEXT\">Your command was:<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"(kE8oRl0$U%)NA:CsS=m\">\n            <field name=\"VAR\" id=\"bhPZOqZ%9$JlKy`ZyUIS\" variabletype=\"\">cmd<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block follows the same steps as the last example.\nIt will keep looping <em>until<\/em> the user enters <bk class=\"str lit\"><bk class=\"inner\">quit<\/bk><\/bk>.\n<\/p>\n\n<p>\nThis <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block will keep looping and looping and looping until the condition it is testing is met.\n<\/p>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Read until in a read loop",
              "content_rendered":"<p>\n  Here's another example using the <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block. <\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"simplified-read-loop2\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"bhPZOqZ%9$JlKy`ZyUIS\">cmd<\/variable>\n  <\/variables>\n  <block type=\"loops_read_ask\" id=\"mM3O?r4BnQqFK9drDm).\" x=\"7\" y=\"4\">\n    <field name=\"VAR\" id=\"bhPZOqZ%9$JlKy`ZyUIS\" variabletype=\"\">cmd<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"ZFaidWZ2SqAeCIh%Aih9\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"kn%g}-#JN{8f){y}+tID\">\n            <field name=\"TEXT\">Enter a command:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_compare\" id=\"]Sg~og@AsCB5ClE?i.*#\">\n        <field name=\"OP\">NEQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"Da74#60XRx(iwPht4K{`\">\n            <field name=\"VAR\" id=\"bhPZOqZ%9$JlKy`ZyUIS\" variabletype=\"\">cmd<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"5Il~F]bx3KmUk{SV|1Et\">\n            <field name=\"TEXT\">quit<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print2\" id=\",:y@%L.e={d@sdKSkY~j\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"$Iq:0{-v|Kf9;CLec+ki\">\n            <field name=\"TEXT\">Your command was:<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"(kE8oRl0$U%)NA:CsS=m\">\n            <field name=\"VAR\" id=\"bhPZOqZ%9$JlKy`ZyUIS\" variabletype=\"\">cmd<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block follows the same steps as the last example.\nIt will keep looping <em>until<\/em> the user enters <bk class=\"str lit\"><bk class=\"inner\">quit<\/bk><\/bk>.\n<\/p>\n\n<p>\nThis <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block will keep looping and looping and looping until the condition it is testing is met.\n<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Snooze No More!",
              "purpose":"",
              "problem":"bk-py3-snooze-no-more",
              "type":1,
              "problem_id":2725
            }
          ],
          "title":"Repeating things"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Here's a new logic blocks for comparing the start of a string!\n<\/p>\n\n<p>\n  The <bk class=\"logic\"><bk class=\"inner\">starts<\/bk> with<\/bk> block tests if one string <em>starts with<\/em> the characters from another string:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"startwith-endswith-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"345\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">cmd<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"340\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"341\">\n            <field name=\"TEXT\">Command: <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"434\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_stringEnds\" id=\"302\" inline=\"true\">\n            <field name=\"OP\">STARTSWITH<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"352\">\n                <field name=\"VAR\">cmd<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"FIX\">\n              <block type=\"text\" id=\"370\">\n                <field name=\"TEXT\">Please<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"412\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"422\">\n                <field name=\"TEXT\">OK, I'll do that.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"435\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"436\">\n                <field name=\"TEXT\">You didn't say please!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  By clicking on <bk class=\"logic\"><bk class=\"inner\">starts<\/bk><\/bk> you can change the block to <bk class=\"logic\"><bk class=\"inner\">ends<\/bk> with<\/bk>, to compare the end of the string with another string.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Comparing just the ends of a string",
              "content_rendered":"<p>\n  Here's a new logic blocks for comparing the start of a string!\n<\/p>\n\n<p>\n  The <bk class=\"logic\"><bk class=\"inner\">starts<\/bk> with<\/bk> block tests if one string <em>starts with<\/em> the characters from another string:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"startwith-endswith-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"345\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">cmd<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"340\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"341\">\n            <field name=\"TEXT\">Command: <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"434\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_stringEnds\" id=\"302\" inline=\"true\">\n            <field name=\"OP\">STARTSWITH<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"352\">\n                <field name=\"VAR\">cmd<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"FIX\">\n              <block type=\"text\" id=\"370\">\n                <field name=\"TEXT\">Please<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"412\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"422\">\n                <field name=\"TEXT\">OK, I'll do that.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"435\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"436\">\n                <field name=\"TEXT\">You didn't say please!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  By clicking on <bk class=\"logic\"><bk class=\"inner\">starts<\/bk><\/bk> you can change the block to <bk class=\"logic\"><bk class=\"inner\">ends<\/bk> with<\/bk>, to compare the end of the string with another string.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Just a reminder: the <bk class=\"logic\">is <bk class=\"inner\">UPPERCASE<\/bk><\/bk> block tests if the letters in a string are all uppercase letters:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"is-uppercase-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"345\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">sentence<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"340\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"341\">\n            <field name=\"TEXT\">Sentence: <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"490\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_isCase\" id=\"478\" inline=\"true\">\n            <field name=\"OP\">ISUPPER<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"352\">\n                <field name=\"VAR\">sentence<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"412\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"422\">\n                <field name=\"TEXT\">No need to shout!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The same block can also check for <bk class=\"logic\"><bk class=\"inner\">lowercase<\/bk><\/bk> and <bk class=\"logic\"><bk class=\"inner\">TitleCase<\/bk><\/bk>.\n<\/p>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"IS UPPERCASE?",
              "content_rendered":"<p>\n  Just a reminder: the <bk class=\"logic\">is <bk class=\"inner\">UPPERCASE<\/bk><\/bk> block tests if the letters in a string are all uppercase letters:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"is-uppercase-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"345\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">sentence<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"340\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"341\">\n            <field name=\"TEXT\">Sentence: <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"490\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_isCase\" id=\"478\" inline=\"true\">\n            <field name=\"OP\">ISUPPER<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"352\">\n                <field name=\"VAR\">sentence<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"412\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"422\">\n                <field name=\"TEXT\">No need to shout!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The same block can also check for <bk class=\"logic\"><bk class=\"inner\">lowercase<\/bk><\/bk> and <bk class=\"logic\"><bk class=\"inner\">TitleCase<\/bk><\/bk>.\n<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  We can use <em>any comparison block<\/em>, like <bk class=\"logic\">is <bk class=\"inner\">UPPERCASE<\/bk><\/bk>, as the <bk class=\"control\">while<\/bk> loop condition. It will loop <em>while<\/em> the condition is <code data-lang=\"txt\">True<\/code>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"loop-while-shouting-eg\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"m{p.Sji3!B?.KVYJDp*m\">sentence<\/variable>\n  <\/variables>\n  <block type=\"loops_read_ask\" id=\"72*NpXjaSKk:dis}u|\/!\" x=\"9\" y=\"3\">\n    <field name=\"VAR\" id=\"m{p.Sji3!B?.KVYJDp*m\" variabletype=\"\">sentence<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"5_`_OMI}(Iejdb-!yzb9\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"#%{dn$`8]ZjYmyq#06(j\">\n            <field name=\"TEXT\">Sentence:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isCase\" id=\"_UwdlO|cD`7rg(GeYLki\">\n        <field name=\"OP\">ISUPPER<\/field>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"AEsi?)EPSfay8S9auFE^\">\n            <field name=\"VAR\" id=\"m{p.Sji3!B?.KVYJDp*m\" variabletype=\"\">sentence<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print1\" id=\"6#uplDfSHXa3JRkAp3*+\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"uBj01H|MxG\/d`E?lu,4;\">\n            <field name=\"TEXT\">No need to shout!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <next>\n      <block type=\"io_print1\" id=\"6}+A@7[`fjPH$AHn[7xF\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"#,j6!6zeIR(|)`]\/~JAV\">\n            <field name=\"TEXT\">That's better.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n<p>\n  This program will keep saying <code data-lang=\"out\">No need to shout!<\/code> until the user enters something that's not in <code data-lang=\"in\">ALL CAPS<\/code>:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"loop-while-shouting-eg\"><code data-lang=\"py3\"><o>Sentence: <\/o><i>HELLO<\/i>\n<o>No need to shout!<\/o>\n<o>Sentence: <\/o><i>OH?<\/i>\n<o>No need to shout!<\/o>\n<o>Sentence: <\/o><i>Is this better?<\/i>\n<o>That's better.\n<\/o>\n<\/code><\/pre>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Looping with <bk class=\"logic\">is <bk class=\"inner\">UPPERCASE<\/bk><\/bk>",
              "content_rendered":"<p>\n  We can use <em>any comparison block<\/em>, like <bk class=\"logic\">is <bk class=\"inner\">UPPERCASE<\/bk><\/bk>, as the <bk class=\"control\">while<\/bk> loop condition. It will loop <em>while<\/em> the condition is <code data-lang=\"txt\">True<\/code>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"loop-while-shouting-eg\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"m{p.Sji3!B?.KVYJDp*m\">sentence<\/variable>\n  <\/variables>\n  <block type=\"loops_read_ask\" id=\"72*NpXjaSKk:dis}u|\/!\" x=\"9\" y=\"3\">\n    <field name=\"VAR\" id=\"m{p.Sji3!B?.KVYJDp*m\" variabletype=\"\">sentence<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"5_`_OMI}(Iejdb-!yzb9\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"#%{dn$`8]ZjYmyq#06(j\">\n            <field name=\"TEXT\">Sentence:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isCase\" id=\"_UwdlO|cD`7rg(GeYLki\">\n        <field name=\"OP\">ISUPPER<\/field>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"AEsi?)EPSfay8S9auFE^\">\n            <field name=\"VAR\" id=\"m{p.Sji3!B?.KVYJDp*m\" variabletype=\"\">sentence<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print1\" id=\"6#uplDfSHXa3JRkAp3*+\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"uBj01H|MxG\/d`E?lu,4;\">\n            <field name=\"TEXT\">No need to shout!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <next>\n      <block type=\"io_print1\" id=\"6}+A@7[`fjPH$AHn[7xF\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"#,j6!6zeIR(|)`]\/~JAV\">\n            <field name=\"TEXT\">That's better.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n<p>\n  This program will keep saying <code data-lang=\"out\">No need to shout!<\/code> until the user enters something that's not in <code data-lang=\"in\">ALL CAPS<\/code>:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"loop-while-shouting-eg\"><code data-lang=\"py3\"><o>Sentence: <\/o><i>HELLO<\/i>\n<o>No need to shout!<\/o>\n<o>Sentence: <\/o><i>OH?<\/i>\n<o>No need to shout!<\/o>\n<o>Sentence: <\/o><i>Is this better?<\/i>\n<o>That's better.\n<\/o>\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"bk-py3-um-no-um",
              "type":1,
              "problem_id":2726
            }
          ],
          "title":"Reading while True"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  A common thing you'll need to do when writing programs is to read in multiple lines until a blank line is entered.\n<\/p>\n\n<p>\n  Blockly has a special <bk class=\"logic\"><bk class=\"inner\">is not empty<\/bk><\/bk> comparison block for this:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-template-user-input-blank-line-stop\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"3tF`cz:mwbH;XUvQ1D$l\">line<\/variable>\n  <\/variables>\n  <block type=\"loops_read_ask\" id=\"dR~(xoI|Sle#T+|w?Q!|\" x=\"-2\" y=\"0\">\n    <field name=\"VAR\" id=\"3tF`cz:mwbH;XUvQ1D$l\" variabletype=\"\">line<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\")O{}0BZp_\/yQ,W3:Mc5z\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\":qk#!1=m}gaR7NEPl6Tw\">\n            <field name=\"TEXT\">Line:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isEmpty\" id=\"A{]SiU8zwo;uMK[-|+U@\">\n        <field name=\"OP\">IS_NOT<\/field>\n        <value name=\"VALUE\">\n          <block type=\"variables_get\" id=\"}fDmHLX~Dtj8ACeEM`Th\">\n            <field name=\"VAR\" id=\"3tF`cz:mwbH;XUvQ1D$l\" variabletype=\"\">line<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print2\" id=\"j_,VjDixDgJY4BB~Lg(v\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"~5V+Y*N9WGm0mf[W+|O-\">\n            <field name=\"TEXT\">Echo:<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"Av[0}%@pd9tlC~$8`Gu}\">\n            <field name=\"VAR\" id=\"3tF`cz:mwbH;XUvQ1D$l\" variabletype=\"\">line<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n<p>\n  <strong>Try this program!  You need to answer by pressing <kbd>Enter<\/kbd><\/strong> (and nothing else) to return an empty string and stop the loop.\n<\/p>\n\n<p>\n  The <bk class=\"logic\"><bk class=\"inner\">is not empty<\/bk><\/bk> block is under the <strong>Logic<\/strong> tab, but we will usually include it directly in the <bk class=\"control\">read <bk class=\"str\">ask<\/bk> while<\/bk> block.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Looking for blank lines",
              "content_rendered":"<p>\n  A common thing you'll need to do when writing programs is to read in multiple lines until a blank line is entered.\n<\/p>\n\n<p>\n  Blockly has a special <bk class=\"logic\"><bk class=\"inner\">is not empty<\/bk><\/bk> comparison block for this:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-template-user-input-blank-line-stop\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"3tF`cz:mwbH;XUvQ1D$l\">line<\/variable>\n  <\/variables>\n  <block type=\"loops_read_ask\" id=\"dR~(xoI|Sle#T+|w?Q!|\" x=\"-2\" y=\"0\">\n    <field name=\"VAR\" id=\"3tF`cz:mwbH;XUvQ1D$l\" variabletype=\"\">line<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\")O{}0BZp_\/yQ,W3:Mc5z\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\":qk#!1=m}gaR7NEPl6Tw\">\n            <field name=\"TEXT\">Line:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isEmpty\" id=\"A{]SiU8zwo;uMK[-|+U@\">\n        <field name=\"OP\">IS_NOT<\/field>\n        <value name=\"VALUE\">\n          <block type=\"variables_get\" id=\"}fDmHLX~Dtj8ACeEM`Th\">\n            <field name=\"VAR\" id=\"3tF`cz:mwbH;XUvQ1D$l\" variabletype=\"\">line<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print2\" id=\"j_,VjDixDgJY4BB~Lg(v\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"~5V+Y*N9WGm0mf[W+|O-\">\n            <field name=\"TEXT\">Echo:<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"Av[0}%@pd9tlC~$8`Gu}\">\n            <field name=\"VAR\" id=\"3tF`cz:mwbH;XUvQ1D$l\" variabletype=\"\">line<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n<p>\n  <strong>Try this program!  You need to answer by pressing <kbd>Enter<\/kbd><\/strong> (and nothing else) to return an empty string and stop the loop.\n<\/p>\n\n<p>\n  The <bk class=\"logic\"><bk class=\"inner\">is not empty<\/bk><\/bk> block is under the <strong>Logic<\/strong> tab, but we will usually include it directly in the <bk class=\"control\">read <bk class=\"str\">ask<\/bk> while<\/bk> block.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Using an <bk class=\"control\">if<\/bk> block, we can write a program to find cats in a line:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-if-inside-while-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"8\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">line<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"3\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"4\">\n            <field name=\"TEXT\">Enter a line: <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"10\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_isMember\" id=\"12\" inline=\"true\">\n            <field name=\"OP\">IN<\/field>\n            <value name=\"MEMBER\">\n              <block type=\"text\" id=\"17\">\n                <field name=\"TEXT\">cat<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"24\">\n                <field name=\"VAR\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"28\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"36\">\n                <field name=\"TEXT\">I see a cat!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"31\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"41\">\n                <field name=\"TEXT\">No cat.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  To check lots of lines, we remove the <bk class=\"str\">ask<\/bk> block and wrap the <bk class=\"control\">if<\/bk> in a <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"if-inside-while-eg2\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"3tF`cz:mwbH;XUvQ1D$l\">line<\/variable>\n  <\/variables>\n  <block type=\"loops_read_ask\" id=\"dR~(xoI|Sle#T+|w?Q!|\" x=\"-2\" y=\"0\">\n    <field name=\"VAR\" id=\"3tF`cz:mwbH;XUvQ1D$l\" variabletype=\"\">line<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\")O{}0BZp_\/yQ,W3:Mc5z\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\":qk#!1=m}gaR7NEPl6Tw\">\n            <field name=\"TEXT\">Line:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isEmpty\" id=\"A{]SiU8zwo;uMK[-|+U@\">\n        <field name=\"OP\">IS_NOT<\/field>\n        <value name=\"VALUE\">\n          <block type=\"variables_get\" id=\"}fDmHLX~Dtj8ACeEM`Th\">\n            <field name=\"VAR\" id=\"3tF`cz:mwbH;XUvQ1D$l\" variabletype=\"\">line<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"decisions_if_else\" id=\"kydDJ@%!DZnV2,T%@Oio\">\n        <value name=\"IF0\">\n          <block type=\"logic_isMember\" id=\"Q?}jB]8+7nQ[=2AAW~:}\">\n            <field name=\"OP\">IN<\/field>\n            <value name=\"MEMBER\">\n              <block type=\"text\" id=\"IYLz+R#s!g}\/m{U`$USR\">\n                <field name=\"TEXT\">cat<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"71tSMD`0mag;6.^M,q2H\">\n                <field name=\"VAR\" id=\"3tF`cz:mwbH;XUvQ1D$l\" variabletype=\"\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"%rbk%!lLJ,@+2h.fY\/f%\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"H~CQ\/P){GSTwVl%83zA0\">\n                <field name=\"TEXT\">I see a cat!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\")Y;HGOqjJJN+~,3mUB}n\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"T-tEJU39gA[pBKjdS7BN\">\n                <field name=\"TEXT\">No cat.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"if-inside-while-eg2\"><code data-lang=\"py3\"><o>Enter a line: <\/o><i>the cat is asleep<\/i>\n<o>I see a cat!<\/o>\n<o>Enter a line: <\/o><i>cats are everywhere!<\/i>\n<o>I see a cat!<\/o>\n<o>Enter a line: <\/o><i>something about a dog<\/i>\n<o>No cat.<\/o>\n<o>Enter a line: <\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  In this example we've put our <bk class=\"control\">if else<\/bk> block <em>inside<\/em> a <bk class=\"control\">repeat while<\/bk> loop so that we can use it many times.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Making decisions inside a loop",
              "content_rendered":"<p>\n  Using an <bk class=\"control\">if<\/bk> block, we can write a program to find cats in a line:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-if-inside-while-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"8\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">line<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"3\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"4\">\n            <field name=\"TEXT\">Enter a line: <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"10\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_isMember\" id=\"12\" inline=\"true\">\n            <field name=\"OP\">IN<\/field>\n            <value name=\"MEMBER\">\n              <block type=\"text\" id=\"17\">\n                <field name=\"TEXT\">cat<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"24\">\n                <field name=\"VAR\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"28\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"36\">\n                <field name=\"TEXT\">I see a cat!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"31\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"41\">\n                <field name=\"TEXT\">No cat.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  To check lots of lines, we remove the <bk class=\"str\">ask<\/bk> block and wrap the <bk class=\"control\">if<\/bk> in a <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"if-inside-while-eg2\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"3tF`cz:mwbH;XUvQ1D$l\">line<\/variable>\n  <\/variables>\n  <block type=\"loops_read_ask\" id=\"dR~(xoI|Sle#T+|w?Q!|\" x=\"-2\" y=\"0\">\n    <field name=\"VAR\" id=\"3tF`cz:mwbH;XUvQ1D$l\" variabletype=\"\">line<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\")O{}0BZp_\/yQ,W3:Mc5z\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\":qk#!1=m}gaR7NEPl6Tw\">\n            <field name=\"TEXT\">Line:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isEmpty\" id=\"A{]SiU8zwo;uMK[-|+U@\">\n        <field name=\"OP\">IS_NOT<\/field>\n        <value name=\"VALUE\">\n          <block type=\"variables_get\" id=\"}fDmHLX~Dtj8ACeEM`Th\">\n            <field name=\"VAR\" id=\"3tF`cz:mwbH;XUvQ1D$l\" variabletype=\"\">line<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"decisions_if_else\" id=\"kydDJ@%!DZnV2,T%@Oio\">\n        <value name=\"IF0\">\n          <block type=\"logic_isMember\" id=\"Q?}jB]8+7nQ[=2AAW~:}\">\n            <field name=\"OP\">IN<\/field>\n            <value name=\"MEMBER\">\n              <block type=\"text\" id=\"IYLz+R#s!g}\/m{U`$USR\">\n                <field name=\"TEXT\">cat<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"71tSMD`0mag;6.^M,q2H\">\n                <field name=\"VAR\" id=\"3tF`cz:mwbH;XUvQ1D$l\" variabletype=\"\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"%rbk%!lLJ,@+2h.fY\/f%\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"H~CQ\/P){GSTwVl%83zA0\">\n                <field name=\"TEXT\">I see a cat!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\")Y;HGOqjJJN+~,3mUB}n\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"T-tEJU39gA[pBKjdS7BN\">\n                <field name=\"TEXT\">No cat.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"if-inside-while-eg2\"><code data-lang=\"py3\"><o>Enter a line: <\/o><i>the cat is asleep<\/i>\n<o>I see a cat!<\/o>\n<o>Enter a line: <\/o><i>cats are everywhere!<\/i>\n<o>I see a cat!<\/o>\n<o>Enter a line: <\/o><i>something about a dog<\/i>\n<o>No cat.<\/o>\n<o>Enter a line: <\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  In this example we've put our <bk class=\"control\">if else<\/bk> block <em>inside<\/em> a <bk class=\"control\">repeat while<\/bk> loop so that we can use it many times.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: TL;DR",
              "purpose":"",
              "problem":"bk-py3-too-long-didnt-read",
              "type":1,
              "problem_id":2732
            }
          ],
          "title":"Making decisions inside a loop"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Sometimes, we want to <em>count<\/em> how often something happens in a loop.\n  We need to store the count we're up to in a <em>counter<\/em> variable.\n<\/p>\n\n<p>\n  The <bk class=\"var\"><bk class=\"inner\">increment<\/bk> <bk class=\"math\"><bk class=\"inner\">1<\/bk><\/bk><\/bk> block adds 1 more to the counter variable:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"increment-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"50\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">counter<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"59\">\n        <field name=\"NUM\">0<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print2\" id=\"143\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"168\">\n            <field name=\"TEXT\">Started counting at<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"150\">\n            <field name=\"VAR\">counter<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_incdec\" id=\"125\" inline=\"true\">\n            <field name=\"OP\">INCREMENT<\/field>\n            <field name=\"VAR\">counter<\/field>\n            <value name=\"DELTA\">\n              <block type=\"math_number\" id=\"136\">\n                <field name=\"NUM\">1<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print2\" id=\"169\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"170\">\n                    <field name=\"TEXT\">Counted up to<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"variables_get\" id=\"171\">\n                    <field name=\"VAR\">counter<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  If you use <bk class=\"var\"><bk class=\"inner\">increment<\/bk><\/bk> multiple times, the counter keeps going up:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"increment-eg2\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"50\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">counter<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"59\">\n        <field name=\"NUM\">0<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_incdec\" id=\"125\" inline=\"true\">\n        <field name=\"OP\">INCREMENT<\/field>\n        <field name=\"VAR\">counter<\/field>\n        <value name=\"DELTA\">\n          <block type=\"math_number\" id=\"136\">\n            <field name=\"NUM\">1<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_incdec\" id=\"172\" inline=\"true\">\n            <field name=\"OP\">INCREMENT<\/field>\n            <field name=\"VAR\">counter<\/field>\n            <value name=\"DELTA\">\n              <block type=\"math_number\" id=\"173\">\n                <field name=\"NUM\">1<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"variables_incdec\" id=\"174\" inline=\"true\">\n                <field name=\"OP\">INCREMENT<\/field>\n                <field name=\"VAR\">counter<\/field>\n                <value name=\"DELTA\">\n                  <block type=\"math_number\" id=\"175\">\n                    <field name=\"NUM\">1<\/field>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print2\" id=\"169\" inline=\"true\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"170\">\n                        <field name=\"TEXT\">Counted up to<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY1\">\n                      <block type=\"variables_get\" id=\"171\">\n                        <field name=\"VAR\">counter<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Counting up!",
              "content_rendered":"<p>\n  Sometimes, we want to <em>count<\/em> how often something happens in a loop.\n  We need to store the count we're up to in a <em>counter<\/em> variable.\n<\/p>\n\n<p>\n  The <bk class=\"var\"><bk class=\"inner\">increment<\/bk> <bk class=\"math\"><bk class=\"inner\">1<\/bk><\/bk><\/bk> block adds 1 more to the counter variable:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"increment-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"50\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">counter<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"59\">\n        <field name=\"NUM\">0<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print2\" id=\"143\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"168\">\n            <field name=\"TEXT\">Started counting at<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"150\">\n            <field name=\"VAR\">counter<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_incdec\" id=\"125\" inline=\"true\">\n            <field name=\"OP\">INCREMENT<\/field>\n            <field name=\"VAR\">counter<\/field>\n            <value name=\"DELTA\">\n              <block type=\"math_number\" id=\"136\">\n                <field name=\"NUM\">1<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print2\" id=\"169\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"170\">\n                    <field name=\"TEXT\">Counted up to<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"variables_get\" id=\"171\">\n                    <field name=\"VAR\">counter<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  If you use <bk class=\"var\"><bk class=\"inner\">increment<\/bk><\/bk> multiple times, the counter keeps going up:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"increment-eg2\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"50\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">counter<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"59\">\n        <field name=\"NUM\">0<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_incdec\" id=\"125\" inline=\"true\">\n        <field name=\"OP\">INCREMENT<\/field>\n        <field name=\"VAR\">counter<\/field>\n        <value name=\"DELTA\">\n          <block type=\"math_number\" id=\"136\">\n            <field name=\"NUM\">1<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_incdec\" id=\"172\" inline=\"true\">\n            <field name=\"OP\">INCREMENT<\/field>\n            <field name=\"VAR\">counter<\/field>\n            <value name=\"DELTA\">\n              <block type=\"math_number\" id=\"173\">\n                <field name=\"NUM\">1<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"variables_incdec\" id=\"174\" inline=\"true\">\n                <field name=\"OP\">INCREMENT<\/field>\n                <field name=\"VAR\">counter<\/field>\n                <value name=\"DELTA\">\n                  <block type=\"math_number\" id=\"175\">\n                    <field name=\"NUM\">1<\/field>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print2\" id=\"169\" inline=\"true\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"170\">\n                        <field name=\"TEXT\">Counted up to<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY1\">\n                      <block type=\"variables_get\" id=\"171\">\n                        <field name=\"VAR\">counter<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  We can use a counter to count the number of lines read:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-counter\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"c-(+O`cA0pK|~$oue_!|\">line<\/variable>\n    <variable type=\"\" id=\"~HL8P+0?cJ0auN_jMx0:\">nlines<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"_yTsML_t5vb=qc0~WNeG\" x=\"3\" y=\"0\">\n    <field name=\"VAR\" id=\"~HL8P+0?cJ0auN_jMx0:\" variabletype=\"\">nlines<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"Th4ss1T`EkuYa]6]g=SE\">\n        <field name=\"NUM\">0<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_read_ask\" id=\"%r%7\/K9I7lZjLF:n$oG(\">\n        <field name=\"VAR\" id=\"c-(+O`cA0pK|~$oue_!|\" variabletype=\"\">line<\/field>\n        <value name=\"ASK_BLOCK\">\n          <block type=\"io_ask_text\" id=\"x4kyZC+!swgAq0FM!0rD\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"#n5t.rOEx1+O-08.RpX!\">\n                <field name=\"TEXT\">Enter line:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"BOOL\">\n          <block type=\"logic_isEmpty\" id=\"{)%pW+}jqzm?}mc`h(6d\">\n            <field name=\"OP\">IS_NOT<\/field>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\";2|$Eok)q+(\/rt:yxv_\/\">\n                <field name=\"VAR\" id=\"c-(+O`cA0pK|~$oue_!|\" variabletype=\"\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO\">\n          <block type=\"variables_incdec\" id=\".IGJwWt3f*|;PC8scVS`\">\n            <field name=\"OP\">INCREMENT<\/field>\n            <field name=\"VAR\" id=\"~HL8P+0?cJ0auN_jMx0:\" variabletype=\"\">nlines<\/field>\n            <value name=\"DELTA\">\n              <block type=\"math_number\" id=\"M|D4(UxS$cW_JZ-+:70k\">\n                <field name=\"NUM\">1<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <next>\n          <block type=\"io_print3\" id=\"g6`vmmO,]NMP:v@cgBhM\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"el?DR_H_8$Z8[x,Nx@}_\">\n                <field name=\"TEXT\">You entered<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"p5nH[o7o,etp%3LogV!6\">\n                <field name=\"VAR\" id=\"~HL8P+0?cJ0auN_jMx0:\" variabletype=\"\">nlines<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY2\">\n              <block type=\"text\" id=\"sa;$o{CajSJ(UZ=|dY9k\">\n                <field name=\"TEXT\">lines.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<\/code><\/pre>\n\n<p>\n  Any variable can be a counter. Here, we call the counter <bk class=\"var\"><bk class=\"inner\">nlines<\/bk><\/bk> (short for number of lines), set it to zero before the loop, and increment it each time we read a line.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Counters",
              "content_rendered":"<p>\n  We can use a counter to count the number of lines read:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-counter\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"c-(+O`cA0pK|~$oue_!|\">line<\/variable>\n    <variable type=\"\" id=\"~HL8P+0?cJ0auN_jMx0:\">nlines<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"_yTsML_t5vb=qc0~WNeG\" x=\"3\" y=\"0\">\n    <field name=\"VAR\" id=\"~HL8P+0?cJ0auN_jMx0:\" variabletype=\"\">nlines<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"Th4ss1T`EkuYa]6]g=SE\">\n        <field name=\"NUM\">0<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_read_ask\" id=\"%r%7\/K9I7lZjLF:n$oG(\">\n        <field name=\"VAR\" id=\"c-(+O`cA0pK|~$oue_!|\" variabletype=\"\">line<\/field>\n        <value name=\"ASK_BLOCK\">\n          <block type=\"io_ask_text\" id=\"x4kyZC+!swgAq0FM!0rD\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"#n5t.rOEx1+O-08.RpX!\">\n                <field name=\"TEXT\">Enter line:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"BOOL\">\n          <block type=\"logic_isEmpty\" id=\"{)%pW+}jqzm?}mc`h(6d\">\n            <field name=\"OP\">IS_NOT<\/field>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\";2|$Eok)q+(\/rt:yxv_\/\">\n                <field name=\"VAR\" id=\"c-(+O`cA0pK|~$oue_!|\" variabletype=\"\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO\">\n          <block type=\"variables_incdec\" id=\".IGJwWt3f*|;PC8scVS`\">\n            <field name=\"OP\">INCREMENT<\/field>\n            <field name=\"VAR\" id=\"~HL8P+0?cJ0auN_jMx0:\" variabletype=\"\">nlines<\/field>\n            <value name=\"DELTA\">\n              <block type=\"math_number\" id=\"M|D4(UxS$cW_JZ-+:70k\">\n                <field name=\"NUM\">1<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <next>\n          <block type=\"io_print3\" id=\"g6`vmmO,]NMP:v@cgBhM\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"el?DR_H_8$Z8[x,Nx@}_\">\n                <field name=\"TEXT\">You entered<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"p5nH[o7o,etp%3LogV!6\">\n                <field name=\"VAR\" id=\"~HL8P+0?cJ0auN_jMx0:\" variabletype=\"\">nlines<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY2\">\n              <block type=\"text\" id=\"sa;$o{CajSJ(UZ=|dY9k\">\n                <field name=\"TEXT\">lines.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<\/code><\/pre>\n\n<p>\n  Any variable can be a counter. Here, we call the counter <bk class=\"var\"><bk class=\"inner\">nlines<\/bk><\/bk> (short for number of lines), set it to zero before the loop, and increment it each time we read a line.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  The most common mistake with a counter is to <bk class=\"var\"><bk class=\"inner\">increment<\/bk><\/bk> a variable that doesn't exist yet!\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"increment-without-init-eg\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_incdec\" id=\"61\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"OP\">INCREMENT<\/field>\n    <field name=\"VAR\">counter<\/field>\n    <value name=\"DELTA\">\n      <block type=\"math_number\" id=\"83\">\n        <field name=\"NUM\">1<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print2\" id=\"153\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"198\">\n            <field name=\"TEXT\">Counted up to<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"205\">\n            <field name=\"VAR\">counter<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"increment-without-init-eg\"><code data-lang=\"py3\">Traceback (most recent call last):\n  File \"program.py\", line 1, in &lt;module&gt;\n    counter += 1\nNameError: name 'counter' is not defined\n\n<\/code><\/pre>\n\n<p>\n  The last part is important: <code data-lang=\"err\">name 'counter' is not defined<\/code>.\n<\/p>\n\n<p>\n  We tried to increment our <bk class=\"var\"><bk class=\"inner\">counter<\/bk><\/bk> variable but we haven't said what number to start counting from!\n<\/p>\n\n<p>We must <bk class=\"var\">set<\/bk> the counter variable <em>before<\/em> trying to increment it:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"increment-without-init-eg2\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"143\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">counter<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"146\">\n        <field name=\"NUM\">5<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_incdec\" id=\"61\" inline=\"true\">\n        <field name=\"OP\">INCREMENT<\/field>\n        <field name=\"VAR\">counter<\/field>\n        <value name=\"DELTA\">\n          <block type=\"math_number\" id=\"83\">\n            <field name=\"NUM\">1<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print2\" id=\"153\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"198\">\n                <field name=\"TEXT\">Counted up to<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"205\">\n                <field name=\"VAR\">counter<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>You can start counting from whatever number you like!<\/p>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Counter mistakes: part 1",
              "content_rendered":"<p>\n  The most common mistake with a counter is to <bk class=\"var\"><bk class=\"inner\">increment<\/bk><\/bk> a variable that doesn't exist yet!\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"increment-without-init-eg\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_incdec\" id=\"61\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"OP\">INCREMENT<\/field>\n    <field name=\"VAR\">counter<\/field>\n    <value name=\"DELTA\">\n      <block type=\"math_number\" id=\"83\">\n        <field name=\"NUM\">1<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print2\" id=\"153\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"198\">\n            <field name=\"TEXT\">Counted up to<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"205\">\n            <field name=\"VAR\">counter<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<pre class=\"js-terminal\" data-eg-id=\"increment-without-init-eg\"><code data-lang=\"py3\">Traceback (most recent call last):\n  File \"program.py\", line 1, in &lt;module&gt;\n    counter += 1\nNameError: name 'counter' is not defined\n\n<\/code><\/pre>\n\n<p>\n  The last part is important: <code data-lang=\"err\">name 'counter' is not defined<\/code>.\n<\/p>\n\n<p>\n  We tried to increment our <bk class=\"var\"><bk class=\"inner\">counter<\/bk><\/bk> variable but we haven't said what number to start counting from!\n<\/p>\n\n<p>We must <bk class=\"var\">set<\/bk> the counter variable <em>before<\/em> trying to increment it:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"increment-without-init-eg2\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"143\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">counter<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"146\">\n        <field name=\"NUM\">5<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_incdec\" id=\"61\" inline=\"true\">\n        <field name=\"OP\">INCREMENT<\/field>\n        <field name=\"VAR\">counter<\/field>\n        <value name=\"DELTA\">\n          <block type=\"math_number\" id=\"83\">\n            <field name=\"NUM\">1<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print2\" id=\"153\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"198\">\n                <field name=\"TEXT\">Counted up to<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"205\">\n                <field name=\"VAR\">counter<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>You can start counting from whatever number you like!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  What's wrong with this code? Run it to find out!\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"counter-reset-inside-while\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"]!Jk.JdmiN?x24OIRiW}\">counter<\/variable>\n    <variable type=\"\" id=\"KNza|?%Bvglxebnw?4f6\">line<\/variable>\n  <\/variables>\n  <block type=\"loops_read_ask\" id=\"t[TV{6?^Rb21k@vXhHl[\" x=\"9\" y=\"3\">\n    <field name=\"VAR\" id=\"KNza|?%Bvglxebnw?4f6\" variabletype=\"\">line<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"#-2Z%s5jg8M8rabi!}b8\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"?m2X$X0;+{^s?fcfO$`Q\">\n            <field name=\"TEXT\">Enter line:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isEmpty\" id=\"K14BL;Od]:iXX]87=6%\/\">\n        <field name=\"OP\">IS_NOT<\/field>\n        <value name=\"VALUE\">\n          <block type=\"variables_get\" id=\"C?K0|q\/{5NLFtO^(TRb1\">\n            <field name=\"VAR\" id=\"KNza|?%Bvglxebnw?4f6\" variabletype=\"\">line<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"variables_set\" id=\"`]kdzN8\/o@)v!4=H2J]v\">\n        <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">counter<\/field>\n        <value name=\"VALUE\">\n          <block type=\"math_number\" id=\"$Zpf-o$!uJEMQO_%+v`*\">\n            <field name=\"NUM\">0<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_incdec\" id=\"RsncHg^Kzig}G]IT:M3a\">\n            <field name=\"OP\">INCREMENT<\/field>\n            <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">counter<\/field>\n            <value name=\"DELTA\">\n              <block type=\"math_number\" id=\"(\/7BY|J^ugVx6CT;=zT0\">\n                <field name=\"NUM\">1<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print3\" id=\"365\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"366\">\n                    <field name=\"TEXT\">You entered<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"variables_get\" id=\"367\">\n                    <field name=\"VAR\">counter<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY2\">\n                  <block type=\"text\" id=\"368\">\n                    <field name=\"TEXT\">line(s).<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n\n<\/code><\/pre>\n\n<p>\n  If you enter more than one line (before entering a blank line) you'll see that the counter isn't going up! It's always <code data-lang=\"py3\">1<\/code>!\n<\/p>\n\n<p>\n  That's because every time the <bk class=\"control\">while<\/bk> loop repeats, we're using <bk class=\"var\">set<\/bk> to set the counter back to zero!\n<\/p>\n\n<p>\n  If we start the counter at zero <em>before<\/em> the loop starts, the counter can count up without being reset:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"counter-reset-inside-while-fixed\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"]!Jk.JdmiN?x24OIRiW}\">counter<\/variable>\n    <variable type=\"\" id=\"KNza|?%Bvglxebnw?4f6\">line<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"`]kdzN8\/o@)v!4=H2J]v\" x=\"-1\" y=\"0\">\n    <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">counter<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"$Zpf-o$!uJEMQO_%+v`*\">\n        <field name=\"NUM\">0<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_read_ask\" id=\"t[TV{6?^Rb21k@vXhHl[\">\n        <field name=\"VAR\" id=\"KNza|?%Bvglxebnw?4f6\" variabletype=\"\">line<\/field>\n        <value name=\"ASK_BLOCK\">\n          <block type=\"io_ask_text\" id=\"#-2Z%s5jg8M8rabi!}b8\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"?m2X$X0;+{^s?fcfO$`Q\">\n                <field name=\"TEXT\">Enter line:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"BOOL\">\n          <block type=\"logic_isEmpty\" id=\"K14BL;Od]:iXX]87=6%\/\">\n            <field name=\"OP\">IS_NOT<\/field>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"C?K0|q\/{5NLFtO^(TRb1\">\n                <field name=\"VAR\" id=\"KNza|?%Bvglxebnw?4f6\" variabletype=\"\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO\">\n          <block type=\"variables_incdec\" id=\"RsncHg^Kzig}G]IT:M3a\">\n            <field name=\"OP\">INCREMENT<\/field>\n            <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">counter<\/field>\n            <value name=\"DELTA\">\n              <block type=\"math_number\" id=\"(\/7BY|J^ugVx6CT;=zT0\">\n                <field name=\"NUM\">1<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print3\" id=\"365\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"366\">\n                    <field name=\"TEXT\">You entered<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"variables_get\" id=\"367\">\n                    <field name=\"VAR\">counter<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY2\">\n                  <block type=\"text\" id=\"368\">\n                    <field name=\"TEXT\">line(s).<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n<\/code><\/pre>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Counter mistakes: part 2",
              "content_rendered":"<p>\n  What's wrong with this code? Run it to find out!\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"counter-reset-inside-while\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"]!Jk.JdmiN?x24OIRiW}\">counter<\/variable>\n    <variable type=\"\" id=\"KNza|?%Bvglxebnw?4f6\">line<\/variable>\n  <\/variables>\n  <block type=\"loops_read_ask\" id=\"t[TV{6?^Rb21k@vXhHl[\" x=\"9\" y=\"3\">\n    <field name=\"VAR\" id=\"KNza|?%Bvglxebnw?4f6\" variabletype=\"\">line<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"#-2Z%s5jg8M8rabi!}b8\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"?m2X$X0;+{^s?fcfO$`Q\">\n            <field name=\"TEXT\">Enter line:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isEmpty\" id=\"K14BL;Od]:iXX]87=6%\/\">\n        <field name=\"OP\">IS_NOT<\/field>\n        <value name=\"VALUE\">\n          <block type=\"variables_get\" id=\"C?K0|q\/{5NLFtO^(TRb1\">\n            <field name=\"VAR\" id=\"KNza|?%Bvglxebnw?4f6\" variabletype=\"\">line<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"variables_set\" id=\"`]kdzN8\/o@)v!4=H2J]v\">\n        <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">counter<\/field>\n        <value name=\"VALUE\">\n          <block type=\"math_number\" id=\"$Zpf-o$!uJEMQO_%+v`*\">\n            <field name=\"NUM\">0<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_incdec\" id=\"RsncHg^Kzig}G]IT:M3a\">\n            <field name=\"OP\">INCREMENT<\/field>\n            <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">counter<\/field>\n            <value name=\"DELTA\">\n              <block type=\"math_number\" id=\"(\/7BY|J^ugVx6CT;=zT0\">\n                <field name=\"NUM\">1<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print3\" id=\"365\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"366\">\n                    <field name=\"TEXT\">You entered<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"variables_get\" id=\"367\">\n                    <field name=\"VAR\">counter<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY2\">\n                  <block type=\"text\" id=\"368\">\n                    <field name=\"TEXT\">line(s).<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n\n<\/code><\/pre>\n\n<p>\n  If you enter more than one line (before entering a blank line) you'll see that the counter isn't going up! It's always <code data-lang=\"py3\">1<\/code>!\n<\/p>\n\n<p>\n  That's because every time the <bk class=\"control\">while<\/bk> loop repeats, we're using <bk class=\"var\">set<\/bk> to set the counter back to zero!\n<\/p>\n\n<p>\n  If we start the counter at zero <em>before<\/em> the loop starts, the counter can count up without being reset:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"counter-reset-inside-while-fixed\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"]!Jk.JdmiN?x24OIRiW}\">counter<\/variable>\n    <variable type=\"\" id=\"KNza|?%Bvglxebnw?4f6\">line<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"`]kdzN8\/o@)v!4=H2J]v\" x=\"-1\" y=\"0\">\n    <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">counter<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"$Zpf-o$!uJEMQO_%+v`*\">\n        <field name=\"NUM\">0<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_read_ask\" id=\"t[TV{6?^Rb21k@vXhHl[\">\n        <field name=\"VAR\" id=\"KNza|?%Bvglxebnw?4f6\" variabletype=\"\">line<\/field>\n        <value name=\"ASK_BLOCK\">\n          <block type=\"io_ask_text\" id=\"#-2Z%s5jg8M8rabi!}b8\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"?m2X$X0;+{^s?fcfO$`Q\">\n                <field name=\"TEXT\">Enter line:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"BOOL\">\n          <block type=\"logic_isEmpty\" id=\"K14BL;Od]:iXX]87=6%\/\">\n            <field name=\"OP\">IS_NOT<\/field>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"C?K0|q\/{5NLFtO^(TRb1\">\n                <field name=\"VAR\" id=\"KNza|?%Bvglxebnw?4f6\" variabletype=\"\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO\">\n          <block type=\"variables_incdec\" id=\"RsncHg^Kzig}G]IT:M3a\">\n            <field name=\"OP\">INCREMENT<\/field>\n            <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">counter<\/field>\n            <value name=\"DELTA\">\n              <block type=\"math_number\" id=\"(\/7BY|J^ugVx6CT;=zT0\">\n                <field name=\"NUM\">1<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print3\" id=\"365\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"366\">\n                    <field name=\"TEXT\">You entered<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"variables_get\" id=\"367\">\n                    <field name=\"VAR\">counter<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY2\">\n                  <block type=\"text\" id=\"368\">\n                    <field name=\"TEXT\">line(s).<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Michael's Medals",
              "purpose":"",
              "problem":"bk-py3-michaels-medals-most",
              "type":1,
              "problem_id":2728
            }
          ],
          "title":"Counters"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Here's a program which counts <em>only<\/em> the lines which contain a <code data-lang=\"in\">cat<\/code>.\n<\/p>\n\n<p>\n  The <bk class=\"var\"><bk class=\"inner\">ncats<\/bk><\/bk> (short for number of cats) variable is only incremented if the string <bk class=\"str lit\"><bk class=\"inner\">cat<\/bk><\/bk> is in <bk class=\"var\"><bk class=\"inner\">line<\/bk><\/bk>.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"pancake-counter-in-while2\"><code data-lang=\"blockly\">\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"KNza|?%Bvglxebnw?4f6\">line<\/variable>\n    <variable type=\"\" id=\"]!Jk.JdmiN?x24OIRiW}\">ncats<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"`]kdzN8\/o@)v!4=H2J]v\" x=\"-1\" y=\"0\">\n    <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">ncats<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"$Zpf-o$!uJEMQO_%+v`*\">\n        <field name=\"NUM\">0<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_read_ask\" id=\"t[TV{6?^Rb21k@vXhHl[\">\n        <field name=\"VAR\" id=\"KNza|?%Bvglxebnw?4f6\" variabletype=\"\">line<\/field>\n        <value name=\"ASK_BLOCK\">\n          <block type=\"io_ask_text\" id=\"#-2Z%s5jg8M8rabi!}b8\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"?m2X$X0;+{^s?fcfO$`Q\">\n                <field name=\"TEXT\">Enter line:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"BOOL\">\n          <block type=\"logic_isEmpty\" id=\"K14BL;Od]:iXX]87=6%\/\">\n            <field name=\"OP\">IS_NOT<\/field>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"C?K0|q\/{5NLFtO^(TRb1\">\n                <field name=\"VAR\" id=\"KNza|?%Bvglxebnw?4f6\" variabletype=\"\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        \n        <statement name=\"DO\">\n          <block type=\"decisions_if\" id=\"554\" inline=\"true\">\n            <value name=\"IF0\">\n              <block type=\"logic_isMember\" id=\"517\" inline=\"true\">\n                <field name=\"OP\">IN<\/field>\n                <value name=\"MEMBER\">\n                  <block type=\"text\" id=\"541\">\n                    <field name=\"TEXT\">cat<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"542\">\n                    <field name=\"VAR\">line<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            \n            <statement name=\"DO0\">\n              <block type=\"variables_incdec\" id=\"RsncHg^Kzig}G]IT:M3a\">\n                <field name=\"OP\">INCREMENT<\/field>\n                <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">ncats<\/field>\n                <value name=\"DELTA\">\n                  <block type=\"math_number\" id=\"(\/7BY|J^ugVx6CT;=zT0\">\n                    <field name=\"NUM\">1<\/field>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print2\" id=\"C:x=z^=}C1TXIZ+\/}TgV\">\n                    <value name=\"ANY0\">\n                      <block type=\"variables_get\" id=\"*.DDI+jWYpZx_PD]KXUb\">\n                        <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">ncats<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY1\">\n                      <block type=\"text\" id=\"PO;UIy(Ov())k|P{qOo}\">\n                        <field name=\"TEXT\">cats so far.<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/statement>\n\n          <\/block>\n        <\/statement>\n        <next>\n          <block type=\"io_print2\" id=\"~bwGfS=2(`~!~$W4}f|]\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"ZQwYFs*_a{UW*_!UnHnj\">\n                <field name=\"TEXT\">Total cats:<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"=c`XOvpZ9J5E|PRk|la=\">\n                <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">ncats<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n\n\n<p>\n  <strong>Try it out! And pay attention to when <bk class=\"var\"><bk class=\"inner\">ncats<\/bk><\/bk> increases.<\/strong>\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Counting some things and not others",
              "content_rendered":"<p>\n  Here's a program which counts <em>only<\/em> the lines which contain a <code data-lang=\"in\">cat<\/code>.\n<\/p>\n\n<p>\n  The <bk class=\"var\"><bk class=\"inner\">ncats<\/bk><\/bk> (short for number of cats) variable is only incremented if the string <bk class=\"str lit\"><bk class=\"inner\">cat<\/bk><\/bk> is in <bk class=\"var\"><bk class=\"inner\">line<\/bk><\/bk>.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"pancake-counter-in-while2\"><code data-lang=\"blockly\">\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"KNza|?%Bvglxebnw?4f6\">line<\/variable>\n    <variable type=\"\" id=\"]!Jk.JdmiN?x24OIRiW}\">ncats<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"`]kdzN8\/o@)v!4=H2J]v\" x=\"-1\" y=\"0\">\n    <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">ncats<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"$Zpf-o$!uJEMQO_%+v`*\">\n        <field name=\"NUM\">0<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_read_ask\" id=\"t[TV{6?^Rb21k@vXhHl[\">\n        <field name=\"VAR\" id=\"KNza|?%Bvglxebnw?4f6\" variabletype=\"\">line<\/field>\n        <value name=\"ASK_BLOCK\">\n          <block type=\"io_ask_text\" id=\"#-2Z%s5jg8M8rabi!}b8\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"?m2X$X0;+{^s?fcfO$`Q\">\n                <field name=\"TEXT\">Enter line:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"BOOL\">\n          <block type=\"logic_isEmpty\" id=\"K14BL;Od]:iXX]87=6%\/\">\n            <field name=\"OP\">IS_NOT<\/field>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"C?K0|q\/{5NLFtO^(TRb1\">\n                <field name=\"VAR\" id=\"KNza|?%Bvglxebnw?4f6\" variabletype=\"\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        \n        <statement name=\"DO\">\n          <block type=\"decisions_if\" id=\"554\" inline=\"true\">\n            <value name=\"IF0\">\n              <block type=\"logic_isMember\" id=\"517\" inline=\"true\">\n                <field name=\"OP\">IN<\/field>\n                <value name=\"MEMBER\">\n                  <block type=\"text\" id=\"541\">\n                    <field name=\"TEXT\">cat<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"542\">\n                    <field name=\"VAR\">line<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            \n            <statement name=\"DO0\">\n              <block type=\"variables_incdec\" id=\"RsncHg^Kzig}G]IT:M3a\">\n                <field name=\"OP\">INCREMENT<\/field>\n                <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">ncats<\/field>\n                <value name=\"DELTA\">\n                  <block type=\"math_number\" id=\"(\/7BY|J^ugVx6CT;=zT0\">\n                    <field name=\"NUM\">1<\/field>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print2\" id=\"C:x=z^=}C1TXIZ+\/}TgV\">\n                    <value name=\"ANY0\">\n                      <block type=\"variables_get\" id=\"*.DDI+jWYpZx_PD]KXUb\">\n                        <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">ncats<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY1\">\n                      <block type=\"text\" id=\"PO;UIy(Ov())k|P{qOo}\">\n                        <field name=\"TEXT\">cats so far.<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/statement>\n\n          <\/block>\n        <\/statement>\n        <next>\n          <block type=\"io_print2\" id=\"~bwGfS=2(`~!~$W4}f|]\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"ZQwYFs*_a{UW*_!UnHnj\">\n                <field name=\"TEXT\">Total cats:<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"=c`XOvpZ9J5E|PRk|la=\">\n                <field name=\"VAR\" id=\"]!Jk.JdmiN?x24OIRiW}\" variabletype=\"\">ncats<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n\n\n<p>\n  <strong>Try it out! And pay attention to when <bk class=\"var\"><bk class=\"inner\">ncats<\/bk><\/bk> increases.<\/strong>\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Raise your Glass",
              "purpose":"",
              "problem":"bk-py3-raise-your-glass",
              "type":1,
              "problem_id":2733
            }
          ],
          "title":"Counting with decisions"
        }
      ],
      "title":"Repeating things",
      "label":"aca-blockly-yr56-repeating-things",
      "updated_at":"2018-05-14T06:56:11.900347+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  We can check if two <em>whole<\/em> strings match, using <bk class=\"logic\">=<\/bk>. But, what if we want to know if <em>part<\/em> of a string matches?\n<\/p>\n  \n<p>\n  The <bk class=\"logic\">in<\/bk> block checks if a string <em>contains<\/em> a character:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-in-string-true\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"3\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"4\" type=\"logic_isMember\" inline=\"true\">\n          <field name=\"OP\">IN<\/field>\n          <value name=\"MEMBER\">\n            <block id=\"5\" type=\"text\">\n              <field name=\"TEXT\">h<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"TEXT\">\n            <block id=\"6\" type=\"variables_get\">\n              <field name=\"VAR\">msg<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This prints <code data-lang=\"out\">True<\/code>, because <bk class=\"str lit\"><bk class=\"inner\">h<\/bk><\/bk> is contained in <bk class=\"str lit\"><bk class=\"inner\">hello world<\/bk><\/bk>.\n<\/p>\n\n<\/p>\n  When the string doesn't contain the character, <bk class=\"logic\">in<\/bk> gives <code data-lang=\"txt\">False<\/code>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-in-string-false\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"3\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"4\" type=\"logic_isMember\" inline=\"true\">\n          <field name=\"OP\">IN<\/field>\n          <value name=\"MEMBER\">\n            <block id=\"5\" type=\"text\">\n              <field name=\"TEXT\">x<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"TEXT\">\n            <block id=\"6\" type=\"variables_get\">\n              <field name=\"VAR\">msg<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This prints <code data-lang=\"out\">False<\/code> because there is no <bk class=\"str lit\"><bk class=\"inner\">x<\/bk><\/bk> in <bk class=\"str lit\"><bk class=\"inner\">hello world<\/bk><\/bk>.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Character <em>in<\/em> a string",
              "content_rendered":"<p>\n  We can check if two <em>whole<\/em> strings match, using <bk class=\"logic\">=<\/bk>. But, what if we want to know if <em>part<\/em> of a string matches?\n<\/p>\n  \n<p>\n  The <bk class=\"logic\">in<\/bk> block checks if a string <em>contains<\/em> a character:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-in-string-true\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"3\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"4\" type=\"logic_isMember\" inline=\"true\">\n          <field name=\"OP\">IN<\/field>\n          <value name=\"MEMBER\">\n            <block id=\"5\" type=\"text\">\n              <field name=\"TEXT\">h<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"TEXT\">\n            <block id=\"6\" type=\"variables_get\">\n              <field name=\"VAR\">msg<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This prints <code data-lang=\"out\">True<\/code>, because <bk class=\"str lit\"><bk class=\"inner\">h<\/bk><\/bk> is contained in <bk class=\"str lit\"><bk class=\"inner\">hello world<\/bk><\/bk>.\n<\/p>\n\n<\/p>\n  When the string doesn't contain the character, <bk class=\"logic\">in<\/bk> gives <code data-lang=\"txt\">False<\/code>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-in-string-false\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"15\" y=\"15\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n  <next>\n    <block id=\"3\" type=\"io_print1\" inline=\"true\">\n      <value name=\"ANY0\">\n        <block id=\"4\" type=\"logic_isMember\" inline=\"true\">\n          <field name=\"OP\">IN<\/field>\n          <value name=\"MEMBER\">\n            <block id=\"5\" type=\"text\">\n              <field name=\"TEXT\">x<\/field>\n            <\/block>\n          <\/value>\n          <value name=\"TEXT\">\n            <block id=\"6\" type=\"variables_get\">\n              <field name=\"VAR\">msg<\/field>\n            <\/block>\n          <\/value>\n        <\/block>\n      <\/value>\n    <\/block>\n  <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This prints <code data-lang=\"out\">False<\/code> because there is no <bk class=\"str lit\"><bk class=\"inner\">x<\/bk><\/bk> in <bk class=\"str lit\"><bk class=\"inner\">hello world<\/bk><\/bk>.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  We can use <bk class=\"logic\">in<\/bk> to check for smaller strings (<em>substrings<\/em>) in a string.  \n  A substring can be part of a word or phrase. For example:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-substring-in-string\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"260\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"252\">\n        <field name=\"TEXT\">education is fun<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"266\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"logic_isMember\" id=\"279\" inline=\"true\">\n            <field name=\"OP\">IN<\/field>\n            <value name=\"MEMBER\">\n              <block type=\"text\" id=\"281\">\n                <field name=\"TEXT\">cat<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"287\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This prints <code data-lang=\"out\">True<\/code> because the substring <bk class=\"str lit\"><bk class=\"inner\">cat<\/bk><\/bk> appears in <bk class=\"var\"><bk class=\"inner\">msg<\/bk><\/bk> (in edu<strong style=\"color: red\">cat<\/strong>ion). <strong>Try changing <bk class=\"str lit\"><bk class=\"inner\">cat<\/bk><\/bk> to something else.<\/strong>\n<\/p>\n\n<p>\n  The <bk class=\"logic\">not in<\/bk> block does the opposite to <bk class=\"logic\">in<\/bk>.  It is <code data-lang=\"txt\">True<\/code> when the string does <em>not<\/em> contain the substring:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-x-not-in-string\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"260\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"252\">\n        <field name=\"TEXT\">education is fun<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"266\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"logic_isMember\" id=\"279\" inline=\"true\">\n            <field name=\"OP\">NOT_IN<\/field>\n            <value name=\"MEMBER\">\n              <block type=\"text\" id=\"281\">\n                <field name=\"TEXT\">dog<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"287\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Click on <strong>in<\/strong> to change the block to <strong>not in<\/strong>.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"String <em>in<\/em> a string",
              "content_rendered":"<p>\n  We can use <bk class=\"logic\">in<\/bk> to check for smaller strings (<em>substrings<\/em>) in a string.  \n  A substring can be part of a word or phrase. For example:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-substring-in-string\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"260\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"252\">\n        <field name=\"TEXT\">education is fun<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"266\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"logic_isMember\" id=\"279\" inline=\"true\">\n            <field name=\"OP\">IN<\/field>\n            <value name=\"MEMBER\">\n              <block type=\"text\" id=\"281\">\n                <field name=\"TEXT\">cat<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"287\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This prints <code data-lang=\"out\">True<\/code> because the substring <bk class=\"str lit\"><bk class=\"inner\">cat<\/bk><\/bk> appears in <bk class=\"var\"><bk class=\"inner\">msg<\/bk><\/bk> (in edu<strong style=\"color: red\">cat<\/strong>ion). <strong>Try changing <bk class=\"str lit\"><bk class=\"inner\">cat<\/bk><\/bk> to something else.<\/strong>\n<\/p>\n\n<p>\n  The <bk class=\"logic\">not in<\/bk> block does the opposite to <bk class=\"logic\">in<\/bk>.  It is <code data-lang=\"txt\">True<\/code> when the string does <em>not<\/em> contain the substring:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-x-not-in-string\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"260\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"252\">\n        <field name=\"TEXT\">education is fun<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"266\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"logic_isMember\" id=\"279\" inline=\"true\">\n            <field name=\"OP\">NOT_IN<\/field>\n            <value name=\"MEMBER\">\n              <block type=\"text\" id=\"281\">\n                <field name=\"TEXT\">dog<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"287\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Click on <strong>in<\/strong> to change the block to <strong>not in<\/strong>.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  We can use these new comparisons on strings to make decisions. Let's check if a person's name contains the letter <code data-lang=\"in\">x<\/code>, e.g. <code data-lang=\"in\">Alex<\/code>.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-does-your-name-have-x\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"260\" inline=\"true\" x=\"10\" y=\"10\" movable=\"false\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"291\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"252\">\n            <field name=\"TEXT\">Enter your name: <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"296\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_isMember\" id=\"279\" inline=\"true\">\n            <field name=\"OP\">IN<\/field>\n            <value name=\"MEMBER\">\n              <block type=\"text\" id=\"281\">\n                <field name=\"TEXT\">x<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"287\">\n                <field name=\"VAR\">name<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"266\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"306\">\n                <field name=\"TEXT\">Your name contains an x!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"272\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"307\">\n                <field name=\"TEXT\">No \"x\" in your name.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This code only finds lowercase <code data-lang=\"in\">x<\/code>'s (try <code data-lang=\"in\">Xena<\/code>).  We'll fix this soon!\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Making decisions with strings",
              "content_rendered":"<p>\n  We can use these new comparisons on strings to make decisions. Let's check if a person's name contains the letter <code data-lang=\"in\">x<\/code>, e.g. <code data-lang=\"in\">Alex<\/code>.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-does-your-name-have-x\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"260\" inline=\"true\" x=\"10\" y=\"10\" movable=\"false\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"291\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"252\">\n            <field name=\"TEXT\">Enter your name: <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"296\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_isMember\" id=\"279\" inline=\"true\">\n            <field name=\"OP\">IN<\/field>\n            <value name=\"MEMBER\">\n              <block type=\"text\" id=\"281\">\n                <field name=\"TEXT\">x<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"287\">\n                <field name=\"VAR\">name<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"266\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"306\">\n                <field name=\"TEXT\">Your name contains an x!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"272\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"307\">\n                <field name=\"TEXT\">No \"x\" in your name.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This code only finds lowercase <code data-lang=\"in\">x<\/code>'s (try <code data-lang=\"in\">Xena<\/code>).  We'll fix this soon!\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Forgotten Attachment",
              "purpose":"",
              "problem":"bk-py3-forgot-the-attachment",
              "type":1,
              "problem_id":2666
            }
          ],
          "title":"Investigating strings"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nTo a computer, <bk class=\"str lit\"><bk class=\"inner\">a<\/bk><\/bk> and <bk class=\"str lit\"><bk class=\"inner\">A<\/bk><\/bk> are completely different *characters*, even if we interpret them as the same *letter*, just lower and upper case:\n```eg:aAnotequal;lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables><\/variables>\n  <block type=\"io_print1\" id=\"wRX0m+,9#kH^;FkY8=ab\" x=\"1\" y=\"3\">\n    <value name=\"ANY0\">\n      <block type=\"logic_compare\" id=\"gazt]*[CzXf@5Lze3%?A\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"text\" id=\".=E,sjp9kt;#tdP%xt8B\">\n            <field name=\"TEXT\">a<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"p;LTSI7RF.s}(y|R\/U1V\">\n            <field name=\"TEXT\">A<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n```terminal;eg:aAnotequal;\nFalse\n\n```\n\nSo testing if <bk class=\"str lit\"><bk class=\"inner\">apple<\/bk><\/bk> is the same as <bk class=\"str lit\"><bk class=\"inner\">APPLE<\/bk><\/bk> will also be `False`:\n\n```eg:aAnotequal2;lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables><\/variables>\n  <block type=\"io_print1\" id=\"wRX0m+,9#kH^;FkY8=ab\" x=\"1\" y=\"3\">\n    <value name=\"ANY0\">\n      <block type=\"logic_compare\" id=\"gazt]*[CzXf@5Lze3%?A\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"text\" id=\".=E,sjp9kt;#tdP%xt8B\">\n            <field name=\"TEXT\">apple<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"p;LTSI7RF.s}(y|R\/U1V\">\n            <field name=\"TEXT\">APPLE<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n```terminal;eg:aAnotequal2;\nFalse\n\n```\n\nWe'll have to **modify** the strings so that we compare only lower case letters with lower case letters. (Or, only upper case with upper case!) We've seen how to change the case of a string using `lower` and `upper`:\n\n```eg:changecase;lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"oD!nm+c9F]$aA.ydX)uM\">word<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"k[4o(?qmu*-0%^4R}abg\" x=\"-1\" y=\"4\">\n    <field name=\"VAR\" id=\"oD!nm+c9F]$aA.ydX)uM\" variabletype=\"\">word<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"cMCde3zT7LlF+1ieFQ!i\">\n        <field name=\"TEXT\">Apple<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"U~suUUwEe5T-SZD%BxBz\">\n        <value name=\"ANY0\">\n          <block type=\"text_changeCase\" id=\"cL4aTXb68a4._J1J+s*L\">\n            <field name=\"CASE\">LOWERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"^B4g4E`zR5lJI}idSe|a\">\n                <field name=\"VAR\" id=\"oD!nm+c9F]$aA.ydX)uM\" variabletype=\"\">word<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n```terminal;eg:changecase;\napple\n\n```"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"When an <code data-lang=\"py3\">'apple'<\/code> is not an <code data-lang=\"py3\">'APPLE'<\/code>",
              "content_rendered":"<p>To a computer, <bk class=\"str lit\"><bk class=\"inner\">a<\/bk><\/bk> and <bk class=\"str lit\"><bk class=\"inner\">A<\/bk><\/bk> are completely different <em>characters<\/em>, even if we interpret them as the same <em>letter<\/em>, just lower and upper case:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aAnotequal\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables><\/variables>\n  <block type=\"io_print1\" id=\"wRX0m+,9#kH^;FkY8=ab\" x=\"1\" y=\"3\">\n    <value name=\"ANY0\">\n      <block type=\"logic_compare\" id=\"gazt]*[CzXf@5Lze3%?A\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"text\" id=\".=E,sjp9kt;#tdP%xt8B\">\n            <field name=\"TEXT\">a<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"p;LTSI7RF.s}(y|R\/U1V\">\n            <field name=\"TEXT\">A<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aAnotequal\"><code data-lang=\"py3\"><o>False<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>So testing if <bk class=\"str lit\"><bk class=\"inner\">apple<\/bk><\/bk> is the same as <bk class=\"str lit\"><bk class=\"inner\">APPLE<\/bk><\/bk> will also be <code data-lang=\"py3\">False<\/code>:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"aAnotequal2\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables><\/variables>\n  <block type=\"io_print1\" id=\"wRX0m+,9#kH^;FkY8=ab\" x=\"1\" y=\"3\">\n    <value name=\"ANY0\">\n      <block type=\"logic_compare\" id=\"gazt]*[CzXf@5Lze3%?A\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"text\" id=\".=E,sjp9kt;#tdP%xt8B\">\n            <field name=\"TEXT\">apple<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"p;LTSI7RF.s}(y|R\/U1V\">\n            <field name=\"TEXT\">APPLE<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"aAnotequal2\"><code data-lang=\"py3\"><o>False<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>We'll have to <strong>modify<\/strong> the strings so that we compare only lower case letters with lower case letters. (Or, only upper case with upper case!) We've seen how to change the case of a string using <code data-lang=\"py3\">lower<\/code> and <code data-lang=\"py3\">upper<\/code>:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"changecase\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"oD!nm+c9F]$aA.ydX)uM\">word<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"k[4o(?qmu*-0%^4R}abg\" x=\"-1\" y=\"4\">\n    <field name=\"VAR\" id=\"oD!nm+c9F]$aA.ydX)uM\" variabletype=\"\">word<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"cMCde3zT7LlF+1ieFQ!i\">\n        <field name=\"TEXT\">Apple<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"U~suUUwEe5T-SZD%BxBz\">\n        <value name=\"ANY0\">\n          <block type=\"text_changeCase\" id=\"cL4aTXb68a4._J1J+s*L\">\n            <field name=\"CASE\">LOWERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"^B4g4E`zR5lJI}idSe|a\">\n                <field name=\"VAR\" id=\"oD!nm+c9F]$aA.ydX)uM\" variabletype=\"\">word<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"changecase\"><code data-lang=\"py3\"><o>apple<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nTo compare whether strings are equal *ignoring case*, we have to change the strings. That way, we can compare <bk class=\"str\">lowercase<\/bk> with <bk class=\"str\">lowercase<\/bk> or <bk class=\"str\">UPPERCASE<\/bk> with  <bk class=\"str\">UPPERCASE<\/bk> text.\n\nIn this example, we make new variables: <bk class=\"var\"><bk class=\"inner\">lower_word1<\/bk><\/bk> and <bk class=\"var\"><bk class=\"inner\">lower_word2<\/bk><\/bk>, and then compare them:\n\n```eg:changecasecompare;lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"mk7K?g5xExYc+6vL}N4?\">lower_word1<\/variable>\n    <variable type=\"\" id=\"p*!?-(T;:{umJ:YFfvOi\">lower_word2<\/variable>\n    <variable type=\"\" id=\"EE(_@P+~Tmoct5nMtR`g\">word1<\/variable>\n    <variable type=\"\" id=\"t0Asn6?Tm)\/a(9v,+u=e\">word2<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"uKHf4slpLaEL?uU1:!yU\" x=\"-3\" y=\"-1\">\n    <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">word1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"+Sc3Ot{}3wIT\/d0kXP(%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"]z#C(xKl{spaRgFYC\/:K\">\n            <field name=\"TEXT\">Word 1:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"KGH3F7y0@5{7}a7Cs@7:\">\n        <field name=\"VAR\" id=\"t0Asn6?Tm)\/a(9v,+u=e\" variabletype=\"\">word2<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"k?Mc[(K6|@A,*pTT.A+U\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"Ito;OKA4n|{Bem|@sxe4\">\n                <field name=\"TEXT\">Word 2:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"_d-})9\/7@iHqJ[\/nq[.r\">\n            <field name=\"VAR\" id=\"mk7K?g5xExYc+6vL}N4?\" variabletype=\"\">lower_word1<\/field>\n            <value name=\"VALUE\">\n              <block type=\"text_changeCase\" id=\"_Xxr=;P}.BqMUfVn2E-b\">\n                <field name=\"CASE\">UPPERCASE<\/field>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"!DuxZ@Te6A`Zk3GRz|h`\">\n                    <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">word1<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"variables_set\" id=\"AWshZEb{v%V[Y)|IS@[S\">\n                <field name=\"VAR\" id=\"p*!?-(T;:{umJ:YFfvOi\" variabletype=\"\">lower_word2<\/field>\n                <value name=\"VALUE\">\n                  <block type=\"text_changeCase\" id=\"j*+H.ISI%-Si|9_GY5vc\">\n                    <field name=\"CASE\">UPPERCASE<\/field>\n                    <value name=\"TEXT\">\n                      <block type=\"variables_get\" id=\"YH%QmH)?G,G@_pkXdiXp\">\n                        <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">word1<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"decisions_if\" id=\"iljrvCEjTPBRY,D*h)od\">\n                    <value name=\"IF0\">\n                      <block type=\"logic_compare\" id=\"R=34\/C|{9K5oz$aCL5U(\">\n                        <field name=\"OP\">EQ<\/field>\n                        <value name=\"A\">\n                          <block type=\"variables_get\" id=\"dAhrI0@Z*pr?hez;e#*?\">\n                            <field name=\"VAR\" id=\"mk7K?g5xExYc+6vL}N4?\" variabletype=\"\">lower_word1<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"B\">\n                          <block type=\"variables_get\" id=\"1|(VlPwZBI$8N|UYR^=5\">\n                            <field name=\"VAR\" id=\"p*!?-(T;:{umJ:YFfvOi\" variabletype=\"\">lower_word2<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/value>\n                    <statement name=\"DO0\">\n                      <block type=\"io_print1\" id=\"m[p*B^Y!DS56G6R^,o([\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"N43*R,G|H4RUS$Zd=i1u\">\n                            <field name=\"TEXT\">The words are the same, ignoring case.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/statement>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\n\n\n```terminal;eg:changecasecompare;\nWord 1: @@@banana\nWord 2: @@@BANANA\nThe words are the same, ignoring case.\n\n```\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Comparing strings but ignoring case",
              "content_rendered":"<p>To compare whether strings are equal <em>ignoring case<\/em>, we have to change the strings. That way, we can compare <bk class=\"str\">lowercase<\/bk> with <bk class=\"str\">lowercase<\/bk> or <bk class=\"str\">UPPERCASE<\/bk> with  <bk class=\"str\">UPPERCASE<\/bk> text.<\/p>\n<p>In this example, we make new variables: <bk class=\"var\"><bk class=\"inner\">lower_word1<\/bk><\/bk> and <bk class=\"var\"><bk class=\"inner\">lower_word2<\/bk><\/bk>, and then compare them:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"changecasecompare\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"mk7K?g5xExYc+6vL}N4?\">lower_word1<\/variable>\n    <variable type=\"\" id=\"p*!?-(T;:{umJ:YFfvOi\">lower_word2<\/variable>\n    <variable type=\"\" id=\"EE(_@P+~Tmoct5nMtR`g\">word1<\/variable>\n    <variable type=\"\" id=\"t0Asn6?Tm)\/a(9v,+u=e\">word2<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"uKHf4slpLaEL?uU1:!yU\" x=\"-3\" y=\"-1\">\n    <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">word1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"+Sc3Ot{}3wIT\/d0kXP(%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"]z#C(xKl{spaRgFYC\/:K\">\n            <field name=\"TEXT\">Word 1:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"KGH3F7y0@5{7}a7Cs@7:\">\n        <field name=\"VAR\" id=\"t0Asn6?Tm)\/a(9v,+u=e\" variabletype=\"\">word2<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"k?Mc[(K6|@A,*pTT.A+U\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"Ito;OKA4n|{Bem|@sxe4\">\n                <field name=\"TEXT\">Word 2:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"_d-})9\/7@iHqJ[\/nq[.r\">\n            <field name=\"VAR\" id=\"mk7K?g5xExYc+6vL}N4?\" variabletype=\"\">lower_word1<\/field>\n            <value name=\"VALUE\">\n              <block type=\"text_changeCase\" id=\"_Xxr=;P}.BqMUfVn2E-b\">\n                <field name=\"CASE\">UPPERCASE<\/field>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"!DuxZ@Te6A`Zk3GRz|h`\">\n                    <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">word1<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"variables_set\" id=\"AWshZEb{v%V[Y)|IS@[S\">\n                <field name=\"VAR\" id=\"p*!?-(T;:{umJ:YFfvOi\" variabletype=\"\">lower_word2<\/field>\n                <value name=\"VALUE\">\n                  <block type=\"text_changeCase\" id=\"j*+H.ISI%-Si|9_GY5vc\">\n                    <field name=\"CASE\">UPPERCASE<\/field>\n                    <value name=\"TEXT\">\n                      <block type=\"variables_get\" id=\"YH%QmH)?G,G@_pkXdiXp\">\n                        <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">word1<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"decisions_if\" id=\"iljrvCEjTPBRY,D*h)od\">\n                    <value name=\"IF0\">\n                      <block type=\"logic_compare\" id=\"R=34\/C|{9K5oz$aCL5U(\">\n                        <field name=\"OP\">EQ<\/field>\n                        <value name=\"A\">\n                          <block type=\"variables_get\" id=\"dAhrI0@Z*pr?hez;e#*?\">\n                            <field name=\"VAR\" id=\"mk7K?g5xExYc+6vL}N4?\" variabletype=\"\">lower_word1<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"B\">\n                          <block type=\"variables_get\" id=\"1|(VlPwZBI$8N|UYR^=5\">\n                            <field name=\"VAR\" id=\"p*!?-(T;:{umJ:YFfvOi\" variabletype=\"\">lower_word2<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/value>\n                    <statement name=\"DO0\">\n                      <block type=\"io_print1\" id=\"m[p*B^Y!DS56G6R^,o([\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"N43*R,G|H4RUS$Zd=i1u\">\n                            <field name=\"TEXT\">The words are the same, ignoring case.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/statement>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"changecasecompare\"><code data-lang=\"py3\"><o>Word 1: <\/o><i>banana<\/i>\n<o>Word 2: <\/o><i>BANANA<\/i>\n<o>The words are the same, ignoring case.<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nTo compare strings, we could also just compare the <bk class=\"str\">lowercase<\/bk> versions of the two strings:\n```eg:changecasecompareoneline;lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"EE(_@P+~Tmoct5nMtR`g\">word1<\/variable>\n    <variable type=\"\" id=\"t0Asn6?Tm)\/a(9v,+u=e\">word2<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"uKHf4slpLaEL?uU1:!yU\" x=\"-3\" y=\"-1\">\n    <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">word1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"+Sc3Ot{}3wIT\/d0kXP(%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"]z#C(xKl{spaRgFYC\/:K\">\n            <field name=\"TEXT\">Word 1:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"KGH3F7y0@5{7}a7Cs@7:\">\n        <field name=\"VAR\" id=\"t0Asn6?Tm)\/a(9v,+u=e\" variabletype=\"\">word2<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"k?Mc[(K6|@A,*pTT.A+U\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"Ito;OKA4n|{Bem|@sxe4\">\n                <field name=\"TEXT\">Word 2:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"decisions_if\" id=\"iljrvCEjTPBRY,D*h)od\">\n            <value name=\"IF0\">\n              <block type=\"logic_compare\" id=\"R=34\/C|{9K5oz$aCL5U(\">\n                <field name=\"OP\">EQ<\/field>\n                <value name=\"A\">\n                  <block type=\"text_changeCase\" id=\"_Xxr=;P}.BqMUfVn2E-b\">\n                    <field name=\"CASE\">UPPERCASE<\/field>\n                    <value name=\"TEXT\">\n                      <block type=\"variables_get\" id=\"!DuxZ@Te6A`Zk3GRz|h`\">\n                        <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">word1<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"text_changeCase\" id=\"j*+H.ISI%-Si|9_GY5vc\">\n                    <field name=\"CASE\">UPPERCASE<\/field>\n                    <value name=\"TEXT\">\n                      <block type=\"variables_get\" id=\"YH%QmH)?G,G@_pkXdiXp\">\n                        <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">word1<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <statement name=\"DO0\">\n              <block type=\"io_print1\" id=\"m[p*B^Y!DS56G6R^,o([\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"N43*R,G|H4RUS$Zd=i1u\">\n                    <field name=\"TEXT\">The words are the same, ignoring case.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\n```terminal;eg:changecasecompareoneline\nWord 1: @@@abc\nWord 2: @@@ABC\nThe words are the same, ignoring case.\n\n```"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Comparing strings easily",
              "content_rendered":"<p>To compare strings, we could also just compare the <bk class=\"str\">lowercase<\/bk> versions of the two strings:<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"changecasecompareoneline\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"EE(_@P+~Tmoct5nMtR`g\">word1<\/variable>\n    <variable type=\"\" id=\"t0Asn6?Tm)\/a(9v,+u=e\">word2<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"uKHf4slpLaEL?uU1:!yU\" x=\"-3\" y=\"-1\">\n    <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">word1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"+Sc3Ot{}3wIT\/d0kXP(%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"]z#C(xKl{spaRgFYC\/:K\">\n            <field name=\"TEXT\">Word 1:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"KGH3F7y0@5{7}a7Cs@7:\">\n        <field name=\"VAR\" id=\"t0Asn6?Tm)\/a(9v,+u=e\" variabletype=\"\">word2<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"k?Mc[(K6|@A,*pTT.A+U\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"Ito;OKA4n|{Bem|@sxe4\">\n                <field name=\"TEXT\">Word 2:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"decisions_if\" id=\"iljrvCEjTPBRY,D*h)od\">\n            <value name=\"IF0\">\n              <block type=\"logic_compare\" id=\"R=34\/C|{9K5oz$aCL5U(\">\n                <field name=\"OP\">EQ<\/field>\n                <value name=\"A\">\n                  <block type=\"text_changeCase\" id=\"_Xxr=;P}.BqMUfVn2E-b\">\n                    <field name=\"CASE\">UPPERCASE<\/field>\n                    <value name=\"TEXT\">\n                      <block type=\"variables_get\" id=\"!DuxZ@Te6A`Zk3GRz|h`\">\n                        <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">word1<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"text_changeCase\" id=\"j*+H.ISI%-Si|9_GY5vc\">\n                    <field name=\"CASE\">UPPERCASE<\/field>\n                    <value name=\"TEXT\">\n                      <block type=\"variables_get\" id=\"YH%QmH)?G,G@_pkXdiXp\">\n                        <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">word1<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <statement name=\"DO0\">\n              <block type=\"io_print1\" id=\"m[p*B^Y!DS56G6R^,o([\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"N43*R,G|H4RUS$Zd=i1u\">\n                    <field name=\"TEXT\">The words are the same, ignoring case.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"changecasecompareoneline\"><code data-lang=\"py3\"><o>Word 1: <\/o><i>abc<\/i>\n<o>Word 2: <\/o><i>ABC<\/i>\n<o>The words are the same, ignoring case.<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nHere's an example to show how this can work in a problem. Let's write a program to ask the user their favourite movie. \n\nIf it's the same as yours (The LEGO Movie) let's say <code data-lang=\"out\">Me too!<\/code> Otherwise, let's say <code data-lang=\"out\">That is a good movie.<\/code> and tell them what our favourite is.\n\nWe want to accept answers like <code data-lang=\"in\">The LEGO Movie<\/code>, <code data-lang=\"in\">the lego movie<\/code> or even <code data-lang=\"in\">the Lego MOVIE<\/code>.\n\n```eg:legoeg;lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"mk7K?g5xExYc+6vL}N4?\">lower_word1<\/variable>\n    <variable type=\"\" id=\"p*!?-(T;:{umJ:YFfvOi\">lower_word2<\/variable>\n    <variable type=\"\" id=\"EE(_@P+~Tmoct5nMtR`g\">movie<\/variable>\n    <variable type=\"\" id=\"t0Asn6?Tm)\/a(9v,+u=e\">word2<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"uKHf4slpLaEL?uU1:!yU\" x=\"-3\" y=\"-1\">\n    <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">movie<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"+Sc3Ot{}3wIT\/d0kXP(%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"]z#C(xKl{spaRgFYC\/:K\">\n            <field name=\"TEXT\">Favourite movie:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"O1%Czk\/V7wfi[nD(B=vp\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\")#Vj@wx.,6u~kfu6G9HH\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"text_changeCase\" id=\"ZMF(p82T)~){jBClD4Ag\">\n                <field name=\"CASE\">LOWERCASE<\/field>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"OwNn,)b)ya$,wm})hWkN\">\n                    <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">movie<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"Q8+05kMF_sMI@6W{J.,#\">\n                <field name=\"TEXT\">the lego movie<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"+]!p^R$A9F4M*(^}d+}@\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"2BLc}~h@08\/I]|wX`Lwk\">\n                <field name=\"TEXT\">Me too!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"W.uYKL`K!`wt{\/d[UX4O\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"C(g~O)E!BbvuH25PH$QX\">\n                <field name=\"TEXT\">That is a good movie.<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"BQP$6nARoNRRIY,eV=Ga\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"Ze@$3h$2aT8SM\/bOgQyA\">\n                    <field name=\"TEXT\">My favourite movie is The LEGO Movie<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\n```terminal;eg:legoeg;\nFavourite movie? @@@the Lego movie\nMe too!\n\n```\n\nTry out the example with a few different examples!\n\n> ## Comparing cases\n> Because we're using <bk class=\"str\">lowercase<\/bk> on the string the user types in, we have to make sure what we compare it to is also <bk class=\"str\">lowercase<\/bk>!\n> \n> We could do something like this: \n> ```norun;lang:blockly;\n> <xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n>   <variables>\n>     <variable type=\"\" id=\"mk7K?g5xExYc+6vL}N4?\">lower_word1<\/variable>\n>     <variable type=\"\" id=\"p*!?-(T;:{umJ:YFfvOi\">lower_word2<\/variable>\n>     <variable type=\"\" id=\"EE(_@P+~Tmoct5nMtR`g\">movie<\/variable>\n>     <variable type=\"\" id=\"t0Asn6?Tm)\/a(9v,+u=e\">word2<\/variable>\n>   <\/variables>\n>   <block type=\"logic_compare\" id=\")#Vj@wx.,6u~kfu6G9HH\" x=\"4\" y=\"5\">\n>     <field name=\"OP\">EQ<\/field>\n>     <value name=\"A\">\n>       <block type=\"text_changeCase\" id=\"ZMF(p82T)~){jBClD4Ag\">\n>         <field name=\"CASE\">LOWERCASE<\/field>\n>         <value name=\"TEXT\">\n>           <block type=\"variables_get\" id=\"OwNn,)b)ya$,wm})hWkN\">\n>             <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">movie<\/field>\n>           <\/block>\n>         <\/value>\n>       <\/block>\n>     <\/value>\n>     <value name=\"B\">\n>       <block type=\"text_changeCase\" id=\"J@TtXrG2K$dv@E?wjj+m\">\n>         <field name=\"CASE\">LOWERCASE<\/field>\n>         <value name=\"TEXT\">\n>           <block type=\"text\" id=\"Q8+05kMF_sMI@6W{J.,#\">\n>             <field name=\"TEXT\">the lego movie<\/field>\n>           <\/block>\n>         <\/value>\n>       <\/block>\n>     <\/value>\n>   <\/block>\n> <\/xml>\n> ```\n> That way both sides are definitely <bk class=\"str\">lowercase<\/bk>!\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"A case study...",
              "content_rendered":"<p>Here's an example to show how this can work in a problem. Let's write a program to ask the user their favourite movie.<\/p>\n<p>If it's the same as yours (The LEGO Movie) let's say <code data-lang=\"out\">Me too!<\/code> Otherwise, let's say <code data-lang=\"out\">That is a good movie.<\/code> and tell them what our favourite is.<\/p>\n<p>We want to accept answers like <code data-lang=\"in\">The LEGO Movie<\/code>, <code data-lang=\"in\">the lego movie<\/code> or even <code data-lang=\"in\">the Lego MOVIE<\/code>.<\/p>\n<pre style=\"\" class=\"js-editor-blockly\" data-eg-id=\"legoeg\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"mk7K?g5xExYc+6vL}N4?\">lower_word1<\/variable>\n    <variable type=\"\" id=\"p*!?-(T;:{umJ:YFfvOi\">lower_word2<\/variable>\n    <variable type=\"\" id=\"EE(_@P+~Tmoct5nMtR`g\">movie<\/variable>\n    <variable type=\"\" id=\"t0Asn6?Tm)\/a(9v,+u=e\">word2<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"uKHf4slpLaEL?uU1:!yU\" x=\"-3\" y=\"-1\">\n    <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">movie<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"+Sc3Ot{}3wIT\/d0kXP(%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"]z#C(xKl{spaRgFYC\/:K\">\n            <field name=\"TEXT\">Favourite movie:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"O1%Czk\/V7wfi[nD(B=vp\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\")#Vj@wx.,6u~kfu6G9HH\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"text_changeCase\" id=\"ZMF(p82T)~){jBClD4Ag\">\n                <field name=\"CASE\">LOWERCASE<\/field>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"OwNn,)b)ya$,wm})hWkN\">\n                    <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">movie<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"Q8+05kMF_sMI@6W{J.,#\">\n                <field name=\"TEXT\">the lego movie<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"+]!p^R$A9F4M*(^}d+}@\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"2BLc}~h@08\/I]|wX`Lwk\">\n                <field name=\"TEXT\">Me too!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"W.uYKL`K!`wt{\/d[UX4O\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"C(g~O)E!BbvuH25PH$QX\">\n                <field name=\"TEXT\">That is a good movie.<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"BQP$6nARoNRRIY,eV=Ga\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"Ze@$3h$2aT8SM\/bOgQyA\">\n                    <field name=\"TEXT\">My favourite movie is The LEGO Movie<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<pre style=\"\" class=\"js-terminal\" data-eg-id=\"legoeg\"><code data-lang=\"py3\"><o>Favourite movie? <\/o><i>the Lego movie<\/i>\n<o>Me too!<\/o>\n<o><\/o>\n<o><\/o><\/code><\/pre>\n<p>Try out the example with a few different examples!<\/p>\n<aside class=\"info\">\n<h2>Comparing cases<\/h2>\n<p>Because we're using <bk class=\"str\">lowercase<\/bk> on the string the user types in, we have to make sure what we compare it to is also <bk class=\"str\">lowercase<\/bk>!<\/p>\n<p>We could do something like this:<\/p>\n<pre style=\"\" data-eg-id=\"aca-blockly-yr56-strings-1-3-0\" class=\"js-editor-blockly\" data-runnable=\"false\"><code data-workspace-lang=\"py3\" data-lang=\"blockly\"><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"mk7K?g5xExYc+6vL}N4?\">lower_word1<\/variable>\n    <variable type=\"\" id=\"p*!?-(T;:{umJ:YFfvOi\">lower_word2<\/variable>\n    <variable type=\"\" id=\"EE(_@P+~Tmoct5nMtR`g\">movie<\/variable>\n    <variable type=\"\" id=\"t0Asn6?Tm)\/a(9v,+u=e\">word2<\/variable>\n  <\/variables>\n  <block type=\"logic_compare\" id=\")#Vj@wx.,6u~kfu6G9HH\" x=\"4\" y=\"5\">\n    <field name=\"OP\">EQ<\/field>\n    <value name=\"A\">\n      <block type=\"text_changeCase\" id=\"ZMF(p82T)~){jBClD4Ag\">\n        <field name=\"CASE\">LOWERCASE<\/field>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"OwNn,)b)ya$,wm})hWkN\">\n            <field name=\"VAR\" id=\"EE(_@P+~Tmoct5nMtR`g\" variabletype=\"\">movie<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"B\">\n      <block type=\"text_changeCase\" id=\"J@TtXrG2K$dv@E?wjj+m\">\n        <field name=\"CASE\">LOWERCASE<\/field>\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"Q8+05kMF_sMI@6W{J.,#\">\n            <field name=\"TEXT\">the lego movie<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n<p>That way both sides are definitely <bk class=\"str\">lowercase<\/bk>!<\/p>\n<\/aside>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"bk-py3-need-a-hug",
              "type":1,
              "problem_id":3775
            }
          ],
          "title":"Capitalisation and comparisons"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  We can get a character from a string using the <em>indexing<\/em> block\n  This gets the first character:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-index-first-character2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"7\" inline=\"true\" x=\"10\" y=\"10\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"87\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"69\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_subscript\" id=\"63\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"74\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"77\">\n                <field name=\"NUM\">0<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>In programming, we start the index from 0 rather than from 1.<\/strong>\n<\/p>\n\n<p>\n  So the <em>first<\/em> character in a string is at index <code data-lang=\"py3\">0<\/code>, the <em>second<\/em> is at index <code data-lang=\"py3\">1<\/code>, the <em>third<\/em> is at index <code data-lang=\"py3\">2<\/code>, and so on.\n<\/p>\n\n<p>This means <code data-lang=\"str\">hello world<\/code> is indexed like this:<\/p>\n\n<table style=\"margin: auto\">\n  <tr><td>0<\/td><td>1<\/td><td>2<\/td><td>3<\/td><td>4<\/td><td>5<\/td><td>6<\/td><td>7<\/td><td>8<\/td><td>9<\/td><td>10<\/td><\/tr>\n  <tr><td><code data-lang=\"str\">h<\/code><\/td><td><code data-lang=\"str\">e<\/code><\/td><td><code data-lang=\"str\">l<\/code><\/td><td><code data-lang=\"str\">l<\/code><\/td><td><code data-lang=\"str\">o<\/code><\/td><td><code data-lang=\"str\"> <\/code><\/td><td><code data-lang=\"str\">w<\/code><\/td><td><code data-lang=\"str\">o<\/code><\/td><td><code data-lang=\"str\">r<\/code><\/td><td><code data-lang=\"str\">l<\/code><\/td><td><code data-lang=\"str\">d<\/code><\/td><\/tr>\n<\/table>\n\n<p>and so, if we want to access the <code data-lang=\"str\">w<\/code> of <code data-lang=\"str\">world<\/code>, we use:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-index2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"7\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"87\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"69\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_subscript\" id=\"63\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"74\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"77\">\n                <field name=\"NUM\">6<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Getting an individual character",
              "content_rendered":"<p>\n  We can get a character from a string using the <em>indexing<\/em> block\n  This gets the first character:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-index-first-character2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"7\" inline=\"true\" x=\"10\" y=\"10\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"87\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"69\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_subscript\" id=\"63\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"74\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"77\">\n                <field name=\"NUM\">0<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>In programming, we start the index from 0 rather than from 1.<\/strong>\n<\/p>\n\n<p>\n  So the <em>first<\/em> character in a string is at index <code data-lang=\"py3\">0<\/code>, the <em>second<\/em> is at index <code data-lang=\"py3\">1<\/code>, the <em>third<\/em> is at index <code data-lang=\"py3\">2<\/code>, and so on.\n<\/p>\n\n<p>This means <code data-lang=\"str\">hello world<\/code> is indexed like this:<\/p>\n\n<table style=\"margin: auto\">\n  <tr><td>0<\/td><td>1<\/td><td>2<\/td><td>3<\/td><td>4<\/td><td>5<\/td><td>6<\/td><td>7<\/td><td>8<\/td><td>9<\/td><td>10<\/td><\/tr>\n  <tr><td><code data-lang=\"str\">h<\/code><\/td><td><code data-lang=\"str\">e<\/code><\/td><td><code data-lang=\"str\">l<\/code><\/td><td><code data-lang=\"str\">l<\/code><\/td><td><code data-lang=\"str\">o<\/code><\/td><td><code data-lang=\"str\"> <\/code><\/td><td><code data-lang=\"str\">w<\/code><\/td><td><code data-lang=\"str\">o<\/code><\/td><td><code data-lang=\"str\">r<\/code><\/td><td><code data-lang=\"str\">l<\/code><\/td><td><code data-lang=\"str\">d<\/code><\/td><\/tr>\n<\/table>\n\n<p>and so, if we want to access the <code data-lang=\"str\">w<\/code> of <code data-lang=\"str\">world<\/code>, we use:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-index2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"7\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"87\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"69\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_subscript\" id=\"63\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"74\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"77\">\n                <field name=\"NUM\">6<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\nJust as we can count *up* to get each letter from the beginning of the word, we can count **down** to get letters from the **end** of a word.\n\n<p>This means <code data-lang=\"str\">hello world<\/code> is indexed in either of these two ways:<\/p>\n\n<table style=\"margin: auto\">\n  <tr><td>0<\/td><td>1<\/td><td>2<\/td><td>3<\/td><td>4<\/td><td>5<\/td><td>6<\/td><td>7<\/td><td>8<\/td><td>9<\/td><td>10<\/td><\/tr>\n  <tr><td>-11<\/td><td>-10<\/td><td>-9<\/td><td>-8<\/td><td>-7<\/td><td>-6<\/td><td>-5<\/td><td>-4<\/td><td>-3<\/td><td>-2<\/td><td>-1<\/td><\/tr>\n  <tr><td><code data-lang=\"str\">h<\/code><\/td><td><code data-lang=\"str\">e<\/code><\/td><td><code data-lang=\"str\">l<\/code><\/td><td><code data-lang=\"str\">l<\/code><\/td><td><code data-lang=\"str\">o<\/code><\/td><td><code data-lang=\"str\"> <\/code><\/td><td><code data-lang=\"str\">w<\/code><\/td><td><code data-lang=\"str\">o<\/code><\/td><td><code data-lang=\"str\">r<\/code><\/td><td><code data-lang=\"str\">l<\/code><\/td><td><code data-lang=\"str\">d<\/code><\/td><\/tr>\n<\/table>\n\n<p>and so, if we want to access the <code data-lang=\"str\">d<\/code> of <code data-lang=\"str\">world<\/code>, we use:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-neg-index2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"7\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"87\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"69\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_subscript\" id=\"63\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"74\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"77\">\n                <field name=\"NUM\">-1<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Character counting from the end",
              "content_rendered":"<p>Just as we can count <em>up<\/em> to get each letter from the beginning of the word, we can count <strong>down<\/strong> to get letters from the <strong>end<\/strong> of a word.<\/p>\n<p>This means <code data-lang=\"str\">hello world<\/code> is indexed in either of these two ways:<\/p>\n<table style=\"margin: auto\">\n  <tr><td>0<\/td><td>1<\/td><td>2<\/td><td>3<\/td><td>4<\/td><td>5<\/td><td>6<\/td><td>7<\/td><td>8<\/td><td>9<\/td><td>10<\/td><\/tr>\n  <tr><td>-11<\/td><td>-10<\/td><td>-9<\/td><td>-8<\/td><td>-7<\/td><td>-6<\/td><td>-5<\/td><td>-4<\/td><td>-3<\/td><td>-2<\/td><td>-1<\/td><\/tr>\n  <tr><td><code data-lang=\"str\">h<\/code><\/td><td><code data-lang=\"str\">e<\/code><\/td><td><code data-lang=\"str\">l<\/code><\/td><td><code data-lang=\"str\">l<\/code><\/td><td><code data-lang=\"str\">o<\/code><\/td><td><code data-lang=\"str\"> <\/code><\/td><td><code data-lang=\"str\">w<\/code><\/td><td><code data-lang=\"str\">o<\/code><\/td><td><code data-lang=\"str\">r<\/code><\/td><td><code data-lang=\"str\">l<\/code><\/td><td><code data-lang=\"str\">d<\/code><\/td><\/tr>\n<\/table>\n<p>and so, if we want to access the <code data-lang=\"str\">d<\/code> of <code data-lang=\"str\">world<\/code>, we use:<\/p>\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-neg-index2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"7\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"87\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"69\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_subscript\" id=\"63\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"74\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"77\">\n                <field name=\"NUM\">-1<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  If you try to get an index past the end of the string, Blockly will give an <code data-lang=\"err\">IndexError<\/code> error and your program will crash.\n<\/p>\n\n<p>\n  Make sure you only get an index in the string that exists. Here is an example of what happens when you access an index beyond the end of the string:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-out-of-range-string-indexing2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"7\" inline=\"true\" x=\"10\" y=\"10\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"87\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"69\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_subscript\" id=\"63\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"74\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"77\">\n                <field name=\"NUM\">9<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"88\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text_subscript\" id=\"89\" inline=\"true\">\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"90\">\n                    <field name=\"VAR\">msg<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"INDEX\">\n                  <block type=\"math_number\" id=\"91\">\n                    <field name=\"NUM\">10<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"92\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text_subscript\" id=\"93\" inline=\"true\">\n                    <value name=\"VALUE\">\n                      <block type=\"variables_get\" id=\"94\">\n                        <field name=\"VAR\">msg<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"INDEX\">\n                      <block type=\"math_number\" id=\"95\">\n                        <field name=\"NUM\">11<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n\n<\/code><\/pre>\n\n\n<p>\n  The string <code data-lang=\"str\">hello world<\/code> only has 11 characters \u2014 indexed <code data-lang=\"py3\">0<\/code> to <code data-lang=\"py3\">10<\/code>.\n<\/p>\n\n<p>\n  We try to get index <code data-lang=\"py3\">11<\/code>, which doesn't exist. This means the last <bk class=\"io\">print<\/bk> block fails and we get an error.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Characters that don't exist",
              "content_rendered":"<p>\n  If you try to get an index past the end of the string, Blockly will give an <code data-lang=\"err\">IndexError<\/code> error and your program will crash.\n<\/p>\n\n<p>\n  Make sure you only get an index in the string that exists. Here is an example of what happens when you access an index beyond the end of the string:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-out-of-range-string-indexing2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"7\" inline=\"true\" x=\"10\" y=\"10\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"87\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"69\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_subscript\" id=\"63\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"74\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"77\">\n                <field name=\"NUM\">9<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"88\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text_subscript\" id=\"89\" inline=\"true\">\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"90\">\n                    <field name=\"VAR\">msg<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"INDEX\">\n                  <block type=\"math_number\" id=\"91\">\n                    <field name=\"NUM\">10<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"92\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text_subscript\" id=\"93\" inline=\"true\">\n                    <value name=\"VALUE\">\n                      <block type=\"variables_get\" id=\"94\">\n                        <field name=\"VAR\">msg<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"INDEX\">\n                      <block type=\"math_number\" id=\"95\">\n                        <field name=\"NUM\">11<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n\n<\/code><\/pre>\n\n\n<p>\n  The string <code data-lang=\"str\">hello world<\/code> only has 11 characters \u2014 indexed <code data-lang=\"py3\">0<\/code> to <code data-lang=\"py3\">10<\/code>.\n<\/p>\n\n<p>\n  We try to get index <code data-lang=\"py3\">11<\/code>, which doesn't exist. This means the last <bk class=\"io\">print<\/bk> block fails and we get an error.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Problem: Double or Nothing",
              "purpose":"",
              "problem":"bk-py3-first-two-letters",
              "type":1,
              "problem_id":2669
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"bk-py3-email-address",
              "type":1,
              "problem_id":2756
            }
          ],
          "title":"Characters in a string"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  We can also check the capitalisation of a string with <bk class=\"logic\">is <bk class=\"inner\">lowercase<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-lowercase\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"342\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"339\">\n        <field name=\"TEXT\">a lowercase string<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"441\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"logic_isCase\" id=\"435\" inline=\"true\">\n            <field name=\"OP\">ISLOWER<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"452\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  It can test for lower, UPPER and Title case, just like the conversion block.  Try changing the <bk class=\"var\"><bk class=\"inner\">msg<\/bk><\/bk> string and the case.\n<\/p> \n\n<p>\n  We can use these to check that a password contains lower and uppercase letters.  Try setting <bk class=\"var\"><bk class=\"inner\">msg<\/bk><\/bk> to <bk class=\"str lit\"><bk class=\"inner\">MiXeD CaSe<\/bk><\/bk>.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Checking the case of a string",
              "content_rendered":"<p>\n  We can also check the capitalisation of a string with <bk class=\"logic\">is <bk class=\"inner\">lowercase<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-lowercase\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"342\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"339\">\n        <field name=\"TEXT\">a lowercase string<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"441\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"logic_isCase\" id=\"435\" inline=\"true\">\n            <field name=\"OP\">ISLOWER<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"452\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  It can test for lower, UPPER and Title case, just like the conversion block.  Try changing the <bk class=\"var\"><bk class=\"inner\">msg<\/bk><\/bk> string and the case.\n<\/p> \n\n<p>\n  We can use these to check that a password contains lower and uppercase letters.  Try setting <bk class=\"var\"><bk class=\"inner\">msg<\/bk><\/bk> to <bk class=\"str lit\"><bk class=\"inner\">MiXeD CaSe<\/bk><\/bk>.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  We can check the case in an <bk class=\"control\">if<\/bk> block to make decisions. To check if a password contains lower and uppercase letters, we can use:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-uppercase\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"7\" inline=\"true\" x=\"10\" y=\"10\" movable=\"false\">\n    <field name=\"VAR\">password<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"3\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"4\">\n            <field name=\"TEXT\">Enter password: <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_elif_else\" id=\"90\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_isCase\" id=\"97\" inline=\"true\">\n            <field name=\"OP\">ISUPPER<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"102\">\n                <field name=\"VAR\">password<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"110\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"120\">\n                <field name=\"TEXT\">Password must contain lowercase letters!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_isCase\" id=\"103\" inline=\"true\">\n            <field name=\"OP\">ISLOWER<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"104\">\n                <field name=\"VAR\">password<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"121\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"122\">\n                <field name=\"TEXT\">Password must contain uppercase letters!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"123\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"124\">\n                <field name=\"TEXT\">Password contains lower and uppercase letters!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>For converting and checking capitalisation, the punctuation, digits, and spaces are ignored.<\/strong>\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Making decisions about case",
              "content_rendered":"<p>\n  We can check the case in an <bk class=\"control\">if<\/bk> block to make decisions. To check if a password contains lower and uppercase letters, we can use:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-uppercase\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"7\" inline=\"true\" x=\"10\" y=\"10\" movable=\"false\">\n    <field name=\"VAR\">password<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"3\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"4\">\n            <field name=\"TEXT\">Enter password: <\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_elif_else\" id=\"90\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_isCase\" id=\"97\" inline=\"true\">\n            <field name=\"OP\">ISUPPER<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"102\">\n                <field name=\"VAR\">password<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"110\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"120\">\n                <field name=\"TEXT\">Password must contain lowercase letters!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_isCase\" id=\"103\" inline=\"true\">\n            <field name=\"OP\">ISLOWER<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"104\">\n                <field name=\"VAR\">password<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"121\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"122\">\n                <field name=\"TEXT\">Password must contain uppercase letters!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"123\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"124\">\n                <field name=\"TEXT\">Password contains lower and uppercase letters!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>For converting and checking capitalisation, the punctuation, digits, and spaces are ignored.<\/strong>\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: CAPS LOCK Fixer",
              "purpose":"",
              "problem":"bk-py3-capital-cities",
              "type":1,
              "problem_id":2667
            }
          ],
          "title":"Checking string case"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  If we want to get the first 3 characters of a string (a <em>substring<\/em>), we can index them one at a time, and then join them:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-index-concat-substrings\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"4\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">sentence<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"9\">\n        <field name=\"TEXT\">The cat is asleep.<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"11\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_concat3\" id=\"27\" inline=\"true\">\n            <value name=\"TEXT0\">\n              <block type=\"text_subscript\" id=\"14\" inline=\"true\">\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"34\">\n                    <field name=\"VAR\">sentence<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"INDEX\">\n                  <block type=\"math_number\" id=\"36\">\n                    <field name=\"NUM\">0<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT1\">\n              <block type=\"text_subscript\" id=\"37\" inline=\"true\">\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"38\">\n                    <field name=\"VAR\">sentence<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"INDEX\">\n                  <block type=\"math_number\" id=\"39\">\n                    <field name=\"NUM\">1<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT2\">\n              <block type=\"text_subscript\" id=\"40\" inline=\"true\">\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"41\">\n                    <field name=\"VAR\">sentence<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"INDEX\">\n                  <block type=\"math_number\" id=\"42\">\n                    <field name=\"NUM\">2<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  But there must be a better way?  There is \u2014 it's called a <em>slice<\/em>.\n<\/p>\n\n<p>\n  A <em>slice<\/em> takes two numbers that say which characters to get:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-substring-short-example\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"4\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">sentence<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"9\">\n        <field name=\"TEXT\">The cat is asleep.<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"47\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_slice\" id=\"45\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"34\">\n                <field name=\"VAR\">sentence<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"START\">\n              <block type=\"math_number\" id=\"36\">\n                <field name=\"NUM\">0<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"END\">\n              <block type=\"math_number\" id=\"42\">\n                <field name=\"NUM\">3<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>A slice gets characters from the first index <em>up to but not including<\/em> the second index.<\/strong>\n<\/p>\n\n<p>\n  So, <bk class=\"str\">slice [ <bk class=\"math\"><bk class=\"inner\">0<\/bk><\/bk> : <bk class=\"math\"><bk class=\"inner\">3<\/bk><\/bk> ]<\/bk><\/code> gets from <bk class=\"str\">char [ <bk class=\"math\"><bk class=\"inner\">0<\/bk><\/bk> ]<\/bk> to <bk class=\"str\">char [ <bk class=\"math\"><bk class=\"inner\">2<\/bk><\/bk> ]<\/bk>.\n<\/p>\n\n<p>\n  <strong>It doesn't include <bk class=\"str\">char [ <bk class=\"math\"><bk class=\"inner\">3<\/bk><\/bk> ]<\/bk>.<\/strong>  Here's another example:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-extra-slice-examples\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"5\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">greeting<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"10\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"12\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_slice\" id=\"17\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"29\">\n                <field name=\"VAR\">greeting<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"START\">\n              <block type=\"math_number\" id=\"31\">\n                <field name=\"NUM\">0<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"END\">\n              <block type=\"math_number\" id=\"33\">\n                <field name=\"NUM\">5<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"34\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text_slice\" id=\"35\" inline=\"true\">\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"36\">\n                    <field name=\"VAR\">greeting<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"START\">\n                  <block type=\"math_number\" id=\"37\">\n                    <field name=\"NUM\">6<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"END\">\n                  <block type=\"math_number\" id=\"38\">\n                    <field name=\"NUM\">11<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Slicing a string",
              "content_rendered":"<p>\n  If we want to get the first 3 characters of a string (a <em>substring<\/em>), we can index them one at a time, and then join them:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-index-concat-substrings\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"4\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">sentence<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"9\">\n        <field name=\"TEXT\">The cat is asleep.<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"11\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_concat3\" id=\"27\" inline=\"true\">\n            <value name=\"TEXT0\">\n              <block type=\"text_subscript\" id=\"14\" inline=\"true\">\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"34\">\n                    <field name=\"VAR\">sentence<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"INDEX\">\n                  <block type=\"math_number\" id=\"36\">\n                    <field name=\"NUM\">0<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT1\">\n              <block type=\"text_subscript\" id=\"37\" inline=\"true\">\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"38\">\n                    <field name=\"VAR\">sentence<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"INDEX\">\n                  <block type=\"math_number\" id=\"39\">\n                    <field name=\"NUM\">1<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT2\">\n              <block type=\"text_subscript\" id=\"40\" inline=\"true\">\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"41\">\n                    <field name=\"VAR\">sentence<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"INDEX\">\n                  <block type=\"math_number\" id=\"42\">\n                    <field name=\"NUM\">2<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  But there must be a better way?  There is \u2014 it's called a <em>slice<\/em>.\n<\/p>\n\n<p>\n  A <em>slice<\/em> takes two numbers that say which characters to get:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-substring-short-example\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"4\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">sentence<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"9\">\n        <field name=\"TEXT\">The cat is asleep.<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"47\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_slice\" id=\"45\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"34\">\n                <field name=\"VAR\">sentence<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"START\">\n              <block type=\"math_number\" id=\"36\">\n                <field name=\"NUM\">0<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"END\">\n              <block type=\"math_number\" id=\"42\">\n                <field name=\"NUM\">3<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>A slice gets characters from the first index <em>up to but not including<\/em> the second index.<\/strong>\n<\/p>\n\n<p>\n  So, <bk class=\"str\">slice [ <bk class=\"math\"><bk class=\"inner\">0<\/bk><\/bk> : <bk class=\"math\"><bk class=\"inner\">3<\/bk><\/bk> ]<\/bk><\/code> gets from <bk class=\"str\">char [ <bk class=\"math\"><bk class=\"inner\">0<\/bk><\/bk> ]<\/bk> to <bk class=\"str\">char [ <bk class=\"math\"><bk class=\"inner\">2<\/bk><\/bk> ]<\/bk>.\n<\/p>\n\n<p>\n  <strong>It doesn't include <bk class=\"str\">char [ <bk class=\"math\"><bk class=\"inner\">3<\/bk><\/bk> ]<\/bk>.<\/strong>  Here's another example:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-extra-slice-examples\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"5\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">greeting<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"10\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"12\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_slice\" id=\"17\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"29\">\n                <field name=\"VAR\">greeting<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"START\">\n              <block type=\"math_number\" id=\"31\">\n                <field name=\"NUM\">0<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"END\">\n              <block type=\"math_number\" id=\"33\">\n                <field name=\"NUM\">5<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"34\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text_slice\" id=\"35\" inline=\"true\">\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"36\">\n                    <field name=\"VAR\">greeting<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"START\">\n                  <block type=\"math_number\" id=\"37\">\n                    <field name=\"NUM\">6<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"END\">\n                  <block type=\"math_number\" id=\"38\">\n                    <field name=\"NUM\">11<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  If we want to slice to <em>the end of the string<\/em>, we need its length:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-slice-end-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"4\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">greet<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"9\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"11\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_slice\" id=\"14\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"21\">\n                <field name=\"VAR\">greet<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"START\">\n              <block type=\"math_number\" id=\"23\">\n                <field name=\"NUM\">6<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"END\">\n              <block type=\"text_length\" id=\"29\" inline=\"true\">\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"36\">\n                    <field name=\"VAR\">greet<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>Blockly has a simpler block for slicing to the end of the string:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-slice-eg2\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"4\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">greet<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"9\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"13\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_slice_to_end\" id=\"19\" inline=\"true\">\n            <value name=\"START\">\n              <block type=\"math_number\" id=\"28\">\n                <field name=\"NUM\">6<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"26\">\n                <field name=\"VAR\">greet<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  What happens if we try to get a slice that doesn't exist?\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"string-slice-eg3\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"4\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">greet<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"9\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"11\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_slice\" id=\"14\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"32\">\n                <field name=\"VAR\">greet<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"START\">\n              <block type=\"math_number\" id=\"34\">\n                <field name=\"NUM\">20<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"END\">\n              <block type=\"math_number\" id=\"38\">\n                <field name=\"NUM\">30<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The greeting is shorter than 20 characters so <bk class=\"str\">slice [ <bk class=\"math\"><bk class=\"inner\">20<\/bk><\/bk> : <bk class=\"math\"><bk class=\"inner\">30<\/bk><\/bk> ]<\/bk> doesn't exist.  Instead we get an empty string and it prints nothing.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Slicing to the end of a string",
              "content_rendered":"<p>\n  If we want to slice to <em>the end of the string<\/em>, we need its length:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-string-slice-end-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"4\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">greet<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"9\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"11\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_slice\" id=\"14\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"21\">\n                <field name=\"VAR\">greet<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"START\">\n              <block type=\"math_number\" id=\"23\">\n                <field name=\"NUM\">6<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"END\">\n              <block type=\"text_length\" id=\"29\" inline=\"true\">\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"36\">\n                    <field name=\"VAR\">greet<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>Blockly has a simpler block for slicing to the end of the string:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-slice-eg2\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"4\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">greet<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"9\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"13\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_slice_to_end\" id=\"19\" inline=\"true\">\n            <value name=\"START\">\n              <block type=\"math_number\" id=\"28\">\n                <field name=\"NUM\">6<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"26\">\n                <field name=\"VAR\">greet<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  What happens if we try to get a slice that doesn't exist?\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"string-slice-eg3\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"4\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">greet<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"9\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"11\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_slice\" id=\"14\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"32\">\n                <field name=\"VAR\">greet<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"START\">\n              <block type=\"math_number\" id=\"34\">\n                <field name=\"NUM\">20<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"END\">\n              <block type=\"math_number\" id=\"38\">\n                <field name=\"NUM\">30<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The greeting is shorter than 20 characters so <bk class=\"str\">slice [ <bk class=\"math\"><bk class=\"inner\">20<\/bk><\/bk> : <bk class=\"math\"><bk class=\"inner\">30<\/bk><\/bk> ]<\/bk> doesn't exist.  Instead we get an empty string and it prints nothing.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Last week, we saw how to check if a string starts with a substring.\n<\/p>\n\n<p>\n  We can use it to implement Google's voice search on Android:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"startwith-endswith-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"345\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">speech<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"340\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"341\">\n            <field name=\"TEXT\">Speech:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"434\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_stringEnds\" id=\"302\" inline=\"true\">\n            <field name=\"OP\">STARTSWITH<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"352\">\n                <field name=\"VAR\">speech<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"FIX\">\n              <block type=\"text\" id=\"370\">\n                <field name=\"TEXT\">Ok Google<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"412\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"422\">\n                <field name=\"TEXT\">Searching now...<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"435\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"436\">\n                <field name=\"TEXT\">Ignored your instruction!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  By clicking on <bk class=\"logic\"><bk class=\"inner\">starts<\/bk><\/bk> you can change the block to <bk class=\"logic\"><bk class=\"inner\">ends<\/bk> with<\/bk>, to compare the end of the string with another string.\n<\/p>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Matching the beginning or end of a string",
              "content_rendered":"<p>\n  Last week, we saw how to check if a string starts with a substring.\n<\/p>\n\n<p>\n  We can use it to implement Google's voice search on Android:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"startwith-endswith-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"345\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">speech<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"340\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"341\">\n            <field name=\"TEXT\">Speech:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"434\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_stringEnds\" id=\"302\" inline=\"true\">\n            <field name=\"OP\">STARTSWITH<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"352\">\n                <field name=\"VAR\">speech<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"FIX\">\n              <block type=\"text\" id=\"370\">\n                <field name=\"TEXT\">Ok Google<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"412\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"422\">\n                <field name=\"TEXT\">Searching now...<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"435\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"436\">\n                <field name=\"TEXT\">Ignored your instruction!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  By clicking on <bk class=\"logic\"><bk class=\"inner\">starts<\/bk><\/bk> you can change the block to <bk class=\"logic\"><bk class=\"inner\">ends<\/bk> with<\/bk>, to compare the end of the string with another string.\n<\/p>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question",
              "purpose":"",
              "problem":"bk-py3-unprefixed",
              "type":1,
              "problem_id":2759
            }
          ],
          "title":"Slices and substrings"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>Congratulations, you have just completed this module!<\/p>\n\n<p>In this module we learned a lot about strings and we covered the following topics:<\/p>\n<ul>\n<li>Finding if a character or string is inside another string;<\/li>\n<li>checking if strings are upper or lowercase;<\/li>\n<li>converting strings to all-caps or lowercase letters;<\/li>\n<li>finding how long a string is;<\/li>\n<li>replacing parts of a string;<\/li>\n<li>picking out characters from a string by number.<\/li>\n<\/ul>\n\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Congratulations!",
              "content_rendered":"<p>Congratulations, you have just completed this module!<\/p>\n\n<p>In this module we learned a lot about strings and we covered the following topics:<\/p>\n<ul>\n<li>Finding if a character or string is inside another string;<\/li>\n<li>checking if strings are upper or lowercase;<\/li>\n<li>converting strings to all-caps or lowercase letters;<\/li>\n<li>finding how long a string is;<\/li>\n<li>replacing parts of a string;<\/li>\n<li>picking out characters from a string by number.<\/li>\n<\/ul>\n\n",
              "purpose":"",
              "type":0
            }
          ],
          "title":"Congratulations!"
        }
      ],
      "title":"Investigating strings",
      "label":"aca-blockly-yr56-strings",
      "updated_at":"2018-05-14T06:56:33.870220+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  We often want to change a string to uppercase (capital letters) or lowercase. Blockly has a block for this (under <strong>Strings<\/strong>):\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-str-modification-lower\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"342\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"339\">\n        <field name=\"TEXT\">I know my ABC<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"348\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_changeCase\" id=\"329\" inline=\"true\">\n            <field name=\"CASE\">LOWERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"353\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"str\">lowercase<\/bk> block converts any capitals in <bk class=\"var\"><bk class=\"inner\">msg<\/bk><\/bk> to lowercase.  The other characters are unchanged. <strong>Try it yourself!<\/strong>\n<\/p>\n\n<aside class=\"info\">\n<h2>lowercase, UPPERCASE and Titlecase<\/h2>\n<p>\n  This block allows you to convert to <bk class=\"str\">lowercase<\/bk>, <bk class=\"str\">UPPERCASE<\/bk> or <bk class=\"str\">Titlecase<\/bk>. Click <strong>lowercase<\/strong> to choose from a list.\n<\/p>\n\n<p>\n  <em>Titlecase<\/em> is what we use for most names in English\u00a0\u2014\u00a0uppercase first letter in each word, and lowercase for every other letter.\n<\/p>\n<\/aside>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Converting to lower and UPPER case",
              "content_rendered":"<p>\n  We often want to change a string to uppercase (capital letters) or lowercase. Blockly has a block for this (under <strong>Strings<\/strong>):\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-str-modification-lower\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"342\" inline=\"true\" x=\"15\" y=\"15\" movable=\"false\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"339\">\n        <field name=\"TEXT\">I know my ABC<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"348\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_changeCase\" id=\"329\" inline=\"true\">\n            <field name=\"CASE\">LOWERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"353\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"str\">lowercase<\/bk> block converts any capitals in <bk class=\"var\"><bk class=\"inner\">msg<\/bk><\/bk> to lowercase.  The other characters are unchanged. <strong>Try it yourself!<\/strong>\n<\/p>\n\n<aside class=\"info\">\n<h2>lowercase, UPPERCASE and Titlecase<\/h2>\n<p>\n  This block allows you to convert to <bk class=\"str\">lowercase<\/bk>, <bk class=\"str\">UPPERCASE<\/bk> or <bk class=\"str\">Titlecase<\/bk>. Click <strong>lowercase<\/strong> to choose from a list.\n<\/p>\n\n<p>\n  <em>Titlecase<\/em> is what we use for most names in English\u00a0\u2014\u00a0uppercase first letter in each word, and lowercase for every other letter.\n<\/p>\n<\/aside>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Changing the case of a string never modifies the original string:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-hello-world\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"26\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"4\">\n        <field name=\"TEXT\">I know my ABC<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"1\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_changeCase\" id=\"23\" inline=\"true\">\n            <field name=\"CASE\">UPPERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"34\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"35\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"variables_get\" id=\"37\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>Instead, it creates a new converted string.<\/strong>\n<\/p>\n\n<p>\n  To modify the original, you need to store it back in the old variable:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-uppercase-var\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"26\" inline=\"true\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"4\">\n        <field name=\"TEXT\">I know my ABC<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"42\" inline=\"true\">\n        <field name=\"VAR\">msg<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_changeCase\" id=\"23\" inline=\"true\">\n            <field name=\"CASE\">UPPERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"34\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"35\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"variables_get\" id=\"37\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Saving the modified string",
              "content_rendered":"<p>\n  Changing the case of a string never modifies the original string:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-hello-world\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"26\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"4\">\n        <field name=\"TEXT\">I know my ABC<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"1\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_changeCase\" id=\"23\" inline=\"true\">\n            <field name=\"CASE\">UPPERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"34\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"35\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"variables_get\" id=\"37\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>Instead, it creates a new converted string.<\/strong>\n<\/p>\n\n<p>\n  To modify the original, you need to store it back in the old variable:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-uppercase-var\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"26\" inline=\"true\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"4\">\n        <field name=\"TEXT\">I know my ABC<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"42\" inline=\"true\">\n        <field name=\"VAR\">msg<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_changeCase\" id=\"23\" inline=\"true\">\n            <field name=\"CASE\">UPPERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"34\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"35\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"variables_get\" id=\"37\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Let's try all the capitalisation options:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-grok-if\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"21\" inline=\"true\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"31\">\n        <field name=\"TEXT\">I know my ABC<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print2\" id=\"39\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"49\">\n            <field name=\"TEXT\">Original:<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"57\">\n            <field name=\"VAR\">msg<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print2\" id=\"58\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"59\">\n                <field name=\"TEXT\">Lower:<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"text_changeCase\" id=\"70\" inline=\"true\">\n                <field name=\"CASE\">LOWERCASE<\/field>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"60\">\n                    <field name=\"VAR\">msg<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print2\" id=\"71\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"72\">\n                    <field name=\"TEXT\">Upper:<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"text_changeCase\" id=\"73\" inline=\"true\">\n                    <field name=\"CASE\">UPPERCASE<\/field>\n                    <value name=\"TEXT\">\n                      <block type=\"variables_get\" id=\"74\">\n                        <field name=\"VAR\">msg<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print2\" id=\"75\" inline=\"true\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"76\">\n                        <field name=\"TEXT\">Title:<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY1\">\n                      <block type=\"text_changeCase\" id=\"77\" inline=\"true\">\n                        <field name=\"CASE\">TITLECASE<\/field>\n                        <value name=\"TEXT\">\n                          <block type=\"variables_get\" id=\"78\">\n                            <field name=\"VAR\">msg<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"All the cases!",
              "content_rendered":"<p>\n  Let's try all the capitalisation options:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-grok-if\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"21\" inline=\"true\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"31\">\n        <field name=\"TEXT\">I know my ABC<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print2\" id=\"39\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"49\">\n            <field name=\"TEXT\">Original:<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"57\">\n            <field name=\"VAR\">msg<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print2\" id=\"58\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"59\">\n                <field name=\"TEXT\">Lower:<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"text_changeCase\" id=\"70\" inline=\"true\">\n                <field name=\"CASE\">LOWERCASE<\/field>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"60\">\n                    <field name=\"VAR\">msg<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print2\" id=\"71\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"72\">\n                    <field name=\"TEXT\">Upper:<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"text_changeCase\" id=\"73\" inline=\"true\">\n                    <field name=\"CASE\">UPPERCASE<\/field>\n                    <value name=\"TEXT\">\n                      <block type=\"variables_get\" id=\"74\">\n                        <field name=\"VAR\">msg<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print2\" id=\"75\" inline=\"true\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"76\">\n                        <field name=\"TEXT\">Title:<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY1\">\n                      <block type=\"text_changeCase\" id=\"77\" inline=\"true\">\n                        <field name=\"CASE\">TITLECASE<\/field>\n                        <value name=\"TEXT\">\n                          <block type=\"variables_get\" id=\"78\">\n                            <field name=\"VAR\">msg<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Shout it from the rooftops",
              "purpose":"",
              "problem":"bk-py3-shout-it",
              "type":1,
              "problem_id":3724
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Breaking the fourth wall",
              "purpose":"",
              "problem":"bk-py3-breaking-fourth-wall",
              "type":1,
              "problem_id":3725
            }
          ],
          "title":"Uppercase and lowercase"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  The <bk class=\"math\">length<\/bk> block counts the characters in a string:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"string-length0\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print1\" inline=\"true\" x=\"30\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text_length\" inline=\"true\">\n        <value name=\"VALUE\">\n          <block type=\"text\">\n            <field name=\"TEXT\">Hello World!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  It <strong>counts all the characters<\/strong>, including the 5 letters in <code data-lang=\"str\">Hello<\/code>, the space, the 5 letters in <code data-lang=\"str\">World<\/code>, and the exclamation mark.\n<\/p>\n\n<p>\n  We can use it to count the number of letters in the <bk class=\"var\"><bk class=\"inner\">alphabet<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"string-length1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">alphabet<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" >\n        <field name=\"TEXT\">abcdefghijklmnopqrstuvwxyz<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_length\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\">\n                <field name=\"VAR\">alphabet<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n<\/code><\/pre>"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"How long is a string?",
              "content_rendered":"<p>\n  The <bk class=\"math\">length<\/bk> block counts the characters in a string:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"string-length0\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print1\" inline=\"true\" x=\"30\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text_length\" inline=\"true\">\n        <value name=\"VALUE\">\n          <block type=\"text\">\n            <field name=\"TEXT\">Hello World!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  It <strong>counts all the characters<\/strong>, including the 5 letters in <code data-lang=\"str\">Hello<\/code>, the space, the 5 letters in <code data-lang=\"str\">World<\/code>, and the exclamation mark.\n<\/p>\n\n<p>\n  We can use it to count the number of letters in the <bk class=\"var\"><bk class=\"inner\">alphabet<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"string-length1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">alphabet<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" >\n        <field name=\"TEXT\">abcdefghijklmnopqrstuvwxyz<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_length\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\">\n                <field name=\"VAR\">alphabet<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n<\/code><\/pre>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Twittier: Can I Tweet that?",
              "purpose":"",
              "problem":"bk-py3-tweet-length",
              "type":1,
              "problem_id":3739
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: How good is your vocabulary?",
              "purpose":"",
              "problem":"bk-py3-vocab-length",
              "type":1,
              "problem_id":3753
            }
          ],
          "title":"String length"
        },
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  You can replace <em>part<\/em> of a string (<em>substring<\/em>) with another string using the <bk class=\"str\">replace<\/bk> block.  This works for single characters:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-str-replace\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"137\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"134\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"143\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_replace\" id=\"153\" inline=\"true\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"163\">\n                <field name=\"TEXT\">l<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"164\">\n                <field name=\"TEXT\">X<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"169\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>Every <code data-lang=\"str\">l<\/code> is replaced by an <code data-lang=\"str\">X<\/code>.<\/strong>\n  It also works for longer substrings:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-str-replace2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"137\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"134\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"143\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_replace\" id=\"153\" inline=\"true\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"163\">\n                <field name=\"TEXT\">hello<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"164\">\n                <field name=\"TEXT\">howdy<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"169\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Replacing parts of a string",
              "content_rendered":"<p>\n  You can replace <em>part<\/em> of a string (<em>substring<\/em>) with another string using the <bk class=\"str\">replace<\/bk> block.  This works for single characters:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-str-replace\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"137\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"134\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"143\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_replace\" id=\"153\" inline=\"true\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"163\">\n                <field name=\"TEXT\">l<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"164\">\n                <field name=\"TEXT\">X<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"169\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>Every <code data-lang=\"str\">l<\/code> is replaced by an <code data-lang=\"str\">X<\/code>.<\/strong>\n  It also works for longer substrings:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-str-replace2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"137\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"134\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"143\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_replace\" id=\"153\" inline=\"true\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"163\">\n                <field name=\"TEXT\">hello<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"164\">\n                <field name=\"TEXT\">howdy<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"169\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"<p>\n  Just like case conversion, <bk class=\"str\">replace<\/bk> doesn't change the original string.  If you store the new version back in the variable, you can replace multiple substrings:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-str-replace3\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"137\" inline=\"true\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"134\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"174\" inline=\"true\">\n        <field name=\"VAR\">msg<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_replace\" id=\"153\" inline=\"true\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"163\">\n                <field name=\"TEXT\">hello<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"164\">\n                <field name=\"TEXT\">howdy<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"169\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"180\" inline=\"true\">\n            <field name=\"VAR\">msg<\/field>\n            <value name=\"VALUE\">\n              <block type=\"text_replace\" id=\"181\" inline=\"true\">\n                <value name=\"FROM\">\n                  <block type=\"text\" id=\"182\">\n                    <field name=\"TEXT\">o<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TO\">\n                  <block type=\"text\" id=\"183\">\n                    <field name=\"TEXT\">X<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"184\">\n                    <field name=\"VAR\">msg<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"143\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"variables_get\" id=\"179\">\n                    <field name=\"VAR\">msg<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Here, <code data-lang=\"str\">hello<\/code> is replaced with <code data-lang=\"str\">howdy<\/code>, and <em>then<\/em> <code data-lang=\"str\">o<\/code> is replaced with <code data-lang=\"str\">X<\/code>.\n  This means the <code data-lang=\"str\">o<\/code> in <code data-lang=\"str\">howdy<\/code> also gets replaced, giving:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"blockly-str-replace3\"><code data-lang=\"py3\">\n<o>hXwdy wXrld\n<\/o>\n<\/code><\/pre>\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Replacing multiple substrings",
              "content_rendered":"<p>\n  Just like case conversion, <bk class=\"str\">replace<\/bk> doesn't change the original string.  If you store the new version back in the variable, you can replace multiple substrings:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"blockly-str-replace3\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"137\" inline=\"true\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"134\">\n        <field name=\"TEXT\">hello world<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"174\" inline=\"true\">\n        <field name=\"VAR\">msg<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_replace\" id=\"153\" inline=\"true\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"163\">\n                <field name=\"TEXT\">hello<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"164\">\n                <field name=\"TEXT\">howdy<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"169\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"180\" inline=\"true\">\n            <field name=\"VAR\">msg<\/field>\n            <value name=\"VALUE\">\n              <block type=\"text_replace\" id=\"181\" inline=\"true\">\n                <value name=\"FROM\">\n                  <block type=\"text\" id=\"182\">\n                    <field name=\"TEXT\">o<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TO\">\n                  <block type=\"text\" id=\"183\">\n                    <field name=\"TEXT\">X<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"184\">\n                    <field name=\"VAR\">msg<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"143\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"variables_get\" id=\"179\">\n                    <field name=\"VAR\">msg<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Here, <code data-lang=\"str\">hello<\/code> is replaced with <code data-lang=\"str\">howdy<\/code>, and <em>then<\/em> <code data-lang=\"str\">o<\/code> is replaced with <code data-lang=\"str\">X<\/code>.\n  This means the <code data-lang=\"str\">o<\/code> in <code data-lang=\"str\">howdy<\/code> also gets replaced, giving:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"blockly-str-replace3\"><code data-lang=\"py3\">\n<o>hXwdy wXrld\n<\/o>\n<\/code><\/pre>\n",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Telegram",
              "purpose":"",
              "problem":"bk-py3-telegram",
              "type":1,
              "problem_id":2668
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Trackwork",
              "purpose":"",
              "problem":"bk-py3-trackwork",
              "type":1,
              "problem_id":3745
            }
          ],
          "title":"Parts of strings"
        }
      ],
      "title":"Strings: working with words",
      "label":"aca-blockly-yr56-module3-string-intro",
      "updated_at":"2018-05-14T06:56:33.563521+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nLet's put what we've learnt about strings and decisions into practice making some more complex games.\n\nWe're going to add in the concept of decisions and string manipulations. These will help us build up to more complex games as we keep adding more skills to our toolbox.\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Making simple games",
              "content_rendered":"<p>Let's put what we've learnt about strings and decisions into practice making some more complex games.<\/p>\n<p>We're going to add in the concept of decisions and string manipulations. These will help us build up to more complex games as we keep adding more skills to our toolbox.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Taboo!",
              "purpose":"",
              "problem":"bk-py3-taboo-simple",
              "type":1,
              "problem_id":3762
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Word Chain!",
              "purpose":"",
              "problem":"bk-py3-word-chain-simple-no-loop",
              "type":1,
              "problem_id":3763
            }
          ],
          "title":"More word games"
        }
      ],
      "title":"Project 2",
      "label":"aca-blockly-yr56-project2",
      "updated_at":"2018-05-14T06:56:37.110134+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nLet's put what we've learnt so far into practice! In each of the Project modules in this course, we're going to write word games.\n\nIn this project, we'll start off with [Mad Libs](https:\/\/en.wikipedia.org\/wiki\/Mad_Libs).\nMad Libs is a game where one player asks the other for answers that fit a specific category, and then those answers are substituted in for blanks in a story.\n\nWe'll work up to more and more complex games in each project, and each project will start off small and build to something bigger."
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Making simple games",
              "content_rendered":"<p>Let's put what we've learnt so far into practice! In each of the Project modules in this course, we're going to write word games.<\/p>\n<p>In this project, we'll start off with <a target=\"_blank\" href=\"https:\/\/en.wikipedia.org\/wiki\/Mad_Libs\">Mad Libs<\/a>.\nMad Libs is a game where one player asks the other for answers that fit a specific category, and then those answers are substituted in for blanks in a story.<\/p>\n<p>We'll work up to more and more complex games in each project, and each project will start off small and build to something bigger.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Blank is the new blank",
              "purpose":"",
              "problem":"bk-py3-x-is-the-new-y",
              "type":1,
              "problem_id":3746
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Mad Libs 1: Letters from camp!",
              "purpose":"",
              "problem":"bk-py3-mad-libs-0",
              "type":1,
              "problem_id":3747
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Mad Libs 2: Bork Bork Bork!",
              "purpose":"",
              "problem":"bk-py3-mad-libs-1",
              "type":1,
              "problem_id":3748
            }
          ],
          "title":"Making simple games"
        }
      ],
      "title":"Project 1",
      "label":"aca-blockly-yr56-project1",
      "updated_at":"2018-05-14T06:56:11.653397+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nNow that we've learnt how to repeat things, we can make our games much more detailed and fun to play!\n\nLet's revisit the Taboo and Word Chain questions, and turn them into fully-fledged games."
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Making simple games",
              "content_rendered":"<p>Now that we've learnt how to repeat things, we can make our games much more detailed and fun to play!<\/p>\n<p>Let's revisit the Taboo and Word Chain questions, and turn them into fully-fledged games.<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Do you want to play questions?",
              "purpose":"",
              "problem":"bk-py3-question-game",
              "type":1,
              "problem_id":3766
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Taboo Part Two!",
              "purpose":"",
              "problem":"bk-py3-taboo-loops",
              "type":1,
              "problem_id":3767
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Word chain!",
              "purpose":"",
              "problem":"bk-py3-word-chain-loop",
              "type":1,
              "problem_id":3768
            }
          ],
          "title":"More word games"
        }
      ],
      "title":"Project 3",
      "label":"aca-blockly-yr56-project3",
      "updated_at":"2018-05-14T06:56:12.255476+00:00",
      "concepts":[

      ]
    },
    {
      "content":[
        {
          "slides":[
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\nWe've now learnt how to make lots of quite complex word games! Nice work!\n\nFor our last project, we're going to put everything we've learnt together to make a chatterbot, which is a robot that can reply to your messages in a seemingly intelligent way.\n\nWe'll see if we can make our chatbot smart enough that it might just be able to trick a human into thinking it was alive. \n\nThe question of whether or not you be able to tell if you were texting your friend or a computer is trickier than you might think!\n"
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Making simple games",
              "content_rendered":"<p>We've now learnt how to make lots of quite complex word games! Nice work!<\/p>\n<p>For our last project, we're going to put everything we've learnt together to make a chatterbot, which is a robot that can reply to your messages in a seemingly intelligent way.<\/p>\n<p>We'll see if we can make our chatbot smart enough that it might just be able to trick a human into thinking it was alive.<\/p>\n<p>The question of whether or not you be able to tell if you were texting your friend or a computer is trickier than you might think!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Capt Featherbot 1",
              "purpose":"",
              "problem":"bk-py3-chatbot-capt-featherbot-1",
              "type":1,
              "problem_id":3765
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Captain Featherbot and the Sea",
              "purpose":"",
              "problem":"bk-py3-chatbot-capt-featherbot-2",
              "type":1,
              "problem_id":3770
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Captain Featherbot, are you listening?",
              "purpose":"",
              "problem":"bk-py3-chatbot-capt-featherbot-3",
              "type":1,
              "problem_id":3771
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Captain Featherbot!",
              "purpose":"",
              "problem":"bk-py3-chatbot-capt-featherbot-4",
              "type":1,
              "problem_id":3772
            },
            {
              "feedback_style":0,
              "rows":[
                {
                  "left":"#markdown\n\n**Arrrrr! I be impressed!**\n\nExcellent work on finishing the project, and the course! You've learnt how to solve problems with code, and make a cheeky chatbot as well!\n\nWe hope you enjoyed this course, and can't wait to see what swashbuckling adventures await you! "
                }
              ],
              "layout":0,
              "notes_rendered":"",
              "title":"Congratulations, me hearties!",
              "content_rendered":"<p><strong>Arrrrr! I be impressed!<\/strong><\/p>\n<p>Excellent work on finishing the project, and the course! You've learnt how to solve problems with code, and make a cheeky chatbot as well!<\/p>\n<p>We hope you enjoyed this course, and can't wait to see what swashbuckling adventures await you!<\/p>",
              "purpose":"",
              "type":0
            },
            {
              "feedback_style":0,
              "layout":0,
              "title":"Question: Chatbot Playground!",
              "purpose":"",
              "problem":"bk-py3-chatbot-playground",
              "type":1,
              "problem_id":3774
            }
          ],
          "title":"More word games"
        }
      ],
      "title":"Project 4: Putting it all together",
      "label":"aca-blockly-yr56-project4",
      "updated_at":"2018-05-14T06:56:36.843949+00:00",
      "concepts":[

      ]
    }
  ],
  "problems":[
    {
      "language":0,
      "title":"Pull a happy face",
      "notes":"#markdown\nOnce you know string multiplication this question is much easier!  But it can be fiddly to get the string exactly right, since you need to multiply the underscore <bk class=\"str lit\"><bk class=\"inner\">_<\/bk><\/bk> and add the <bk class=\"str lit\"><bk class=\"inner\">^<\/bk><\/bk> to the front and end of the string.\n\nWe start off by reading in how happy to pull our face.\n  We'll need to use the blue <bk class=\"math\">ask<\/bk> block to get a number, not a string.\n\n```eg:smiley-input;lang:blockly;norun;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Pe(5pO(RT{n;@%mSd)zt\">width<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"q6bu9]0$c+l_sk(avT@%\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"Pe(5pO(RT{n;@%mSd)zt\" variabletype=\"\">width<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"uui~nHx\/kSSrKgBj;uUQ\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"`2Fsf{xEEnv@\/{{d`W)z\">\n            <field name=\"TEXT\"> How happy?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n\n```\n\nFrom there, we multiply just the <bk class=\"str lit\"><bk class=\"inner\">_<\/bk><\/bk> by the stored `width`, to make the long `____` mouth.\n\n```eg:smiley-str-mult;lang:blockly;norun;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Pe(5pO(RT{n;@%mSd)zt\">width<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"q6bu9]0$c+l_sk(avT@%\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"Pe(5pO(RT{n;@%mSd)zt\" variabletype=\"\">width<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"uui~nHx\/kSSrKgBj;uUQ\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"`2Fsf{xEEnv@\/{{d`W)z\">\n            <field name=\"TEXT\"> How happy?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"HzQ|C28[W\/RPvBJXDIw0\">\n        <value name=\"ANY0\">\n          <block type=\"text_mult\" id=\"_Fs\/Q(4enX0,wGLWZP3w\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"`}G%Cv!6[Js8+{yLHc2l\">\n                <field name=\"TEXT\">_<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TIMES\">\n              <block type=\"variables_get\" id=\"IXGKJ]Afp#2MBy~wm?e_\">\n                <field name=\"VAR\" id=\"Pe(5pO(RT{n;@%mSd)zt\" variabletype=\"\">width<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n```\n\nFinally, we add the <bk class=\"str lit\"><bk class=\"inner\">^<\/bk><\/bk> to the front and end of our mouth:\n\n```eg:nooooo-str-mult-add;lang:blockly;norun;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Pe(5pO(RT{n;@%mSd)zt\">width<\/variable>\n  <\/variables>\n  <block type=\"io_print1\" id=\"HzQ|C28[W\/RPvBJXDIw0\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text_concat3\" id=\"MIi_Sc+KD#,[Bl~$s\/60\">\n        <value name=\"TEXT0\">\n          <block type=\"text\" id=\"N$E:Ls?OTo.s@7g*,b^g\">\n            <field name=\"TEXT\">^<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text_mult\" id=\"_Fs\/Q(4enX0,wGLWZP3w\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"`}G%Cv!6[Js8+{yLHc2l\">\n                <field name=\"TEXT\">_<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TIMES\">\n              <block type=\"variables_get\" id=\"IXGKJ]Afp#2MBy~wm?e_\">\n                <field name=\"VAR\" id=\"Pe(5pO(RT{n;@%mSd)zt\" variabletype=\"\">width<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT2\">\n          <block type=\"text\" id=\"SV463es$F_fk8P*M[W)x\">\n            <field name=\"TEXT\">^<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n\n```\n\n",
      "updated_at":"2017-07-25T05:14:44.099862+00:00",
      "label":"bk-py3-how-happy-emoji",
      "content":"#markdown\nNow that you're getting the hang of programming, you want to show everyone how happy you are! Write a program to help you generate\n[Japanese-style emoticons](https:\/\/en.wikipedia.org\/wiki\/Japanese_Emoticons#Japanese_style)\nto express your joy. \n^_^\n\nWrite a program which asks how happy you are, and prints out a face to match!\n\n```lang:py3;terminal;eg:none;\nHow happy? @@@1\n^_^\n\n```\n\nHere is another example, where you're rather happy:\n```lang:py3;terminal;eg:none;\nHow happy? @@@3\n^___^\n\n```\n\n\nHere is another example, where you're really happy:\n\n```lang:py3;terminal;eg:none;\nHow happy? @@@10\n^__________^\n\n```\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "int",
        "print",
        "string:mult"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_concat3\",\"text_mult\",\"io_print1\",\"io_ask_num\"]",
      "teacher_notes":"#markdown\nOnce you know string multiplication this question is much easier!  But it can be fiddly to get the string exactly right, since you need to multiply the underscore <bk class=\"str lit\"><bk class=\"inner\">_<\/bk><\/bk> and add the <bk class=\"str lit\"><bk class=\"inner\">^<\/bk><\/bk> to the front and end of the string.\n\nWe start off by reading in how happy to pull our face.\n  We'll need to use the blue <bk class=\"math\">ask<\/bk> block to get a number, not a string.\n\n```eg:smiley-input;lang:blockly;norun;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Pe(5pO(RT{n;@%mSd)zt\">width<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"q6bu9]0$c+l_sk(avT@%\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"Pe(5pO(RT{n;@%mSd)zt\" variabletype=\"\">width<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"uui~nHx\/kSSrKgBj;uUQ\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"`2Fsf{xEEnv@\/{{d`W)z\">\n            <field name=\"TEXT\"> How happy?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n\n```\n\nFrom there, we multiply just the <bk class=\"str lit\"><bk class=\"inner\">_<\/bk><\/bk> by the stored `width`, to make the long `____` mouth.\n\n```eg:smiley-str-mult;lang:blockly;norun;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Pe(5pO(RT{n;@%mSd)zt\">width<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"q6bu9]0$c+l_sk(avT@%\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"Pe(5pO(RT{n;@%mSd)zt\" variabletype=\"\">width<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"uui~nHx\/kSSrKgBj;uUQ\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"`2Fsf{xEEnv@\/{{d`W)z\">\n            <field name=\"TEXT\"> How happy?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"HzQ|C28[W\/RPvBJXDIw0\">\n        <value name=\"ANY0\">\n          <block type=\"text_mult\" id=\"_Fs\/Q(4enX0,wGLWZP3w\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"`}G%Cv!6[Js8+{yLHc2l\">\n                <field name=\"TEXT\">_<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TIMES\">\n              <block type=\"variables_get\" id=\"IXGKJ]Afp#2MBy~wm?e_\">\n                <field name=\"VAR\" id=\"Pe(5pO(RT{n;@%mSd)zt\" variabletype=\"\">width<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n```\n\nFinally, we add the <bk class=\"str lit\"><bk class=\"inner\">^<\/bk><\/bk> to the front and end of our mouth:\n\n```eg:nooooo-str-mult-add;lang:blockly;norun;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Pe(5pO(RT{n;@%mSd)zt\">width<\/variable>\n  <\/variables>\n  <block type=\"io_print1\" id=\"HzQ|C28[W\/RPvBJXDIw0\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text_concat3\" id=\"MIi_Sc+KD#,[Bl~$s\/60\">\n        <value name=\"TEXT0\">\n          <block type=\"text\" id=\"N$E:Ls?OTo.s@7g*,b^g\">\n            <field name=\"TEXT\">^<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text_mult\" id=\"_Fs\/Q(4enX0,wGLWZP3w\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"`}G%Cv!6[Js8+{yLHc2l\">\n                <field name=\"TEXT\">_<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TIMES\">\n              <block type=\"variables_get\" id=\"IXGKJ]Afp#2MBy~wm?e_\">\n                <field name=\"VAR\" id=\"Pe(5pO(RT{n;@%mSd)zt\" variabletype=\"\">width<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT2\">\n          <block type=\"text\" id=\"SV463es$F_fk8P*M[W)x\">\n            <field name=\"TEXT\">^<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n\n```\n\n"
    },
    {
      "language":0,
      "title":"Letter from the Queen",
      "notes":"<p>\n  The user's age is a number, so we need to use the blue <bk class=\"math\">ask<\/bk> block:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-letter-queen-input\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"35\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">age<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"36\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"37\">\n            <field name=\"TEXT\">How old are you?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  We can then calculate the wait, by subtracting the <bk class=\"var\"><bk class=\"inner\">age<\/bk><\/bk> from 100.  We could use this directly in the <bk class=\"io\">print<\/bk> block, but the code is easier to understand if we store it in a variable, called <bk class=\"var\"><bk class=\"inner\">wait<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-letter-queen-calc\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"46\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">age<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"47\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"48\">\n            <field name=\"TEXT\">How old are you?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"49\" inline=\"true\">\n        <field name=\"VAR\">wait<\/field>\n        <value name=\"VALUE\">\n          <block type=\"math_arithmetic\" id=\"50\" inline=\"true\">\n            <field name=\"OP\">MINUS<\/field>\n            <value name=\"A\">\n              <block type=\"math_number\" id=\"51\">\n                <field name=\"NUM\">100<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"variables_get\" id=\"52\">\n                <field name=\"VAR\">age<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  And finally, we can <bk class=\"io\">print<\/bk> the answer:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-letter-queen-cast-str\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"57\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">age<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"58\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"59\">\n            <field name=\"TEXT\">How old are you?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"60\" inline=\"true\">\n        <field name=\"VAR\">wait<\/field>\n        <value name=\"VALUE\">\n          <block type=\"math_arithmetic\" id=\"61\" inline=\"true\">\n            <field name=\"OP\">MINUS<\/field>\n            <value name=\"A\">\n              <block type=\"math_number\" id=\"62\">\n                <field name=\"NUM\">100<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"variables_get\" id=\"63\">\n                <field name=\"VAR\">age<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print3\" id=\"64\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"65\">\n                <field name=\"TEXT\">You must wait<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"66\">\n                <field name=\"VAR\">wait<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY2\">\n              <block type=\"text\" id=\"67\">\n                <field name=\"TEXT\">years.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
      "updated_at":"2016-08-07T18:53:24.374934+00:00",
      "label":"bk-py3-letter-from-the-queen",
      "content":"<p>\n  For nearly 100 years, there has been a tradition that citizens of the United Kingdom and Commonwealth countries receive a letter from the King or Queen on their <a href=\" https:\/\/en.wikipedia.org\/wiki\/Centenarian#British_and_Commonwealth_traditions\" target=\"_blank\">100th birthday<\/a>.\n<\/p>\n\n<p>\n  Write a program that works out how long until your letter arrives!\n<\/p>\n\n<p>\n  Your program should ask the user how old they are then calculate 100 minus their age.\n  For example:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>How old are you? <\/o><i>14<\/i>\n<o>You must wait 86 years.<o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Here is another example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>How old are you? <\/o><i>52<\/i>\n<o>You must wait 48 years.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If you're already over 100, the answer is a negative number:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>How old are you? <\/o><i>102<\/i>\n<o>You must wait -2 years.<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"math_number\",\"math_arithmetic\",\"io_print3\",\"io_ask_num\"]",
      "teacher_notes":"<p>\n  We need the age as an integer so we can do maths, like subtraction, but <code data-lang=\"py3\">input<\/code> returns a string. So, we have to convert it with <code data-lang=\"py3\">int<\/code>:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-input\"><code data-lang=\"py3\">\nage = int(input(\"How old are you?  \"))\n<\/code><\/pre>\n\n<p>\n  Once we have the user's age as a number, we can work out how long you'll have to wait for your letter:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-calc\"><code data-lang=\"py3\">\nage = int(input(\"How old are you?  \"))\nwait = 100 - age\nprint(wait)\n<\/code><\/pre>\n\n<p>\n  And finally, we can print it, using <code data-lang=\"py3\">str<\/code> to convert back to a string:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-cast-str\"><code data-lang=\"py3\">\nprint('You must wait ' + str(wait) + ' years.')\n<\/code><\/pre>\n\n<p>\n  Try out this version to see the <code data-lang=\"err\">TypeError<\/code> you get if you forgot to turn (<em>cast<\/em>) <code data-lang=\"py3\">wait<\/code> back into a string:\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"letter-queen-no-cast-error\"><code data-lang=\"py3\">\nage = int(input('How old are you? '))\nwait = 100 - age\nprint('You must wait ' + wait + ' years.')\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Nooooooooo!",
      "notes":"<p>\n  Once you know string multiplication this question is much easier!  But it can be fiddly to get the string exactly right, since you need to multiply the <bk class=\"str lit\"><bk class=\"inner\">o<\/bk><\/bk> and then add the <bk class=\"str lit\"><bk class=\"inner\">N<\/bk><\/bk> on the front.<\/p>\n\n<p>\n  We start off by reading in how long to hold our &ldquo;Noooooooo&rdquo; for. We want a number, not a string, from the user so we need <bk class=\"math\">ask<\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-nooooo-input\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">length<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">How long?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  From there, we multiply just the <bk class=\"str lit\"><bk class=\"inner\">o<\/bk><\/bk> by the stored <bk class=\"var\"><bk class=\"inner\">length<\/bk><\/bk>, to make the long <code data-lang=\"out\">oooo...<\/code>\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-nooooo-str-mult\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">length<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">How long?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"19\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_mult\" id=\"30\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"variables_get\" id=\"45\">\n                <field name=\"VAR\">length<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"34\">\n                <field name=\"TEXT\">o<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Finally, we add the <bk class=\"str lit\"><bk class=\"inner\">N<\/bk><\/bk> to the front of our defiant cry:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-nooooo-str-mult-add\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"46\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">length<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"47\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"48\">\n            <field name=\"TEXT\">How long?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"49\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_concat2\" id=\"50\" inline=\"true\">\n            <value name=\"TEXT0\">\n              <block type=\"text\" id=\"51\">\n                <field name=\"TEXT\">N<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT1\">\n              <block type=\"text_mult\" id=\"52\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"variables_get\" id=\"53\">\n                    <field name=\"VAR\">length<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\"54\">\n                    <field name=\"TEXT\">o<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
      "updated_at":"2016-08-07T18:54:16.964589+00:00",
      "label":"bk-py3-nooooo",
      "content":"<p>\n  When writing a movie script, sometimes you want a simple &ldquo;No&rdquo; and sometimes a longer dramatic &ldquo;Noooooooo&rdquo;.\n<\/p>\n\n<p>\n  Write a program which asks how long the <code data-lang=\"out\">No<\/code> should be, then uses that number of <code data-lang=\"out\">o<\/code>'s.  Here is an example:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>How long? <\/o><i>1<\/i>\n<o>No<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Here is another example with more <code data-lang=\"out\">o<\/code>'s:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>How long? <\/o><i>10<\/i>\n<o>Noooooooooo<\/o>\n<o><\/o>\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "int",
        "print",
        "string:mult"
      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"text_concat2\",\"text_mult\",\"io_print1\",\"io_ask_num\"]",
      "teacher_notes":"<p>\n  Once you know string multiplication this question is much easier!  But it can be fiddly to get the string exactly right, since you need to multiply the <bk class=\"str lit\"><bk class=\"inner\">o<\/bk><\/bk> and then add the <bk class=\"str lit\"><bk class=\"inner\">N<\/bk><\/bk> on the front.<\/p>\n\n<p>\n  We start off by reading in how long to hold our &ldquo;Noooooooo&rdquo; for. We want a number, not a string, from the user so we need <bk class=\"math\">ask<\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-nooooo-input\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">length<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">How long?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  From there, we multiply just the <bk class=\"str lit\"><bk class=\"inner\">o<\/bk><\/bk> by the stored <bk class=\"var\"><bk class=\"inner\">length<\/bk><\/bk>, to make the long <code data-lang=\"out\">oooo...<\/code>\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-nooooo-str-mult\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">length<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">How long?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"19\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_mult\" id=\"30\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"variables_get\" id=\"45\">\n                <field name=\"VAR\">length<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"34\">\n                <field name=\"TEXT\">o<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Finally, we add the <bk class=\"str lit\"><bk class=\"inner\">N<\/bk><\/bk> to the front of our defiant cry:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-nooooo-str-mult-add\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"46\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">length<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"47\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"48\">\n            <field name=\"TEXT\">How long?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"49\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_concat2\" id=\"50\" inline=\"true\">\n            <value name=\"TEXT0\">\n              <block type=\"text\" id=\"51\">\n                <field name=\"TEXT\">N<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT1\">\n              <block type=\"text_mult\" id=\"52\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"variables_get\" id=\"53\">\n                    <field name=\"VAR\">length<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\"54\">\n                    <field name=\"TEXT\">o<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Next Olympics",
      "notes":"<p>\n  We start by asking the user for the year of the previous Olympics with an <bk class=\"math\">ask<\/bk> block. Since we need a number, not a string, we need to make sure we're using the blue block, not the green.\n<\/p>\n\n<p>\n  We store the previous year in a variable called <bk class=\"var\"><bk class=\"inner\">year<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-next-olympics-soln1\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" movable=\"false\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">year<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">When is the Olympics?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  We calculate the next Olympic year by adding 4 with a maths block. We can use a <bk class=\"io\">print<\/bk> to make sure the calculation is working:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-next-olympics-soln2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"6\" inline=\"true\" movable=\"false\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">year<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"7\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"8\">\n            <field name=\"TEXT\">When is the Olympics?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"26\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"math_arithmetic\" id=\"11\" inline=\"true\">\n            <field name=\"OP\">ADD<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"12\">\n                <field name=\"VAR\">year<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"13\">\n                <field name=\"NUM\">4<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Finally, we can switch to the 2-hole <bk class=\"io\">print<\/bk> block, to print both the message and the answer...\n<\/p>\n",
      "updated_at":"2016-08-01T00:45:14.325821+00:00",
      "label":"bk-py3-next-olympics",
      "content":"<p>\n  The summer <a href=\"https:\/\/en.wikipedia.org\/wiki\/Olympic_Games\" target=\"_blank\">Olympic Games<\/a> happen every 4 years. \n<\/p>\n\n<p>\n  Write a program which asks for the year of the previous summer Olympics, then prints the year of the next Olympics (by adding 4).\n<\/p>\n\n<p>Here's how it should work:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>When is the Olympics? <\/o><i>2016\n<\/i><o>The next Olympics is in 2020\n<\/o>\n<\/code><\/pre>\n\n<p>Here's another example:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>When is the Olympics? <\/o><i>2020\n<\/i><o>The next Olympics is in 2024\n<\/o>\n<\/code><\/pre>\n\n<p>Your program should still add 4, even if the year entered is wrong:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>When is the Olympics? <\/o><i>2011\n<\/i><o>The next Olympics is in 2015\n<\/o>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Use the <bk class=\"math\">ask<\/bk> block!<\/h2>\n  <p>\n    Make sure you read the year from the user with the blue <bk class=\"math\">ask<\/bk> block, so that it is a number, not a string.\n  <\/p>\n<\/aside>\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "int",
        "print"
      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"math_number\",\"math_arithmetic\",\"io_print1\",\"io_print2\",\"io_ask_num\"]",
      "teacher_notes":"<p>\n  We start by asking the user for the year of the previous Olympics with an <bk class=\"math\">ask<\/bk> block. Since we need a number, not a string, we need to make sure we're using the blue block, not the green.\n<\/p>\n\n<p>\n  We store the previous year in a variable called <bk class=\"var\"><bk class=\"inner\">year<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-next-olympics-soln1\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" movable=\"false\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">year<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">When is the Olympics?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  We calculate the next Olympic year by adding 4 with a maths block. We can use a <bk class=\"io\">print<\/bk> to make sure the calculation is working:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-next-olympics-soln2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"6\" inline=\"true\" movable=\"false\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">year<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"7\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"8\">\n            <field name=\"TEXT\">When is the Olympics?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"26\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"math_arithmetic\" id=\"11\" inline=\"true\">\n            <field name=\"OP\">ADD<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"12\">\n                <field name=\"VAR\">year<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"13\">\n                <field name=\"NUM\">4<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Finally, we can switch to the 2-hole <bk class=\"io\">print<\/bk> block, to print both the message and the answer...\n<\/p>\n"
    },
    {
      "language":0,
      "title":"Match of the Year!",
      "notes":"<p>\n  This solution uses variables to store the name of each team, say <bk class=\"var\"><bk class=\"inner\">team1<\/bk><\/bk> and <bk class=\"var\"><bk class=\"inner\">team2<\/bk><\/bk>.\n<\/p>\n\n<p>\n  For Team 1, we ask for the team name and store it in <bk class=\"var\"><bk class=\"inner\">team1<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"match-of-the-year-soln1\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"35\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">team1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"36\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"37\">\n            <field name=\"TEXT\">Who is team 1?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Then we repeat this for Team 2, being careful to create a separate variable for <bk class=\"var\"><bk class=\"inner\">team2<\/bk><\/bk> rather than just renaming <bk class=\"var\"><bk class=\"inner\">team1<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"match-of-the-year-soln2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"35\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">team2<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"36\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"37\">\n            <field name=\"TEXT\">Who is team 2?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Finally, we print out the combined message using a 4-hole <bk class=\"io\">print<\/bk> block with the strings and variables. Remember that <bk class=\"io\">print<\/bk> adds a space between each value.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"match-of-the-year-soln3\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print4\" id=\"7\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"8\">\n        <field name=\"TEXT\">The match of the year:<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"variables_get\" id=\"9\">\n        <field name=\"VAR\">team1<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"text\" id=\"10\">\n        <field name=\"TEXT\">vs.<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY3\">\n      <block type=\"variables_get\" id=\"11\">\n        <field name=\"VAR\">team2<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
      "updated_at":"2016-08-14T21:52:13.232443+00:00",
      "label":"bk-py3-match-of-the-year",
      "content":"<p>It's the greatest match ever! Team 1 against Team 2... oh what's that? The team names are missing.<\/p>\n\n<p>Write a program that asks for two team names, then prints out an announcement of the match.<\/p>\n\n<p>Here is an example:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Who is team 1? <\/o><i>Diamonds<\/i>\n<o>Who is team 2? <\/o><i>Silver Ferns<\/i>\n<o>The match of the year: Diamonds vs. Silver Ferns<\/p>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Here's another example:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Who is team 1? <\/o><i>Liverpool<\/i>\n<o>Who is team 2? <\/o><i>Everton<\/i>\n<o>The match of the year: Liverpool vs. Everton<\/p>\n<o><\/o>\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"io_print4\",\"io_ask_text\"]",
      "teacher_notes":"<p>\n  This solution uses variables to store the name of each team, say <bk class=\"var\"><bk class=\"inner\">team1<\/bk><\/bk> and <bk class=\"var\"><bk class=\"inner\">team2<\/bk><\/bk>.\n<\/p>\n\n<p>\n  For Team 1, we ask for the team name and store it in <bk class=\"var\"><bk class=\"inner\">team1<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"match-of-the-year-soln1\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"35\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">team1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"36\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"37\">\n            <field name=\"TEXT\">Who is team 1?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Then we repeat this for Team 2, being careful to create a separate variable for <bk class=\"var\"><bk class=\"inner\">team2<\/bk><\/bk> rather than just renaming <bk class=\"var\"><bk class=\"inner\">team1<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"match-of-the-year-soln2\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"35\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">team2<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"36\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"37\">\n            <field name=\"TEXT\">Who is team 2?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Finally, we print out the combined message using a 4-hole <bk class=\"io\">print<\/bk> block with the strings and variables. Remember that <bk class=\"io\">print<\/bk> adds a space between each value.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"match-of-the-year-soln3\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"io_print4\" id=\"7\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"8\">\n        <field name=\"TEXT\">The match of the year:<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"variables_get\" id=\"9\">\n        <field name=\"VAR\">team1<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"text\" id=\"10\">\n        <field name=\"TEXT\">vs.<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY3\">\n      <block type=\"variables_get\" id=\"11\">\n        <field name=\"VAR\">team2<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Cheer me on!",
      "notes":"#markdown\nThis solution is very similar to the discussion of <bk class=\"str\">ask<\/bk> in the notes.\n\nThe first step is to use the <bk class=\"str\">ask<\/bk> block to ask for your friend's name:\n\n```eg:cheer-you-on1;lang:blockly;norun;\n\n<blockly>\n  <block type=\"variables_set\" id=\"35\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"36\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"37\">\n            <field name=\"TEXT\">Friend:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n\n```\n\nThis prints `Friend: ` and waits for the user to type a name. Once they do, it is saved into <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk>.\n\nThe <bk class=\"io\">print<\/bk> block prints `Go` and the string stored in <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk> and then Go!. \n\n```eg:cheer-you-on-soln;lang:blockly;norun;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"gcD{FSz,Vl:XG_tUCHI,\">name<\/variable>\n  <\/variables>\n  <block type=\"io_print3\" id=\"fx6CDooeINZ1EZ:Qjmt3\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"04%W}tMHqY(r\/3J0m@Wt\">\n        <field name=\"TEXT\">Go<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"variables_get\" id=\"vKa{2]mI|q9u2Dj{WmF`\">\n        <field name=\"VAR\" id=\"gcD{FSz,Vl:XG_tUCHI,\" variabletype=\"\">name<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"text\" id=\")\/H#~%Gof.D~#UMUBVI$\">\n        <field name=\"TEXT\">Go!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nAnd that's it! So we can just piece these two steps together to form the final solution.\n",
      "updated_at":"2017-07-25T05:08:34.970542+00:00",
      "label":"bk-py3-cheer-me-on",
      "content":"<p>Several of your friends are competing in a bike race and you want to cheer them all on! Write a program to write a cheer for you to shout for any friend's name.<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Friend: <\/o><i>Jane\n<\/i><o>Go Jane Go!\n<\/o>\n<\/code><\/pre>\n\n<p>Your program should work with any friend's name:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Friend: <\/o><i>Isabella\n<\/i><o>Go Isabella Go!\n<\/o>\n<\/code><\/pre>\n\n<p>\n  When your program runs, it should wait for the user to type in their friend's name, using the <bk class=\"str\">ask<\/bk> block. It should then use the name the user entered to tell make the cheer.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Hint<\/h2>\n  <p>\n    Make sure you give <bk class=\"str\">ask<\/bk> the same prompt question that is used in the example above.\n  <\/p>\n<\/aside>\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print2\",\"io_print3\",\"io_ask_text\"]",
      "teacher_notes":"#markdown\nThis solution is very similar to the discussion of <bk class=\"str\">ask<\/bk> in the notes.\n\nThe first step is to use the <bk class=\"str\">ask<\/bk> block to ask for your friend's name:\n\n```eg:cheer-you-on1;lang:blockly;norun;\n\n<blockly>\n  <block type=\"variables_set\" id=\"35\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"36\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"37\">\n            <field name=\"TEXT\">Friend:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n\n```\n\nThis prints `Friend: ` and waits for the user to type a name. Once they do, it is saved into <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk>.\n\nThe <bk class=\"io\">print<\/bk> block prints `Go` and the string stored in <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk> and then Go!. \n\n```eg:cheer-you-on-soln;lang:blockly;norun;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"gcD{FSz,Vl:XG_tUCHI,\">name<\/variable>\n  <\/variables>\n  <block type=\"io_print3\" id=\"fx6CDooeINZ1EZ:Qjmt3\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"04%W}tMHqY(r\/3J0m@Wt\">\n        <field name=\"TEXT\">Go<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"variables_get\" id=\"vKa{2]mI|q9u2Dj{WmF`\">\n        <field name=\"VAR\" id=\"gcD{FSz,Vl:XG_tUCHI,\" variabletype=\"\">name<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"text\" id=\")\/H#~%Gof.D~#UMUBVI$\">\n        <field name=\"TEXT\">Go!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nAnd that's it! So we can just piece these two steps together to form the final solution.\n"
    },
    {
      "language":0,
      "title":"Therefore, I rock!",
      "notes":"<p>This solution is a way to allow you to try out your own text in a print function. You should realise that there's nothing special about \"Hello, World!\" and you can make the text anything you like.<\/p>",
      "updated_at":"2018-03-02T05:26:45.051493+00:00",
      "label":"bk-py3-therefore-aca",
      "content":"<p>You've printed your first text - congratulate yourself! Write a program that prints out:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\">\n<o>Therefore, I rock!<\/o>\n\n<\/code><\/pre>\n\n<p>Don't forget, the <bk class=\"io\">print<\/bk> block is in the <strong style=\"color: #333; font-weight: bold\">Output<\/strong> menu.  Drag it into the editor.<\/p>\n\n<p>Add an empty <bk class=\"str lit\"><bk class=\"inner\">&nbsp;&nbsp;<\/bk><\/bk> string block from the <strong style=\"color: #333; font-weight: bold\">Strings<\/strong> menu. Drag it into the hole in the <bk class=\"io\">print<\/bk> block, and change the message. Remember that the marker is really picky about punctuation and spelling.<\/p>\n\n",
      "options":"{\"variables\":false}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "strings",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\"]",
      "teacher_notes":"<p>This solution is a way to allow you to try out your own text in a print function. You should realise that there's nothing special about \"Hello, World!\" and you can make the text anything you like.<\/p>"
    },
    {
      "language":0,
      "title":"Best New Ice Cream Combination",
      "notes":"<p>To solve this question, we'll use <bk class=\"str\">ask<\/bk> block as we did in the last few questions, and we'll need to read in two different bits of information: the ice cream flavours of flavour 1 and flavour 2.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"ice-cream-combo-soln\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Ecmpy\/vv^sv4b-4h[9`0\">flavour1<\/variable>\n    <variable type=\"\" id=\"ZprgeYfGS)1581P;[tFK\">flavour2<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"g+U,!56t,eDuas[$$[s6\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"Ecmpy\/vv^sv4b-4h[9`0\" variabletype=\"\">flavour1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"R2~;iuG){wTY;|8y1EGN\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"r6iD4Fwl$=ebrxJT3:xG\">\n            <field name=\"TEXT\">Flavour 1:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"4PRJBlV^$i1_`cis8RgD\">\n        <field name=\"VAR\" id=\"ZprgeYfGS)1581P;[tFK\" variabletype=\"\">flavour2<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"?(LG5IY[tG{%%rnJni]M\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"q6ZO\/(~s5Runk1{;4z+g\">\n                <field name=\"TEXT\">Flavour 2:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n<p>Here we've called our variables <bk class=\"var\">flavour1<\/bk> and <bk class=\"var\">flavour2<\/bk>. When you're naming your variables, remember that they can't contain spaces!<\/p>\n\n<p>The second step is to <bk class=\"io\">print<\/bk> out the message, using strings and the contents of those variables. You'll need two <bk class=\"io\">print<\/bk> blocks for this, one that prints one string and one that prints three:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"ice-cream-combo-soln1\" data-runnable=\"false\"><code data-lang=\"blockly\" runnable=\"False\">\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Ecmpy\/vv^sv4b-4h[9`0\">flavour1<\/variable>\n    <variable type=\"\" id=\"ZprgeYfGS)1581P;[tFK\">flavour2<\/variable>\n  <\/variables>\n  <block type=\"io_print1\" id=\"a_*IbteIsb*~S(}`x)3H\" x=\"0\" y=\"0\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"9`41@qefP|bv9a{[{H#7\">\n        <field name=\"TEXT\">New best ever flavour combination...<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print3\" id=\"WKCU6n~cB0#v1}#aD=xS\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"oe!]RQ5sd.Zdu;=O#=jj\">\n            <field name=\"VAR\" id=\"Ecmpy\/vv^sv4b-4h[9`0\" variabletype=\"\">flavour1<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"text\" id=\"h3%0r)ai8dG;r+q}t.Hv\">\n            <field name=\"TEXT\">and<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY2\">\n          <block type=\"variables_get\" id=\"8,2PekByL.GORQ=936uW\">\n            <field name=\"VAR\" id=\"ZprgeYfGS)1581P;[tFK\" variabletype=\"\">flavour2<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n<\/code><\/pre>\n\n\n<p>And that's it! So we can now piece these two steps together to form the final solution.<\/p>\n",
      "updated_at":"2017-07-25T05:13:01.085808+00:00",
      "label":"bk-py3-ice-cream-combo",
      "content":"<p>Everyone knows that two scoops of ice cream are better than one! But the best part is coming up with a new winning combination of flavours.<\/p>\n\n<p>Write a program that asks for two ice cream flavours, then prints out an announcement of the new best ever flavour combination.<\/p>\n\n<p>Here is an example:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Flavour 1: <\/o><i>Chocolate<\/i>\n<o>Flavour 2: <\/o><i>Hazelnut<\/i>\n<o>New best ever flavour combination...<\/o><o>\nChocolate and Hazelnut<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Here's another example:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Flavour 1: <\/o><i>Sour Cherry<\/i>\n<o>Flavour 2: <\/o><i>Cookies 'n' Cream<\/i>\n<o>New best ever flavour combination...<\/o><o>\nSour Cherry and Cookies 'n' Cream<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print3\",\"io_ask_text\"]",
      "teacher_notes":"#markdown\nTo solve this question, we'll use <bk class=\"str\">ask<\/bk> block as we did in the last few questions, and we'll need to read in two different bits of information: the ice cream flavours of flavour 1 and flavour 2.\n\n```eg:ice-cream-combo-soln;lang:blockly;norun;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Ecmpy\/vv^sv4b-4h[9`0\">flavour1<\/variable>\n    <variable type=\"\" id=\"ZprgeYfGS)1581P;[tFK\">flavour2<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"g+U,!56t,eDuas[$$[s6\" x=\"0\" y=\"0\">\n    <field name=\"VAR\" id=\"Ecmpy\/vv^sv4b-4h[9`0\" variabletype=\"\">flavour1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"R2~;iuG){wTY;|8y1EGN\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"r6iD4Fwl$=ebrxJT3:xG\">\n            <field name=\"TEXT\">Flavour 1:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"4PRJBlV^$i1_`cis8RgD\">\n        <field name=\"VAR\" id=\"ZprgeYfGS)1581P;[tFK\" variabletype=\"\">flavour2<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"?(LG5IY[tG{%%rnJni]M\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"q6ZO\/(~s5Runk1{;4z+g\">\n                <field name=\"TEXT\">Flavour 2:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n```\n\nHere we've called our variables <bk class=\"var\">flavour1<\/bk> and <bk class=\"var\">flavour2<\/bk>. When you're naming your variables, remember that they can't contain spaces!\n\nThe second step is to <bk class=\"io\">print<\/bk> out the message, using strings and the contents of those variables. You'll need two <bk class=\"io\">print<\/bk> blocks for this, one that prints one string and one that prints three:\n\n```eg:ice-cream-combo-soln1;lang:blockly;norun;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Ecmpy\/vv^sv4b-4h[9`0\">flavour1<\/variable>\n    <variable type=\"\" id=\"ZprgeYfGS)1581P;[tFK\">flavour2<\/variable>\n  <\/variables>\n  <block type=\"io_print1\" id=\"a_*IbteIsb*~S(}`x)3H\" x=\"-\" y=\"-\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"9`41@qefP|bv9a{[{H#7\">\n        <field name=\"TEXT\">New best ever flavour combination...<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print3\" id=\"WKCU6n~cB0#v1}#aD=xS\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"oe!]RQ5sd.Zdu;=O#=jj\">\n            <field name=\"VAR\" id=\"Ecmpy\/vv^sv4b-4h[9`0\" variabletype=\"\">flavour1<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"text\" id=\"h3%0r)ai8dG;r+q}t.Hv\">\n            <field name=\"TEXT\">and<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY2\">\n          <block type=\"variables_get\" id=\"8,2PekByL.GORQ=936uW\">\n            <field name=\"VAR\" id=\"ZprgeYfGS)1581P;[tFK\" variabletype=\"\">flavour2<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n```\n\nAnd that's it! So we can now piece these two steps together to form the final solution.\n"
    },
    {
      "language":0,
      "title":"Echo! Echo!",
      "notes":"#markdown\nThis solution is very similar to the discussion of `input` in the \"Asking the user for information\" notes.\n\nHere, the first step is to use a new <bk class=\"var\"><bk class=\"inner\">variable<\/bk><\/bk> and the <bk class=\"str\">ask<\/bk> block to ask for the words to repeat:\n\n```eg:echo-echo-soln1;lang:blockly;norun;\n\n<blockly>\n  <block type=\"variables_set\" id=\"35\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">echo<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"36\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"37\">\n            <field name=\"TEXT\">What do you want to say?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n\n```\n\n<code data-lang=\"out\">What do you want to say? <\/code>\n\n<code data-lang=\"py3\">echo<\/code>\n\nThe second step was to <bk class=\"io\">print<\/bk> out exactly what was typed. To do this you needed to print out whatever was read in from the user.\n\nTry running this to see how we built it up:\n\n```eg:echo-echo-soln;lang:blockly;norun;\n\n  <xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"}Qpa$(V!0W[\/)1RteA*N\">echo<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"hyG`9n+zy#NT4;Oh0E1g\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"}Qpa$(V!0W[\/)1RteA*N\" variabletype=\"\">echo<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"3aKZgEXctpy0{VC,s2f-\">\n        <field name=\"TEXT\">Echo!<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"Mjv@tp6pM}JB-ZcBrb_6\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"{!6XV_+D7pJ`::34Q{J{\">\n            <field name=\"VAR\" id=\"}Qpa$(V!0W[\/)1RteA*N\" variabletype=\"\">echo<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\n<code data-lang=\"blockly\">\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>\n<\/code>\n",
      "updated_at":"2017-07-25T23:55:39.759045+00:00",
      "label":"bk-py3-echo-echo",
      "content":"<p>\nThere is a game that little kids play when they're first learning to speak. It's called Echo!\n<\/p>\n\n<p>\n  It's a pretty easy game. You just need to repeat whatever was just said.\n<\/p>\n\n<p>\n  You are going to program this game. You need to get input from the user and print back exactly what the user input.\n<\/p>\n<p>You are going to need a <bk class=\"var\"><bk class=\"inner\">variable<\/bk><\/bk> to store the words, an <bk class=\"str\">ask<\/bk> block to get the words from the user and a <bk class=\"io\">print<\/bk> block to make it appear on the screen.\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What do you want to say? <\/o><i>Echo!\n<\/i><o>Echo!\n<\/o>\n<\/code><\/pre>\n<p>Your program should work with anything the user types:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What do you want to say? <\/o><i>I am having a great day!\n<\/i><o>I am having a great day!\n<\/o>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Hint<\/h2>\n  <p>\n    Make sure you give <bk class=\"str\">ask<\/bk> the same prompt question that is used in the example above.\n  <\/p>\n<\/aside>\n\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_ask_text\"]",
      "teacher_notes":"#markdown\nThis solution is very similar to the discussion of `input` in the \"Asking the user for information\" notes.\n\nHere, the first step is to use a new <bk class=\"var\"><bk class=\"inner\">variable<\/bk><\/bk> and the <bk class=\"str\">ask<\/bk> block to ask for the words to repeat:\n\n```eg:nice-to-meet-you-soln1;lang:blockly;norun;\n\n<blockly>\n  <block type=\"variables_set\" id=\"35\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">echo<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"36\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"37\">\n            <field name=\"TEXT\">What do you want to say?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n\n```\n\n<code data-lang=\"out\">What do you want to say? <\/code>\n\n<code data-lang=\"py3\">echo<\/code>\n\nThe second step was to <bk class=\"io\">print<\/bk> out exactly what was typed. To do this you needed to print out whatever was read in from the user.\n\nTry running this to see how we built it up:\n\n```eg:echo-echo-soln;lang:blockly;norun;\n\n  <xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"}Qpa$(V!0W[\/)1RteA*N\">echo<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"hyG`9n+zy#NT4;Oh0E1g\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"}Qpa$(V!0W[\/)1RteA*N\" variabletype=\"\">echo<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"3aKZgEXctpy0{VC,s2f-\">\n        <field name=\"TEXT\">Echo!<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"Mjv@tp6pM}JB-ZcBrb_6\">\n        <value name=\"ANY0\">\n          <block type=\"variables_get\" id=\"{!6XV_+D7pJ`::34Q{J{\">\n            <field name=\"VAR\" id=\"}Qpa$(V!0W[\/)1RteA*N\" variabletype=\"\">echo<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\n<code data-lang=\"blockly\">\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>\n<\/code>\n"
    },
    {
      "language":0,
      "title":"I have no homework",
      "notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <code data-lang=\"py3\">suggestion<\/code> to be <code data-lang=\"str\">I have no homework.<\/code> instead of <code data-lang=\"str\">My room is clean.<\/code>, run it to check it works, and then mark it.<\/p>",
      "updated_at":"2018-03-29T05:01:06.540994+00:00",
      "label":"bk-py3-no-homework-variable",
      "content":"#markdown\nSometimes, if you repeat something often enough, it seems true. Repeating an opinion over and over again to make it seem true is called [argumentum ad nauseam](http:\/\/rationalwiki.org\/wiki\/Argumentum_ad_nauseam), or _argument by repetition_. \n\nWe've written a program in the editor that repeats something a statement.\n\nClick  <button type=\"button\" style=\"\n                                   display: inline-block;\n                                   background: #f0f0f0;\n                                   border: none;\n                                   overflow: visible;\n                                   color: #1b79bf;\n                                   height: 46px;\n                                   width: 40px;\n                                   text-align: center;\n                                   font-size: 12px;\n                                   min-width: 40px;\n                                   padding: 7px 5px 5px 3px;\n                                   outline: 0 !important;\">\n      <span class=\"icon icon-play4 hide-shell-icon\" style=\"font-size: 18px;\"><\/span><br>\n      <span class=\"icon icon-cog shell-icon\" style=\"display: none\"><\/span>\n      <span class=\"title\" style=\"font-size: 12px\">Run<\/span>\n    <\/button>\nto see what it does.\n\nThe statement is stored in a variable called <bk class=\"var\"><bk class=\"inner\">suggestion<\/bk><\/bk>.\n\n**Update this program so that it works for a different suggestion:** `'I have no homework.'`\n  Your updated program should print the message:\n\n```lang:py3;terminal;eg:none;\nI have no homework.\nI have no homework.\nI have no homework.\nI have no homework.\nI have no homework.\nNo really! I have no homework.\n\n```\n\n> ## Only change the string stored in the <bk class=\"var\"><bk class=\"inner\">suggestion<\/bk><\/bk> variable!\n> You just need to change the value of <bk class=\"var\"><bk class=\"inner\">suggestion<\/bk><\/bk> to be <bk class=\"str\"><bk class=\"inner\">I have no homework.<\/bk><\/bk> instead of <bk class=\"str\"><bk class=\"inner\">My room is clean.<\/bk><\/bk>, run it to check it works, and then mark it.\n",
      "options":"{}",
      "editor":1,
      "workspace":"[{\"content\":\"<xml xmlns=\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"mRcqi1@\\\/8zt]9wyMrGN#\\\">suggestion<\\\/variable>\\n  <\\\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\")\\\/D;*)W;dS,%!;^_*qUB\\\" x=\\\"30\\\" y=\\\"23\\\">\\n    <field name=\\\"VAR\\\" id=\\\"mRcqi1@\\\/8zt]9wyMrGN#\\\" variabletype=\\\"\\\">suggestion<\\\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"text\\\" id=\\\"SZBA9|{Jr53d@3|YW`sJ\\\">\\n        <field name=\\\"TEXT\\\">My room is clean.<\\\/field>\\n      <\\\/block>\\n    <\\\/value>\\n    <next>\\n      <block type=\\\"io_print1\\\" id=\\\"O$C{)Fk5,?0|e2b1TWjg\\\">\\n        <value name=\\\"ANY0\\\">\\n          <block type=\\\"variables_get\\\" id=\\\"E^@[j^-#-vfE|gb8jE[I\\\">\\n            <field name=\\\"VAR\\\" id=\\\"mRcqi1@\\\/8zt]9wyMrGN#\\\" variabletype=\\\"\\\">suggestion<\\\/field>\\n          <\\\/block>\\n        <\\\/value>\\n        <next>\\n          <block type=\\\"io_print1\\\" id=\\\"dgvdnILw,AWyQgb*4^J9\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"noxS[]HM\\\/,)yK_P_OLac\\\">\\n                <field name=\\\"VAR\\\" id=\\\"mRcqi1@\\\/8zt]9wyMrGN#\\\" variabletype=\\\"\\\">suggestion<\\\/field>\\n              <\\\/block>\\n            <\\\/value>\\n            <next>\\n              <block type=\\\"io_print1\\\" id=\\\"|A=e@Xc?J7]gU28D7Wgz\\\">\\n                <value name=\\\"ANY0\\\">\\n                  <block type=\\\"variables_get\\\" id=\\\"%U\\\/U0yC|No{xeu!aZaJa\\\">\\n                    <field name=\\\"VAR\\\" id=\\\"mRcqi1@\\\/8zt]9wyMrGN#\\\" variabletype=\\\"\\\">suggestion<\\\/field>\\n                  <\\\/block>\\n                <\\\/value>\\n                <next>\\n                  <block type=\\\"io_print1\\\" id=\\\"F:6y%Hr307:wwM.dls^*\\\">\\n                    <value name=\\\"ANY0\\\">\\n                      <block type=\\\"variables_get\\\" id=\\\"gqS!|CNoNCEt5CXPFUPO\\\">\\n                        <field name=\\\"VAR\\\" id=\\\"mRcqi1@\\\/8zt]9wyMrGN#\\\" variabletype=\\\"\\\">suggestion<\\\/field>\\n                      <\\\/block>\\n                    <\\\/value>\\n                    <next>\\n                      <block type=\\\"io_print1\\\" id=\\\"VV1H^7Z0U5f[L6s*({9,\\\">\\n                        <value name=\\\"ANY0\\\">\\n                          <block type=\\\"variables_get\\\" id=\\\";JG#:q,%uqn}gK.K#$gZ\\\">\\n                            <field name=\\\"VAR\\\" id=\\\"mRcqi1@\\\/8zt]9wyMrGN#\\\" variabletype=\\\"\\\">suggestion<\\\/field>\\n                          <\\\/block>\\n                        <\\\/value>\\n                        <next>\\n                          <block type=\\\"io_print2\\\" id=\\\"]]kaP,C^C3lnO.yAr#,o\\\">\\n                            <value name=\\\"ANY0\\\">\\n                              <block type=\\\"text\\\" id=\\\"R;O_W[_enE,a]t,vf=Gi\\\">\\n                                <field name=\\\"TEXT\\\">No really!<\\\/field>\\n                              <\\\/block>\\n                            <\\\/value>\\n                            <value name=\\\"ANY1\\\">\\n                              <block type=\\\"variables_get\\\" id=\\\"t[g(wwR(=_ah0*BZKm#^\\\">\\n                                <field name=\\\"VAR\\\" id=\\\"mRcqi1@\\\/8zt]9wyMrGN#\\\" variabletype=\\\"\\\">suggestion<\\\/field>\\n                              <\\\/block>\\n                            <\\\/value>\\n                          <\\\/block>\\n                        <\\\/next>\\n                      <\\\/block>\\n                    <\\\/next>\\n                  <\\\/block>\\n                <\\\/next>\\n              <\\\/block>\\n            <\\\/next>\\n          <\\\/block>\\n        <\\\/next>\\n      <\\\/block>\\n    <\\\/next>\\n  <\\\/block>\\n<\\\/xml>\",\"path\":\"program.blockly\",\"is_static\":false,\"undeletable\":true}]",
      "concepts":[
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print2\"]",
      "teacher_notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <code data-lang=\"py3\">suggestion<\/code> to be <code data-lang=\"str\">I have no homework.<\/code> instead of <code data-lang=\"str\">My room is clean.<\/code>, run it to check it works, and then mark it.<\/p>"
    },
    {
      "language":0,
      "title":"Library Day",
      "notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <code data-lang=\"py3\">library_day<\/code> to be <code data-lang=\"str\">Wednesday<\/code> instead of <code data-lang=\"str\">Friday<\/code>, run it to check it works, and then mark it.<\/p>",
      "updated_at":"2017-08-31T03:30:39.020276+00:00",
      "label":"bk-py3-library-day",
      "content":"<p>\n  You need to remember to bring your library bag and book returns on Library day.\n<\/p>\n\n<p>\n  We've put a program in the editor that reminds you what day is Library day.\n<\/p>\n    \n<p>\n  Click \n        <button type=\"button\" style=\"\n                                   display: inline-block;\n                                   background: #f0f0f0;\n                                   border: none;\n                                   overflow: visible;\n                                   color: #1b79bf;\n                                   height: 46px;\n                                   width: 40px;\n                                   text-align: center;\n                                   font-size: 12px;\n                                   min-width: 40px;\n                                   padding: 7px 5px 5px 3px;\n                                   outline: 0 !important;\">\n      <span class=\"icon icon-play4 hide-shell-icon\" style=\"font-size: 18px;\"><\/span><br>\n      <span class=\"icon icon-cog shell-icon\" style=\"display: none\"><\/span>\n      <span class=\"title\" style=\"font-size: 12px\">Run<\/span>\n<\/button>\n  to see what it does.\n<\/p>\n\n<p>\n  The day you need to bring your book bag and returns is stored in the <bk class=\"var\"><bk class=\"inner\">library day<\/bk><\/bk> variable.\n<\/p>\n<p><strong>Disaster!<\/strong> Library day has changed from Friday to Wednesday so your reminder doesn't work.<\/p>\n<p>\n  <strong>Update this program so that it works for a different day,<\/strong> <code data-lang=\"out\">Wednesday<\/code>.\n  Your updated program should print the message:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\">\n<o>Don't forget, Library Day is Wednesday<\/o>\n<o>On Wednesday you need to remember your library bag!<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Only change the <bk class=\"var\"><bk class=\"inner\">library day<\/bk><\/bk><\/h2>\n  <p>\n    You just need to change the string <bk class=\"str\"><bk class=\"inner\">Friday<\/bk><\/bk> to <bk class=\"str\"><bk class=\"inner\">Wednesday<\/bk><\/bk>, run it to check it works, and then mark it.\n  <\/p>\n<\/aside>\n",
      "options":"{}",
      "editor":1,
      "workspace":"[{\"content\":\"<xml xmlns=\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"J*hAwJwq[WId\\\/V6vg,zO\\\">library day<\\\/variable>\\n  <\\\/variables>\\n  <block type=\\\"variables_set\\\" id=\\\"A0Nu{K$-Wwc*+{,SALm}\\\" x=\\\"77\\\" y=\\\"39\\\">\\n    <field name=\\\"VAR\\\" id=\\\"J*hAwJwq[WId\\\/V6vg,zO\\\" variabletype=\\\"\\\">library day<\\\/field>\\n    <value name=\\\"VALUE\\\">\\n      <block type=\\\"text\\\" id=\\\"_GFQKpN`h]e+6o%nE1E2\\\">\\n        <field name=\\\"TEXT\\\">Friday<\\\/field>\\n      <\\\/block>\\n    <\\\/value>\\n    <next>\\n      <block type=\\\"io_print2\\\" id=\\\"T|[)!,%f2c(8L{%?c9R0\\\">\\n        <value name=\\\"ANY0\\\">\\n          <block type=\\\"text\\\" id=\\\",AJjn{*ol_,:,NmT$s^D\\\">\\n            <field name=\\\"TEXT\\\">Don't forget, Library Day is<\\\/field>\\n          <\\\/block>\\n        <\\\/value>\\n        <value name=\\\"ANY1\\\">\\n          <block type=\\\"variables_get\\\" id=\\\"d6gG%5vE+^3;SMO%H_3S\\\">\\n            <field name=\\\"VAR\\\" id=\\\"J*hAwJwq[WId\\\/V6vg,zO\\\" variabletype=\\\"\\\">library day<\\\/field>\\n          <\\\/block>\\n        <\\\/value>\\n        <next>\\n          <block type=\\\"io_print3\\\" id=\\\"C[$cM`:Tlc)$\\\/zpq4{mZ\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\")d+;\\\/%YlQvBUBhrniSFH\\\">\\n                <field name=\\\"TEXT\\\">On<\\\/field>\\n              <\\\/block>\\n            <\\\/value>\\n            <value name=\\\"ANY1\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"mdki*ySVi\\\/9rQFM}(YOu\\\">\\n                <field name=\\\"VAR\\\" id=\\\"J*hAwJwq[WId\\\/V6vg,zO\\\" variabletype=\\\"\\\">library day<\\\/field>\\n              <\\\/block>\\n            <\\\/value>\\n            <value name=\\\"ANY2\\\">\\n              <block type=\\\"text\\\" id=\\\"(`W=7k^bg)0E6S%X(9|7\\\">\\n                <field name=\\\"TEXT\\\">you need to remember your library bag!<\\\/field>\\n              <\\\/block>\\n            <\\\/value>\\n          <\\\/block>\\n        <\\\/next>\\n      <\\\/block>\\n    <\\\/next>\\n  <\\\/block>\\n<\\\/xml>\",\"path\":\"program.blockly\",\"is_static\":false}]",
      "concepts":[
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print2\",\"io_print3\"]",
      "teacher_notes":"<p>This question tests the concept of variables, specifically, that you can change the contents of a variable, and then use that variable later in a program.<\/p>\n\n<p>To answer this question, you just need to change the value of <code data-lang=\"py3\">library_day<\/code> to be <code data-lang=\"str\">Wednesday<\/code> instead of <code data-lang=\"str\">Friday<\/code>, run it to check it works, and then mark it.<\/p>"
    },
    {
      "language":0,
      "title":"Ancient Riddle",
      "notes":"<p>\n  This program is just like <code data-lang=\"str\">Hello, World!<\/code>, except with three different messages. You just needed to make sure that the four <bk class=\"io\">print<\/bk> blocks were attached together in the right order.\n<\/p>\n\n<p>\n  <strong>Again, the secret was copying the messages very carefully!<\/strong> There is very particular punctuation and capitalisation in the riddle.\n<\/p>\n",
      "updated_at":"2018-04-13T00:31:40.931251+00:00",
      "label":"bk-py3-ancient-riddle",
      "content":"<p>\n  A <a href=\"https:\/\/en.wikipedia.org\/wiki\/Riddle\" target=\"_blank\">riddle<\/a> is a question with an answer that is a mystery or double meaning. They were very popular in ancient times but also in the writings of <a href=\"https:\/\/en.wikipedia.org\/wiki\/J._R._R._Tolkien\" target=\"_blank\">J. R. R. Tolkein<\/a> and <a href=\"https:\/\/en.wikipedia.org\/wiki\/J._K._Rowling\" target=\"_blank\">J. K. Rowling<\/a>:\n<\/p>\n\n<p>\n  Write a program which prints an Ancient Riddle:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>\nThere is a house.\nOne enters it blind and comes out seeing.\nWhat is it?\nA school\n<\/o>\n<\/code><\/pre>\n\n<p>\n  You will need to use four <bk class=\"io\">print<\/bk> blocks \u2013\u00a0one for each line.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Hint:<\/h2>\n  <p>Pay careful attention to capital letters and punctuation! You should print out <em>exactly<\/em> the same riddle.<\/p>\n<\/aside>",
      "options":"{\"variables\":false}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\"]",
      "teacher_notes":"<p>\n  This program is just like <code data-lang=\"str\">Hello, World!<\/code>, except with three different messages. You just needed to make sure that the four <bk class=\"io\">print<\/bk> blocks were attached together in the right order.\n<\/p>\n\n<p>\n  <strong>Again, the secret was copying the messages very carefully!<\/strong> There is very particular punctuation and capitalisation in the riddle.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    AC:DT requires students to describe\/follow <em>a sequence of steps<\/em> in algorithms in Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP010\" target=\"_blank\">ACTDIP010<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP019\" target=\"_blank\">ACTDIP019<\/a>.\n  <\/p>\n  <p>\n    Designing and tracing algorithms implicitly requires <em>a sequence of steps<\/em> in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a> and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP040\" target=\"_blank\">ACTDIP040<\/a>.\n  <\/p>\n<\/aside>\n"
    },
    {
      "language":0,
      "title":"Bash\u014d Haiku",
      "notes":"<p>\n  This program is just like <code data-lang=\"str\">Hello, World!<\/code>, except with three different messages. You just needed to make sure that the three <bk class=\"io\">print<\/bk> blocks were attached together in the right order.\n<\/p>\n\n<p>\n  <strong>Again, the secret was copying the messages very carefully!<\/strong> There were lots of capital letters and punctuation to watch out for in the three lines of the haiku.\n<\/p>\n",
      "updated_at":"2017-10-04T00:06:04.591228+00:00",
      "label":"bk-py3-basho-haiku",
      "content":"<p>\n  A <a href=\"https:\/\/en.wikipedia.org\/wiki\/Haiku\" target=\"_blank\">haiku<\/a> is a three line Japanese poem. The first and last lines have five syllables, and the middle line has seven. Here's a famous example by <a href=\"https:\/\/en.wikipedia.org\/wiki\/Matsuo_Bash%C5%8D\" target=\"_blank\">Bash\u014d Matsuo<\/a>:\n<\/p>\n\n<blockquote>\n  <p>\n    \u53e4\u6c60\u3084<br>\n    \u86d9\u98db\u3073\u3053\u3080<br>\n    \u6c34\u306e\u97f3\n  <\/p>\n<\/blockquote>\n\n<p>\n  Write a program which prints an English translation of this haiku:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>\nAn old silent pond...\nA frog jumps into the pond,\nsplash! Silence again.\n<\/o>\n<\/code><\/pre>\n\n<p>\n  You will need to use three <bk class=\"io\">print<\/bk> blocks \u2013\u00a0one for each line.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Hint:<\/h2>\n  <p>Pay careful attention to capital letters and punctuation! You should print out <em>exactly<\/em> the same translation.<\/p>\n<\/aside>",
      "options":"{\"variables\":false}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\"]",
      "teacher_notes":"<p>\n  This problem tests that students understand sequences of statements. In Blockly, this means that the blocks run in order from top to bottom and they should be attached together.\n<\/p>\n\n<p>\n  This program is just like <code data-lang=\"str\">Hello, World!<\/code>, except with three different messages. You just needed to make sure that the three <bk class=\"io\">print<\/bk> blocks were attached together in the right order.\n<\/p>\n\n<p>\n  <strong>Again, the secret was copying the messages very carefully!<\/strong> There were lots of capital letters and punctuation to watch out for in the three lines of the haiku.\n<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    AC:DT requires students to describe\/follow <em>a sequence of steps<\/em> in algorithms in Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP010\" target=\"_blank\">ACTDIP010<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP019\" target=\"_blank\">ACTDIP019<\/a>.\n  <\/p>\n  <p>\n    Designing and tracing algorithms implicitly requires <em>a sequence of steps<\/em> in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a> and 9\u201310 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP040\" target=\"_blank\">ACTDIP040<\/a>.\n  <\/p>\n<\/aside>\n"
    },
    {
      "language":0,
      "title":"Meet the Puppy",
      "notes":"<p>\n  This solution is very similar to the discussion of <bk class=\"str\">ask<\/bk> in the notes.\n<\/p>\n\n<p>\n  The first step is to use the <bk class=\"str\">ask<\/bk> block to ask for the puppy's name:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"nice-to-meet-you-soln1\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"35\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"36\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"37\">\n            <field name=\"TEXT\">What is the puppy called?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This prints <code data-lang=\"out\">What is the puppy called? <\/code> and waits for the user to type a name. Once they do, it is saved into <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk>.\n<\/p>\n\n<p>\n  The <bk class=\"io\">print<\/bk> block prints <code data-lang=\"out\">Sit<\/code> and the string stored in <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk>. This is like the previous problem where the variable was already set:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"nice-to-meet-you-soln\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Fluffy<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block id=\"3\" type=\"io_print2\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block id=\"4\" type=\"text\">\n            <field name=\"TEXT\">Sit<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block id=\"5\" type=\"variables_get\">\n            <field name=\"VAR\">name<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>\n",
      "updated_at":"2017-09-12T07:50:38.152524+00:00",
      "label":"bk-py3-meet-the-puppy",
      "content":"<p>Your friend has a new puppy! Write a program to tell the puppy to sit using its name, like this:<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What is the puppy called? <\/o><i>Fluffy\n<\/i><o>Sit Fluffy\n<\/o>\n<\/code><\/pre>\n\n<p>Your program should work with any puppy name:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What is the puppy called? <\/o><i>Shadow\n<\/i><o>Sit Shadow\n<\/o>\n<\/code><\/pre>\n\n<p>\n  When your program runs, it should wait for the user to type in the puppy's name, using the <bk class=\"str\">ask<\/bk> block. It should then use the name the user entered to tell the puppy to sit.\n<\/p>\n\n<aside class=\"info\">\n  <h2>Hint<\/h2>\n  <p>\n    Make sure you give <bk class=\"str\">ask<\/bk> the same prompt question that is used in the example above.\n  <\/p>\n<\/aside>\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print2\",\"io_ask_text\"]",
      "teacher_notes":"<p>\n  This solution is very similar to the discussion of <bk class=\"str\">ask<\/bk> in the notes.\n<\/p>\n\n<p>\n  The first step is to use the <bk class=\"str\">ask<\/bk> block to ask for the puppy's name:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"nice-to-meet-you-soln1\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"35\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"36\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"37\">\n            <field name=\"TEXT\">What is the puppy called?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  This prints <code data-lang=\"out\">What is the puppy called? <\/code> and waits for the user to type a name. Once they do, it is saved into <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk>.\n<\/p>\n\n<p>\n  The <bk class=\"io\">print<\/bk> block prints <code data-lang=\"out\">Sit<\/code> and the string stored in <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk>. This is like the previous problem where the variable was already set:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"nice-to-meet-you-soln\"><code data-lang=\"blockly\">\n<blockly>\n  <block id=\"1\" type=\"variables_set\" x=\"10\" y=\"10\" inline=\"true\" movable=\"false\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block id=\"2\" type=\"text\">\n        <field name=\"TEXT\">Fluffy<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block id=\"3\" type=\"io_print2\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block id=\"4\" type=\"text\">\n            <field name=\"TEXT\">Sit<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block id=\"5\" type=\"variables_get\">\n            <field name=\"VAR\">name<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>And that's it! So we can just piece these two steps together to form the final solution.<\/p>\n\n<aside class=\"info curriculum\">\n  <h2>Australian Curriculum: Digital Technologies<\/h2>\n  <p>\n    This is a simple program that involves <em>user input<\/em>.  Students can also try predicting the output given a particular input.\n  <\/p>\n  <p>\n    AC:DT requires students to write programs involving <em>user input<\/em> from Years 3\u20134 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP011\" target=\"_blank\">ACTDIP011<\/a> and 5\u20136 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP020\" target=\"_blank\">ACTDIP020<\/a>.\n    Students must <em>predict output for a given input<\/em> in Years 7\u20138 <a href=\"http:\/\/www.australiancurriculum.edu.au\/curriculum\/contentdescription\/ACTDIP029\" target=\"_blank\">ACTDIP029<\/a>.\n  <\/p>\n<\/aside>\n"
    },
    {
      "language":0,
      "title":"Hello, World!",
      "notes":"<p>This problem was designed to be simple, but there were a few things to trip you up. Common issues were:<\/p>\n<ul>\n  <li>not submitting a <em>complete program<\/em>, with a <code data-lang=\"py3\">print<\/code> block in it;<\/li>\n  <li>not <strong>reading the question carefully!<\/strong> and getting the words, capitals, spaces and punctuation exactly right.  This kind of attention to detail is critical to programming.<\/li>\n  <li>printing extra text: the marker only accepts exactly what is required. Nothing more, nothing less.<\/li>\n<\/ul>\n",
      "updated_at":"2017-07-30T03:14:44.508835+00:00",
      "label":"bk-py3-hello-world",
      "content":"<p>Time to solve your first problem! Write a program that prints out:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\">\n<o>Hello, World!<\/o>\n\n<\/code><\/pre>\n<p>What, again? <strong>Yes, now it's your turn to write it from scratch.<\/strong><\/p>\n\n<p>You need to put your blocks in the editor (the big area on the right).<\/p>\n\n<p>The <bk class=\"io\">print<\/bk> block is in the <strong style=\"color: #333; font-weight: bold\">Output<\/strong> menu.  Drag it into the editor.<\/p>\n\n<p>Add an empty <bk class=\"str lit\"><bk class=\"inner\">&nbsp;&nbsp;<\/bk><\/bk> string block from the <strong style=\"color: #333; font-weight: bold\">Strings<\/strong> menu. Drag it into the hole in the <bk class=\"io\">print<\/bk> block, and change the message.<\/p>\n\n<aside class=\"info\">\n  <h2>How do I submit?<\/h2>\n  <ol>\n    <li><p>Write your program in the editor (large panel on the right);<\/p><\/li>\n    <li><p>Run your program by clicking \n      <button type=\"button\" style=\"\n                                   display: inline-block;\n                                   background: #f0f0f0;\n                                   border: none;\n                                   overflow: visible;\n                                   color: #1b79bf;\n                                   height: 46px;\n                                   width: 40px;\n                                   text-align: center;\n                                   font-size: 12px;\n                                   min-width: 40px;\n                                   padding: 7px 5px 5px 3px;\n                                   outline: 0 !important;\">\n      <span class=\"icon icon-play4 hide-shell-icon\" style=\"font-size: 18px;\"><\/span><br>\n      <span class=\"icon icon-cog shell-icon\" style=\"display: none\"><\/span>\n      <span class=\"title\" style=\"font-size: 12px\">Run<\/span>\n    <\/button> in the top right-hand menu bar.\n    The output will appear below your code. <strong>Check the program works correctly!<\/strong><\/p><\/li>\n    <li><p>Mark your program by clicking\n      <button type=\"button\" style=\"\n                                   display: inline-block;\n                                   background: #f0f0f0;\n                                   border: none;\n                                   overflow: visible;\n                                   color: #fb4251;\n                                   height: 46px;\n                                   width: 40px;\n                                   text-align: center;\n                                   font-size: 12px;\n                                   min-width: 40px;\n                                   padding: 7px 5px 5px 3px;\n                                   outline: 0 !important;\">\n      <span class=\"icon icon-star-full hide-marking-icon\" style=\"font-size: 18px;\"><\/span><br>\n      <span class=\"icon icon-cog marking-icon\" style=\"display: none\"><\/span>\n      <span class=\"title\" style=\"font-size: 12px\">Mark<\/span>\n      <\/button> and we will automatically check if your program is correct, and if not, give you some hints to fix it up.<\/p>\n    <\/li>\n  <\/ol>\n<\/aside>\n",
      "options":"{\"variables\":false}",
      "editor":1,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print2\"]",
      "teacher_notes":"<p>\n  This problem is designed to be simple. Students just need to repeat the blocks from the first notes page.\n<\/p>\n\n<p>\n  You need to click on the Editor menu bar to find each type of block. Click or drag a block to add it to the workspace.\n<\/p>\n\n<figure class=\"align-center\">\n  <img alt=\"Blockly editor String menu\" src=\"https:\/\/groklearning-cdn.com\/problems\/bF8ACyqoHKqdvLXCHLvmoK\/blockly-string-menu.png\" width=\"50%\">\n  <figcaption>The string blocks appear under the String menu.<\/figcaption>\n<\/figure>\n\n<p>\n  Common errors identified by the automarker include:\n<\/p>\n\n<ul>\n  <li>not submitting a <em>complete program<\/em> with a <bk class=\"io\">print<\/bk> block. A <bk class=\"str lit\"><bk class=\"inner\">Hello, World!<\/bk><\/bk> string on its own prints nothing;<\/li>\n  <li>not <strong>reading the question carefully!<\/strong> and getting the words, capitals, spaces and punctuation exactly right.  This kind of attention to detail is critical in programming;<\/li>\n  <li>printing extra text: the marker will only accept exactly what is required. Nothing more, nothing less.<\/li>\n<\/ul>\n"
    },
    {
      "language":0,
      "title":"N\u00e3o compreendo?",
      "notes":"<p>\n  In this problem, we must compare the user's input with several options to print the right string.  This involves trying each option, until one of them is equal, or we run out of options.\n<\/p>\n\n<p>\n  We do this using a <em>big<\/em> <bk class=\"control\">if<\/bk>-<bk class=\"control\">elif<\/bk>-<bk class=\"control\">elif<\/bk>-<bk class=\"control\">else<\/bk> block.  There must be one <em>equality test<\/em> (the <bk class=\"logic\">=<\/bk> block) in the <bk class=\"control\">if<\/bk>\/<bk class=\"control\">elif<\/bk> block for each word: <code data-lang=\"in\">Ola<\/code>, <code data-lang=\"in\">Sim<\/code> and <code data-lang=\"in\">Nao<\/code>, and the right <bk class=\"io\">print<\/bk> in the <bk class=\"control\">do<\/bk> below it:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-portuguese-phrases-if-elif\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">word<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">What did they say?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_elif_elif_else\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"6\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"7\">\n                <field name=\"TEXT\">Ola<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"8\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"9\">\n                <field name=\"TEXT\">Hello<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_compare\" id=\"10\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"11\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"12\">\n                <field name=\"TEXT\">Sim<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"13\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"14\">\n                <field name=\"TEXT\">Yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF2\">\n          <block type=\"logic_compare\" id=\"15\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"16\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"17\">\n                <field name=\"TEXT\">Nao<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO2\">\n          <block type=\"io_print1\" id=\"18\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"19\">\n                <field name=\"TEXT\">No<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>The computer tries the equality tests in order.  It will stop and run the <bk class=\"control\">do<\/bk> for the first equality that is true.<\/strong>\n<\/p>\n\n<p>\n  If none of the equalities are true, it will run the <bk class=\"control\">else<\/bk> part.  This is where the <code data-lang=\"out\">Nao compreendo.<\/code> must be printed:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-portuguese-phrases-if-elif-else\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">word<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">What did they say?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_elif_elif_else\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"6\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"7\">\n                <field name=\"TEXT\">Ola<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"8\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"9\">\n                <field name=\"TEXT\">Hello<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_compare\" id=\"10\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"11\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"12\">\n                <field name=\"TEXT\">Sim<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"13\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"14\">\n                <field name=\"TEXT\">Yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF2\">\n          <block type=\"logic_compare\" id=\"15\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"16\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"17\">\n                <field name=\"TEXT\">Nao<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO2\">\n          <block type=\"io_print1\" id=\"18\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"19\">\n                <field name=\"TEXT\">No<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"20\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"21\">\n                <field name=\"TEXT\">Nao compreendo.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
      "updated_at":"2016-08-07T15:02:53.213515+00:00",
      "label":"bk-py3-portuguese-phrases",
      "content":"<p>\n  You're in Brazil for the 2016 Summer Olympic Games!\n  You're going to need a few Portuguese words to help you get around.\n<\/p>\n<p>\n  Write a program to translate some useful words from <a href=\"https:\/\/en.wikipedia.org\/wiki\/Portuguese_language\" target=\"_blank\">Portuguese<\/a>. Here are the words you need:\n<\/p>\n<table class=\"table table-bordered\">\n  <thead>\n    <tr>\n      <th>Portuguese<\/th>\n      <th>English<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>Ola<\/td>\n      <td>Hello<\/td>\n    <\/tr>\n    <tr>\n      <td>Sim<\/td>\n      <td>Yes<\/td>\n    <\/tr>\n    <tr>\n      <td>Nao<\/td>\n      <td>No<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n\n<p>\n  Your program should ask for the Portuguese word then print out the English translation.\n  For example:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>What did they say? <\/o><i>Ola<\/i>\n<o>Hello<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Here is another example:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>What did they say? <\/o><i>Sim<\/i>\n<o>Yes<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If the Portuguese word isn't one of the three above, your program should print <code data-lang=\"out\">Nao compreendo.<\/code> which means &ldquo;I don't understand.&rdquo; in Portuguese.  For example:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>What did they say? <\/o><i>Desculpe<\/i>\n<o>Nao compreendo.<\/o>\n<o><\/o>\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_ask_text\",\"decisions_if_elif_elif_else\",\"logic_compare\"]",
      "teacher_notes":"<p>\n  In this problem, we must compare the user's input with several options to print the right string.  This involves trying each option, until one of them is equal, or we run out of options.\n<\/p>\n\n<p>\n  We do this using a <em>big<\/em> <bk class=\"control\">if<\/bk>-<bk class=\"control\">elif<\/bk>-<bk class=\"control\">elif<\/bk>-<bk class=\"control\">else<\/bk> block.  There must be one <em>equality test<\/em> (the <bk class=\"logic\">=<\/bk> block) in the <bk class=\"control\">if<\/bk>\/<bk class=\"control\">elif<\/bk> block for each word: <code data-lang=\"in\">Ola<\/code>, <code data-lang=\"in\">Sim<\/code> and <code data-lang=\"in\">Nao<\/code>, and the right <bk class=\"io\">print<\/bk> in the <bk class=\"control\">do<\/bk> below it:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-portuguese-phrases-if-elif\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">word<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">What did they say?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_elif_elif_else\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"6\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"7\">\n                <field name=\"TEXT\">Ola<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"8\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"9\">\n                <field name=\"TEXT\">Hello<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_compare\" id=\"10\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"11\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"12\">\n                <field name=\"TEXT\">Sim<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"13\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"14\">\n                <field name=\"TEXT\">Yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF2\">\n          <block type=\"logic_compare\" id=\"15\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"16\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"17\">\n                <field name=\"TEXT\">Nao<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO2\">\n          <block type=\"io_print1\" id=\"18\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"19\">\n                <field name=\"TEXT\">No<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>The computer tries the equality tests in order.  It will stop and run the <bk class=\"control\">do<\/bk> for the first equality that is true.<\/strong>\n<\/p>\n\n<p>\n  If none of the equalities are true, it will run the <bk class=\"control\">else<\/bk> part.  This is where the <code data-lang=\"out\">Nao compreendo.<\/code> must be printed:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-portuguese-phrases-if-elif-else\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">word<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">What did they say?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_elif_elif_else\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"6\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"7\">\n                <field name=\"TEXT\">Ola<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"8\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"9\">\n                <field name=\"TEXT\">Hello<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF1\">\n          <block type=\"logic_compare\" id=\"10\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"11\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"12\">\n                <field name=\"TEXT\">Sim<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO1\">\n          <block type=\"io_print1\" id=\"13\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"14\">\n                <field name=\"TEXT\">Yes<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <value name=\"IF2\">\n          <block type=\"logic_compare\" id=\"15\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"16\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"17\">\n                <field name=\"TEXT\">Nao<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO2\">\n          <block type=\"io_print1\" id=\"18\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"19\">\n                <field name=\"TEXT\">No<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"20\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"21\">\n                <field name=\"TEXT\">Nao compreendo.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Soil Sensor",
      "notes":"<p>\n  Try describing this problem in your own words first, like:\n<\/p>\n\n<p>\n  <strong>The program must decide between two messages to print, based on a number from the user.<\/strong>\n<\/p>\n\n<p>\n  We need to use the blue <bk class=\"math\">ask<\/bk> block to read a number:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-moisture-level-input-int\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">level<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Moisture level:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Then we need to check if the <bk class=\"var\"><bk class=\"inner\">level<\/bk><\/bk> <em>is less than<\/em> 25:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-moisture-level-if\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"29\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">level<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"30\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"31\">\n            <field name=\"TEXT\">Moisture level:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"32\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"33\" inline=\"true\">\n            <field name=\"OP\">LT<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"34\">\n                <field name=\"VAR\">level<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"35\">\n                <field name=\"NUM\">25<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>You change the compare block by clicking on <code data-lang=\"py3\">=<\/code> (is equal to) and selecting <code data-lang=\"py3\">&lt;<\/code> (is less than).<\/strong>\n<\/p>\n\n<p>\n  Finally, we need to print the right message in each case:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-moisture-level-if-else\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"40\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">level<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"41\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"42\">\n            <field name=\"TEXT\">Moisture level:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"43\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"44\" inline=\"true\">\n            <field name=\"OP\">LT<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"45\">\n                <field name=\"VAR\">level<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"46\">\n                <field name=\"NUM\">25<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"47\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"48\">\n                <field name=\"TEXT\">Water the plants.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"49\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"50\">\n                <field name=\"TEXT\">The plants are happy.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
      "updated_at":"2016-08-07T14:25:07.929954+00:00",
      "label":"bk-py3-soil-sensor",
      "content":"<p>\n  You're creating an automatic system to water your plants.\n  It has a sensor to measure the moisture in the soil.\n  If the moisture level is below 25%, the plant should be watered.\n<\/p>\n\n<p>\n  Write a program to read in the moisture level from the sensor.\n  If the moisture level is below 25%, it should do this:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Moisture level: <\/o><i>18<\/i>\n<o>Water the plants.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If the moisture level is 25% or above, it should do this:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Moisture level: <\/o><i>27<\/i>\n<o>The plants are happy.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  <a href=\"https:\/\/en.wikipedia.org\/wiki\/Soil#Soil_moisture_content\" target=\"_blank\">Ideal soil moisture levels<\/a> are actually more complicated!\n<\/p>\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "int",
        "if-else",
        "print",
        "greater than less than"
      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"math_number\",\"io_print1\",\"io_ask_num\",\"decisions_if_else_compare\"]",
      "teacher_notes":"<p>\n  Try describing this problem in your own words first, like:\n<\/p>\n\n<p>\n  <strong>The program must decide between two messages to print, based on a number from the user.<\/strong>\n<\/p>\n\n<p>\n  We need to use the blue <bk class=\"math\">ask<\/bk> block to read a number:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-moisture-level-input-int\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">level<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Moisture level:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Then we need to check if the <bk class=\"var\"><bk class=\"inner\">level<\/bk><\/bk> <em>is less than<\/em> 25:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-moisture-level-if\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"29\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">level<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"30\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"31\">\n            <field name=\"TEXT\">Moisture level:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"32\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"33\" inline=\"true\">\n            <field name=\"OP\">LT<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"34\">\n                <field name=\"VAR\">level<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"35\">\n                <field name=\"NUM\">25<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <strong>You change the compare block by clicking on <code data-lang=\"py3\">=<\/code> (is equal to) and selecting <code data-lang=\"py3\">&lt;<\/code> (is less than).<\/strong>\n<\/p>\n\n<p>\n  Finally, we need to print the right message in each case:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-moisture-level-if-else\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"40\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">level<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_num\" id=\"41\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"42\">\n            <field name=\"TEXT\">Moisture level:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"43\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"44\" inline=\"true\">\n            <field name=\"OP\">LT<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"45\">\n                <field name=\"VAR\">level<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"math_number\" id=\"46\">\n                <field name=\"NUM\">25<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"47\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"48\">\n                <field name=\"TEXT\">Water the plants.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"49\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"50\">\n                <field name=\"TEXT\">The plants are happy.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Pikachu, I choose you!",
      "notes":"<p>\n  Your program needs to <em>decide<\/em> which message to print based on the user's answer. So you need an <bk class=\"str\">ask<\/bk> block and an <bk class=\"control\">if<\/bk> block.\n<\/p>\n\n<p>\n  We store the value from <bk class=\"str\">ask<\/bk> in the <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk> variable:\n<\/p> \n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-preferred-pokemon-input-prompt\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Which is your favourite?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  For the <code data-lang=\"in\">Pikachu<\/code> case, the <bk class=\"control\">if<\/bk> block checks that the value entered is equal to <bk class=\"str lit\"><bk class=\"inner\">'Pikachu'<\/bk><\/bk>.  <strong>Watch the spelling and capital letter!<\/strong>\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-preferred-pokemon-if\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Which is your favourite?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"6\">\n                <field name=\"VAR\">name<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"7\">\n                <field name=\"TEXT\">Pikachu<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Finally, we print the messages for <code data-lang=\"in\">Pikachu<\/code> and other Pok\u00e9mon:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-preferred-pokemon-if-else\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"14\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"15\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"16\">\n            <field name=\"TEXT\">Which is your favourite?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"17\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"18\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"19\">\n                <field name=\"VAR\">name<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"20\">\n                <field name=\"TEXT\">Pikachu<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"21\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"22\">\n                <field name=\"TEXT\">Me too!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"23\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"24\">\n                <field name=\"TEXT\">I like Pikachu.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
      "updated_at":"2016-08-07T14:15:28.980010+00:00",
      "label":"bk-py3-preferred-pokemon-favourite",
      "content":"<p>\n  <a href=\"https:\/\/en.wikipedia.org\/wiki\/Pok%C3%A9mon_Go\" target=\"_blank\">Pok\u00e9mon Go<\/a> was downloaded over 100 million times in a month.\n  We all have friends obsessed with Pok\u00e9mon &mdash; and one of the favourites is Pikachu!\n<\/p>\n\n<p>\n  Write a program to talk to your <a href=\"https:\/\/en.wikipedia.org\/wiki\/Pikachu\" target=\"_blank\">Pikachu<\/a>-obsessed friend.\n<\/p>\n\n<p>\n  Your program should ask the user for their favourite Pok\u00e9mon.\n  If they say <code data-lang=\"in\">Pikachu<\/code>, your program should print <code data-lang=\"out\">Me too!<\/code> like this:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Which is your favourite? <\/o><i>Pikachu<\/i>\n<o>Me too!<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If they say anything else, it should print <code data-lang=\"out\">I like Pikachu.<\/code> instead:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Which is your favourite? <\/o><i>Squirtle<\/i>\n<o>I like Pikachu.<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-else",
        "print"
      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_ask_text\",\"decisions_if_else_compare\"]",
      "teacher_notes":"<p>\n  Your program needs to <em>decide<\/em> which message to print based on the user's answer. So you need an <bk class=\"str\">ask<\/bk> block and an <bk class=\"control\">if<\/bk> block.\n<\/p>\n\n<p>\n  We store the value from <bk class=\"str\">ask<\/bk> in the <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk> variable:\n<\/p> \n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-preferred-pokemon-input-prompt\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Which is your favourite?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  For the <code data-lang=\"in\">Pikachu<\/code> case, the <bk class=\"control\">if<\/bk> block checks that the value entered is equal to <bk class=\"str lit\"><bk class=\"inner\">'Pikachu'<\/bk><\/bk>.  <strong>Watch the spelling and capital letter!<\/strong>\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-preferred-pokemon-if\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Which is your favourite?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"6\">\n                <field name=\"VAR\">name<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"7\">\n                <field name=\"TEXT\">Pikachu<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Finally, we print the messages for <code data-lang=\"in\">Pikachu<\/code> and other Pok\u00e9mon:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-preferred-pokemon-if-else\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"14\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"15\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"16\">\n            <field name=\"TEXT\">Which is your favourite?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"17\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"18\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"19\">\n                <field name=\"VAR\">name<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"20\">\n                <field name=\"TEXT\">Pikachu<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"21\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"22\">\n                <field name=\"TEXT\">Me too!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <statement name=\"ELSE\">\n          <block type=\"io_print1\" id=\"23\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"24\">\n                <field name=\"TEXT\">I like Pikachu.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Cheap Tuesdays",
      "notes":"<p>\n  Describing the problem in your own words helps you <em>understand it better<\/em>, and <em>identify the blocks<\/em> you need to solve it:\n<\/p>\n\n<p>\n  <strong>The program must <em>decide<\/em> to print a message, based on user input.<\/strong>\n<\/p>\n\n<p>\n  Once you've got the blocks, you need to work out where they go.  Here, the <bk class=\"control\">if<\/bk> block <em>controls<\/em> the <bk class=\"io\">print<\/bk> block, but it needs the input <em>before<\/em> it can make a decision.  The correct order is:\n<\/p>\n\n<ol>\n  <li><bk class=\"str\">ask<\/bk> block for reading user input;<\/li>\n  <li><bk class=\"control\">if<\/bk> block for deciding to run some code (or not);<\/li>\n  <li><bk class=\"io\">print<\/bk> block for printing out a message.<\/li>\n<\/ol>\n\n<p>\n  We ask the user for a day, and store it in the <bk class=\"var\"><bk class=\"inner\">day<\/bk><\/bk> variable:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-cheap-tues-input\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">day<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">When can we see a movie?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Then, we check if the value in <bk class=\"var\"><bk class=\"inner\">day<\/bk><\/bk> is equal to <bk class=\"str lit\"><bk class=\"inner\">Tuesday<\/bk><\/bk>. If so, we <bk class=\"io\">print<\/bk> the <code data-lang=\"out\">Great! Tuesdays are cheap.<\/code> message:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-cheap-tues-if\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">day<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">When can we see a movie?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"6\">\n                <field name=\"VAR\">day<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"7\">\n                <field name=\"TEXT\">Tuesday<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"8\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"9\">\n                <field name=\"TEXT\">Great! Tuesdays are cheap.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Since the <code data-lang=\"out\">Finding Dory<\/code> message is <strong>printed every time<\/strong>, the second <bk class=\"io\">print<\/bk> block goes outside of the <bk class=\"control\">if<\/bk> body:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-cheap-tues\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"9\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">day<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"12\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"13\">\n            <field name=\"TEXT\">When can we see a movie?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"15\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"17\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"25\">\n                <field name=\"VAR\">day<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"21\">\n                <field name=\"TEXT\">Tuesday<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"27\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"28\">\n                <field name=\"TEXT\">Great! Tuesdays are cheap.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <next>\n          <block type=\"io_print1\" id=\"29\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"30\">\n                <field name=\"TEXT\">I want to see Finding Dory.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
      "updated_at":"2016-08-08T23:35:47.038309+00:00",
      "label":"bk-py3-cheap-tuesdays",
      "content":"<p>\n  Your local cinema has a special on Tuesdays, so tickets are cheap!\n  But you want to hang out with your friends, so you are happy to go on any day.\n<\/p>\n\n<p>\n  Write a program to organise a day.\n  If it's <code data-lang=\"in\">Tuesday<\/code>, the program should print <code data-lang=\"out\">Great! Tuesdays are cheap.<\/code> For example:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>When can we see a movie? <\/o><i>Tuesday<\/i>\n<o>Great! Tuesdays are cheap.<\/o>\n<o>I want to see Finding Dory.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If it's not <code data-lang=\"in\">Tuesday<\/code>, you should still go to the movies:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>When can we see a movie? <\/o><i>Wednesday<\/i>\n<o>I want to see Finding Dory.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Any answer other than <code data-lang=\"in\">Tuesday<\/code> should work the same way:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>When can we see a movie? <\/o><i>Saturday<\/i>\n<o>I want to see Finding Dory.<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "if",
        "string:eq"
      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_ask_text\",\"decisions_if_compare\",\"logic_compare\"]",
      "teacher_notes":"<p>\n  Describing the problem in your own words helps you <em>understand it better<\/em>, and <em>identify the blocks<\/em> you need to solve it:\n<\/p>\n\n<p>\n  <strong>The program must <em>decide<\/em> to print a message, based on user input.<\/strong>\n<\/p>\n\n<p>\n  Once you've got the blocks, you need to work out where they go.  Here, the <bk class=\"control\">if<\/bk> block <em>controls<\/em> the <bk class=\"io\">print<\/bk> block, but it needs the input <em>before<\/em> it can make a decision.  The correct order is:\n<\/p>\n\n<ol>\n  <li><bk class=\"str\">ask<\/bk> block for reading user input;<\/li>\n  <li><bk class=\"control\">if<\/bk> block for deciding to run some code (or not);<\/li>\n  <li><bk class=\"io\">print<\/bk> block for printing out a message.<\/li>\n<\/ol>\n\n<p>\n  We ask the user for a day, and store it in the <bk class=\"var\"><bk class=\"inner\">day<\/bk><\/bk> variable:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-cheap-tues-input\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">day<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">When can we see a movie?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Then, we check if the value in <bk class=\"var\"><bk class=\"inner\">day<\/bk><\/bk> is equal to <bk class=\"str lit\"><bk class=\"inner\">Tuesday<\/bk><\/bk>. If so, we <bk class=\"io\">print<\/bk> the <code data-lang=\"out\">Great! Tuesdays are cheap.<\/code> message:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-cheap-tues-if\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">day<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">When can we see a movie?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"6\">\n                <field name=\"VAR\">day<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"7\">\n                <field name=\"TEXT\">Tuesday<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"8\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"9\">\n                <field name=\"TEXT\">Great! Tuesdays are cheap.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Since the <code data-lang=\"out\">Finding Dory<\/code> message is <strong>printed every time<\/strong>, the second <bk class=\"io\">print<\/bk> block goes outside of the <bk class=\"control\">if<\/bk> body:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-cheap-tues\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"9\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">day<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"12\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"13\">\n            <field name=\"TEXT\">When can we see a movie?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if\" id=\"15\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"17\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"25\">\n                <field name=\"VAR\">day<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"21\">\n                <field name=\"TEXT\">Tuesday<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO0\">\n          <block type=\"io_print1\" id=\"27\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"28\">\n                <field name=\"TEXT\">Great! Tuesdays are cheap.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n        <next>\n          <block type=\"io_print1\" id=\"29\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"30\">\n                <field name=\"TEXT\">I want to see Finding Dory.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Raise Your Glass",
      "notes":"\n<p>\n  For this question it's best to get the loop that runs the program working first, and then add a variable to count the number of glasses of water.\n  This first step is very similar to the earlier <code data-lang=\"py3\">while<\/code> problems.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"glasses-of-water-solution-notes-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"loops_read_ask\" id=\"3\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">line<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"4\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"5\">\n            <field name=\"TEXT\">What did you drink?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isEmpty\" id=\"6\" inline=\"true\">\n        <field name=\"OP\">IS_NOT<\/field>\n        <value name=\"VALUE\">\n          <block type=\"variables_get\" id=\"7\">\n            <field name=\"VAR\">line<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print2\" id=\"14\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"15\">\n            <field name=\"TEXT\">Glasses of water:<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"math_number\" id=\"18\">\n            <field name=\"NUM\">0<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  If the loop has exited and the program reached the last line then the user must have entered a blank line (or the loop would have continued).\n<\/p>\n<p>\n  Now we add the counter variable! Here's how it works without the loop (assuming the loop repeats three times):\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"glasses-of-water-solution-notes-eg2\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"19\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">glasses<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"20\">\n        <field name=\"NUM\">0<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_incdec\" id=\"30\" inline=\"true\">\n        <field name=\"OP\">INCREMENT<\/field>\n        <field name=\"VAR\">glasses<\/field>\n        <value name=\"DELTA\">\n          <block type=\"math_number\" id=\"31\">\n            <field name=\"NUM\">1<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print2\" id=\"32\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"33\">\n                <field name=\"TEXT\">Glasses of water:<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"34\">\n                <field name=\"VAR\">glasses<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"variables_incdec\" id=\"35\" inline=\"true\">\n                <field name=\"OP\">INCREMENT<\/field>\n                <field name=\"VAR\">glasses<\/field>\n                <value name=\"DELTA\">\n                  <block type=\"math_number\" id=\"36\">\n                    <field name=\"NUM\">1<\/field>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print2\" id=\"37\" inline=\"true\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"38\">\n                        <field name=\"TEXT\">Glasses of water:<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY1\">\n                      <block type=\"variables_get\" id=\"39\">\n                        <field name=\"VAR\">glasses<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The counter must start at zero, then each time the user enters water (and the loop repeats) the variable is changed to the previous value plus one.\n<\/p>\n\n<p>We'll need to add the counter in to the loop, as part of a decision. We can use a decision block like the one below, and then <em>inside<\/em> that decision block, we'll increment our water counter by one. That way, the number only counts up if the user enters <code data-lang=\"in\">water<\/code>.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-runnable=\"false\" data-eg-id=\"glasses-of-water-solution-notes-eg3\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"decisions_if\" id=\"63\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"64\" inline=\"true\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"65\">\n            <field name=\"VAR\">line<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"66\">\n            <field name=\"TEXT\">water<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"variables_incdec\" id=\"67\" inline=\"true\">\n        <field name=\"OP\">INCREMENT<\/field>\n        <field name=\"VAR\">glasses<\/field>\n        <value name=\"DELTA\">\n          <block type=\"math_number\" id=\"68\">\n            <field name=\"NUM\">1<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print2\" id=\"69\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"70\">\n                <field name=\"TEXT\">Glasses of water:<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"71\">\n                <field name=\"VAR\">glasses<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n  \n<p>\n  Putting it all together, we have a full solution.\n<\/p>\n",
      "updated_at":"2016-08-21T18:25:47.827731+00:00",
      "label":"bk-py3-raise-your-glass",
      "content":"<p>\n  It's a myth that you should drink at least <a href=\"http:\/\/www.abc.net.au\/science\/articles\/2012\/11\/20\/3633741.htm\" target=\"_blank\">8 glasses of water per day<\/a>.\n  Even though its not true (since there's plenty of water in your food too!) it's still good to drink more water than other drinks.\n<\/p>\n\n<p>\n  Let's write a program to track how many glasses of water we drink.\n  Your program should read drinks from the user until they enter a blank line, counting how many glasses of water they've had so far:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What did you drink? <\/o><i>water<\/i>\n<o>Glasses of water: 1<\/o>\n<o>What did you drink? <\/o><i>coke<\/i>\n<o>What did you drink? <\/o><i>cordial<\/i>\n<o>What did you drink? <\/o><i>water<\/i>\n<o>Glasses of water: 2<\/o>\n<o>What did you drink? <\/o><i>water<\/i>\n<o>Glasses of water: 3<\/o>\n<o>What did you drink? <\/o><i><\/i>\n<o><\/o>\n<\/code><\/pre>\n<p>Your program should keep asking <code data-lang=\"out\">What did you drink?<\/code> until the user enters a blank line.<\/p>\n<p>\n  Here is another example, where the user drinks lots of water:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What did you drink? <\/o><i>water<\/i>\n<o>Glasses of water: 1<\/o>\n<o>What did you drink? <\/o><i>milk<\/i>\n<o>What did you drink? <\/o><i>water<\/i>\n<o>Glasses of water: 2<\/o>\n<o>What did you drink? <\/o><i>water<\/i>\n<o>Glasses of water: 3<\/o>\n<o>What did you drink? <\/o><i>water<\/i>\n<o>Glasses of water: 4<\/o>\n<o>What did you drink? <\/o><i><\/i>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "multiple-lines",
        "print",
        "string:eq"
      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"math_number\",\"io_print2\",\"decisions_if_compare\",\"loops_read_text_until_empty\"]",
      "teacher_notes":"\n<p>\n  For this question it's best to get the loop that runs the program working first, and then add a variable to count the number of glasses of water.\n  This first step is very similar to the earlier <code data-lang=\"py3\">while<\/code> problems.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"glasses-of-water-solution-notes-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"loops_read_ask\" id=\"3\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">line<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"4\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"5\">\n            <field name=\"TEXT\">What did you drink?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isEmpty\" id=\"6\" inline=\"true\">\n        <field name=\"OP\">IS_NOT<\/field>\n        <value name=\"VALUE\">\n          <block type=\"variables_get\" id=\"7\">\n            <field name=\"VAR\">line<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print2\" id=\"14\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"15\">\n            <field name=\"TEXT\">Glasses of water:<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"math_number\" id=\"18\">\n            <field name=\"NUM\">0<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  If the loop has exited and the program reached the last line then the user must have entered a blank line (or the loop would have continued).\n<\/p>\n<p>\n  Now we add the counter variable! Here's how it works without the loop (assuming the loop repeats three times):\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"glasses-of-water-solution-notes-eg2\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"19\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">glasses<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"20\">\n        <field name=\"NUM\">0<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_incdec\" id=\"30\" inline=\"true\">\n        <field name=\"OP\">INCREMENT<\/field>\n        <field name=\"VAR\">glasses<\/field>\n        <value name=\"DELTA\">\n          <block type=\"math_number\" id=\"31\">\n            <field name=\"NUM\">1<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print2\" id=\"32\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"33\">\n                <field name=\"TEXT\">Glasses of water:<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"34\">\n                <field name=\"VAR\">glasses<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"variables_incdec\" id=\"35\" inline=\"true\">\n                <field name=\"OP\">INCREMENT<\/field>\n                <field name=\"VAR\">glasses<\/field>\n                <value name=\"DELTA\">\n                  <block type=\"math_number\" id=\"36\">\n                    <field name=\"NUM\">1<\/field>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print2\" id=\"37\" inline=\"true\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"38\">\n                        <field name=\"TEXT\">Glasses of water:<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY1\">\n                      <block type=\"variables_get\" id=\"39\">\n                        <field name=\"VAR\">glasses<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The counter must start at zero, then each time the user enters water (and the loop repeats) the variable is changed to the previous value plus one.\n<\/p>\n\n<p>We'll need to add the counter in to the loop, as part of a decision. We can use a decision block like the one below, and then <em>inside<\/em> that decision block, we'll increment our water counter by one. That way, the number only counts up if the user enters <code data-lang=\"in\">water<\/code>.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-runnable=\"false\" data-eg-id=\"glasses-of-water-solution-notes-eg3\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"decisions_if\" id=\"63\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"64\" inline=\"true\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"65\">\n            <field name=\"VAR\">line<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"66\">\n            <field name=\"TEXT\">water<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"variables_incdec\" id=\"67\" inline=\"true\">\n        <field name=\"OP\">INCREMENT<\/field>\n        <field name=\"VAR\">glasses<\/field>\n        <value name=\"DELTA\">\n          <block type=\"math_number\" id=\"68\">\n            <field name=\"NUM\">1<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print2\" id=\"69\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"70\">\n                <field name=\"TEXT\">Glasses of water:<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"71\">\n                <field name=\"VAR\">glasses<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n  \n<p>\n  Putting it all together, we have a full solution.\n<\/p>\n"
    },
    {
      "language":0,
      "title":"Michael's Medals",
      "notes":"\n<p>\n  For this question it's best to get the loop working first, and then add a variable to count the number of incorrect guesses.\n  This first step is very similar to the earlier loop problems.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"most-medals-solution-notes-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"loops_read_ask\" id=\"15\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">value<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"16\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"17\">\n            <field name=\"TEXT\">Who has the most medals?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_compare\" id=\"18\" inline=\"true\">\n        <field name=\"OP\">NEQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"19\">\n            <field name=\"VAR\">value<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"20\">\n            <field name=\"TEXT\">Michael Phelps<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print1\" id=\"21\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"22\">\n            <field name=\"TEXT\">Nope, guess again!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <next>\n      <block type=\"io_print1\" id=\"25\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"26\">\n            <field name=\"TEXT\">Correct!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  If the loop has exited and the program reached the last line then the answer must have been correct (or the loop would have continued).\n<\/p>\n<p>\n  Now we add the counter variable! Here's how it works without the loop (assuming the loop repeats three times):\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"most-medals-solution-notes-eg2\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">count<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"2\">\n        <field name=\"NUM\">0<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_incdec\" id=\"3\" inline=\"true\">\n        <field name=\"OP\">INCREMENT<\/field>\n        <field name=\"VAR\">count<\/field>\n        <value name=\"DELTA\">\n          <block type=\"math_number\" id=\"4\">\n            <field name=\"NUM\">1<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_incdec\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">INCREMENT<\/field>\n            <field name=\"VAR\">count<\/field>\n            <value name=\"DELTA\">\n              <block type=\"math_number\" id=\"6\">\n                <field name=\"NUM\">1<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"variables_incdec\" id=\"7\" inline=\"true\">\n                <field name=\"OP\">INCREMENT<\/field>\n                <field name=\"VAR\">count<\/field>\n                <value name=\"DELTA\">\n                  <block type=\"math_number\" id=\"8\">\n                    <field name=\"NUM\">1<\/field>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print3\" id=\"9\" inline=\"true\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"10\">\n                        <field name=\"TEXT\">You made<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY1\">\n                      <block type=\"variables_get\" id=\"11\">\n                        <field name=\"VAR\">count<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY2\">\n                      <block type=\"text\" id=\"12\">\n                        <field name=\"TEXT\">incorrect attempt(s).<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The counter must start at zero, then each time a guess is incorrect (and the loop repeats) the variable is changed to the previous value plus one.\n<\/p>\n\n<p>\n  Putting it all together and printing the value of the <code data-lang=\"py3\">incorrect<\/code> variable at the end, we have a full solution.\n<\/p>\n",
      "updated_at":"2016-08-21T18:14:40.021554+00:00",
      "label":"bk-py3-michaels-medals-most",
      "content":"<p>\n  Which athlete has won the most Olympic medals ever?\n  How many guesses do you need to get the answer?\n  <a href=\"https:\/\/en.wikipedia.org\/wiki\/Michael_Phelps\" target=\"_blank\"><code data-lang=\"in\">Michael Phelps<\/code><\/a>, a swimmer from the USA.\n  He has won 28 medals, including 23 gold!\n<\/p>\n\n<p>\n  Let's write a program to see how many attempts the user needs to get the right answer! Here is an example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Who has the most medals? <\/o><i>Ian Thorpe<\/i>\n<o>Nope, guess again!<\/o>\n<o>Who has the most medals? <\/o><i>Larisa Latynina<\/i>\n<o>Nope, guess again!<\/o>\n<o>Who has the most medals? <\/o><i>Dawn Fraser<\/i>\n<o>Nope, guess again!<\/o>\n<o>Who has the most medals? <\/o><i>Michael Phelps<\/i>\n<o>Correct!<\/o>\n<o>You made 3 incorrect attempt(s).<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Your program should keep asking forever until the user enters the exact answer.  However, they might get it right the first time:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Who has the most medals? <\/o><i>Michael Phelps<\/i>\n<o>Correct!<\/o>\n<o>You made 0 incorrect attempt(s).<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "multiple-lines",
        "print",
        "string:eq"
      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"math_number\",\"io_print1\",\"io_print3\",\"loops_read_text\",\"logic_compare\"]",
      "teacher_notes":"\n<p>\n  For this question it's best to get the loop working first, and then add a variable to count the number of incorrect guesses.\n  This first step is very similar to the earlier loop problems.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"most-medals-solution-notes-eg1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"loops_read_ask\" id=\"15\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">value<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"16\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"17\">\n            <field name=\"TEXT\">Who has the most medals?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_compare\" id=\"18\" inline=\"true\">\n        <field name=\"OP\">NEQ<\/field>\n        <value name=\"A\">\n          <block type=\"variables_get\" id=\"19\">\n            <field name=\"VAR\">value<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"20\">\n            <field name=\"TEXT\">Michael Phelps<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print1\" id=\"21\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"22\">\n            <field name=\"TEXT\">Nope, guess again!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <next>\n      <block type=\"io_print1\" id=\"25\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"26\">\n            <field name=\"TEXT\">Correct!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  If the loop has exited and the program reached the last line then the answer must have been correct (or the loop would have continued).\n<\/p>\n<p>\n  Now we add the counter variable! Here's how it works without the loop (assuming the loop repeats three times):\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"most-medals-solution-notes-eg2\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">count<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\" id=\"2\">\n        <field name=\"NUM\">0<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_incdec\" id=\"3\" inline=\"true\">\n        <field name=\"OP\">INCREMENT<\/field>\n        <field name=\"VAR\">count<\/field>\n        <value name=\"DELTA\">\n          <block type=\"math_number\" id=\"4\">\n            <field name=\"NUM\">1<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_incdec\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">INCREMENT<\/field>\n            <field name=\"VAR\">count<\/field>\n            <value name=\"DELTA\">\n              <block type=\"math_number\" id=\"6\">\n                <field name=\"NUM\">1<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"variables_incdec\" id=\"7\" inline=\"true\">\n                <field name=\"OP\">INCREMENT<\/field>\n                <field name=\"VAR\">count<\/field>\n                <value name=\"DELTA\">\n                  <block type=\"math_number\" id=\"8\">\n                    <field name=\"NUM\">1<\/field>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print3\" id=\"9\" inline=\"true\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"10\">\n                        <field name=\"TEXT\">You made<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY1\">\n                      <block type=\"variables_get\" id=\"11\">\n                        <field name=\"VAR\">count<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY2\">\n                      <block type=\"text\" id=\"12\">\n                        <field name=\"TEXT\">incorrect attempt(s).<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The counter must start at zero, then each time a guess is incorrect (and the loop repeats) the variable is changed to the previous value plus one.\n<\/p>\n\n<p>\n  Putting it all together and printing the value of the <code data-lang=\"py3\">incorrect<\/code> variable at the end, we have a full solution.\n<\/p>\n"
    },
    {
      "language":0,
      "title":"TL;DR",
      "notes":"<p>\n  This question is tricky because it combines a <bk class=\"control\">repeat while<\/bk> loop and an <bk class=\"control\">if<\/bk> statement.\n<\/p>\n\n<p>A good place to start is getting the <bk class=\"control\">while<\/bk> loop working first:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"tldr-solution-notes-eg1\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"loops_read_ask\" id=\"7\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">line<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"8\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"9\">\n            <field name=\"TEXT\">Sentence:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isEmpty\" id=\"10\" inline=\"true\">\n        <field name=\"OP\">IS_NOT<\/field>\n        <value name=\"VALUE\">\n          <block type=\"variables_get\" id=\"11\">\n            <field name=\"VAR\">line<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>This is the same pattern as other loop questions, you've done before.<\/p>\n\n<p>This gives us a clear place to add the check for whether the sentence is too long. The key concept here is that the entire <bk class=\"control\">if<\/bk> block must inside the <bk class=\"control\">while<\/bk> loop, and then the <bk class=\"output\">print<\/bk> blocks inside the <bk class=\"control\">if<\/bk> block.<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"tldr-solution-notes-eg2\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"decisions_if_else\" id=\"6\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"7\" inline=\"true\">\n        <field name=\"OP\">GT<\/field>\n        <value name=\"A\">\n          <block type=\"text_length\" id=\"8\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"9\">\n                <field name=\"VAR\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"math_number\" id=\"10\">\n            <field name=\"NUM\">30<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"11\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"12\">\n            <field name=\"TEXT\">TL;DR<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <statement name=\"ELSE\">\n      <block type=\"io_print1\" id=\"13\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"14\">\n            <field name=\"TEXT\">I read it.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>",
      "updated_at":"2016-08-27T08:09:43.992061+00:00",
      "label":"bk-py3-too-long-didnt-read",
      "content":"<p>\n  <a href=\"https:\/\/en.wikipedia.org\/wiki\/TL;DR\" target=\"_blank\">TL;DR<\/a> is short for <em>too long; didn't read<\/em>.\n  A reader can use tl;dr to say a story is too long. An author can use tl;dr before a brief summary so readers can decide to read the full story or not.\n<\/p>\n\n<p>\n  Write a (rude!) program to complain when a line of input is too long.\n<\/p>\n\n<p>\n  Your program should read in multiple lines of input until a blank line is entered.\n  If the line is longer than 30 characters, your program should output <code data-lang=\"out\">TL;DR<\/code>.\n  For lines that are 30 characters or shorter, your program should output <code data-lang=\"out\">I read it.<\/code>\n<\/p>\n\n<p>\n  Here is an example of how your program should work:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Sentence: <\/o><i>This is a short sentence.<\/i>\n<o>I read it.<\/o>\n<o>Sentence: <\/o><i>This is a very long sentence and it might not get read.<\/i>\n<o>TL;DR<\/o>\n<o>Sentence: <\/o><i><\/i>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Here is a longer example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Sentence: <\/o><i>Oh my, what a beautiful day it is today!<\/i>\n<o>TL;DR<\/o>\n<o>Sentence: <\/o><i>The warm weather is delightful.<\/i>\n<o>TL;DR<\/o>\n<o>Sentence: <\/o><i>It is sunny today.<\/i>\n<o>I read it.<\/o>\n<o>Sentence: <\/o><i>The weather today's fantastic!<\/i>\n<o>I read it.<\/o>\n<o>Sentence: <\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<aside class=\"info\">\n  <h2>Reminder: the <bk class=\"math\">length<\/bk> gets the length of a string.<\/h2>\n  <p>\n    The <bk class=\"math\">length<\/bk> block counts the characters in a string:\n  <\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"string-length0\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print1\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text_length\" inline=\"true\">\n        <value name=\"VALUE\">\n          <block type=\"text\">\n            <field name=\"TEXT\">Too long; didn't read<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<\/aside>",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "while",
        "multiple-lines",
        "string:len"
      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"text_length\",\"math_number\",\"io_print1\",\"io_print2\",\"decisions_if_else_compare\",\"loops_read_text_until_empty\",\"logic_compare\",\"logic_isMember\",\"logic_isEmpty\",\"text_length\"]",
      "teacher_notes":"<p>\n  This question is tricky because it combines a <bk class=\"control\">repeat while<\/bk> loop and an <bk class=\"control\">if<\/bk> statement.\n<\/p>\n\n<p>A good place to start is getting the <bk class=\"control\">while<\/bk> loop working first:<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"tldr-solution-notes-eg1\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"loops_read_ask\" id=\"7\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">line<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"8\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"9\">\n            <field name=\"TEXT\">Sentence:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isEmpty\" id=\"10\" inline=\"true\">\n        <field name=\"OP\">IS_NOT<\/field>\n        <value name=\"VALUE\">\n          <block type=\"variables_get\" id=\"11\">\n            <field name=\"VAR\">line<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>This is the same pattern as other loop questions, you've done before.<\/p>\n\n<p>This gives us a clear place to add the check for whether the sentence is too long. The key concept here is that the entire <bk class=\"control\">if<\/bk> block must inside the <bk class=\"control\">while<\/bk> loop, and then the <bk class=\"output\">print<\/bk> blocks inside the <bk class=\"control\">if<\/bk> block.<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"tldr-solution-notes-eg2\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"decisions_if_else\" id=\"6\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"7\" inline=\"true\">\n        <field name=\"OP\">GT<\/field>\n        <value name=\"A\">\n          <block type=\"text_length\" id=\"8\" inline=\"true\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"9\">\n                <field name=\"VAR\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"math_number\" id=\"10\">\n            <field name=\"NUM\">30<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"11\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"12\">\n            <field name=\"TEXT\">TL;DR<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <statement name=\"ELSE\">\n      <block type=\"io_print1\" id=\"13\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"14\">\n            <field name=\"TEXT\">I read it.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>"
    },
    {
      "language":0,
      "title":"Um... no... umm...",
      "notes":"<p>\n  <strong>The program must keep asking for text <em>while<\/em> the text contains <code data-lang=\"str\">um<\/code>.<\/strong>\n<\/p>\n\n<p>\n  The solution involves just filling the holes in the <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block, and that's pretty much it.\n<\/p>\n\n<p>\n  Let's start with the <bk class=\"str\">ask<\/bk> prompt and variable:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-um-no-umm-while\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"loops_read_ask\" id=\"10\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">speech<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"11\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"12\">\n            <field name=\"TEXT\">Speech:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  We need to check if <bk class=\"str lit\"><bk class=\"inner\">um<\/bk><\/bk> occurs anywhere in <bk class=\"var\"><bk class=\"inner\">speech<\/bk><\/bk>, which we do with the <bk class=\"logic\">in<\/bk> block. If it is, we keep looping:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-um-no-umm-in\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"loops_read_ask\" id=\"4\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">speech<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"5\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"6\">\n            <field name=\"TEXT\">Speech:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isMember\" id=\"7\" inline=\"true\">\n        <field name=\"OP\">IN<\/field>\n        <value name=\"MEMBER\">\n          <block type=\"text\" id=\"8\">\n            <field name=\"TEXT\">um<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"9\">\n            <field name=\"VAR\">speech<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"io\">print<\/bk> in the loop body runs each iteration, reminding the user not to say <code data-lang=\"in\">um<\/code> each time:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-um-no-umm\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"loops_read_ask\" id=\"7\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">speech<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"8\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"9\">\n            <field name=\"TEXT\">Speech:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isMember\" id=\"10\" inline=\"true\">\n        <field name=\"OP\">IN<\/field>\n        <value name=\"MEMBER\">\n          <block type=\"text\" id=\"11\">\n            <field name=\"TEXT\">um<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"12\">\n            <field name=\"VAR\">speech<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print1\" id=\"13\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"14\">\n            <field name=\"TEXT\">You said um!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  And we finish with a congratulations printed at the end.\n<\/p>\n",
      "updated_at":"2016-08-21T17:17:51.705298+00:00",
      "label":"bk-py3-um-no-um",
      "content":"<p>\n  You've got a big speech coming up, but you say \"um\" too often!\n<\/p>\n\n<p>\n  Write a program to practice your speech, but when you say <code data-lang=\"in\">um<\/code> it will ask you to say it again:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>Speech: <\/o><i>Welcome um, everyone!<\/i>\n<o>You said um!<\/o>\n<o>Speech: <\/o><i>Welcome everyone um...<\/i>\n<o>You said um!<\/o>\n<o>Speech: <\/o><i>um...<\/i>\n<o>You said um!<\/o>\n<o>Speech: <\/o><i>Welcome everyone!<\/i>\n<o>Got it.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Your program isn't smart \u2014\u00a0it catches <code data-lang=\"in\">um<\/code> anywhere, like <code data-lang=\"py3\">umbrella<\/code>:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>Speech: <\/o><i>You will need an umbrella!<\/i>\n<o>You said um!<\/o>\n<o>Speech: <\/o><i>You should take a raincoat.<\/i>\n<o>Got it.<\/o>\n<o><\/o>\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_ask_text\",\"loops_read_text\",\"logic_isMember\",\"logic_isCase\",\"logic_stringEnds\"]",
      "teacher_notes":"<p>\n  <strong>The program must keep asking for text <em>while<\/em> the text contains <code data-lang=\"str\">um<\/code>.<\/strong>\n<\/p>\n\n<p>\n  The solution involves just filling the holes in the <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block, and that's pretty much it.\n<\/p>\n\n<p>\n  Let's start with the <bk class=\"str\">ask<\/bk> prompt and variable:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-um-no-umm-while\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"loops_read_ask\" id=\"10\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">speech<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"11\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"12\">\n            <field name=\"TEXT\">Speech:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  We need to check if <bk class=\"str lit\"><bk class=\"inner\">um<\/bk><\/bk> occurs anywhere in <bk class=\"var\"><bk class=\"inner\">speech<\/bk><\/bk>, which we do with the <bk class=\"logic\">in<\/bk> block. If it is, we keep looping:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-um-no-umm-in\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"loops_read_ask\" id=\"4\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">speech<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"5\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"6\">\n            <field name=\"TEXT\">Speech:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isMember\" id=\"7\" inline=\"true\">\n        <field name=\"OP\">IN<\/field>\n        <value name=\"MEMBER\">\n          <block type=\"text\" id=\"8\">\n            <field name=\"TEXT\">um<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"9\">\n            <field name=\"VAR\">speech<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The <bk class=\"io\">print<\/bk> in the loop body runs each iteration, reminding the user not to say <code data-lang=\"in\">um<\/code> each time:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-um-no-umm\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"loops_read_ask\" id=\"7\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">speech<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"8\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"9\">\n            <field name=\"TEXT\">Speech:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_isMember\" id=\"10\" inline=\"true\">\n        <field name=\"OP\">IN<\/field>\n        <value name=\"MEMBER\">\n          <block type=\"text\" id=\"11\">\n            <field name=\"TEXT\">um<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"12\">\n            <field name=\"VAR\">speech<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print1\" id=\"13\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"14\">\n            <field name=\"TEXT\">You said um!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  And we finish with a congratulations printed at the end.\n<\/p>\n"
    },
    {
      "language":0,
      "title":"Snooze No More!",
      "notes":"<p>\n  <strong>The program must keep printing <em>while<\/em> the answer is not <code data-lang=\"in\">I am up!<\/code><\/strong>\n<\/p>\n\n<p>\n  This program must print out an annoying message to wake you up, and then ask you a question. If you don't get the question right, the annoying messages will continue!\n<\/p>\n\n<p>\n  Start by printing out the annoying message:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"snooze-no-more-print\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print1\" id=\"10\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"11\">\n        <field name=\"TEXT\">MEEP MEEP MEEP<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Next, ask the question with the new <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"snooze-no-more-ask\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print1\" id=\"22\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"23\">\n        <field name=\"TEXT\">MEEP MEEP MEEP<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_read_ask\" id=\"24\" inline=\"true\">\n        <field name=\"VAR\">answer<\/field>\n        <value name=\"ASK_BLOCK\">\n          <block type=\"io_ask_text\" id=\"25\" inline=\"true\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"26\">\n                <field name=\"TEXT\">Are you up?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <em>While<\/em> the answer is not incorrect (that is, while <bk class=\"var\"><bk class=\"inner\">answer<\/bk><\/bk> is <em>not equal<\/em> to <code data-lang=\"str\">I am up!<\/code>) we need to keep asking:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"snooze-no-more-while\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print1\" id=\"58\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"59\">\n        <field name=\"TEXT\">MEEP MEEP MEEP<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_read_ask\" id=\"60\" inline=\"true\">\n        <field name=\"VAR\">answer<\/field>\n        <value name=\"ASK_BLOCK\">\n          <block type=\"io_ask_text\" id=\"61\" inline=\"true\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"62\">\n                <field name=\"TEXT\">Are you up?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"BOOL\">\n          <block type=\"logic_compare\" id=\"63\" inline=\"true\">\n            <field name=\"OP\">NEQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"64\">\n                <field name=\"VAR\">answer<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"65\">\n                <field name=\"TEXT\">I am up!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  We need to print out that annoying message each iteration too, so that goes into the body of the loop:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"snooze-no-more-while-print\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print1\" id=\"9\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"10\">\n        <field name=\"TEXT\">MEEP MEEP MEEP<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_read_ask\" id=\"11\" inline=\"true\">\n        <field name=\"VAR\">answer<\/field>\n        <value name=\"ASK_BLOCK\">\n          <block type=\"io_ask_text\" id=\"12\" inline=\"true\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"13\">\n                <field name=\"TEXT\">Are you up?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"BOOL\">\n          <block type=\"logic_compare\" id=\"14\" inline=\"true\">\n            <field name=\"OP\">NEQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"15\">\n                <field name=\"VAR\">answer<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"16\">\n                <field name=\"TEXT\">I am up!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO\">\n          <block type=\"io_print1\" id=\"17\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"18\">\n                <field name=\"TEXT\">MEEP MEEP MEEP<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  All that is left is to print the final message once you're awake.\n<\/p>\n",
      "updated_at":"2016-08-21T16:44:09.676333+00:00",
      "label":"bk-py3-snooze-no-more",
      "content":"<p>\n  When your alarm goes off, you can hit the <em>snooze<\/em> button and fall back asleep.\n  Write a program that won't let you snooze too long!\n<\/p>\n\n<p>\n  Your program should print out <code data-lang=\"out\">MEEP MEEP MEEP<\/code> and then keep asking the user <code data-lang=\"out\">Are you up? <\/code> until the user enters <code data-lang=\"in\">I am up!<\/code>\n<\/p>\n\n<p>\n  If the user says anything else, your program should print out <code data-lang=\"out\">MEEP MEEP MEEP<\/code> and ask the user for input again.\n<\/p>\n<p>\n  Once the user says <code data-lang=\"in\">I am up!<\/code> your program should finish by printing out <code data-lang=\"out\">Took you long enough!<\/code>\n<\/p>\n<p>\n  For example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>Noooo<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>I'm sleepy<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>snooze...<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>snooze...<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>OK OK!<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>I am up!<\/i>\n<o>Took you long enough!<\/o>\n<o><\/o>\n<\/code><\/pre>\n<p>\n  Here is another example. The program should run until the user enters <code data-lang=\"in\">I am up!<\/code> exactly:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>Sssssh<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>i'm up<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>I am awake!<\/i>\n<o>MEEP MEEP MEEP<\/o>\n<o>Are you up? <\/o><i>I am up!<\/i>\n<o>Took you long enough!<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "while",
        "input",
        "multiple-lines",
        "print"
      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_print2\",\"loops_read_text\",\"logic_compare\"]",
      "teacher_notes":"<p>\n  <strong>The program must keep printing <em>while<\/em> the answer is not <code data-lang=\"in\">I am up!<\/code><\/strong>\n<\/p>\n\n<p>\n  This program must print out an annoying message to wake you up, and then ask you a question. If you don't get the question right, the annoying messages will continue!\n<\/p>\n\n<p>\n  Start by printing out the annoying message:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"snooze-no-more-print\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print1\" id=\"10\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"11\">\n        <field name=\"TEXT\">MEEP MEEP MEEP<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Next, ask the question with the new <bk class=\"control\">repeat <bk class=\"str\">ask<\/bk> while<\/bk> block:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"snooze-no-more-ask\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print1\" id=\"22\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"23\">\n        <field name=\"TEXT\">MEEP MEEP MEEP<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_read_ask\" id=\"24\" inline=\"true\">\n        <field name=\"VAR\">answer<\/field>\n        <value name=\"ASK_BLOCK\">\n          <block type=\"io_ask_text\" id=\"25\" inline=\"true\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"26\">\n                <field name=\"TEXT\">Are you up?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  <em>While<\/em> the answer is not incorrect (that is, while <bk class=\"var\"><bk class=\"inner\">answer<\/bk><\/bk> is <em>not equal<\/em> to <code data-lang=\"str\">I am up!<\/code>) we need to keep asking:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"snooze-no-more-while\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print1\" id=\"58\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"59\">\n        <field name=\"TEXT\">MEEP MEEP MEEP<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_read_ask\" id=\"60\" inline=\"true\">\n        <field name=\"VAR\">answer<\/field>\n        <value name=\"ASK_BLOCK\">\n          <block type=\"io_ask_text\" id=\"61\" inline=\"true\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"62\">\n                <field name=\"TEXT\">Are you up?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"BOOL\">\n          <block type=\"logic_compare\" id=\"63\" inline=\"true\">\n            <field name=\"OP\">NEQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"64\">\n                <field name=\"VAR\">answer<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"65\">\n                <field name=\"TEXT\">I am up!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  We need to print out that annoying message each iteration too, so that goes into the body of the loop:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"snooze-no-more-while-print\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print1\" id=\"9\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"10\">\n        <field name=\"TEXT\">MEEP MEEP MEEP<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_read_ask\" id=\"11\" inline=\"true\">\n        <field name=\"VAR\">answer<\/field>\n        <value name=\"ASK_BLOCK\">\n          <block type=\"io_ask_text\" id=\"12\" inline=\"true\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"13\">\n                <field name=\"TEXT\">Are you up?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"BOOL\">\n          <block type=\"logic_compare\" id=\"14\" inline=\"true\">\n            <field name=\"OP\">NEQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"15\">\n                <field name=\"VAR\">answer<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"16\">\n                <field name=\"TEXT\">I am up!<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO\">\n          <block type=\"io_print1\" id=\"17\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"18\">\n                <field name=\"TEXT\">MEEP MEEP MEEP<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  All that is left is to print the final message once you're awake.\n<\/p>\n"
    },
    {
      "language":0,
      "title":"Need a Hug?",
      "notes":"<p>\n  Describing the problem in your own words helps you <em>understand it better<\/em>, and <em>identify the pieces of code<\/em> you need to solve it:\n<\/p>\n\n<p>\n  <strong>The program must <em>decide<\/em> to print a message, based on user input.<\/strong>\n<\/p>\n\n<p>\n  Once you've got the pieces, you need to work out where they go.  Here, the <code data-lang=\"py3\">if<\/code> <em>controls<\/em> the <code data-lang=\"py3\">print<\/code>, but it needs the input <em>before<\/em> it can make a decision.  The correct order is:\n<\/p>\n\n<ol>\n  <li><bk class=\"str\">ask<\/bk> for reading user input;<\/li>\n  <li><bk class=\"control\">if<\/bk> block for deciding to run some code (or not);<\/li>\n  <li><bk class=\"io\">print<\/bk> for printing out a message.<\/li>\n  <li><bk class=\"io\">print<\/bk> for printing a message that doesn't depend on the <code data-lang=\"py3\">if<\/code><\/li>\n<\/ol>\n\n<p>\n  We get input in the usual way, choosing <code data-lang=\"py3\">hug<\/code> as the variable name.\n<\/p>\n\n<p>\n  We need to check if <bk class=\"var\"><bk class=\"inner\">hug<\/bk><\/bk> equals <bk class=\"str lit\"><bk class=\"inner\">yes<\/bk><\/bk>. If so, we print the message!\n<\/p>\n",
      "updated_at":"2017-07-25T16:01:01.726235+00:00",
      "label":"bk-py3-need-a-hug",
      "content":"<p>\n  Before there were emojis to help you express yourself in emails and texts, there was a text based system called <a href=\"https:\/\/en.wikipedia.org\/wiki\/Emoticon#Japanese_style\" target=\"_blank\">emoticons<\/a>. In Western countries users generally had to tilt their head to the side to see the expression of the emoticon but in Japan they developed <a href=\"https:\/\/en.wikipedia.org\/wiki\/Emoticon#Japanese_style\" target=\"_blank\">kaomoji<\/a>.\n<\/p>\n\n<p>\n  Write a program to give your friend a kaomoji hug if they need one.\n  For example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Do you need a hug? <\/o><i>Yes<\/i>\n<o>\\(^-^)\/<\/o>\n<o>Have a great day!<\/o>\n<o><\/o>\n<\/code><\/pre>\n<p>\n  It should work regardless of whether they used upper or lower case or a mix of both.\n  For example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Do you need a hug? <\/o><i>YES<\/i>\n<o>\\(^-^)\/<\/o>\n<o>Have a great day!<\/o>\n<o><\/o>\n<\/code><\/pre>\n<p>\n  If they don't need a hug you should still wish them a great day:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Do you need a hug? <\/o><i>no<\/i>\n<o>Have a great day!<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Any answer other than <code data-lang=\"in\">yes<\/code> (with any capitalisation) should work the same way:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Do you need a hug? <\/o><i>nup<\/i>\n<o>Have a great day!<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "if",
        "string:eq"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_changeCase\",\"io_print1_text\",\"io_ask_text\",\"decisions_if_compare\"]",
      "teacher_notes":"<p>\n  Describing the problem in your own words helps you <em>understand it better<\/em>, and <em>identify the pieces of code<\/em> you need to solve it:\n<\/p>\n\n<p>\n  <strong>The program must <em>decide<\/em> to print a message, based on user input.<\/strong>\n<\/p>\n\n<p>\n  Once you've got the pieces, you need to work out where they go.  Here, the <code data-lang=\"py3\">if<\/code> <em>controls<\/em> the <code data-lang=\"py3\">print<\/code>, but it needs the input <em>before<\/em> it can make a decision.  The correct order is:\n<\/p>\n\n<ol>\n  <li><bk class=\"str\">ask<\/bk> for reading user input;<\/li>\n  <li><bk class=\"control\">if<\/bk> block for deciding to run some code (or not);<\/li>\n  <li><bk class=\"io\">print<\/bk> for printing out a message.<\/li>\n  <li><bk class=\"io\">print<\/bk> for printing a message that doesn't depend on the <code data-lang=\"py3\">if<\/code><\/li>\n<\/ol>\n\n<p>\n  We get input in the usual way, choosing <code data-lang=\"py3\">hug<\/code> as the variable name.\n<\/p>\n\n<p>\n  We need to check if <bk class=\"var\"><bk class=\"inner\">hug<\/bk><\/bk> equals <bk class=\"str lit\"><bk class=\"inner\">yes<\/bk><\/bk>. If so, we print the message!\n<\/p>\n"
    },
    {
      "language":0,
      "title":"Email Address",
      "notes":"<p>\n  This question involves building a long string out of many parts, so it helps to build up the string as we go.\n<\/p>\n\n<p>We start by collecting the inputs (and giving them useful names):<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"email-addr-teacher-1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"21\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">first name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"22\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"23\">\n            <field name=\"TEXT\">First name:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"24\" inline=\"true\">\n        <field name=\"VAR\">last name<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"25\" inline=\"true\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"26\">\n                <field name=\"TEXT\">Last name:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  We get the first letter of the first name with <bk class=\"str\">character<\/bk> like this:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"email-addr-teacher-2\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print1\" id=\"45\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text_subscript\" id=\"47\" inline=\"true\">\n        <value name=\"INDEX\">\n          <block type=\"math_number\" id=\"49\">\n            <field name=\"NUM\">0<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"VALUE\">\n          <block type=\"variables_get\" id=\"59\">\n            <field name=\"VAR\">first name<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>We can now create the <em>username<\/em> by adding the first letter to the last name (and we can keep it in a variable for later):<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"email-addr-teacher-3\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"66\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">username<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text_concat2\" id=\"72\" inline=\"true\">\n        <value name=\"TEXT0\">\n          <block type=\"text_subscript\" id=\"47\" inline=\"true\">\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"49\">\n                <field name=\"NUM\">0<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"59\">\n                <field name=\"VAR\">first name<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"variables_get\" id=\"73\">\n            <field name=\"VAR\">last name<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Since this may contain uppercase letters, we use <bk class=\"str\">lowercase<\/bk> to convert the string to lowercase.  We can add it to the rest of the email address in one go:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"email-addr-teacher-4\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"80\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">email<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text_concat2\" id=\"114\" inline=\"true\">\n        <value name=\"TEXT0\">\n          <block type=\"text_changeCase\" id=\"92\" inline=\"true\">\n            <field name=\"CASE\">LOWERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"108\">\n                <field name=\"VAR\">username<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text\" id=\"119\">\n            <field name=\"TEXT\">@example.school.edu<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>And then we have a complete email address to print at the end.<\/p>\n\n<aside class=\"info\">\n  <h2>Extra variables help<\/h2>\n  <p>Using extra variables with obvious variable names makes this problem much easier to solve.<\/p>\n<\/aside>\n",
      "updated_at":"2016-08-28T21:58:35.292406+00:00",
      "label":"bk-py3-email-address",
      "content":"<p>\n  You're creating an email address for all the new students at your school.\n  Each email address is created using the first letter of the student's first name and then their last name.\n<\/p>\n\n<p>\n  Write a program that takes the first and last name of the student, and prints out their email address.\n  For example:\n<\/p>\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>First name: <\/o><i>Stephen<\/i>\n<o>Last name: <\/o><i>Merity<\/i>\n<o>Your email address is smerity@example.school.edu<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  All of the letters in the email address should be <strong>lowercase<\/strong>.\n<\/p>\n<p>\n  Here is another example student at Example School:\n<\/p>\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>First name: <\/o><i>Jasmine<\/i>\n<o>Last name: <\/o><i>Constable<\/i>\n<o>Your email address is jconstable@example.school.edu<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"text_concat2\",\"text_concat3\",\"text_changeCase\",\"text_subscript\",\"math_number\",\"io_print1\",\"io_print2\",\"io_print3\",\"io_ask_text\"]",
      "teacher_notes":"<p>\n  This question involves building a long string out of many parts, so it helps to build up the string as we go.\n<\/p>\n\n<p>We start by collecting the inputs (and giving them useful names):<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"email-addr-teacher-1\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"21\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">first name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"22\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"23\">\n            <field name=\"TEXT\">First name:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"24\" inline=\"true\">\n        <field name=\"VAR\">last name<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"25\" inline=\"true\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"26\">\n                <field name=\"TEXT\">Last name:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  We get the first letter of the first name with <bk class=\"str\">character<\/bk> like this:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"email-addr-teacher-2\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"io_print1\" id=\"45\" inline=\"true\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text_subscript\" id=\"47\" inline=\"true\">\n        <value name=\"INDEX\">\n          <block type=\"math_number\" id=\"49\">\n            <field name=\"NUM\">0<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"VALUE\">\n          <block type=\"variables_get\" id=\"59\">\n            <field name=\"VAR\">first name<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>We can now create the <em>username<\/em> by adding the first letter to the last name (and we can keep it in a variable for later):<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"email-addr-teacher-3\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"66\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">username<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text_concat2\" id=\"72\" inline=\"true\">\n        <value name=\"TEXT0\">\n          <block type=\"text_subscript\" id=\"47\" inline=\"true\">\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"49\">\n                <field name=\"NUM\">0<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"59\">\n                <field name=\"VAR\">first name<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"variables_get\" id=\"73\">\n            <field name=\"VAR\">last name<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Since this may contain uppercase letters, we use <bk class=\"str\">lowercase<\/bk> to convert the string to lowercase.  We can add it to the rest of the email address in one go:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"email-addr-teacher-4\" data-runnable=\"false\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"80\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">email<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text_concat2\" id=\"114\" inline=\"true\">\n        <value name=\"TEXT0\">\n          <block type=\"text_changeCase\" id=\"92\" inline=\"true\">\n            <field name=\"CASE\">LOWERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"108\">\n                <field name=\"VAR\">username<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text\" id=\"119\">\n            <field name=\"TEXT\">@example.school.edu<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>And then we have a complete email address to print at the end.<\/p>\n\n<aside class=\"info\">\n  <h2>Extra variables help<\/h2>\n  <p>Using extra variables with obvious variable names makes this problem much easier to solve.<\/p>\n<\/aside>\n"
    },
    {
      "language":0,
      "title":"Unprefixed",
      "notes":"",
      "updated_at":"2017-10-11T12:09:23.955356+00:00",
      "label":"bk-py3-unprefixed",
      "content":"<p>\n  Lots of words in English start with <code data-lang=\"in\">un<\/code>-, and they usually mean the opposite thing. For example <code data-lang=\"in\">unwritten<\/code> means <code data-lang=\"out\">not written<\/code>.\n<\/p>\n\n<p>\n  Write a program which tries to explain what an un-word means. If the word starts with <code data-lang=\"in\">un<\/code> then it should remove the <code data-lang=\"in\">un<\/code> and print this:\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>Enter a word: <\/o><i>unwritten<\/i>\n<o>That means not written<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>If the word doesn't start with <code data-lang=\"in\">un<\/code> then it should just say that the word means what it is:<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>Enter a word: <\/o><i>written<\/i>\n<o>That means written<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  This rule doesn't work every time, so here's a funny example:\n<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>Enter a word: <\/o><i>under<\/i>\n<o>That means not der<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>And another funny one:<\/p>\n\n<pre class=\"js-terminal\" data-eg-id=\"\"><code data-lang=\"py3\"><o>Enter a word: <\/o><i>unique<\/i>\n<o>That means not ique<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_concat2\",\"text_concat3\",\"text_slice_to_end\",\"math_number\",\"io_print2\",\"io_ask_text\",\"decisions_if_else\",\"logic_stringEnds\"]",
      "teacher_notes":""
    },
    {
      "language":0,
      "title":"Double Or Nothing",
      "notes":"<p>\n  <strong>The program checks if a string's first two characters are equal.<\/strong>\n<\/p>\n\n<p>\n  Start by printing the first and second characters of the word. <strong>Don't forget: indices start at zero, so the first character has index <code data-lang=\"py3\">0<\/code><\/strong>.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-double-or-nothing-indices\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">word<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Word:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"17\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_subscript\" id=\"6\" inline=\"true\">\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"7\">\n                <field name=\"NUM\">0<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"8\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"18\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text_subscript\" id=\"19\" inline=\"true\">\n                <value name=\"INDEX\">\n                  <block type=\"math_number\" id=\"20\">\n                    <field name=\"NUM\">1<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"21\">\n                    <field name=\"VAR\">word<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  We use <bk class=\"io\">print<\/bk> to just check we're getting the right characters.\n<\/p>\n\n<p>\n  Now, the equality test is just between these two characters:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-double-or-nothing-if\" data-runnable=\"false\"><code data-lang=\"py3\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">word<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Word:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"text_subscript\" id=\"6\" inline=\"true\">\n                <value name=\"INDEX\">\n                  <block type=\"math_number\" id=\"7\">\n                    <field name=\"NUM\">0<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"8\">\n                    <field name=\"VAR\">word<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text_subscript\" id=\"9\" inline=\"true\">\n                <value name=\"INDEX\">\n                  <block type=\"math_number\" id=\"10\">\n                    <field name=\"NUM\">1<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"11\">\n                    <field name=\"VAR\">word<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  and all you need to do is <bk class=\"io\">print<\/bk> the right messages.\n<\/p>\n\n<p>\n  These blocks get quite wide, so you might want to store the characters in variables. The second sample solution does this.\n<\/p>\n",
      "updated_at":"2016-08-14T21:47:53.417798+00:00",
      "label":"bk-py3-first-two-letters",
      "content":"<p>\n  Only a small number of English words start with a double letter!\n  Words like <code data-lang=\"in\">eerie<\/code>, <code data-lang=\"in\">llama<\/code>, and <code data-lang=\"in\">ooze<\/code>.\n<\/p>\n\n<p>\n  Write a program that checks if the <strong>first letter<\/strong> and the <strong>second letter<\/strong> of a word are the same character.\n  Here's an example:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Word: <\/o><i>eerie<\/i>\n<o>Starts with a double letter!<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If the first two letters are different, your program should do this:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Word: <\/o><i>dog<\/i>\n<o>No double letter at the start.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Double letters don't matter unless they're the first two, like this:\n<\/p>\n\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Word: <\/o><i>foot<\/i>\n<o>No double letter at the start.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Your program will only be tested on words at least 2 letters long.\n<\/p>\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:indexing"
      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"text_subscript\",\"math_number\",\"io_print1\",\"io_ask_text\",\"decisions_if_else_compare\"]",
      "teacher_notes":"<p>\n  <strong>The program checks if a string's first two characters are equal.<\/strong>\n<\/p>\n\n<p>\n  Start by printing the first and second characters of the word. <strong>Don't forget: indices start at zero, so the first character has index <code data-lang=\"py3\">0<\/code><\/strong>.\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-double-or-nothing-indices\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">word<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Word:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"17\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_subscript\" id=\"6\" inline=\"true\">\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"7\">\n                <field name=\"NUM\">0<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"8\">\n                <field name=\"VAR\">word<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"18\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"text_subscript\" id=\"19\" inline=\"true\">\n                <value name=\"INDEX\">\n                  <block type=\"math_number\" id=\"20\">\n                    <field name=\"NUM\">1<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"21\">\n                    <field name=\"VAR\">word<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  We use <bk class=\"io\">print<\/bk> to just check we're getting the right characters.\n<\/p>\n\n<p>\n  Now, the equality test is just between these two characters:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-double-or-nothing-if\" data-runnable=\"false\"><code data-lang=\"py3\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">word<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Word:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">EQ<\/field>\n            <value name=\"A\">\n              <block type=\"text_subscript\" id=\"6\" inline=\"true\">\n                <value name=\"INDEX\">\n                  <block type=\"math_number\" id=\"7\">\n                    <field name=\"NUM\">0<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"8\">\n                    <field name=\"VAR\">word<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text_subscript\" id=\"9\" inline=\"true\">\n                <value name=\"INDEX\">\n                  <block type=\"math_number\" id=\"10\">\n                    <field name=\"NUM\">1<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"11\">\n                    <field name=\"VAR\">word<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  and all you need to do is <bk class=\"io\">print<\/bk> the right messages.\n<\/p>\n\n<p>\n  These blocks get quite wide, so you might want to store the characters in variables. The second sample solution does this.\n<\/p>\n"
    },
    {
      "language":0,
      "title":"Capital Cities",
      "notes":"<p>\n  Let's start by describing the problem:\n<\/p>\n\n<p>\n  <strong>The program must check if the string is all <em>lowercase<\/em>, and if it is, capitalise it with the <bk class=\"str\">Titlecase<\/bk> block.<\/strong>\n<\/p>\n\n<p>\n  For this question you needed to use two new string blocks.\n<\/p>\n\n<p>\n  The <bk class=\"logic\">is <bk class=\"inner\">lowercase<\/bk><\/bk> block checks if the string is lowercase or not.  It's used with an <bk class=\"control\">if<\/bk> block to decide what message to print.\n<\/p>\n\n<p>\n  The <bk class=\"str\">Titlecase<\/bk> block changes the first letter of each word in a string to a capital letter:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-capital-cities-title\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"5\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"14\">\n        <field name=\"TEXT\">san francisco<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"17\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_changeCase\" id=\"21\" inline=\"true\">\n            <field name=\"CASE\">TITLECASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"18\">\n                <field name=\"VAR\">name<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
      "updated_at":"2016-08-14T21:42:54.185943+00:00",
      "label":"bk-py3-capital-cities",
      "content":"<p>\n  In English, city names have capital letters, but sometimes you forget to type the capital letters!<\/p>\n<\/p>\n\n<p>\n  Write a program to correct this mistake.\n  If the user enters a city name which is all lowercase, your program should capitalise it with <code data-lang=\"py3\">title<\/code>.\n  Here is an example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>City name: <\/o><i>auckland<\/i>\n<o>You forgot the capital! It should be: Auckland<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  If the name is not all lowercase, then we assume that it's correct:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>City name: <\/o><i>San Francisco<\/i>\n<o>Looks fine to me.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>Here is one more example:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>City name: <\/o><i>brisbane<\/i>\n<o>You forgot the capital! It should be: Brisbane<\/o>\n<o><\/o>\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-else",
        "print",
        "string:lower",
        "string:isupper"
      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"text_changeCase\",\"io_print1\",\"io_print2\",\"io_ask_text\",\"decisions_if_else\",\"logic_isCase\"]",
      "teacher_notes":"<p>\n  Let's start by describing the problem:\n<\/p>\n\n<p>\n  <strong>The program must check if the string is all <em>lowercase<\/em>, and if it is, capitalise it with the <bk class=\"str\">Titlecase<\/bk> block.<\/strong>\n<\/p>\n\n<p>\n  For this question you needed to use two new string blocks.\n<\/p>\n\n<p>\n  The <bk class=\"logic\">is <bk class=\"inner\">lowercase<\/bk><\/bk> block checks if the string is lowercase or not.  It's used with an <bk class=\"control\">if<\/bk> block to decide what message to print.\n<\/p>\n\n<p>\n  The <bk class=\"str\">Titlecase<\/bk> block changes the first letter of each word in a string to a capital letter:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-capital-cities-title\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"5\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text\" id=\"14\">\n        <field name=\"TEXT\">san francisco<\/field>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"17\" inline=\"true\">\n        <value name=\"ANY0\">\n          <block type=\"text_changeCase\" id=\"21\" inline=\"true\">\n            <field name=\"CASE\">TITLECASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"18\">\n                <field name=\"VAR\">name<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Forgotten Attachment?",
      "notes":"<p>\n  Start by describing the problem for yourself:\n<\/p>\n\n<p>\n  <strong>The program must check if a string is <em>contained<\/em> in another string.<\/strong>\n<\/p>\n\n<p>\n  We need an <bk class=\"control\">if<\/bk> statement with an <bk class=\"control\">else<\/bk> as well since there are two cases: either the string <bk class=\"str lit\"><bk class=\"inner\">attach<\/bk><\/bk> is there or it's not.\n<\/p>\n\n<p>\n  This is very similar to the <bk class=\"control\">if<\/bk> and <bk class=\"control\">else<\/bk> programs you wrote before, except\n  you need the <bk class=\"logic\">in<\/bk> block to test if <bk class=\"str lit\"><bk class=\"inner\">attach<\/bk><\/bk> is <em>anywhere<\/em> in the <bk class=\"var\"><bk class=\"inner\">email<\/bk><\/bk> the user entered:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-runnable=\"false\" data-eg-id=\"bk-forgotten-attachment-if\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" movable=\"false\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">email<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Email:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_isMember\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">IN<\/field>\n            <value name=\"MEMBER\">\n              <block type=\"text\" id=\"6\">\n                <field name=\"TEXT\">attach<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"7\">\n                <field name=\"VAR\">email<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The rest is just putting in the right <bk class=\"io\">print<\/bk> blocks!\n<\/p>\n",
      "updated_at":"2016-08-14T21:39:57.271952+00:00",
      "label":"bk-py3-forgot-the-attachment",
      "content":"<p>\n  Have you ever tried to send an email with an attachment but forgot to attach the file?\n  Gmail and Outlook can check this for you.\n<\/p>\n\n<p>\n  Write a program that checks your email for the string <code data-lang=\"in\">attach<\/code>, and if it's there, reminds you to attach the file.\n  Here is an example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Email: <\/o><i>I will attach the document to this email.<\/i>\n<o>Did you remember the attachment?<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n If <code data-lang=\"in\">attach<\/code> doesn't appear in the email, then print that it was sent:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Email: <\/o><\/i>Hi, how are you going?<\/i>\n<o>Sent.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  <code data-lang=\"in\">attach<\/code> can appear <em>anywhere<\/em> in the email, even in a longer word:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Email: <\/o><i>I have attached a photo.<\/i>\n<o>Did you remember the attachment?<\/o>\n<o><\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "if-else",
        "print",
        "string:in"
      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_ask_text\",\"decisions_if_else\",\"logic_isMember\"]",
      "teacher_notes":"<p>\n  Start by describing the problem for yourself:\n<\/p>\n\n<p>\n  <strong>The program must check if a string is <em>contained<\/em> in another string.<\/strong>\n<\/p>\n\n<p>\n  We need an <bk class=\"control\">if<\/bk> statement with an <bk class=\"control\">else<\/bk> as well since there are two cases: either the string <bk class=\"str lit\"><bk class=\"inner\">attach<\/bk><\/bk> is there or it's not.\n<\/p>\n\n<p>\n  This is very similar to the <bk class=\"control\">if<\/bk> and <bk class=\"control\">else<\/bk> programs you wrote before, except\n  you need the <bk class=\"logic\">in<\/bk> block to test if <bk class=\"str lit\"><bk class=\"inner\">attach<\/bk><\/bk> is <em>anywhere<\/em> in the <bk class=\"var\"><bk class=\"inner\">email<\/bk><\/bk> the user entered:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-runnable=\"false\" data-eg-id=\"bk-forgotten-attachment-if\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"1\" inline=\"true\" movable=\"false\" x=\"15\" y=\"15\">\n    <field name=\"VAR\">email<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"2\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"3\">\n            <field name=\"TEXT\">Email:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"decisions_if_else\" id=\"4\" inline=\"true\">\n        <value name=\"IF0\">\n          <block type=\"logic_isMember\" id=\"5\" inline=\"true\">\n            <field name=\"OP\">IN<\/field>\n            <value name=\"MEMBER\">\n              <block type=\"text\" id=\"6\">\n                <field name=\"TEXT\">attach<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"7\">\n                <field name=\"VAR\">email<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  The rest is just putting in the right <bk class=\"io\">print<\/bk> blocks!\n<\/p>\n"
    },
    {
      "language":0,
      "title":"How good is your vocabulary?",
      "notes":"#markdown\nTo solve this question, we'll first need to read in the long word and save it in a variable.\n\nThen, we need to calculate the length of the message, and subtract it from 28, the length of the longest word.\n\nYou can solve this in small steps:\n\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"}n#.QZdLY_ijvz)GS|.E\">length<\/variable>\n    <variable type=\"\" id=\"bF{0)9:!|t`!q.C32R2O\">longword<\/variable>\n    <variable type=\"\" id=\"R^@dE_}7@q8gZs{}[5+Q\">remain<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"M6_AsD~Inl]@U%?i5dP9\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"bF{0)9:!|t`!q.C32R2O\" variabletype=\"\">longword<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"w{bLh0%]QY|x-L+nHb%7\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"X2b3Bbbv@gle1LVNVRhN\">\n            <field name=\"TEXT\">Long word:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"lOHb,=WJ~o$\/F`9f9foa\">\n        <field name=\"VAR\" id=\"}n#.QZdLY_ijvz)GS|.E\" variabletype=\"\">length<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_length\" id=\"EpL]!!iu;Un96I@HX|+t\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"{7u?(%GW0rkE-B]yQEzz\">\n                <field name=\"VAR\" id=\"bF{0)9:!|t`!q.C32R2O\" variabletype=\"\">longword<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"}0YaZMb-@!{wtb~fD,LD\">\n            <field name=\"VAR\" id=\"R^@dE_}7@q8gZs{}[5+Q\" variabletype=\"\">remain<\/field>\n            <value name=\"VALUE\">\n              <block type=\"math_arithmetic\" id=\"?Y}h\/xIv+LLno;gVdTv5\">\n                <field name=\"OP\">MINUS<\/field>\n                <value name=\"A\">\n                  <block type=\"math_number\" id=\"6T)VnH3(LgpRTTuJ+.:t\">\n                    <field name=\"NUM\">28<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"variables_get\" id=\"jRo(Z.JMOxc3-y7xv8lM\">\n                    <field name=\"VAR\" id=\"}n#.QZdLY_ijvz)GS|.E\" variabletype=\"\">length<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print3\" id=\"O1_;M@7T.aeE6f](Nce-\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"Dvx*j:YI3t;7ZjpejS|]\">\n                    <field name=\"TEXT\">It is<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"variables_get\" id=\"gnoLl?lzi]J@!x+[;{e{\">\n                    <field name=\"VAR\" id=\"R^@dE_}7@q8gZs{}[5+Q\" variabletype=\"\">remain<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY2\">\n                  <block type=\"text\" id=\"IpW}?5ljV0+(udqG+g9(\">\n                    <field name=\"TEXT\">letter(s) shorter than the longest word.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nor in case you later find a longer word and want to update your program, you could do it this way:\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"}n#.QZdLY_ijvz)GS|.E\">length<\/variable>\n    <variable type=\"\" id=\"[TxFz`Sc`[(RUkq#7lNq\">longestword<\/variable>\n    <variable type=\"\" id=\"zY?|Wt?LN#rO]2S}b._v\">longlength<\/variable>\n    <variable type=\"\" id=\"bF{0)9:!|t`!q.C32R2O\">longword<\/variable>\n    <variable type=\"\" id=\"R^@dE_}7@q8gZs{}[5+Q\">remain<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"M6_AsD~Inl]@U%?i5dP9\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"bF{0)9:!|t`!q.C32R2O\" variabletype=\"\">longword<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"w{bLh0%]QY|x-L+nHb%7\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"X2b3Bbbv@gle1LVNVRhN\">\n            <field name=\"TEXT\">Long word:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"r(Hw651-c:4E1WBT@Caa\">\n        <field name=\"VAR\" id=\"[TxFz`Sc`[(RUkq#7lNq\" variabletype=\"\">longestword<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text\" id=\"`7hQ^gPyV{\/G#Sug;t|.\">\n            <field name=\"TEXT\">antidisestablishmentarianism<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"lOHb,=WJ~o$\/F`9f9foa\">\n            <field name=\"VAR\" id=\"}n#.QZdLY_ijvz)GS|.E\" variabletype=\"\">length<\/field>\n            <value name=\"VALUE\">\n              <block type=\"text_length\" id=\"EpL]!!iu;Un96I@HX|+t\">\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"{7u?(%GW0rkE-B]yQEzz\">\n                    <field name=\"VAR\" id=\"bF{0)9:!|t`!q.C32R2O\" variabletype=\"\">longword<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"variables_set\" id=\"k4p+VKwkH;qHV]XGEbMD\">\n                <field name=\"VAR\" id=\"zY?|Wt?LN#rO]2S}b._v\" variabletype=\"\">longlength<\/field>\n                <value name=\"VALUE\">\n                  <block type=\"text_length\" id=\"}#?E966L-tUd*zklOk@C\">\n                    <value name=\"VALUE\">\n                      <block type=\"variables_get\" id=\"Hiza@kyL3L.hi~$hzC6+\">\n                        <field name=\"VAR\" id=\"[TxFz`Sc`[(RUkq#7lNq\" variabletype=\"\">longestword<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"variables_set\" id=\"}0YaZMb-@!{wtb~fD,LD\">\n                    <field name=\"VAR\" id=\"R^@dE_}7@q8gZs{}[5+Q\" variabletype=\"\">remain<\/field>\n                    <value name=\"VALUE\">\n                      <block type=\"math_arithmetic\" id=\"?Y}h\/xIv+LLno;gVdTv5\">\n                        <field name=\"OP\">MINUS<\/field>\n                        <value name=\"A\">\n                          <block type=\"variables_get\" id=\"c$oPRKp:dy+t3#R$0y\/k\">\n                            <field name=\"VAR\" id=\"zY?|Wt?LN#rO]2S}b._v\" variabletype=\"\">longlength<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"B\">\n                          <block type=\"variables_get\" id=\"jRo(Z.JMOxc3-y7xv8lM\">\n                            <field name=\"VAR\" id=\"}n#.QZdLY_ijvz)GS|.E\" variabletype=\"\">length<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print3\" id=\"O1_;M@7T.aeE6f](Nce-\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"Dvx*j:YI3t;7ZjpejS|]\">\n                            <field name=\"TEXT\">It is<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"ANY1\">\n                          <block type=\"variables_get\" id=\"gnoLl?lzi]J@!x+[;{e{\">\n                            <field name=\"VAR\" id=\"R^@dE_}7@q8gZs{}[5+Q\" variabletype=\"\">remain<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"ANY2\">\n                          <block type=\"text\" id=\"IpW}?5ljV0+(udqG+g9(\">\n                            <field name=\"TEXT\">letter(s) shorter than the longest word.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nOr you can do it all at once, which is how we imagined you'd solve it. There's no single right way to solve it!",
      "updated_at":"2017-12-02T23:59:21.124864+00:00",
      "label":"bk-py3-vocab-length",
      "content":"#markdown\nIf you're a fan of hangman you need to know some long words. [English has a lot of very long words](https:\/\/en.wikipedia.org\/wiki\/Longest_word_in_English). The longest non-technical word in the English language is [**antidisestablishmentarianism**](https:\/\/en.wikipedia.org\/wiki\/Antidisestablishmentarianism_(word)). At 28 letters it is a **very** long word. \n\nYou want to test your friends' vocabulary by seeing how close they can get to the longest word. \n\nWrite a program to read in the longest word your friends can think of and tell them how close they are to the length of \"antidisestablishmentarianism\":\n\n```lang:py3;terminal;eg:none;\nLong word: @@@incomprehensibilities\nIt is 7 letter(s) shorter than the longest word.\n\n```\n\nHere is another example:\n```lang:py3;terminal;eg:none;\nLong word: @@@unimaginatively\nIt is 13 letter(s) shorter than the longest word.\n\n```\n\nIf the long word is longer than 28 characters, it should print out the negative number of letters\n```lang:py3;terminal;eg:none;\nLong word: @@@supercalifragilisticexpialidocious\nIt is -6 letter(s) shorter than the longest word.\n\n```\nBut we all know that's not a *real* word.",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:len"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_concat3\",\"text_length\",\"math_number\",\"math_arithmetic\",\"io_print1\",\"io_print3\",\"io_ask_text\",\"text_length\"]",
      "teacher_notes":"#markdown\nTo solve this question, we'll first need to read in the long word and save it in a variable.\n\nThen, we need to calculate the length of the message, and subtract it from 28, the length of the longest word.\n\nYou can solve this in small steps:\n\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"}n#.QZdLY_ijvz)GS|.E\">length<\/variable>\n    <variable type=\"\" id=\"bF{0)9:!|t`!q.C32R2O\">longword<\/variable>\n    <variable type=\"\" id=\"R^@dE_}7@q8gZs{}[5+Q\">remain<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"M6_AsD~Inl]@U%?i5dP9\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"bF{0)9:!|t`!q.C32R2O\" variabletype=\"\">longword<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"w{bLh0%]QY|x-L+nHb%7\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"X2b3Bbbv@gle1LVNVRhN\">\n            <field name=\"TEXT\">Long word:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"lOHb,=WJ~o$\/F`9f9foa\">\n        <field name=\"VAR\" id=\"}n#.QZdLY_ijvz)GS|.E\" variabletype=\"\">length<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_length\" id=\"EpL]!!iu;Un96I@HX|+t\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"{7u?(%GW0rkE-B]yQEzz\">\n                <field name=\"VAR\" id=\"bF{0)9:!|t`!q.C32R2O\" variabletype=\"\">longword<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"}0YaZMb-@!{wtb~fD,LD\">\n            <field name=\"VAR\" id=\"R^@dE_}7@q8gZs{}[5+Q\" variabletype=\"\">remain<\/field>\n            <value name=\"VALUE\">\n              <block type=\"math_arithmetic\" id=\"?Y}h\/xIv+LLno;gVdTv5\">\n                <field name=\"OP\">MINUS<\/field>\n                <value name=\"A\">\n                  <block type=\"math_number\" id=\"6T)VnH3(LgpRTTuJ+.:t\">\n                    <field name=\"NUM\">28<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"variables_get\" id=\"jRo(Z.JMOxc3-y7xv8lM\">\n                    <field name=\"VAR\" id=\"}n#.QZdLY_ijvz)GS|.E\" variabletype=\"\">length<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print3\" id=\"O1_;M@7T.aeE6f](Nce-\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"Dvx*j:YI3t;7ZjpejS|]\">\n                    <field name=\"TEXT\">It is<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"variables_get\" id=\"gnoLl?lzi]J@!x+[;{e{\">\n                    <field name=\"VAR\" id=\"R^@dE_}7@q8gZs{}[5+Q\" variabletype=\"\">remain<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY2\">\n                  <block type=\"text\" id=\"IpW}?5ljV0+(udqG+g9(\">\n                    <field name=\"TEXT\">letter(s) shorter than the longest word.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nor in case you later find a longer word and want to update your program, you could do it this way:\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"}n#.QZdLY_ijvz)GS|.E\">length<\/variable>\n    <variable type=\"\" id=\"[TxFz`Sc`[(RUkq#7lNq\">longestword<\/variable>\n    <variable type=\"\" id=\"zY?|Wt?LN#rO]2S}b._v\">longlength<\/variable>\n    <variable type=\"\" id=\"bF{0)9:!|t`!q.C32R2O\">longword<\/variable>\n    <variable type=\"\" id=\"R^@dE_}7@q8gZs{}[5+Q\">remain<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"M6_AsD~Inl]@U%?i5dP9\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"bF{0)9:!|t`!q.C32R2O\" variabletype=\"\">longword<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"w{bLh0%]QY|x-L+nHb%7\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"X2b3Bbbv@gle1LVNVRhN\">\n            <field name=\"TEXT\">Long word:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"r(Hw651-c:4E1WBT@Caa\">\n        <field name=\"VAR\" id=\"[TxFz`Sc`[(RUkq#7lNq\" variabletype=\"\">longestword<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text\" id=\"`7hQ^gPyV{\/G#Sug;t|.\">\n            <field name=\"TEXT\">antidisestablishmentarianism<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"lOHb,=WJ~o$\/F`9f9foa\">\n            <field name=\"VAR\" id=\"}n#.QZdLY_ijvz)GS|.E\" variabletype=\"\">length<\/field>\n            <value name=\"VALUE\">\n              <block type=\"text_length\" id=\"EpL]!!iu;Un96I@HX|+t\">\n                <value name=\"VALUE\">\n                  <block type=\"variables_get\" id=\"{7u?(%GW0rkE-B]yQEzz\">\n                    <field name=\"VAR\" id=\"bF{0)9:!|t`!q.C32R2O\" variabletype=\"\">longword<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"variables_set\" id=\"k4p+VKwkH;qHV]XGEbMD\">\n                <field name=\"VAR\" id=\"zY?|Wt?LN#rO]2S}b._v\" variabletype=\"\">longlength<\/field>\n                <value name=\"VALUE\">\n                  <block type=\"text_length\" id=\"}#?E966L-tUd*zklOk@C\">\n                    <value name=\"VALUE\">\n                      <block type=\"variables_get\" id=\"Hiza@kyL3L.hi~$hzC6+\">\n                        <field name=\"VAR\" id=\"[TxFz`Sc`[(RUkq#7lNq\" variabletype=\"\">longestword<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"variables_set\" id=\"}0YaZMb-@!{wtb~fD,LD\">\n                    <field name=\"VAR\" id=\"R^@dE_}7@q8gZs{}[5+Q\" variabletype=\"\">remain<\/field>\n                    <value name=\"VALUE\">\n                      <block type=\"math_arithmetic\" id=\"?Y}h\/xIv+LLno;gVdTv5\">\n                        <field name=\"OP\">MINUS<\/field>\n                        <value name=\"A\">\n                          <block type=\"variables_get\" id=\"c$oPRKp:dy+t3#R$0y\/k\">\n                            <field name=\"VAR\" id=\"zY?|Wt?LN#rO]2S}b._v\" variabletype=\"\">longlength<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"B\">\n                          <block type=\"variables_get\" id=\"jRo(Z.JMOxc3-y7xv8lM\">\n                            <field name=\"VAR\" id=\"}n#.QZdLY_ijvz)GS|.E\" variabletype=\"\">length<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print3\" id=\"O1_;M@7T.aeE6f](Nce-\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"Dvx*j:YI3t;7ZjpejS|]\">\n                            <field name=\"TEXT\">It is<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"ANY1\">\n                          <block type=\"variables_get\" id=\"gnoLl?lzi]J@!x+[;{e{\">\n                            <field name=\"VAR\" id=\"R^@dE_}7@q8gZs{}[5+Q\" variabletype=\"\">remain<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"ANY2\">\n                          <block type=\"text\" id=\"IpW}?5ljV0+(udqG+g9(\">\n                            <field name=\"TEXT\">letter(s) shorter than the longest word.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nOr you can do it all at once, which is how we imagined you'd solve it. There's no single right way to solve it!"
    },
    {
      "language":0,
      "title":"Trackwork",
      "notes":"#markdown\n**This program must replace one substring with another.**\n\nIf you know about the <bk class=\"str\">replace<\/bk> blocks, then you are most of the way to solving this problem!\n\nWe must replace every time the word `train` appears with `bus`, <bk class=\"str lit\"><bk class=\"inner\">bus<\/bk><\/bk>\n\nYou can do it a step at a time like this:\n\n\n```eg:bk-trackwork-soln;lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"P)#^`e|*t@Xaj(|,jH\/#\">plans<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"1!17NMr-9R-Hj0HSi7V@\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"P)#^`e|*t@Xaj(|,jH\/#\" variabletype=\"\">plans<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"\/zB,;yW}JzXTx!Nz!?LP\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"-)a=7A)CT^2YH[`Vb+0T\">\n            <field name=\"TEXT\">What are your plans?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"057;QKv75^;5C{8xsNs4\">\n        <field name=\"VAR\" id=\"P)#^`e|*t@Xaj(|,jH\/#\" variabletype=\"\">plans<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_replace\" id=\"N6P*Z`58{ovRX~]w6HR[\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"![c)AHkQ2Z4hv3;D9[PQ\">\n                <field name=\"TEXT\">train<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"Gq(mT?T3b%jWn}$xu[Og\">\n                <field name=\"TEXT\">bus<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"cz27979HL_(~%KE=s;RE\">\n                <field name=\"VAR\" id=\"P)#^`e|*t@Xaj(|,jH\/#\" variabletype=\"\">plans<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"$ELL591)3l\/g~G^WB5if\">\n            <value name=\"ANY0\">\n              <block type=\"variables_get\" id=\"-{X%yn^*-A!EKI@[#@jj\">\n                <field name=\"VAR\" id=\"P)#^`e|*t@Xaj(|,jH\/#\" variabletype=\"\">plans<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n```\nOr otherwise, you can do it all at once like the sample solution:\n",
      "updated_at":"2017-07-25T10:24:11.660225+00:00",
      "label":"bk-py3-trackwork",
      "content":"#markdown\n\n<p>\n  Every so often, train tracks need maintenance or repairs. When that happens trains are replaced by buses. Write a program to help people know how to get where they're going. \n<\/p>\n\n<p>\n  Write a program which asks the user for their plans and replaces the word <code data-lang=\"out\">train<\/code> with the word <code data-lang=\"out\">bus<\/code>.\n  Here is an example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What are your plans? <\/o><i>Catching the train to the zoo.<\/i>\n<o>Catching the bus to the zoo.<\/o>\n<o><\/o>\n<\/code><\/pre>\n\nHere is another example:\n```lang:py3;terminal;eg:none;\nWhat are your plans? @@@Take a train to Central then train to Redfern.\nTake a bus to Central then bus to Redfern.\n```\n\n<p>\n  Sometimes there might be a funny outcome:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>What are your plans? <\/o><i>I am going to soccer training.<\/i>\n<o>I am going to soccer busing.<\/o>\n<o><\/o>\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:replace"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_replace\",\"io_print1\",\"io_ask_text\"]",
      "teacher_notes":"<p>\n  <strong>This program must replace one substring with another.<\/strong>\n<\/p>\n\n<p>\n  If you know about the <code data-lang=\"py3\">replace<\/code> string method, then you are most of the way to solving this problem!\n<\/p>\n\n<p>\n  We must replace every reference to <code data-lang=\"out\">train<\/code> with <code data-lang=\"out\">bus<\/code>\n<\/p>\n\n<pre class=\"js-editor\" data-eg-id=\"trackwork-soln\"><code data-lang=\"py3\">\nplan = 'I need to catch a train to school.'\nplan = plan.replace('train', 'bus')\nprint(plan)\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Twittier: Can I Tweet that?",
      "notes":"#markdown\nTo solve this question, we'll first need to <bk class=\"str\"><bk class=\"inner\">ask<\/bk><\/bk> for the message and save it in a <bk class=\"var\"><bk class=\"inner\">variable<\/bk><\/bk>.\n```eg:twittier-soln-0;lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"qkRAOf!7}qYq9H8{}ae~\">length<\/variable>\n    <variable type=\"\" id=\"cqlO*d_zuJ7K!+oYs1ie\">message<\/variable>\n    <variable type=\"\" id=\"_h%C*~Fwbk{:-u$yI}Uc\">remaining<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"L$y:2f496aaO`,Q=p=C*\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"cqlO*d_zuJ7K!+oYs1ie\" variabletype=\"\">message<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"YTBY5{QXjMzeDY%K~N{y\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"^HZQu+q9M`1lMN}EhGYV\">\n            <field name=\"TEXT\">Message:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```  \n\nThen, we need to calculate the <bk class=\"str\"><bk class=\"inner\">length<\/bk><\/bk> of the message...\n```eg:twittier-soln-1;lang:blockly;norun;\n  <xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"qkRAOf!7}qYq9H8{}ae~\">length<\/variable>\n    <variable type=\"\" id=\"cqlO*d_zuJ7K!+oYs1ie\">message<\/variable>\n    <variable type=\"\" id=\"_h%C*~Fwbk{:-u$yI}Uc\">remaining<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"PhcS[cz7A]k%0ijS,u{M\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"qkRAOf!7}qYq9H8{}ae~\" variabletype=\"\">length<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text_length\" id=\"*4R[PoVpn{s8R`1=3L,*\">\n        <value name=\"VALUE\">\n          <block type=\"variables_get\" id=\"U#vQoc%t5@Y8$*w\/X~v^\">\n            <field name=\"VAR\" id=\"cqlO*d_zuJ7K!+oYs1ie\" variabletype=\"\">message<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nthen subtract it from <bk class=\"math\"><bk class=\"inner\">44<\/bk><\/bk>, the maximum length of messages are allowed to be...\n```eg:twittier-soln-2;lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"qkRAOf!7}qYq9H8{}ae~\">length<\/variable>\n    <variable type=\"\" id=\"cqlO*d_zuJ7K!+oYs1ie\">message<\/variable>\n    <variable type=\"\" id=\"_h%C*~Fwbk{:-u$yI}Uc\">remaining<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"6;Y;e5\/nzYyXf^MbmJKM\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"_h%C*~Fwbk{:-u$yI}Uc\" variabletype=\"\">remaining<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_arithmetic\" id=\"oc.mzEtB+;JvZvR\/b0?a\">\n        <field name=\"OP\">MINUS<\/field>\n        <value name=\"A\">\n          <block type=\"math_number\" id=\"NYi;T,8QnbYeH?=%m\/o#\">\n            <field name=\"NUM\">44<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"variables_get\" id=\"%\/eue-B)EbKuB4WJ^wGd\">\n            <field name=\"VAR\" id=\"qkRAOf!7}qYq9H8{}ae~\" variabletype=\"\">length<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\n\nAnd finally <bk class=\"io\"><bk class=\"inner\">print<\/bk><\/bk> out the result.\n```eg:twittier-soln-3;lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"qkRAOf!7}qYq9H8{}ae~\">length<\/variable>\n    <variable type=\"\" id=\"cqlO*d_zuJ7K!+oYs1ie\">message<\/variable>\n    <variable type=\"\" id=\"_h%C*~Fwbk{:-u$yI}Uc\">remaining<\/variable>\n  <\/variables>\n  <block type=\"io_print3\" id=\"wKTp0~T]u%#Hn,5aESiO\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"6SP_D_h\/\/#){fBZ0a$q|\">\n        <field name=\"TEXT\">You have<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"variables_get\" id=\"yVEx,dZ,$[*c\/vS**u44\">\n        <field name=\"VAR\" id=\"_h%C*~Fwbk{:-u$yI}Uc\" variabletype=\"\">remaining<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"text\" id=\"z#\/T)dCxSc:6z\/F8B_z:\">\n        <field name=\"TEXT\">character(s) left.<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nYou can solve this in small steps:\n\n```eg:twittier-soln;lang:blockly;run;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"qkRAOf!7}qYq9H8{}ae~\">length<\/variable>\n    <variable type=\"\" id=\"cqlO*d_zuJ7K!+oYs1ie\">message<\/variable>\n    <variable type=\"\" id=\"_h%C*~Fwbk{:-u$yI}Uc\">remaining<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"L$y:2f496aaO`,Q=p=C*\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"cqlO*d_zuJ7K!+oYs1ie\" variabletype=\"\">message<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"YTBY5{QXjMzeDY%K~N{y\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"^HZQu+q9M`1lMN}EhGYV\">\n            <field name=\"TEXT\">Message:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"PhcS[cz7A]k%0ijS,u{M\">\n        <field name=\"VAR\" id=\"qkRAOf!7}qYq9H8{}ae~\" variabletype=\"\">length<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_length\" id=\"*4R[PoVpn{s8R`1=3L,*\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"U#vQoc%t5@Y8$*w\/X~v^\">\n                <field name=\"VAR\" id=\"cqlO*d_zuJ7K!+oYs1ie\" variabletype=\"\">message<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"6;Y;e5\/nzYyXf^MbmJKM\">\n            <field name=\"VAR\" id=\"_h%C*~Fwbk{:-u$yI}Uc\" variabletype=\"\">remaining<\/field>\n            <value name=\"VALUE\">\n              <block type=\"math_arithmetic\" id=\"oc.mzEtB+;JvZvR\/b0?a\">\n                <field name=\"OP\">MINUS<\/field>\n                <value name=\"A\">\n                  <block type=\"math_number\" id=\"NYi;T,8QnbYeH?=%m\/o#\">\n                    <field name=\"NUM\">44<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"variables_get\" id=\"%\/eue-B)EbKuB4WJ^wGd\">\n                    <field name=\"VAR\" id=\"qkRAOf!7}qYq9H8{}ae~\" variabletype=\"\">length<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print3\" id=\"wKTp0~T]u%#Hn,5aESiO\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"6SP_D_h\/\/#){fBZ0a$q|\">\n                    <field name=\"TEXT\">You have<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"variables_get\" id=\"yVEx,dZ,$[*c\/vS**u44\">\n                    <field name=\"VAR\" id=\"_h%C*~Fwbk{:-u$yI}Uc\" variabletype=\"\">remaining<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY2\">\n                  <block type=\"text\" id=\"z#\/T)dCxSc:6z\/F8B_z:\">\n                    <field name=\"TEXT\">character(s) left.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nOr you can do it all at once. There's no single right way to solve it!",
      "updated_at":"2017-07-25T06:18:30.214236+00:00",
      "label":"bk-py3-tweet-length",
      "content":"#markdown\n[Twitter](https:\/\/en.wikipedia.org\/wiki\/Twitter) is a social network where users post short \"tweets\" that are 140 characters or fewer. You've made your own version, \"Twittier\", that limits posts to only 44 characters!\n\nWrite a program to read in the post you'd like to make, and tells you how many characters you have spare.\n```lang:py3;terminal;eg:none;\nMessage: @@@First post!\nYou have 33 character(s) left.\n\n```\n\nHere is another example:\n```lang:py3;terminal;eg:none;\nMessage: @@@Can't wait until the weekend! #sleepin\nYou have 6 character(s) left.\n\n```\n\nHere's an example with a message of exactly 44 characters:\n```lang:py3;terminal;eg:none;\nMessage: @@@This msg is exactly 44 characters - no more!\nYou have 0 character(s) left.\n\n```\n\nIf the post is longer than 44 characters, it should print out the negative number of characters:\n```lang:py3;terminal;eg:none;\nMessage: @@@Fitbits are like Tamagochis, except you're trying to keep yourself alive.\nYou have -29 character(s) left.\n\n```",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:len"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_length\",\"math_number\",\"math_arithmetic\",\"io_print3\",\"io_ask_text\",\"text_length\"]",
      "teacher_notes":"#markdown\nTo solve this question, we'll first need to <bk class=\"str\"><bk class=\"inner\">ask<\/bk><\/bk> for the message and save it in a <bk class=\"var\"><bk class=\"inner\">variable<\/bk><\/bk>.\n```eg:twittier-soln-0;lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"qkRAOf!7}qYq9H8{}ae~\">length<\/variable>\n    <variable type=\"\" id=\"cqlO*d_zuJ7K!+oYs1ie\">message<\/variable>\n    <variable type=\"\" id=\"_h%C*~Fwbk{:-u$yI}Uc\">remaining<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"L$y:2f496aaO`,Q=p=C*\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"cqlO*d_zuJ7K!+oYs1ie\" variabletype=\"\">message<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"YTBY5{QXjMzeDY%K~N{y\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"^HZQu+q9M`1lMN}EhGYV\">\n            <field name=\"TEXT\">Message:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```  \n\nThen, we need to calculate the <bk class=\"str\"><bk class=\"inner\">length<\/bk><\/bk> of the message...\n```eg:twittier-soln-1;lang:blockly;norun;\n  <xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"qkRAOf!7}qYq9H8{}ae~\">length<\/variable>\n    <variable type=\"\" id=\"cqlO*d_zuJ7K!+oYs1ie\">message<\/variable>\n    <variable type=\"\" id=\"_h%C*~Fwbk{:-u$yI}Uc\">remaining<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"PhcS[cz7A]k%0ijS,u{M\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"qkRAOf!7}qYq9H8{}ae~\" variabletype=\"\">length<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text_length\" id=\"*4R[PoVpn{s8R`1=3L,*\">\n        <value name=\"VALUE\">\n          <block type=\"variables_get\" id=\"U#vQoc%t5@Y8$*w\/X~v^\">\n            <field name=\"VAR\" id=\"cqlO*d_zuJ7K!+oYs1ie\" variabletype=\"\">message<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nthen subtract it from <bk class=\"math\"><bk class=\"inner\">44<\/bk><\/bk>, the maximum length of messages are allowed to be...\n```eg:twittier-soln-2;lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"qkRAOf!7}qYq9H8{}ae~\">length<\/variable>\n    <variable type=\"\" id=\"cqlO*d_zuJ7K!+oYs1ie\">message<\/variable>\n    <variable type=\"\" id=\"_h%C*~Fwbk{:-u$yI}Uc\">remaining<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"6;Y;e5\/nzYyXf^MbmJKM\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"_h%C*~Fwbk{:-u$yI}Uc\" variabletype=\"\">remaining<\/field>\n    <value name=\"VALUE\">\n      <block type=\"math_arithmetic\" id=\"oc.mzEtB+;JvZvR\/b0?a\">\n        <field name=\"OP\">MINUS<\/field>\n        <value name=\"A\">\n          <block type=\"math_number\" id=\"NYi;T,8QnbYeH?=%m\/o#\">\n            <field name=\"NUM\">44<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"variables_get\" id=\"%\/eue-B)EbKuB4WJ^wGd\">\n            <field name=\"VAR\" id=\"qkRAOf!7}qYq9H8{}ae~\" variabletype=\"\">length<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\n\nAnd finally <bk class=\"io\"><bk class=\"inner\">print<\/bk><\/bk> out the result.\n```eg:twittier-soln-3;lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"qkRAOf!7}qYq9H8{}ae~\">length<\/variable>\n    <variable type=\"\" id=\"cqlO*d_zuJ7K!+oYs1ie\">message<\/variable>\n    <variable type=\"\" id=\"_h%C*~Fwbk{:-u$yI}Uc\">remaining<\/variable>\n  <\/variables>\n  <block type=\"io_print3\" id=\"wKTp0~T]u%#Hn,5aESiO\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"6SP_D_h\/\/#){fBZ0a$q|\">\n        <field name=\"TEXT\">You have<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"variables_get\" id=\"yVEx,dZ,$[*c\/vS**u44\">\n        <field name=\"VAR\" id=\"_h%C*~Fwbk{:-u$yI}Uc\" variabletype=\"\">remaining<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"text\" id=\"z#\/T)dCxSc:6z\/F8B_z:\">\n        <field name=\"TEXT\">character(s) left.<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nYou can solve this in small steps:\n\n```eg:twittier-soln;lang:blockly;run;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"qkRAOf!7}qYq9H8{}ae~\">length<\/variable>\n    <variable type=\"\" id=\"cqlO*d_zuJ7K!+oYs1ie\">message<\/variable>\n    <variable type=\"\" id=\"_h%C*~Fwbk{:-u$yI}Uc\">remaining<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"L$y:2f496aaO`,Q=p=C*\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"cqlO*d_zuJ7K!+oYs1ie\" variabletype=\"\">message<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"YTBY5{QXjMzeDY%K~N{y\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"^HZQu+q9M`1lMN}EhGYV\">\n            <field name=\"TEXT\">Message:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"PhcS[cz7A]k%0ijS,u{M\">\n        <field name=\"VAR\" id=\"qkRAOf!7}qYq9H8{}ae~\" variabletype=\"\">length<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_length\" id=\"*4R[PoVpn{s8R`1=3L,*\">\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"U#vQoc%t5@Y8$*w\/X~v^\">\n                <field name=\"VAR\" id=\"cqlO*d_zuJ7K!+oYs1ie\" variabletype=\"\">message<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"6;Y;e5\/nzYyXf^MbmJKM\">\n            <field name=\"VAR\" id=\"_h%C*~Fwbk{:-u$yI}Uc\" variabletype=\"\">remaining<\/field>\n            <value name=\"VALUE\">\n              <block type=\"math_arithmetic\" id=\"oc.mzEtB+;JvZvR\/b0?a\">\n                <field name=\"OP\">MINUS<\/field>\n                <value name=\"A\">\n                  <block type=\"math_number\" id=\"NYi;T,8QnbYeH?=%m\/o#\">\n                    <field name=\"NUM\">44<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"B\">\n                  <block type=\"variables_get\" id=\"%\/eue-B)EbKuB4WJ^wGd\">\n                    <field name=\"VAR\" id=\"qkRAOf!7}qYq9H8{}ae~\" variabletype=\"\">length<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print3\" id=\"wKTp0~T]u%#Hn,5aESiO\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"6SP_D_h\/\/#){fBZ0a$q|\">\n                    <field name=\"TEXT\">You have<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"variables_get\" id=\"yVEx,dZ,$[*c\/vS**u44\">\n                    <field name=\"VAR\" id=\"_h%C*~Fwbk{:-u$yI}Uc\" variabletype=\"\">remaining<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY2\">\n                  <block type=\"text\" id=\"z#\/T)dCxSc:6z\/F8B_z:\">\n                    <field name=\"TEXT\">character(s) left.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nOr you can do it all at once. There's no single right way to solve it!"
    },
    {
      "language":0,
      "title":"Shout it from the rooftops",
      "notes":"#markdown\n**This program must convert a string to uppercase and print it out.**\n\nThe <bk class=\"str\">UPPER CASE<\/bk> string method will be particularly handy for this question.\n\nYou can start by reading in the message, and saving it in a variable. Then, convert it to upper case while we print it out!\n\nIt helps to <bk class=\"io\">print<\/bk> <bk class=\"var\">text<\/bk> before you convert to <bk class=\"str\">UPPER CASE<\/bk>, to check whether everything is working as expected.\n",
      "updated_at":"2017-07-27T04:23:53.889760+00:00",
      "label":"bk-py3-shout-it",
      "content":"#markdown\nHave you ever felt something so strongly you want to shout it from a rooftop?\n\nLet's write a SHOUTER program that asks the user for some text and then SHOUTS it in upper case for us.\n\nHere is an example interaction with the program:\n\n```lang:py3;terminal;eg:none;\nEnter text: @@@I love programming!\nI LOVE PROGRAMMING!\n\n```\n\nHere is another example:\n```lang:py3;terminal;eg:none;\nEnter text: @@@It's lunchtime!\nIT'S LUNCHTIME!\n\n```\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:replace"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_changeCase\",\"io_print1\",\"io_ask_text\"]",
      "teacher_notes":"#markdown\n**This program must convert a string to uppercase and print it out.**\n\nThe <bk class=\"str\">UPPER CASE<\/bk> string method will be particularly handy for this question.\n\nYou can start by reading in the message, and saving it in a variable. Then, convert it to upper case while we print it out!\n\nIt helps to <bk class=\"io\">print<\/bk> <bk class=\"var\">text<\/bk> before you convert to <bk class=\"str\">UPPER CASE<\/bk>, to check whether everything is working as expected.\n"
    },
    {
      "language":0,
      "title":"Breaking the fourth wall",
      "notes":"#markdown\n**This program must convert a string to lowercase and print it out.**\n\nThe <bk class=\"str\">lower case<\/bk> string method will be particularly handy for this question.\n\nYou can start by reading in the message, and saving it in a variable. Then, convert it to lower case while we print it out!\n\nIt helps to <bk class=\"io\">print<\/bk> <bk class=\"var\">text<\/bk> before you convert to <bk class=\"str\">lower case<\/bk>, to check whether everything is working as expected.\n\n\n",
      "updated_at":"2017-07-26T02:24:04.654507+00:00",
      "label":"bk-py3-breaking-fourth-wall",
      "content":"#markdown\nAn [aside](https:\/\/en.wikipedia.org\/wiki\/Aside) is a dramatic device used to let a character speak directly to the audience, without the other characters hearing.\nIt's a way of breaking the [fourth wall](https:\/\/en.wikipedia.org\/wiki\/Fourth_wall).\nIt is used in theatre, TV and film, and needs to be specifically marked as an *aside* in a script.\n\nYou're writing a play, and want to make sure your asides stand out. \nWrite a program to help.\nEach aside should start with `Aside: ` and be entirely in **lower case**. \n\nHere is an example from [Hamlet](https:\/\/en.wikipedia.org\/wiki\/Hamlet), by Shakespeare:\n```lang:py3;terminal;eg:none;\nLine: @@@A little more than kin, and less than kind.\nAside: a little more than kin, and less than kind.\n\n```\n\nHere is another example from [The Emperor's New Groove](https:\/\/en.wikipedia.org\/wiki\/The_Emperor%27s_New_Groove):\n```lang:py3;terminal;eg:none;\nLine: @@@This is his story. WELL, ACTUALLY my story.\nAside: this is his story. well, actually my story.\n\n```\n\nHere's one more example from [Ferris Bueller's Day Off](https:\/\/en.wikipedia.org\/wiki\/Ferris_Bueller%27s_Day_Off):\n```lang:py3;terminal;eg:none;\nLine: @@@How could I possibly be expected to handle school on a day like this?\nAside: how could i possibly be expected to handle school on a day like this?\n\n```",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:replace"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_changeCase\",\"io_print1\",\"io_print2\",\"io_ask_text\"]",
      "teacher_notes":"#markdown\n**This program must convert a string to lower case and print it out.**\n\nThe <bk class=\"str\">lower case<\/bk> string method will be particularly handy for this question.\n\nYou can start by reading in the message, and saving it in a variable. Then, convert it to lower case while we print it out!\n\nIt helps to <bk class=\"io\">print<\/bk> <bk class=\"var\">text<\/bk> before you convert to <bk class=\"str\">lower case<\/bk>, to check whether everything is working as expected.\n\n"
    },
    {
      "language":0,
      "title":"TELEGRAM STOP",
      "notes":"<p>\n  <strong>This program must convert a string to uppercase and replace one substring with another.<\/strong>\n<\/p>\n\n<p>\n  If you know about the <bk class=\"str\">UPPERCASE<\/bk> and <bk class=\"str\">replace<\/bk> blocks, then you are most of the way to solving this problem!\n<\/p>\n\n<p>\n  Start by converting the message to uppercase with <bk class=\"str\">UPPERCASE<\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-telegram-upper\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"18\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"10\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"11\">\n            <field name=\"TEXT\">Message:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"19\" inline=\"true\">\n        <field name=\"VAR\">msg<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_changeCase\" id=\"3\" inline=\"true\">\n            <field name=\"CASE\">UPPERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"24\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"7\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"variables_get\" id=\"32\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Notice that we store the uppercase version back in the <bk class=\"var\"><bk class=\"inner\">msg<\/bk><\/bk> variable.\n  It helps to print <bk class=\"var\"><bk class=\"inner\">msg<\/bk><\/bk> as you're developing your program, so you know whether it is working.\n<\/p>\n\n<p>\n  Next, we must replace every full stop (<code data-lang=\"in\">.<\/code>) with <code data-lang=\"out\">STOP<\/code>, remembering to put a space at the start of the string, like this <bk class=\"str lit\"><bk class=\"inner\">&nbsp;STOP<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-telegram-soln\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"18\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"10\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"11\">\n            <field name=\"TEXT\">Message:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"19\" inline=\"true\">\n        <field name=\"VAR\">msg<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_changeCase\" id=\"3\" inline=\"true\">\n            <field name=\"CASE\">UPPERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"24\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"25\" inline=\"true\">\n            <field name=\"VAR\">msg<\/field>\n            <value name=\"VALUE\">\n              <block type=\"text_replace\" id=\"5\" inline=\"true\">\n                <value name=\"FROM\">\n                  <block type=\"text\" id=\"30\">\n                    <field name=\"TEXT\">.<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TO\">\n                  <block type=\"text\" id=\"31\">\n                    <field name=\"TEXT\"> STOP<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"27\">\n                    <field name=\"VAR\">msg<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"7\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"variables_get\" id=\"32\">\n                    <field name=\"VAR\">msg<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n",
      "updated_at":"2016-08-14T21:45:55.295356+00:00",
      "label":"bk-py3-telegram",
      "content":"<p>\n  Before telephones were invented, the only way to communicate quickly over long distances was by <a href=\"https:\/\/en.wikipedia.org\/wiki\/Telegraphy\" target=\"_blank\">telegraph<\/a>.\n  Short messages known as <a href=\"https:\/\/en.wikipedia.org\/wiki\/The_Telegram\" target=\"_blank\">telegrams<\/a> were sent over wires in <a href=\"https:\/\/en.wikipedia.org\/wiki\/Morse_code\" target=\"_blank\">Morse Code<\/a>.\n<\/p>\n<p>\n  Telegrams were usually written all in uppercase letters, and instead of a full stop (<code data-lang=\"in\">.<\/code>) they would write <code data-lang=\"out\">STOP<\/code>.\n<\/p>\n\n<p>\n  Write a program which converts a message into a telegram by changing it to uppercase and replacing the full stops with the word <code data-lang=\"out\">STOP<\/code> <strong>including a space before it<\/strong>.\n  Here is an example:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Message: <\/o><i>I will visit in April.<\/i>\n<o>I WILL VISIT IN APRIL STOP<\/o>\n<o><\/o>\n<\/code><\/pre>\n\n<p>\n  Telegrams would cost money per word, so they are usually short:\n<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>Message: <\/o><i>French trip is awesome. See you soon.<\/i>\n<o>FRENCH TRIP IS AWESOME STOP SEE YOU SOON STOP<\/o>\n<o><\/o>\n<\/code><\/pre>\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print",
        "string:replace"
      ],
      "choices":"{}",
      "blockly_blocks":"[\"text\",\"text_changeCase\",\"text_replace\",\"io_print1\",\"io_ask_text\"]",
      "teacher_notes":"<p>\n  <strong>This program must convert a string to uppercase and replace one substring with another.<\/strong>\n<\/p>\n\n<p>\n  If you know about the <bk class=\"str\">UPPERCASE<\/bk> and <bk class=\"str\">replace<\/bk> blocks, then you are most of the way to solving this problem!\n<\/p>\n\n<p>\n  Start by converting the message to uppercase with <bk class=\"str\">UPPERCASE<\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-telegram-upper\"><code data-lang=\"blockly\">\n<blockly>\n  <block type=\"variables_set\" id=\"18\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"10\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"11\">\n            <field name=\"TEXT\">Message:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"19\" inline=\"true\">\n        <field name=\"VAR\">msg<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_changeCase\" id=\"3\" inline=\"true\">\n            <field name=\"CASE\">UPPERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"24\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print1\" id=\"7\" inline=\"true\">\n            <value name=\"ANY0\">\n              <block type=\"variables_get\" id=\"32\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n\n<p>\n  Notice that we store the uppercase version back in the <bk class=\"var\"><bk class=\"inner\">msg<\/bk><\/bk> variable.\n  It helps to print <bk class=\"var\"><bk class=\"inner\">msg<\/bk><\/bk> as you're developing your program, so you know whether it is working.\n<\/p>\n\n<p>\n  Next, we must replace every full stop (<code data-lang=\"in\">.<\/code>) with <code data-lang=\"out\">STOP<\/code>, remembering to put a space at the start of the string, like this <bk class=\"str lit\"><bk class=\"inner\">&nbsp;STOP<\/bk><\/bk>:\n<\/p>\n\n<pre class=\"js-editor-blockly\" data-eg-id=\"bk-telegram-soln\"><code data-lang=\"blockly\">\n<blockly xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <block type=\"variables_set\" id=\"18\" inline=\"true\" x=\"10\" y=\"10\">\n    <field name=\"VAR\">msg<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"10\" inline=\"true\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"11\">\n            <field name=\"TEXT\">Message:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"19\" inline=\"true\">\n        <field name=\"VAR\">msg<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_changeCase\" id=\"3\" inline=\"true\">\n            <field name=\"CASE\">UPPERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"24\">\n                <field name=\"VAR\">msg<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"25\" inline=\"true\">\n            <field name=\"VAR\">msg<\/field>\n            <value name=\"VALUE\">\n              <block type=\"text_replace\" id=\"5\" inline=\"true\">\n                <value name=\"FROM\">\n                  <block type=\"text\" id=\"30\">\n                    <field name=\"TEXT\">.<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TO\">\n                  <block type=\"text\" id=\"31\">\n                    <field name=\"TEXT\"> STOP<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"27\">\n                    <field name=\"VAR\">msg<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print1\" id=\"7\" inline=\"true\">\n                <value name=\"ANY0\">\n                  <block type=\"variables_get\" id=\"32\">\n                    <field name=\"VAR\">msg<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/blockly>\n<\/code><\/pre>\n"
    },
    {
      "language":0,
      "title":"Word Chain!",
      "notes":"#markdown\n\nFor this question, we have to read in the two words and check whether the last letter of `word1` is the same (ignoring case) as the first letter of `word2`. \n\nWe'll use string indexing to get the right letters from each word:\n```lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"v9;aKy5w?|iv~4O\/v5L`\">word1<\/variable>\n    <variable type=\"\" id=\"7O|(RdmP(U[\/D9F}0G.\/\">word2<\/variable>\n  <\/variables>\n  <block type=\"decisions_if_else\" id=\":(e08dDnsx%=7oG!x+[1\" x=\"0\" y=\"0\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"]O|]LrM7^O;p?s3%L17*\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"text_subscript\" id=\"EOJ~FbdYR0n,dXVNC3[!\">\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"|GQs}iZ9!P73(|yb$m00\">\n                <field name=\"NUM\">-1<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"V=*t:Qt3h$)1D[lMut`@\">\n                <field name=\"VAR\" id=\"v9;aKy5w?|iv~4O\/v5L`\" variabletype=\"\">word1<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text_subscript\" id=\"ONXL5sfdL\/av:_cOB~]o\">\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"[(i$yG%C9z.OuQoY0DyV\">\n                <field name=\"NUM\">0<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\",`qm?B_e^aK;j[iCkxDS\">\n                <field name=\"VAR\" id=\"7O|(RdmP(U[\/D9F}0G.\/\" variabletype=\"\">word2<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"_kb|+G5{sOvmP@VE5z|[\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"XBZJypw+wCqojtISX{)c\">\n            <field name=\"TEXT\">Valid<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <statement name=\"ELSE\">\n      <block type=\"io_print1\" id=\"?\/nR0NuKRcy`H{9_@S2B\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"r8ccAKAQfgV5CjX1Lk08\">\n            <field name=\"TEXT\">Nope!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n\n```\n\nAnd to make sure we're checking letters of the same case, let's turn them both into lower case when we read them in:\n\n```lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"v9;aKy5w?|iv~4O\/v5L`\">word1<\/variable>\n    <variable type=\"\" id=\"7O|(RdmP(U[\/D9F}0G.\/\">word2<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"f9-%YXTUW_e!{_yLLxhI\" x=\"6\" y=\"8\">\n    <field name=\"VAR\" id=\"v9;aKy5w?|iv~4O\/v5L`\" variabletype=\"\">word1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text_changeCase\" id=\"QB|eYu-6r4i;UdqXvXq.\">\n        <field name=\"CASE\">UPPERCASE<\/field>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"L!=AK]8~(n3~_m1VFU2R\">\n            <field name=\"VAR\" id=\"v9;aKy5w?|iv~4O\/v5L`\" variabletype=\"\">word1<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"SKov4YUW(s\/sjRa[UCh7\">\n        <field name=\"VAR\" id=\"7O|(RdmP(U[\/D9F}0G.\/\" variabletype=\"\">word2<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_changeCase\" id=\"o{d@`QcT[^:6d(ql6F_q\">\n            <field name=\"CASE\">UPPERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"f.Zg]`wNDKh^*c[~wVSa\">\n                <field name=\"VAR\" id=\"7O|(RdmP(U[\/D9F}0G.\/\" variabletype=\"\">word2<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nFrom there, it's just a case of putting it all together!",
      "updated_at":"2017-07-25T15:36:09.082379+00:00",
      "label":"bk-py3-word-chain-simple-no-loop",
      "content":"#markdown\n\n<p><a href=\"https:\/\/en.wikipedia.org\/wiki\/Word_chain\" target=\"_blank\">Word chain<\/a> is word game where players take turns saying words that start with the last letter of the previous word. You might have played this game on long car trips.<\/p>\n\nWrite a program to help you and your friends play word chain. Your program should read in two words and print out whether they are valid to follow each other. You should ignore case for this game.\n\n<p>Here is an example of a valid pair:<\/p>\n\n```terminal;eg:none;\nWord 1: @@@carrot\nWord 2: @@@turnip\nValid\n\n```\n\nHere is another example of an invalid pair:\n```terminal;eg:none;\nWord 1: @@@orange\nWord 2: @@@apple\nNope!\n\n```\nThe word <code data-lang=\"py3\">apple<\/code> is rejected because it doesn't start with the letter <code data-lang=\"py3\">e<\/code> from the previous word, <code data-lang=\"py3\">orange<\/code>. \n\nHere's one more example, with uppercase and lowercase letters:\n```terminal;eg:none;\nWord 1: @@@Passionfruit\nWord 2: @@@Tangerine\nValid\n\n```",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_changeCase\",\"text_subscript\",\"math_number\",\"io_print1\",\"io_ask_text\",\"decisions_if_else\",\"logic_compare\"]",
      "teacher_notes":"#markdown\n\nFor this question, we have to read in the two words and check whether the last letter of `word1` is the same (ignoring case) as the first letter of `word2`. \n\nWe'll use string indexing to get the right letters from each word:\n```lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"v9;aKy5w?|iv~4O\/v5L`\">word1<\/variable>\n    <variable type=\"\" id=\"7O|(RdmP(U[\/D9F}0G.\/\">word2<\/variable>\n  <\/variables>\n  <block type=\"decisions_if_else\" id=\":(e08dDnsx%=7oG!x+[1\" x=\"0\" y=\"0\">\n    <value name=\"IF0\">\n      <block type=\"logic_compare\" id=\"]O|]LrM7^O;p?s3%L17*\">\n        <field name=\"OP\">EQ<\/field>\n        <value name=\"A\">\n          <block type=\"text_subscript\" id=\"EOJ~FbdYR0n,dXVNC3[!\">\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"|GQs}iZ9!P73(|yb$m00\">\n                <field name=\"NUM\">-1<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\"V=*t:Qt3h$)1D[lMut`@\">\n                <field name=\"VAR\" id=\"v9;aKy5w?|iv~4O\/v5L`\" variabletype=\"\">word1<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text_subscript\" id=\"ONXL5sfdL\/av:_cOB~]o\">\n            <value name=\"INDEX\">\n              <block type=\"math_number\" id=\"[(i$yG%C9z.OuQoY0DyV\">\n                <field name=\"NUM\">0<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"VALUE\">\n              <block type=\"variables_get\" id=\",`qm?B_e^aK;j[iCkxDS\">\n                <field name=\"VAR\" id=\"7O|(RdmP(U[\/D9F}0G.\/\" variabletype=\"\">word2<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print1\" id=\"_kb|+G5{sOvmP@VE5z|[\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"XBZJypw+wCqojtISX{)c\">\n            <field name=\"TEXT\">Valid<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <statement name=\"ELSE\">\n      <block type=\"io_print1\" id=\"?\/nR0NuKRcy`H{9_@S2B\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"r8ccAKAQfgV5CjX1Lk08\">\n            <field name=\"TEXT\">Nope!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n\n```\n\nAnd to make sure we're checking letters of the same case, let's turn them both into lower case when we read them in:\n\n```lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"v9;aKy5w?|iv~4O\/v5L`\">word1<\/variable>\n    <variable type=\"\" id=\"7O|(RdmP(U[\/D9F}0G.\/\">word2<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"f9-%YXTUW_e!{_yLLxhI\" x=\"6\" y=\"8\">\n    <field name=\"VAR\" id=\"v9;aKy5w?|iv~4O\/v5L`\" variabletype=\"\">word1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text_changeCase\" id=\"QB|eYu-6r4i;UdqXvXq.\">\n        <field name=\"CASE\">UPPERCASE<\/field>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"L!=AK]8~(n3~_m1VFU2R\">\n            <field name=\"VAR\" id=\"v9;aKy5w?|iv~4O\/v5L`\" variabletype=\"\">word1<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"SKov4YUW(s\/sjRa[UCh7\">\n        <field name=\"VAR\" id=\"7O|(RdmP(U[\/D9F}0G.\/\" variabletype=\"\">word2<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_changeCase\" id=\"o{d@`QcT[^:6d(ql6F_q\">\n            <field name=\"CASE\">UPPERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"f.Zg]`wNDKh^*c[~wVSa\">\n                <field name=\"VAR\" id=\"7O|(RdmP(U[\/D9F}0G.\/\" variabletype=\"\">word2<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nFrom there, it's just a case of putting it all together!"
    },
    {
      "language":0,
      "title":"Taboo!",
      "notes":"#markdown\n\nFor this question, we have to read in the taboo word and the description, and check if the word is in the description. We'll have to deal with case, too! The easiest way to do this is to make both the word and the description into lower case using `lower`. That way, no matter what case the input is, you can compare them directly.\n\nWe were nice and didn't include any upper case taboo words, but you had to make sure you turned the description into lower case.",
      "updated_at":"2017-07-25T15:34:11.673100+00:00",
      "label":"bk-py3-taboo-simple",
      "content":"#markdown\n\n[Taboo](https:\/\/en.wikipedia.org\/wiki\/Taboo_(game)) is a word game where one person describes a word on a card so that their partner can guess it. However, there are certain words that the person can't say when trying to describe the thing! \nA player might have to describe *'cereal'* without using the word *'breakfast'*.\n\nWrite a program to help play Taboo. Here's an example for trying to guess the word *'cereal'*:\n\n```terminal;eg:none;\nTaboo word: @@@breakfast\nDescription: @@@A type of grain, like oats or bran.\nSafe!\n\n```\n\nHere's another example, which includes the taboo word:\n```terminal;eg:none;\nTaboo word: @@@breakfast\nDescription: @@@The thing you eat for breakfast.\nTaboo!\n\n```\n\nYou should print <code data-lang='out'>Taboo!<\/code> even if the word is in another word.\nHere's an example when trying to guess the word *'wheel'*:\n```terminal;eg:none;\nTaboo word: @@@bike\nDescription: @@@There's 4 on a car and 2 on a motorbike.\nTaboo!\n\n```\n\nSometimes games get exciting and players tend to shout. If the word occurs in **any case**, lower, upper or mixed, it still counts. For example, guessing the word *'oval'*:\n\n```terminal;eg:none;\nTaboo word: @@@sport\nDescription: @@@WE HAVE SPORTS HERE!\nTaboo!\n\n```\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_changeCase\",\"text_subscript\",\"math_number\",\"io_print1\",\"io_ask_text\",\"decisions_if_else\",\"logic_isMember\"]",
      "teacher_notes":"#markdown\n\nFor this question, we have to read in the taboo word and the description, and check if the word is in the description. We'll have to deal with case, too! The easiest way to do this is to make both the word and the description into lower case using `lower`. That way, no matter what case the input is, you can compare them directly.\n\nWe were nice and didn't include any upper case taboo words, but you had to make sure you turned the description into lower case."
    },
    {
      "language":0,
      "title":"Mad Libs 2: Bork Bork Bork!",
      "notes":"#markdown\nTo solve this question, we'll use multiples of <bk class=\"str\"><bk class=\"inner\">ask<\/bk><\/bk> and <bk class=\"io\"><bk class=\"inner\">print<\/bk><\/bk>, just like the last question.\nTo solve this question, though, we'll also need to change the ingredients that the user types in, so that they're **also** in *Swedish Chef Speak*. \n\nThere are a few different ways we could do this. We'll go through these three ways, just using the first line as an example to keep it short.\n\nWe can read in the ingredients first, saving them in a variable, then modify the variable, then print out the recipe, like this:\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Ue:mN.})o|{g0KO_s!:w\">ingredient1<\/variable>\n    <variable type=\"\" id=\"w0?|6X(K7s~`GB?`@4qZ\">ingredient2<\/variable>\n    <variable type=\"\" id=\"PVM*${GRA\/!uolz}X3Dx\">ingredient3<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"CZI:w(4[g?4wsL?3Gx=g\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"aHiZ`C|;l~1dg+DyjZ;%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"PiGm9C8}D,^mageF^oI_\">\n            <field name=\"TEXT\">Ingredient 1:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"|j%:(X|=~66Q|x9Xeli6\">\n        <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_replace\" id=\"9XDH5XWP53@h$OH2{yq}\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"716vj}~+s_NN%5SG,b3K\">\n                <field name=\"TEXT\">th<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"6)y7X*8s}Zvb=qp@jIqE\">\n                <field name=\"TEXT\">z<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"Q`ZhZZ#gG^@tdrRw?:G?\">\n                <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print3\" id=\"xYzo6[9gi(ZqnOD;OhMz\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"?`6Qgm,AJ6_xOMl+|R*t\">\n                <field name=\"TEXT\">First cut ze <\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"`}%X08{_ih*HE#I1m{E;\">\n                <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY2\">\n              <block type=\"text\" id=\"{dR,pfAw#-?d7Zb%fqke\">\n                <field name=\"TEXT\">into triangles.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nThat's the way we expected you to solve this question, but there are a few other ways that might be interesting to you.\n\nWe could modify the ingredient as we print it out:\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Ue:mN.})o|{g0KO_s!:w\">ingredient1<\/variable>\n    <variable type=\"\" id=\"w0?|6X(K7s~`GB?`@4qZ\">ingredient2<\/variable>\n    <variable type=\"\" id=\"PVM*${GRA\/!uolz}X3Dx\">ingredient3<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"CZI:w(4[g?4wsL?3Gx=g\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"aHiZ`C|;l~1dg+DyjZ;%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"PiGm9C8}D,^mageF^oI_\">\n            <field name=\"TEXT\">Ingredient 1:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print3\" id=\"xYzo6[9gi(ZqnOD;OhMz\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"?`6Qgm,AJ6_xOMl+|R*t\">\n            <field name=\"TEXT\">First cut ze <\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"text_replace\" id=\"9XDH5XWP53@h$OH2{yq}\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"716vj}~+s_NN%5SG,b3K\">\n                <field name=\"TEXT\">th<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"6)y7X*8s}Zvb=qp@jIqE\">\n                <field name=\"TEXT\">z<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"Q`ZhZZ#gG^@tdrRw?:G?\">\n                <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"ANY2\">\n          <block type=\"text\" id=\"{dR,pfAw#-?d7Zb%fqke\">\n            <field name=\"TEXT\">into triangles.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nOr affecting the whole line! Remember that the line doesn't have any <bk class=\"str lit\"><bk class=\"inner\">th<\/bk><\/bk> in it, so it won't matter if we replace all occurrences of <bk class=\"str lit\"><bk class=\"inner\">th<\/bk><\/bk> with <bk class=\"str lit\"><bk class=\"inner\">z<\/bk><\/bk>.\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Ue:mN.})o|{g0KO_s!:w\">ingredient1<\/variable>\n    <variable type=\"\" id=\"w0?|6X(K7s~`GB?`@4qZ\">ingredient2<\/variable>\n    <variable type=\"\" id=\"PVM*${GRA\/!uolz}X3Dx\">ingredient3<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"CZI:w(4[g?4wsL?3Gx=g\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"aHiZ`C|;l~1dg+DyjZ;%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"PiGm9C8}D,^mageF^oI_\">\n            <field name=\"TEXT\">Ingredient 1:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"v-@A~g~vI)3!6Dbu#]~N\">\n        <value name=\"ANY0\">\n          <block type=\"text_replace\" id=\"9XDH5XWP53@h$OH2{yq}\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"716vj}~+s_NN%5SG,b3K\">\n                <field name=\"TEXT\">th<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"6)y7X*8s}Zvb=qp@jIqE\">\n                <field name=\"TEXT\">z<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"text_concat3\" id=\"|1H=p-^lyQWTc3[KKE1Z\">\n                <value name=\"TEXT0\">\n                  <block type=\"text\" id=\"?`6Qgm,AJ6_xOMl+|R*t\">\n                    <field name=\"TEXT\">First cut ze <\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT1\">\n                  <block type=\"variables_get\" id=\"Q`ZhZZ#gG^@tdrRw?:G?\">\n                    <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT2\">\n                  <block type=\"text\" id=\"{dR,pfAw#-?d7Zb%fqke\">\n                    <field name=\"TEXT\">into triangles.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nIn fact, we could even translate the recipe back into English, and then run the <bk class=\"str\"><bk class=\"inner\">replace<\/bk><\/bk> over the whole line:\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Ue:mN.})o|{g0KO_s!:w\">ingredient1<\/variable>\n    <variable type=\"\" id=\"w0?|6X(K7s~`GB?`@4qZ\">ingredient2<\/variable>\n    <variable type=\"\" id=\"PVM*${GRA\/!uolz}X3Dx\">ingredient3<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"CZI:w(4[g?4wsL?3Gx=g\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"aHiZ`C|;l~1dg+DyjZ;%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"PiGm9C8}D,^mageF^oI_\">\n            <field name=\"TEXT\">Ingredient 1:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"v-@A~g~vI)3!6Dbu#]~N\">\n        <value name=\"ANY0\">\n          <block type=\"text_replace\" id=\"9XDH5XWP53@h$OH2{yq}\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"716vj}~+s_NN%5SG,b3K\">\n                <field name=\"TEXT\">th<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"6)y7X*8s}Zvb=qp@jIqE\">\n                <field name=\"TEXT\">z<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"text_concat3\" id=\"|1H=p-^lyQWTc3[KKE1Z\">\n                <value name=\"TEXT0\">\n                  <block type=\"text\" id=\"?`6Qgm,AJ6_xOMl+|R*t\">\n                    <field name=\"TEXT\">First cut the <\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT1\">\n                  <block type=\"variables_get\" id=\"Q`ZhZZ#gG^@tdrRw?:G?\">\n                    <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT2\">\n                  <block type=\"text\" id=\"{dR,pfAw#-?d7Zb%fqke\">\n                    <field name=\"TEXT\">into triangles.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n",
      "updated_at":"2017-07-25T15:47:48.707005+00:00",
      "label":"bk-py3-mad-libs-1",
      "content":"#markdown\nLet's keep building up our <a href=\"https:\/\/en.wikipedia.org\/wiki\/Mad_Libs\" target=\"_blank\">Mad Libs<\/a>!\nThe <a href=\"https:\/\/en.wikipedia.org\/wiki\/Swedish_Chef\" target=\"_blank\">Swedish Chef<\/a> is a character from the Muppets who does hilarious things to food. His accent is quite thick, and he is often almost unintelligible. \n\nWrite a program to write out a three ingredients recipe in *Swedish Chef speak*. You should read in three ingredients from the user and replace all occurences of the letters `'th'` with the letter `'z'`.\n\nFor this question, Swedish Chef's recipes are always the same (with different ingredients), and they always ends in `'Bork! Bork! Bork!'` \n\nHere is an example:\n\n```terminal;eg:none;\nIngredient 1: @@@pastry\nIngredient 2: @@@chicken thighs\nIngredient 3: @@@beans\nFirst cut ze pastry into triangles.\nZen smash ze chicken zighs wiz a hammer.\nFry a mix of pastry and chicken zighs stirring gently.\nAdd in ze beans one ladle at a time.\nSprinkle ze remaining pastry over ze top.\nBork! Bork! Bork!\n\n```\n\nHere is another example:\n\n```terminal;eg:none;\nIngredient 1: @@@onion\nIngredient 2: @@@wheat thins\nIngredient 3: @@@emmenthaler cheese\nFirst cut ze onion into triangles.\nZen smash ze wheat zins wiz a hammer.\nFry a mix of onion and wheat zins stirring gently.\nAdd in ze emmenzaler cheese one ladle at a time.\nSprinkle ze remaining onion over ze top.\nBork! Bork! Bork!\n\n```\n\n> ## Hint\n>\n> Don't forget you can copy and paste the text for long passages to save on typing.\n\n\n\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_concat2\",\"text_concat3\",\"text_concat4\",\"text_concat5\",\"text_replace\",\"io_print1\",\"io_print2\",\"io_print3\",\"io_print4\",\"io_print5\",\"io_ask_text\"]",
      "teacher_notes":"#markdown\nTo solve this question, we'll use multiples of <bk class=\"str\"><bk class=\"inner\">ask<\/bk><\/bk> and <bk class=\"io\"><bk class=\"inner\">print<\/bk><\/bk>, just like the last question.\nTo solve this question, though, we'll also need to change the ingredients that the user types in, so that they're **also** in *Swedish Chef Speak*. \n\nThere are a few different ways we could do this. We'll go through these three ways, just using the first line as an example to keep it short.\n\nWe can read in the ingredients first, saving them in a variable, then modify the variable, then print out the recipe, like this:\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Ue:mN.})o|{g0KO_s!:w\">ingredient1<\/variable>\n    <variable type=\"\" id=\"w0?|6X(K7s~`GB?`@4qZ\">ingredient2<\/variable>\n    <variable type=\"\" id=\"PVM*${GRA\/!uolz}X3Dx\">ingredient3<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"CZI:w(4[g?4wsL?3Gx=g\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"aHiZ`C|;l~1dg+DyjZ;%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"PiGm9C8}D,^mageF^oI_\">\n            <field name=\"TEXT\">Ingredient 1:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"|j%:(X|=~66Q|x9Xeli6\">\n        <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n        <value name=\"VALUE\">\n          <block type=\"text_replace\" id=\"9XDH5XWP53@h$OH2{yq}\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"716vj}~+s_NN%5SG,b3K\">\n                <field name=\"TEXT\">th<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"6)y7X*8s}Zvb=qp@jIqE\">\n                <field name=\"TEXT\">z<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"Q`ZhZZ#gG^@tdrRw?:G?\">\n                <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print3\" id=\"xYzo6[9gi(ZqnOD;OhMz\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"?`6Qgm,AJ6_xOMl+|R*t\">\n                <field name=\"TEXT\">First cut ze <\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"`}%X08{_ih*HE#I1m{E;\">\n                <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY2\">\n              <block type=\"text\" id=\"{dR,pfAw#-?d7Zb%fqke\">\n                <field name=\"TEXT\">into triangles.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nThat's the way we expected you to solve this question, but there are a few other ways that might be interesting to you.\n\nWe could modify the ingredient as we print it out:\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Ue:mN.})o|{g0KO_s!:w\">ingredient1<\/variable>\n    <variable type=\"\" id=\"w0?|6X(K7s~`GB?`@4qZ\">ingredient2<\/variable>\n    <variable type=\"\" id=\"PVM*${GRA\/!uolz}X3Dx\">ingredient3<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"CZI:w(4[g?4wsL?3Gx=g\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"aHiZ`C|;l~1dg+DyjZ;%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"PiGm9C8}D,^mageF^oI_\">\n            <field name=\"TEXT\">Ingredient 1:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print3\" id=\"xYzo6[9gi(ZqnOD;OhMz\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"?`6Qgm,AJ6_xOMl+|R*t\">\n            <field name=\"TEXT\">First cut ze <\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"text_replace\" id=\"9XDH5XWP53@h$OH2{yq}\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"716vj}~+s_NN%5SG,b3K\">\n                <field name=\"TEXT\">th<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"6)y7X*8s}Zvb=qp@jIqE\">\n                <field name=\"TEXT\">z<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"Q`ZhZZ#gG^@tdrRw?:G?\">\n                <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"ANY2\">\n          <block type=\"text\" id=\"{dR,pfAw#-?d7Zb%fqke\">\n            <field name=\"TEXT\">into triangles.<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nOr affecting the whole line! Remember that the line doesn't have any <bk class=\"str lit\"><bk class=\"inner\">th<\/bk><\/bk> in it, so it won't matter if we replace all occurrences of <bk class=\"str lit\"><bk class=\"inner\">th<\/bk><\/bk> with <bk class=\"str lit\"><bk class=\"inner\">z<\/bk><\/bk>.\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Ue:mN.})o|{g0KO_s!:w\">ingredient1<\/variable>\n    <variable type=\"\" id=\"w0?|6X(K7s~`GB?`@4qZ\">ingredient2<\/variable>\n    <variable type=\"\" id=\"PVM*${GRA\/!uolz}X3Dx\">ingredient3<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"CZI:w(4[g?4wsL?3Gx=g\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"aHiZ`C|;l~1dg+DyjZ;%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"PiGm9C8}D,^mageF^oI_\">\n            <field name=\"TEXT\">Ingredient 1:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"v-@A~g~vI)3!6Dbu#]~N\">\n        <value name=\"ANY0\">\n          <block type=\"text_replace\" id=\"9XDH5XWP53@h$OH2{yq}\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"716vj}~+s_NN%5SG,b3K\">\n                <field name=\"TEXT\">th<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"6)y7X*8s}Zvb=qp@jIqE\">\n                <field name=\"TEXT\">z<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"text_concat3\" id=\"|1H=p-^lyQWTc3[KKE1Z\">\n                <value name=\"TEXT0\">\n                  <block type=\"text\" id=\"?`6Qgm,AJ6_xOMl+|R*t\">\n                    <field name=\"TEXT\">First cut ze <\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT1\">\n                  <block type=\"variables_get\" id=\"Q`ZhZZ#gG^@tdrRw?:G?\">\n                    <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT2\">\n                  <block type=\"text\" id=\"{dR,pfAw#-?d7Zb%fqke\">\n                    <field name=\"TEXT\">into triangles.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nIn fact, we could even translate the recipe back into English, and then run the <bk class=\"str\"><bk class=\"inner\">replace<\/bk><\/bk> over the whole line:\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"Ue:mN.})o|{g0KO_s!:w\">ingredient1<\/variable>\n    <variable type=\"\" id=\"w0?|6X(K7s~`GB?`@4qZ\">ingredient2<\/variable>\n    <variable type=\"\" id=\"PVM*${GRA\/!uolz}X3Dx\">ingredient3<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"CZI:w(4[g?4wsL?3Gx=g\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"aHiZ`C|;l~1dg+DyjZ;%\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"PiGm9C8}D,^mageF^oI_\">\n            <field name=\"TEXT\">Ingredient 1:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print1\" id=\"v-@A~g~vI)3!6Dbu#]~N\">\n        <value name=\"ANY0\">\n          <block type=\"text_replace\" id=\"9XDH5XWP53@h$OH2{yq}\">\n            <value name=\"FROM\">\n              <block type=\"text\" id=\"716vj}~+s_NN%5SG,b3K\">\n                <field name=\"TEXT\">th<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TO\">\n              <block type=\"text\" id=\"6)y7X*8s}Zvb=qp@jIqE\">\n                <field name=\"TEXT\">z<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT\">\n              <block type=\"text_concat3\" id=\"|1H=p-^lyQWTc3[KKE1Z\">\n                <value name=\"TEXT0\">\n                  <block type=\"text\" id=\"?`6Qgm,AJ6_xOMl+|R*t\">\n                    <field name=\"TEXT\">First cut the <\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT1\">\n                  <block type=\"variables_get\" id=\"Q`ZhZZ#gG^@tdrRw?:G?\">\n                    <field name=\"VAR\" id=\"Ue:mN.})o|{g0KO_s!:w\" variabletype=\"\">ingredient1<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT2\">\n                  <block type=\"text\" id=\"{dR,pfAw#-?d7Zb%fqke\">\n                    <field name=\"TEXT\">into triangles.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n"
    },
    {
      "language":0,
      "title":"Mad Libs 1: Letters from camp!",
      "notes":"#markdown\nTo solve this question, we'll use multiples of <bk class=\"str\"><bk class=\"inner\">ask<\/bk><\/bk>, <bk class=\"var\"><bk class=\"inner\">variables<\/bk><\/bk> and <bk class=\"io\"><bk class=\"inner\">print<\/bk><\/bk>. There are eight different pieces of information to input and there will need to be a separate variable and input for each.\n\n```eg:mad-libs-soln1;lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"$7ElS(g;t{k+_mfpnhnf\">adjective<\/variable>\n    <variable type=\"\" id=\"Nl~6-Yo#~2Tb]mH~3hF6\">adjective2<\/variable>\n    <variable type=\"\" id=\"Ww#cFZY^@ZODW6.x(Ak}\">animal<\/variable>\n    <variable type=\"\" id=\"XZ.\/}2rKi=0YeGf(4m*e\">name<\/variable>\n    <variable type=\"\" id=\"%8uR1{CYT+Q+A)?ZoS7^\">noun<\/variable>\n    <variable type=\"\" id=\"7vigdH]39u-neW6!7;hg\">relation<\/variable>\n    <variable type=\"\" id=\"uqdiqd?A}ddWsg,oAaO5\">sport<\/variable>\n    <variable type=\"\" id=\"MaDM%Y_mI7,:p3r$xFhl\">verb<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"[a3uFb3}H}z?E3E8+Ef0\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"XZ.\/}2rKi=0YeGf(4m*e\" variabletype=\"\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"Kp#zs10y!PP.pxXTpdGJ\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"C8oT5EPKzM}d..2D7rVk\">\n            <field name=\"TEXT\">Name:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"Nz;QM#-nWzpLJfqV0,=)\">\n        <field name=\"VAR\" id=\"7vigdH]39u-neW6!7;hg\" variabletype=\"\">relation<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"-.pT=L9EA$sYfl4:YETB\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"GO*d~:=ltds,{^5[$;Av\">\n                <field name=\"TEXT\">Relation:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"xe`8%t;J)FEY[7=YeRJz\">\n            <field name=\"VAR\" id=\"%8uR1{CYT+Q+A)?ZoS7^\" variabletype=\"\">noun<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\"ibHM=\/G{xJ=ZBpdDtS\/t\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\"%TVwh[E`Lp-FvoBaik=2\">\n                    <field name=\"TEXT\">Noun:<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"variables_set\" id=\"q-;^[i8AB}ZYi4VXzIr%\">\n                <field name=\"VAR\" id=\"Ww#cFZY^@ZODW6.x(Ak}\" variabletype=\"\">animal<\/field>\n                <value name=\"VALUE\">\n                  <block type=\"io_ask_text\" id=\"6~j1QLwk+0O^YV9}-\/RF\">\n                    <value name=\"TEXT\">\n                      <block type=\"text\" id=\"i8cV@+=`%%!R7n,q[n8}\">\n                        <field name=\"TEXT\">Animal (plural):<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"variables_set\" id=\"yMm7czpMQ*`.o0lK{~K@\">\n                    <field name=\"VAR\" id=\"uqdiqd?A}ddWsg,oAaO5\" variabletype=\"\">sport<\/field>\n                    <value name=\"VALUE\">\n                      <block type=\"io_ask_text\" id=\"M?RM[JwlwfgoK,?2k,N.\">\n                        <value name=\"TEXT\">\n                          <block type=\"text\" id=\"cUl`FMvH~Ly,VM\/(-W3)\">\n                            <field name=\"TEXT\">Sport:<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"variables_set\" id=\"Z2by#oC{^j?0QqjWF?,)\">\n                        <field name=\"VAR\" id=\"$7ElS(g;t{k+_mfpnhnf\" variabletype=\"\">adjective<\/field>\n                        <value name=\"VALUE\">\n                          <block type=\"io_ask_text\" id=\"N7[F],f?z)9I1UvReGU6\">\n                            <value name=\"TEXT\">\n                              <block type=\"text\" id=\"HYeJw5V?O.-v2Tz*:33B\">\n                                <field name=\"TEXT\">Adjective:<\/field>\n                              <\/block>\n                            <\/value>\n                          <\/block>\n                        <\/value>\n                        <next>\n                          <block type=\"variables_set\" id=\"|iRW|c0ZXSDN1%.\/hCno\">\n                            <field name=\"VAR\" id=\"Nl~6-Yo#~2Tb]mH~3hF6\" variabletype=\"\">adjective2<\/field>\n                            <value name=\"VALUE\">\n                              <block type=\"io_ask_text\" id=\"{T5Kyac+Uf3W0H`p{]]i\">\n                                <value name=\"TEXT\">\n                                  <block type=\"text\" id=\"k*I_Irl$#:Rl8]4X\/E4#\">\n                                    <field name=\"TEXT\">Another Adjective:<\/field>\n                                  <\/block>\n                                <\/value>\n                              <\/block>\n                            <\/value>\n                            <next>\n                              <block type=\"variables_set\" id=\"bX*x:LJe_jmzXwAyM1W0\">\n                                <field name=\"VAR\" id=\"MaDM%Y_mI7,:p3r$xFhl\" variabletype=\"\">verb<\/field>\n                                <value name=\"VALUE\">\n                                  <block type=\"io_ask_text\" id=\"nY1-Iawiv:9NOOM0=*{~\">\n                                    <value name=\"TEXT\">\n                                      <block type=\"text\" id=\"@zSmNl-CN4ce(krM;0^!\">\n                                        <field name=\"TEXT\">Verb:<\/field>\n                                      <\/block>\n                                    <\/value>\n                                  <\/block>\n                                <\/value>\n                              <\/block>\n                            <\/next>\n                          <\/block>\n                        <\/next>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n```\n\nHere we've called our variables descriptive names such as  <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk> and <bk class=\"var\"><bk class=\"inner\">relation<\/bk><\/bk>. When you're naming your variables, remember that they can't contain spaces!\n\nThe second step is to print out the message, using strings and the contents of those variables just like the hint suggests.\n\nRemember that to have punctuation next to a variable you need a join block, inside the print block. e.g.\n\n```eg:mad-libs-soln2;lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"$7ElS(g;t{k+_mfpnhnf\">adjective<\/variable>\n    <variable type=\"\" id=\"Nl~6-Yo#~2Tb]mH~3hF6\">adjective2<\/variable>\n    <variable type=\"\" id=\"Ww#cFZY^@ZODW6.x(Ak}\">animal<\/variable>\n    <variable type=\"\" id=\"XZ.\/}2rKi=0YeGf(4m*e\">name<\/variable>\n    <variable type=\"\" id=\"%8uR1{CYT+Q+A)?ZoS7^\">noun<\/variable>\n    <variable type=\"\" id=\"7vigdH]39u-neW6!7;hg\">relation<\/variable>\n    <variable type=\"\" id=\"uqdiqd?A}ddWsg,oAaO5\">sport<\/variable>\n    <variable type=\"\" id=\"MaDM%Y_mI7,:p3r$xFhl\">verb<\/variable>\n  <\/variables>\n  <block type=\"io_print2\" id=\":(S^kudadGPQ~OzFhKVn\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"VMqFK@y7TlqM$KY.TchK\">\n        <field name=\"TEXT\">Dear<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"text_concat2\" id=\"Ge6#^\/Yr[wmm`BRc:[Uw\">\n        <value name=\"TEXT0\">\n          <block type=\"variables_get\" id=\"{tzl~(U}J=`P0yF6zz.{\">\n            <field name=\"VAR\" id=\"7vigdH]39u-neW6!7;hg\" variabletype=\"\">relation<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text\" id=\"e(e#F,U7LizbXfx(6y=Y\">\n            <field name=\"TEXT\">,<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\nAnd here's all of the <bk class=\"io\"><bk class=\"inner\">print<\/bk><\/bk> blocks.\n\n```eg:mad-libs-soln3;lang:blockly;norun;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"$7ElS(g;t{k+_mfpnhnf\">adjective<\/variable>\n    <variable type=\"\" id=\"Nl~6-Yo#~2Tb]mH~3hF6\">adjective2<\/variable>\n    <variable type=\"\" id=\"Ww#cFZY^@ZODW6.x(Ak}\">animal<\/variable>\n    <variable type=\"\" id=\"XZ.\/}2rKi=0YeGf(4m*e\">name<\/variable>\n    <variable type=\"\" id=\"%8uR1{CYT+Q+A)?ZoS7^\">noun<\/variable>\n    <variable type=\"\" id=\"7vigdH]39u-neW6!7;hg\">relation<\/variable>\n    <variable type=\"\" id=\"uqdiqd?A}ddWsg,oAaO5\">sport<\/variable>\n    <variable type=\"\" id=\"MaDM%Y_mI7,:p3r$xFhl\">verb<\/variable>\n  <\/variables>\n  <block type=\"io_print2\" id=\":(S^kudadGPQ~OzFhKVn\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"VMqFK@y7TlqM$KY.TchK\">\n        <field name=\"TEXT\">Dear<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"text_concat2\" id=\"Ge6#^\/Yr[wmm`BRc:[Uw\">\n        <value name=\"TEXT0\">\n          <block type=\"variables_get\" id=\"{tzl~(U}J=`P0yF6zz.{\">\n            <field name=\"VAR\" id=\"7vigdH]39u-neW6!7;hg\" variabletype=\"\">relation<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text\" id=\"e(e#F,U7LizbXfx(6y=Y\">\n            <field name=\"TEXT\">,<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print5\" id=\"Rg-xWOivV!Z8H2{F]X42\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"qM=pj8?7FK`Az0Ko~]9#\">\n            <field name=\"TEXT\">Camp<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"gB{dVc%O:U+480`f5r_A\">\n            <field name=\"VAR\" id=\"%8uR1{CYT+Q+A)?ZoS7^\" variabletype=\"\">noun<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY2\">\n          <block type=\"text\" id=\"n2~P;,5$VZmv?1+Jav^9\">\n            <field name=\"TEXT\">has been<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY3\">\n          <block type=\"variables_get\" id=\"(jnPt?m4bKZApSZ%:,q1\">\n            <field name=\"VAR\" id=\"$7ElS(g;t{k+_mfpnhnf\" variabletype=\"\">adjective<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY4\">\n          <block type=\"text\" id=\"F0f%E5[|E#06?l^xQ1ZO\">\n            <field name=\"TEXT\">so far!<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print3\" id=\".9c{dDI?XiK,dg3AZ{6E\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"H,|~y4PKE!$.i?*bpM4z\">\n                <field name=\"TEXT\">Tomorrow we will play<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"W^i$K``1K=urN$O-rmYh\">\n                <field name=\"VAR\" id=\"uqdiqd?A}ddWsg,oAaO5\" variabletype=\"\">sport<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY2\">\n              <block type=\"text\" id=\"x30?pLKbU@Fv8%U\/plKM\">\n                <field name=\"TEXT\">if the weather is ok.<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print3\" id=\")YCdT2I*|BQB#iwZf-XT\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"*kknFnle1V5^U#G9xwpu\">\n                    <field name=\"TEXT\">Today it has been raining cats and<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"variables_get\" id=\"^bLrkU\/Tdk+|k)s3NY@e\">\n                    <field name=\"VAR\" id=\"Ww#cFZY^@ZODW6.x(Ak}\" variabletype=\"\">animal<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY2\">\n                  <block type=\"text\" id=\"ad{Ot:#.J0L\/05E\/d]Wp\">\n                    <field name=\"TEXT\">all day!<\/field>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print4\" id=\"~qZqS`6uvz%AL:0Ejtf4\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"U0[lmNiKV.3u6]lnZOtn\">\n                        <field name=\"TEXT\">If we cannot play<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY1\">\n                      <block type=\"text_concat2\" id=\"MMS\/qbo[n^oA~r[BS*|T\">\n                        <value name=\"TEXT0\">\n                          <block type=\"variables_get\" id=\"B(V|1g\/3Kb-w3#UB+Y#Z\">\n                            <field name=\"VAR\" id=\"uqdiqd?A}ddWsg,oAaO5\" variabletype=\"\">sport<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"TEXT1\">\n                          <block type=\"text\" id=\"!V4WeI6z.BzDNJ`.TBUH\">\n                            <field name=\"TEXT\">,<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY2\">\n                      <block type=\"text\" id=\"xAu1KoRMj|#Q.D#!h0KU\">\n                        <field name=\"TEXT\">maybe we will just<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY3\">\n                      <block type=\"text_concat2\" id=\"l?jK~Pm_?yiAO$X%k!j\/\">\n                        <value name=\"TEXT0\">\n                          <block type=\"variables_get\" id=\":oQq9:5aLwkf8U9?k4!w\">\n                            <field name=\"VAR\" id=\"MaDM%Y_mI7,:p3r$xFhl\" variabletype=\"\">verb<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"TEXT1\">\n                          <block type=\"text\" id=\"[?)h?Nl6IU}+OUvte-Z[\">\n                            <field name=\"TEXT\">.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print3\" id=\"yL_0k*k`*$V7crRhLCT5\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"]{m@iAY?V)ZJH\/#I7VZn\">\n                            <field name=\"TEXT\">I am sure it will be<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"ANY1\">\n                          <block type=\"variables_get\" id=\"lO_}a~WvbY)=0qFfiU`_\">\n                            <field name=\"VAR\" id=\"Nl~6-Yo#~2Tb]mH~3hF6\" variabletype=\"\">adjective2<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"ANY2\">\n                          <block type=\"text\" id=\"0!rOo{~?fH|E`~9tx@2i\">\n                            <field name=\"TEXT\">either way!<\/field>\n                          <\/block>\n                        <\/value>\n                        <next>\n                          <block type=\"io_print2\" id=\"1`9FNU[Agz|B#j5#6k_X\">\n                            <value name=\"ANY0\">\n                              <block type=\"text\" id=\"lD*5vqqhiK:OD:jO^2t=\">\n                                <field name=\"TEXT\">See you soon!<\/field>\n                              <\/block>\n                            <\/value>\n                            <value name=\"ANY1\">\n                              <block type=\"variables_get\" id=\"c3g,u;?x(?(.0atqwutU\">\n                                <field name=\"VAR\" id=\"XZ.\/}2rKi=0YeGf(4m*e\" variabletype=\"\">name<\/field>\n                              <\/block>\n                            <\/value>\n                          <\/block>\n                        <\/next>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n```\n\nAnd that's it! So we can now piece these two steps together to form the final solution.\n\n",
      "updated_at":"2017-07-25T15:59:48.931915+00:00",
      "label":"bk-py3-mad-libs-0",
      "content":"#markdown\n[Mad Libs](https:\/\/en.wikipedia.org\/wiki\/Mad_Libs) are funny, often nonsensical stories built by asking someone for a series of words and using those words to fill in the blanks in a story. There are often crazy results!\n\nEvery time kids go away to camp, people expect them to send postcards. But there\u2019s more fun outside than being stuck inside writing!\nWrite a program that will help your friends tell fun stories about what they\u2019re doing at camp.\nYour program should ask the user for some things you might find at camp and turn them into a story. For example:\n\nHere is an example:\n\n```lang:py3;terminal;eg:none;\nName: @@@Jane\nRelation: @@@Aunty\nNoun: @@@stick\nAnimal (plural): @@@sloths\nSport: @@@tennis\nAdjective: @@@bouncy\nAnother Adjective: @@@crunchy\nVerb: @@@hop\nDear Aunty,\nCamp stick has been bouncy so far!\nTomorrow we will play tennis if the weather is ok.\nToday it has been raining cats and sloths all day!\nIf we cannot play tennis, maybe we will just hop.\nI am sure it will be crunchy either way!\nSee you soon! Jane\n```\n\n> ## Hint\n> Don't forget you can copy and paste the text for long passages to save on typing.\n> You will need to use string addition for bits that don't have any spaces between the variable and the punctuation\n> ```lang:blockly;norun;\n> <xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n>  <variables>\n>    <variable type=\"\" id=\"$7ElS(g;t{k+_mfpnhnf\">adjective<\/variable>\n>    <variable type=\"\" id=\"Nl~6-Yo#~2Tb]mH~3hF6\">adjective2<\/variable>\n>    <variable type=\"\" id=\"Ww#cFZY^@ZODW6.x(Ak}\">animal<\/variable>\n>    <variable type=\"\" id=\"XZ.\/}2rKi=0YeGf(4m*e\">name<\/variable>\n>    <variable type=\"\" id=\"%8uR1{CYT+Q+A)?ZoS7^\">noun<\/variable>\n>    <variable type=\"\" id=\"7vigdH]39u-neW6!7;hg\">relation<\/variable>\n>    <variable type=\"\" id=\"uqdiqd?A}ddWsg,oAaO5\">sport<\/variable>\n>    <variable type=\"\" id=\"MaDM%Y_mI7,:p3r$xFhl\">verb<\/variable>\n>  <\/variables>\n>  <block type=\"io_print2\" id=\"6G=sp#Qgjk|urxVTh4%u\" x=\"10\" y=\"10\">\n>    <value name=\"ANY0\">\n>      <block type=\"text\" id=\"OL]yj+D2K3`!!pyvpVH,\">\n>        <field name=\"TEXT\">Dear<\/field>\n>      <\/block>\n>    <\/value>\n>    <value name=\"ANY1\">\n>      <block type=\"text_concat2\" id=\"YgAglPPbBP9d6+GXB6P7\">\n>        <value name=\"TEXT0\">\n>          <block type=\"variables_get\" id=\"@T,*nPdo?%!.#2n|D!#)\">\n>            <field name=\"VAR\" id=\"7vigdH]39u-neW6!7;hg\" variabletype=\"\">relation<\/field>\n>          <\/block>\n>        <\/value>\n>        <value name=\"TEXT1\">\n>          <block type=\"text\" id=\"t*lNmD(G?xL}IZ`wTE=?\">\n>            <field name=\"TEXT\">,<\/field>\n>          <\/block>\n>        <\/value>\n>      <\/block>\n>    <\/value>\n>  <\/block>\n><\/xml>\n> ```\n\n\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_concat2\",\"io_print2\",\"io_print3\",\"io_print4\",\"io_print5\",\"io_ask_text\"]",
      "teacher_notes":"#markdown\nTo solve this question, we'll use multiples of <bk class=\"str\"><bk class=\"inner\">ask<\/bk><\/bk>, <bk class=\"var\"><bk class=\"inner\">variables<\/bk><\/bk> and <bk class=\"io\"><bk class=\"inner\">print<\/bk><\/bk>. There are eight different pieces of information to input and there will need to be a separate variable and input for each.\n\n```eg:mad-libs-soln1;lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"$7ElS(g;t{k+_mfpnhnf\">adjective<\/variable>\n    <variable type=\"\" id=\"Nl~6-Yo#~2Tb]mH~3hF6\">adjective2<\/variable>\n    <variable type=\"\" id=\"Ww#cFZY^@ZODW6.x(Ak}\">animal<\/variable>\n    <variable type=\"\" id=\"XZ.\/}2rKi=0YeGf(4m*e\">name<\/variable>\n    <variable type=\"\" id=\"%8uR1{CYT+Q+A)?ZoS7^\">noun<\/variable>\n    <variable type=\"\" id=\"7vigdH]39u-neW6!7;hg\">relation<\/variable>\n    <variable type=\"\" id=\"uqdiqd?A}ddWsg,oAaO5\">sport<\/variable>\n    <variable type=\"\" id=\"MaDM%Y_mI7,:p3r$xFhl\">verb<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"[a3uFb3}H}z?E3E8+Ef0\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"XZ.\/}2rKi=0YeGf(4m*e\" variabletype=\"\">name<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"Kp#zs10y!PP.pxXTpdGJ\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"C8oT5EPKzM}d..2D7rVk\">\n            <field name=\"TEXT\">Name:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"Nz;QM#-nWzpLJfqV0,=)\">\n        <field name=\"VAR\" id=\"7vigdH]39u-neW6!7;hg\" variabletype=\"\">relation<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"-.pT=L9EA$sYfl4:YETB\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"GO*d~:=ltds,{^5[$;Av\">\n                <field name=\"TEXT\">Relation:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"variables_set\" id=\"xe`8%t;J)FEY[7=YeRJz\">\n            <field name=\"VAR\" id=\"%8uR1{CYT+Q+A)?ZoS7^\" variabletype=\"\">noun<\/field>\n            <value name=\"VALUE\">\n              <block type=\"io_ask_text\" id=\"ibHM=\/G{xJ=ZBpdDtS\/t\">\n                <value name=\"TEXT\">\n                  <block type=\"text\" id=\"%TVwh[E`Lp-FvoBaik=2\">\n                    <field name=\"TEXT\">Noun:<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"variables_set\" id=\"q-;^[i8AB}ZYi4VXzIr%\">\n                <field name=\"VAR\" id=\"Ww#cFZY^@ZODW6.x(Ak}\" variabletype=\"\">animal<\/field>\n                <value name=\"VALUE\">\n                  <block type=\"io_ask_text\" id=\"6~j1QLwk+0O^YV9}-\/RF\">\n                    <value name=\"TEXT\">\n                      <block type=\"text\" id=\"i8cV@+=`%%!R7n,q[n8}\">\n                        <field name=\"TEXT\">Animal (plural):<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"variables_set\" id=\"yMm7czpMQ*`.o0lK{~K@\">\n                    <field name=\"VAR\" id=\"uqdiqd?A}ddWsg,oAaO5\" variabletype=\"\">sport<\/field>\n                    <value name=\"VALUE\">\n                      <block type=\"io_ask_text\" id=\"M?RM[JwlwfgoK,?2k,N.\">\n                        <value name=\"TEXT\">\n                          <block type=\"text\" id=\"cUl`FMvH~Ly,VM\/(-W3)\">\n                            <field name=\"TEXT\">Sport:<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"variables_set\" id=\"Z2by#oC{^j?0QqjWF?,)\">\n                        <field name=\"VAR\" id=\"$7ElS(g;t{k+_mfpnhnf\" variabletype=\"\">adjective<\/field>\n                        <value name=\"VALUE\">\n                          <block type=\"io_ask_text\" id=\"N7[F],f?z)9I1UvReGU6\">\n                            <value name=\"TEXT\">\n                              <block type=\"text\" id=\"HYeJw5V?O.-v2Tz*:33B\">\n                                <field name=\"TEXT\">Adjective:<\/field>\n                              <\/block>\n                            <\/value>\n                          <\/block>\n                        <\/value>\n                        <next>\n                          <block type=\"variables_set\" id=\"|iRW|c0ZXSDN1%.\/hCno\">\n                            <field name=\"VAR\" id=\"Nl~6-Yo#~2Tb]mH~3hF6\" variabletype=\"\">adjective2<\/field>\n                            <value name=\"VALUE\">\n                              <block type=\"io_ask_text\" id=\"{T5Kyac+Uf3W0H`p{]]i\">\n                                <value name=\"TEXT\">\n                                  <block type=\"text\" id=\"k*I_Irl$#:Rl8]4X\/E4#\">\n                                    <field name=\"TEXT\">Another Adjective:<\/field>\n                                  <\/block>\n                                <\/value>\n                              <\/block>\n                            <\/value>\n                            <next>\n                              <block type=\"variables_set\" id=\"bX*x:LJe_jmzXwAyM1W0\">\n                                <field name=\"VAR\" id=\"MaDM%Y_mI7,:p3r$xFhl\" variabletype=\"\">verb<\/field>\n                                <value name=\"VALUE\">\n                                  <block type=\"io_ask_text\" id=\"nY1-Iawiv:9NOOM0=*{~\">\n                                    <value name=\"TEXT\">\n                                      <block type=\"text\" id=\"@zSmNl-CN4ce(krM;0^!\">\n                                        <field name=\"TEXT\">Verb:<\/field>\n                                      <\/block>\n                                    <\/value>\n                                  <\/block>\n                                <\/value>\n                              <\/block>\n                            <\/next>\n                          <\/block>\n                        <\/next>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n```\n\nHere we've called our variables descriptive names such as  <bk class=\"var\"><bk class=\"inner\">name<\/bk><\/bk> and <bk class=\"var\"><bk class=\"inner\">relation<\/bk><\/bk>. When you're naming your variables, remember that they can't contain spaces!\n\nThe second step is to print out the message, using strings and the contents of those variables just like the hint suggests.\n\nRemember that to have punctuation next to a variable you need a join block, inside the print block. e.g.\n\n```eg:mad-libs-soln2;lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"$7ElS(g;t{k+_mfpnhnf\">adjective<\/variable>\n    <variable type=\"\" id=\"Nl~6-Yo#~2Tb]mH~3hF6\">adjective2<\/variable>\n    <variable type=\"\" id=\"Ww#cFZY^@ZODW6.x(Ak}\">animal<\/variable>\n    <variable type=\"\" id=\"XZ.\/}2rKi=0YeGf(4m*e\">name<\/variable>\n    <variable type=\"\" id=\"%8uR1{CYT+Q+A)?ZoS7^\">noun<\/variable>\n    <variable type=\"\" id=\"7vigdH]39u-neW6!7;hg\">relation<\/variable>\n    <variable type=\"\" id=\"uqdiqd?A}ddWsg,oAaO5\">sport<\/variable>\n    <variable type=\"\" id=\"MaDM%Y_mI7,:p3r$xFhl\">verb<\/variable>\n  <\/variables>\n  <block type=\"io_print2\" id=\":(S^kudadGPQ~OzFhKVn\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"VMqFK@y7TlqM$KY.TchK\">\n        <field name=\"TEXT\">Dear<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"text_concat2\" id=\"Ge6#^\/Yr[wmm`BRc:[Uw\">\n        <value name=\"TEXT0\">\n          <block type=\"variables_get\" id=\"{tzl~(U}J=`P0yF6zz.{\">\n            <field name=\"VAR\" id=\"7vigdH]39u-neW6!7;hg\" variabletype=\"\">relation<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text\" id=\"e(e#F,U7LizbXfx(6y=Y\">\n            <field name=\"TEXT\">,<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\nAnd here's all of the <bk class=\"io\"><bk class=\"inner\">print<\/bk><\/bk> blocks.\n\n```eg:mad-libs-soln3;lang:blockly;norun;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"$7ElS(g;t{k+_mfpnhnf\">adjective<\/variable>\n    <variable type=\"\" id=\"Nl~6-Yo#~2Tb]mH~3hF6\">adjective2<\/variable>\n    <variable type=\"\" id=\"Ww#cFZY^@ZODW6.x(Ak}\">animal<\/variable>\n    <variable type=\"\" id=\"XZ.\/}2rKi=0YeGf(4m*e\">name<\/variable>\n    <variable type=\"\" id=\"%8uR1{CYT+Q+A)?ZoS7^\">noun<\/variable>\n    <variable type=\"\" id=\"7vigdH]39u-neW6!7;hg\">relation<\/variable>\n    <variable type=\"\" id=\"uqdiqd?A}ddWsg,oAaO5\">sport<\/variable>\n    <variable type=\"\" id=\"MaDM%Y_mI7,:p3r$xFhl\">verb<\/variable>\n  <\/variables>\n  <block type=\"io_print2\" id=\":(S^kudadGPQ~OzFhKVn\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"text\" id=\"VMqFK@y7TlqM$KY.TchK\">\n        <field name=\"TEXT\">Dear<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"text_concat2\" id=\"Ge6#^\/Yr[wmm`BRc:[Uw\">\n        <value name=\"TEXT0\">\n          <block type=\"variables_get\" id=\"{tzl~(U}J=`P0yF6zz.{\">\n            <field name=\"VAR\" id=\"7vigdH]39u-neW6!7;hg\" variabletype=\"\">relation<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"TEXT1\">\n          <block type=\"text\" id=\"e(e#F,U7LizbXfx(6y=Y\">\n            <field name=\"TEXT\">,<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"io_print5\" id=\"Rg-xWOivV!Z8H2{F]X42\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"qM=pj8?7FK`Az0Ko~]9#\">\n            <field name=\"TEXT\">Camp<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"variables_get\" id=\"gB{dVc%O:U+480`f5r_A\">\n            <field name=\"VAR\" id=\"%8uR1{CYT+Q+A)?ZoS7^\" variabletype=\"\">noun<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY2\">\n          <block type=\"text\" id=\"n2~P;,5$VZmv?1+Jav^9\">\n            <field name=\"TEXT\">has been<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY3\">\n          <block type=\"variables_get\" id=\"(jnPt?m4bKZApSZ%:,q1\">\n            <field name=\"VAR\" id=\"$7ElS(g;t{k+_mfpnhnf\" variabletype=\"\">adjective<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY4\">\n          <block type=\"text\" id=\"F0f%E5[|E#06?l^xQ1ZO\">\n            <field name=\"TEXT\">so far!<\/field>\n          <\/block>\n        <\/value>\n        <next>\n          <block type=\"io_print3\" id=\".9c{dDI?XiK,dg3AZ{6E\">\n            <value name=\"ANY0\">\n              <block type=\"text\" id=\"H,|~y4PKE!$.i?*bpM4z\">\n                <field name=\"TEXT\">Tomorrow we will play<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY1\">\n              <block type=\"variables_get\" id=\"W^i$K``1K=urN$O-rmYh\">\n                <field name=\"VAR\" id=\"uqdiqd?A}ddWsg,oAaO5\" variabletype=\"\">sport<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"ANY2\">\n              <block type=\"text\" id=\"x30?pLKbU@Fv8%U\/plKM\">\n                <field name=\"TEXT\">if the weather is ok.<\/field>\n              <\/block>\n            <\/value>\n            <next>\n              <block type=\"io_print3\" id=\")YCdT2I*|BQB#iwZf-XT\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"*kknFnle1V5^U#G9xwpu\">\n                    <field name=\"TEXT\">Today it has been raining cats and<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY1\">\n                  <block type=\"variables_get\" id=\"^bLrkU\/Tdk+|k)s3NY@e\">\n                    <field name=\"VAR\" id=\"Ww#cFZY^@ZODW6.x(Ak}\" variabletype=\"\">animal<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"ANY2\">\n                  <block type=\"text\" id=\"ad{Ot:#.J0L\/05E\/d]Wp\">\n                    <field name=\"TEXT\">all day!<\/field>\n                  <\/block>\n                <\/value>\n                <next>\n                  <block type=\"io_print4\" id=\"~qZqS`6uvz%AL:0Ejtf4\">\n                    <value name=\"ANY0\">\n                      <block type=\"text\" id=\"U0[lmNiKV.3u6]lnZOtn\">\n                        <field name=\"TEXT\">If we cannot play<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY1\">\n                      <block type=\"text_concat2\" id=\"MMS\/qbo[n^oA~r[BS*|T\">\n                        <value name=\"TEXT0\">\n                          <block type=\"variables_get\" id=\"B(V|1g\/3Kb-w3#UB+Y#Z\">\n                            <field name=\"VAR\" id=\"uqdiqd?A}ddWsg,oAaO5\" variabletype=\"\">sport<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"TEXT1\">\n                          <block type=\"text\" id=\"!V4WeI6z.BzDNJ`.TBUH\">\n                            <field name=\"TEXT\">,<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY2\">\n                      <block type=\"text\" id=\"xAu1KoRMj|#Q.D#!h0KU\">\n                        <field name=\"TEXT\">maybe we will just<\/field>\n                      <\/block>\n                    <\/value>\n                    <value name=\"ANY3\">\n                      <block type=\"text_concat2\" id=\"l?jK~Pm_?yiAO$X%k!j\/\">\n                        <value name=\"TEXT0\">\n                          <block type=\"variables_get\" id=\":oQq9:5aLwkf8U9?k4!w\">\n                            <field name=\"VAR\" id=\"MaDM%Y_mI7,:p3r$xFhl\" variabletype=\"\">verb<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"TEXT1\">\n                          <block type=\"text\" id=\"[?)h?Nl6IU}+OUvte-Z[\">\n                            <field name=\"TEXT\">.<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/value>\n                    <next>\n                      <block type=\"io_print3\" id=\"yL_0k*k`*$V7crRhLCT5\">\n                        <value name=\"ANY0\">\n                          <block type=\"text\" id=\"]{m@iAY?V)ZJH\/#I7VZn\">\n                            <field name=\"TEXT\">I am sure it will be<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"ANY1\">\n                          <block type=\"variables_get\" id=\"lO_}a~WvbY)=0qFfiU`_\">\n                            <field name=\"VAR\" id=\"Nl~6-Yo#~2Tb]mH~3hF6\" variabletype=\"\">adjective2<\/field>\n                          <\/block>\n                        <\/value>\n                        <value name=\"ANY2\">\n                          <block type=\"text\" id=\"0!rOo{~?fH|E`~9tx@2i\">\n                            <field name=\"TEXT\">either way!<\/field>\n                          <\/block>\n                        <\/value>\n                        <next>\n                          <block type=\"io_print2\" id=\"1`9FNU[Agz|B#j5#6k_X\">\n                            <value name=\"ANY0\">\n                              <block type=\"text\" id=\"lD*5vqqhiK:OD:jO^2t=\">\n                                <field name=\"TEXT\">See you soon!<\/field>\n                              <\/block>\n                            <\/value>\n                            <value name=\"ANY1\">\n                              <block type=\"variables_get\" id=\"c3g,u;?x(?(.0atqwutU\">\n                                <field name=\"VAR\" id=\"XZ.\/}2rKi=0YeGf(4m*e\" variabletype=\"\">name<\/field>\n                              <\/block>\n                            <\/value>\n                          <\/block>\n                        <\/next>\n                      <\/block>\n                    <\/next>\n                  <\/block>\n                <\/next>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/next>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n```\n\nAnd that's it! So we can now piece these two steps together to form the final solution.\n\n"
    },
    {
      "language":0,
      "title":"Blank is the new blank",
      "notes":"#markdown\nTo solve this question, we'll use the <bk class=\"str\"><bk class=\"inner\">ask<\/bk><\/bk> to read in two different bits of information: <bk class=\"var\"><bk class=\"inner\">x<\/bk><\/bk> and <bk class=\"var\"><bk class=\"inner\">y<\/bk><\/bk>.\n\n```eg:match-of-the-year-soln1;lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"N,+SKO0So1EmR\/}\/V9R%\">x<\/variable>\n    <variable type=\"\" id=\"7)slZtzoek`p~(+A$g4B\">y<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"(8d.{1F(V?::Bz_`yp!Y\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"N,+SKO0So1EmR\/}\/V9R%\" variabletype=\"\">x<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"68)qn{R#~:zkwJxtU0cD\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"befp[LU*4fWdv%x=Sf.,\">\n            <field name=\"TEXT\">x:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"^l`I-~wfRA.7CRF!p(K1\">\n        <field name=\"VAR\" id=\"7)slZtzoek`p~(+A$g4B\" variabletype=\"\">y<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"O.A*2sW%d)F_#NL*FLBt\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"pz)o-uG].w8K)@[RF..o\">\n                <field name=\"TEXT\">y:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n```\n\nHere we've called our variables <bk class=\"var\"><bk class=\"inner\">x<\/bk><\/bk> and <bk class=\"var\"><bk class=\"inner\">y<\/bk><\/bk>.\n\nThe second step is to <bk class=\"io\"><bk class=\"inner\">print<\/bk><\/bk> out the message, using the contents of those variables and the middle string:\n\n```eg:match-of-the-year-soln2;lang:blockly;norun;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"N,+SKO0So1EmR\/}\/V9R%\">x<\/variable>\n    <variable type=\"\" id=\"7)slZtzoek`p~(+A$g4B\">y<\/variable>\n  <\/variables>\n  <block type=\"io_print3\" id=\",$^Q%UmE69QAox%oL2R6\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"variables_get\" id=\"d!P%Qd,pTG59,gg,(E?7\">\n        <field name=\"VAR\" id=\"N,+SKO0So1EmR\/}\/V9R%\" variabletype=\"\">x<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"text\" id=\"[4htN)s68=ii,[FS+TTO\">\n        <field name=\"TEXT\">is the new<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"variables_get\" id=\"cDfA1ASTrTx.OXDxtbte\">\n        <field name=\"VAR\" id=\"7)slZtzoek`p~(+A$g4B\" variabletype=\"\">y<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n\n```\n\nAnd that's it! So we can now piece these two steps together to form the final solution.\n",
      "updated_at":"2017-07-25T10:40:49.201034+00:00",
      "label":"bk-py3-x-is-the-new-y",
      "content":"#markdown\n\nA common saying in fashion is to describe a new fashion colour or trend as \"the new black\". \nYou can sometimes even see phrases like \"[x is the new y](https:\/\/snowclones.org\/2007\/07\/01\/x-is-the-new-y\/)\": [Quiet is the new Loud](https:\/\/en.wikipedia.org\/wiki\/Quiet_Is_the_New_Loud), [Bacon is the new Chocolate](https:\/\/www.theatlantic.com\/magazine\/archive\/2005\/11\/better-bacon\/304326\/) or even [Knitting is the new yoga](http:\/\/www.telegraph.co.uk\/men\/thinking-man\/10552983\/Mens-knitting-is-it-the-new-yoga.html).\n\nWrite a program that reads in two things, and prints out the resulting _new_ phrase.\n\nHere is an example:\n\n```lang:py3;terminal;eg:none;\nx: @@@Orange\ny: @@@Black\nOrange is the new Black\n\n```\n\n\n```lang:py3;terminal;eg:none;\nx: @@@Quiet\ny: @@@Loud\nQuiet is the new Loud\n\n```\n\n\nHere's another example:\n\n```lang:py3;terminal;eg:none;\nx: @@@knitting\ny: @@@yoga\nknitting is the new yoga\n\n```\n\n\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print3\",\"io_ask_text\"]",
      "teacher_notes":"#markdown\nTo solve this question, we'll use the <bk class=\"str\"><bk class=\"inner\">ask<\/bk><\/bk> to read in two different bits of information: <bk class=\"var\"><bk class=\"inner\">x<\/bk><\/bk> and <bk class=\"var\"><bk class=\"inner\">y<\/bk><\/bk>.\n\n```eg:match-of-the-year-soln1;lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"N,+SKO0So1EmR\/}\/V9R%\">x<\/variable>\n    <variable type=\"\" id=\"7)slZtzoek`p~(+A$g4B\">y<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"(8d.{1F(V?::Bz_`yp!Y\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"N,+SKO0So1EmR\/}\/V9R%\" variabletype=\"\">x<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"68)qn{R#~:zkwJxtU0cD\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"befp[LU*4fWdv%x=Sf.,\">\n            <field name=\"TEXT\">x:<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"variables_set\" id=\"^l`I-~wfRA.7CRF!p(K1\">\n        <field name=\"VAR\" id=\"7)slZtzoek`p~(+A$g4B\" variabletype=\"\">y<\/field>\n        <value name=\"VALUE\">\n          <block type=\"io_ask_text\" id=\"O.A*2sW%d)F_#NL*FLBt\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"pz)o-uG].w8K)@[RF..o\">\n                <field name=\"TEXT\">y:<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n\n```\n\nHere we've called our variables <bk class=\"var\"><bk class=\"inner\">x<\/bk><\/bk> and <bk class=\"var\"><bk class=\"inner\">y<\/bk><\/bk>.\n\nThe second step is to <bk class=\"io\"><bk class=\"inner\">print<\/bk><\/bk> out the message, using the contents of those variables and the middle string:\n\n```eg:match-of-the-year-soln2;lang:blockly;norun;\n\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"N,+SKO0So1EmR\/}\/V9R%\">x<\/variable>\n    <variable type=\"\" id=\"7)slZtzoek`p~(+A$g4B\">y<\/variable>\n  <\/variables>\n  <block type=\"io_print3\" id=\",$^Q%UmE69QAox%oL2R6\" x=\"10\" y=\"10\">\n    <value name=\"ANY0\">\n      <block type=\"variables_get\" id=\"d!P%Qd,pTG59,gg,(E?7\">\n        <field name=\"VAR\" id=\"N,+SKO0So1EmR\/}\/V9R%\" variabletype=\"\">x<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY1\">\n      <block type=\"text\" id=\"[4htN)s68=ii,[FS+TTO\">\n        <field name=\"TEXT\">is the new<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"ANY2\">\n      <block type=\"variables_get\" id=\"cDfA1ASTrTx.OXDxtbte\">\n        <field name=\"VAR\" id=\"7)slZtzoek`p~(+A$g4B\" variabletype=\"\">y<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n\n```\n\nAnd that's it! So we can now piece these two steps together to form the final solution.\n"
    },
    {
      "language":0,
      "title":"Word chain!",
      "notes":"",
      "updated_at":"2018-03-23T08:00:29.802172+00:00",
      "label":"bk-py3-word-chain-loop",
      "content":"#markdown\n\n[Word Chain](https:\/\/en.wikipedia.org\/wiki\/Word_chain) is word game where players take turns saying words that start with the last letter of the previous word. You might have played this game on long car trips.\n\nWrite a program to help you play word chain. Your program should read in words until a blank line is entered. It should print out <code data-lang=\"out\">Invalid word<\/code> if a word is not a valid play. Your program should work for upper case and lower case words.\n\nHere is an example:\n\n```terminal;eg:none;\nWord: @@@carrot\nWord: @@@tomato\nWord: @@@orange\nWord: @@@mandarin\nInvalid word\nWord: @@@eggplant\nWord: @@@\n\n```\n\nNotice that the word <code data-lang=\"py3\">mandarin<\/code> is rejected because it doesn't start with the letter <code data-lang=\"py3\">e<\/code> from the previous word: <code data-lang=\"py3\">orange<\/code>. The next word still needs to start with the letter <code data-lang=\"py3\">e<\/code> (from <code data-lang=\"py3\">orange<\/code>), rather than <code data-lang=\"py3\">n<\/code> (from the end of the invalid word, <code data-lang=\"py3\">mandarin<\/code>).\n\n<p>Here is another example:<\/p>\n\n```terminal;eg:none;\nWord: @@@tomato\nWord: @@@okra\nWord: @@@asparagus\nWord: @@@seaweed\nWord: @@@cake\nInvalid word\nWord: @@@dried apricots\nWord: @@@cake\nInvalid word\nWord: @@@\n\n```\n\nHere's one last example. Don't forget it should work regardless of case!\n\n```terminal;eg:none;\nWord: @@@Australia\nWord: @@@Antartic\nWord: @@@Canada\nWord: @@@England\nInvalid word\nWord: @@@Denmark\nInvalid word\nWord: @@@\n\n```\n\n<p>You will always read in at least two words.<\/p>\n\n<aside class=\"info\">\n<h2>Hint: previous and current lines<\/h2>\n<ol>\n<li>Read two lines of input before you start looping.<\/li>\n<li>Notice that the previous line becomes the current line in the next iteration.<\/li>\n<\/ol>\n<\/aside>",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "while"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_changeCase\",\"text_subscript\",\"math_number\",\"io_print1\",\"io_ask_text\",\"decisions_if_else\",\"loops_while\",\"logic_compare\"]",
      "teacher_notes":""
    },
    {
      "language":0,
      "title":"Taboo Part Two!",
      "notes":"#markdown\n\nFor this question, we have to read in the taboo word and the description, and check if the word is in the description. We'll have to deal with case, too! The easiest way to do this is to make both the word and the description into lower case using `lower`. That way, no matter what case the input is, you can compare them directly.\n\nWe were nice and didn't include any upper case taboo words, but you had to make sure you turned the description into lower case.",
      "updated_at":"2017-07-25T15:37:28.366870+00:00",
      "label":"bk-py3-taboo-loops",
      "content":"#markdown\n\n[Taboo](https:\/\/en.wikipedia.org\/wiki\/Taboo_(game)) is a word game where one person describes a word on a card so that their partner can guess it. However, there are certain words that the person can't say when trying to describe the thing! \nA player might have to describe *'cereal'* without using the word *'breakfast'*.\n\nWrite a program that reads in the Taboo word, and continues to read in the description line until the line includes the taboo word.\nHere's an example for trying to guess the word *'cereal'*:\n\n```terminal;eg:none;\nTaboo word: @@@breakfast\nLine: @@@A type of grain\nSafe!\nLine: @@@you might pour milk on it...\nSafe!\nLine: @@@Museli is a type of breakfast blank.\nTaboo!\n\n```\n\nThe program should keep running until the line includes the taboo word (ignoring case):\n```terminal;eg:none;\nTaboo word: @@@bike\nLine: @@@there's a song about them on a bus.\nSafe!\nLine: @@@where they go round and round?\nSafe!\nLine: @@@Umm. - Oh! There are 4 of them on a car\nSafe!\nLine: @@@and one in a unicycle\nSafe!\nLine: @@@and two on a motorbike\nTaboo!\n\n```\n\nHere's a short example when trying to guess the word *'wheel'*:\n```terminal;eg:none;\nTaboo word: @@@bike\nLine: @@@The things on a BIKE that go flat...\nTaboo!\n\n```\n\nSometimes unrelated words include the sub-word. That still counts as a Taboo! E.g. guessing *'cat'*:\n\n```terminal;eg:none;\nTaboo word: @@@meow\nLine: @@@An animal with whiskers\nSafe!\nLine: @@@As a homeowner they might make your house smell\nTaboo!\n\n```\n",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "input",
        "print"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_changeCase\",\"io_print1\",\"io_ask_text\",\"loops_while\",\"logic_isMember\"]",
      "teacher_notes":"#markdown\n\nFor this question, we have to read in the taboo word and the description, and check if the word is in the description. We'll have to deal with case, too! The easiest way to do this is to make both the word and the description into lower case using `lower`. That way, no matter what case the input is, you can compare them directly.\n\nWe were nice and didn't include any upper case taboo words, but you had to make sure you turned the description into lower case."
    },
    {
      "language":0,
      "title":"Do you want to play questions?",
      "notes":"#markdown\nTo answer this question, we'll read in a line from the user, then set up a <bk class=\"control\">repeat while<\/bk> loop with the condition that the line <bk class=\"logic\"><bk class=\"inner\">ends<\/bk> with<\/bk> a question mark! While that is true, and the loop continues running, we'll keep asking for another line, and another line, and another line!  \n\nAs soon as a line is entered that does not <bk class=\"logic\"><bk class=\"inner\">ends<\/bk> with<\/bk> a <bk class=\"str lit\"><bk class=\"inner\">?<\/bk><\/bk>, the <bk class=\"control\">repeat while<\/bk> loop will exit, and we will print out <code data-lang=\"out\"><o>Statement!<\/o><\/code>.",
      "updated_at":"2017-07-25T15:37:06.313734+00:00",
      "label":"bk-py3-question-game",
      "content":"<p><a href=\"https:\/\/en.wikipedia.org\/wiki\/Questions_(game)\" target=\"_blank\">Questions<\/a> is a game played by maintaining a dialogue of only questions for as long as possible.<\/p>\n\n<p>Write a program that reads in each line of dialogue and checks that it is a question, printing <code data-lang=\"out\">Statement!<\/code> and ending the game if a line is not a question. In this game, we will assume that everything ending in a question mark (<code data-lang=\"py3\">'?'<\/code>) is a question.<\/p>\n\n<p>Your program should work like this:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>line: <\/o><i>Do you want to play questions?<\/i>\n<o>line: <\/o><i>How long does it take?<\/i>\n<o>line: <\/o><i>Do you need to go somewhere?<\/i>\n<o>line: <\/o><i>No.<\/i>\n<o>Statement!<\/o>\n<\/code><\/pre>\n\n<p>Here is another example:<\/p>\n<pre class=\"js-terminal\"><code data-lang=\"py3\"><o>line: <\/o><i>What time is it?<\/i>\n<o>line: <\/o><i>Don't you have a watch?<\/i>\n<o>line: <\/o><i>Is there a clock somewhere?<\/i>\n<o>line: <\/o><i>Is there one in that room?<\/i>\n<o>line: <\/o><i>I don't think so.<\/i>\n<o>Statement!<\/o>\n<\/code><\/pre>",
      "options":"{}",
      "editor":1,
      "workspace":"[]",
      "concepts":[
        "strings",
        "print",
        "string:endswith"
      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"io_print1\",\"io_ask_text\",\"loops_while\",\"logic_stringEnds\"]",
      "teacher_notes":"#markdown\nTo answer this question, we'll read in a line from the user, then set up a <bk class=\"control\">repeat while<\/bk> loop with the condition that the line <bk class=\"logic\"><bk class=\"inner\">ends<\/bk> with<\/bk> a question mark! While that is true, and the loop continues running, we'll keep asking for another line, and another line, and another line!  \n\nAs soon as a line is entered that does not <bk class=\"logic\"><bk class=\"inner\">ends<\/bk> with<\/bk> a <bk class=\"str lit\"><bk class=\"inner\">?<\/bk><\/bk>, the <bk class=\"control\">repeat while<\/bk> loop will exit, and we will print out <code data-lang=\"out\"><o>Statement!<\/o><\/code>."
    },
    {
      "language":0,
      "title":"Chatbot Playground!",
      "notes":"",
      "updated_at":"2018-03-26T08:06:26.123813+00:00",
      "label":"bk-py3-chatbot-playground",
      "content":"#markdown\n\n**What's this?! You thought you were finished?**\n\n\nWhy not have a go at writing your very own chatbot! You can write whatever code you like in this question. Consider it your personal chatbot playground!\n\n> ## Save or submit your code!\n> There are no points to be earned for this question, so you can submit whatever code you like. Make sure you save programs that you want to keep! ",
      "options":"{}",
      "editor":1,
      "workspace":"[{\"content\":\"\",\"path\":\"program.blockly\",\"is_static\":false,\"undeletable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_concat2\",\"text_changeCase\",\"text_slice_to_end\",\"math_number\",\"io_print1_text\",\"io_print1\",\"io_print2\",\"io_print3\",\"io_ask_text\",\"decisions_if_elif_elif_else\",\"loops_while\",\"loops_read_text\",\"logic_compare\",\"logic_isMember\",\"logic_stringEnds\"]",
      "teacher_notes":""
    },
    {
      "language":0,
      "title":"Introducing Captain Featherbot",
      "notes":"#markdown\n\nWe gave you a head start for this question so you started with the beginning and end of the interaction with Captain Feathersword.\n\nYour task was to write the main loop that asked what was on the user's mind over and over and over again, until they told the Captain to `go away`. \n\nStart the loop that will drive the main program, listening to their answer for that question, and then telling them to go on:\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"o;ad?)`@CG4roMj~pRXw\">line<\/variable>\n    <variable type=\"\" id=\"p*!?-(T;:{umJ:YFfvOi\">lower_word2<\/variable>\n    <variable type=\"\" id=\"EE(_@P+~Tmoct5nMtR`g\">movie<\/variable>\n    <variable type=\"\" id=\"mk7K?g5xExYc+6vL}N4?\">name<\/variable>\n    <variable type=\"\" id=\"t0Asn6?Tm)\/a(9v,+u=e\">word2<\/variable>\n  <\/variables>\n  <block type=\"loops_read_ask\" id=\"JR}jBfZb)E*,@(qO3~}u\" x=\"-9\" y=\"0\">\n    <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"5k%wN-U#;AA|w5$0PjGr\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"DRY?PNIMkkTfyz\/(cnaX\">\n            <field name=\"TEXT\">&gt;<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_compare\" id=\"Z06Ld=Z2DSgU\/o7.:R]\/\">\n        <field name=\"OP\">NEQ<\/field>\n        <value name=\"A\">\n          <block type=\"text_changeCase\" id=\"I~?YziNKqd:V*Xj++?zq\">\n            <field name=\"CASE\">LOWERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"54XeWaPe%:PC+~;LbA7-\">\n                <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"eg,t4#`XZ8H9OCv^(6zy\">\n            <field name=\"TEXT\">go away<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print1\" id=\"K|+t\/Io75utN}clrdh18\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"^TagE{$S?*KbF2n{ucTl\">\n            <field name=\"TEXT\">Arrr. Go on...<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n```\n\nA big gotcha in this question was remembering you have to check if the line converted to lower case letters was `'go away'`, rather than simply matching.",
      "updated_at":"2017-07-25T15:01:24.808006+00:00",
      "label":"bk-py3-chatbot-capt-featherbot-1",
      "content":"#markdown\n\n*Ya-har. Captain Featherbot is pleased to make your acquaintance!*\n\nLet's start off with our chatterbot. Captain Featherbot should introduce themselves, ask for the user's name, and then ask them what's on their mind. The Captain should keep letting them talk until the user enters <code data-lang=\"in\">go away<\/code> (or <code data-lang=\"in\">GO AWAY<\/code>). \n\nHere's an example interaction:\n\n```terminal;eg:none;\nArrr, I am Captain Featherbot.\nWhat be your name?\n> @@@Sarah\nAhoy Sarah! What be on your mind?\n> @@@This is a strange way to talk to a pirate\nArrr. Go on...\n> @@@But it's fun!\nArrr. Go on...\n> @@@For a little bit.\nArrr. Go on...\n> @@@go away\nShiver me timbers!\nFarewell Sarah, yer landlubber.\nI will be off for more swashbuckling adventures!\n\n```\n\n> ## Input on another line!\n> Careful! In these questions, you'll need to use `input` like this, printing out a question then using a prompt string afterwards:\n> ```lang:blockly;\n><xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n>  <variables>\n>    <variable type=\"\" id=\"ogV,5WtcPSdiSmerRI!{\">name<\/variable>\n>  <\/variables>\n>  <block type=\"io_print1\" id=\"hPD(AwIFKIe-2@OB%ifw\" x=\"10\" y=\"10\">\n>    <value name=\"ANY0\">\n>      <block type=\"text\" id=\",LjND5k[7tO2B5VO1QED\">\n>        <field name=\"TEXT\">What be your name?<\/field>\n>      <\/block>\n>    <\/value>\n>    <next>\n>      <block type=\"variables_set\" id=\"AmEh;_8xA|Hi8AoTuhC:\">\n>        <field name=\"VAR\" id=\"ogV,5WtcPSdiSmerRI!{\" variabletype=\"\">name<\/field>\n>        <value name=\"VALUE\">\n>          <block type=\"io_ask_text\" id=\"_xqg9TYVzkV31[r2{Dz7\">\n>            <value name=\"TEXT\">\n>              <block type=\"text\" id=\"^Dku(tO6K*%GzwrYHvkj\">\n>                <field name=\"TEXT\">&gt;<\/field>\n>              <\/block>\n>            <\/value>\n>          <\/block>\n>        <\/value>\n>      <\/block>\n>    <\/next>\n>  <\/block>\n><\/xml>\n> ```\n> We've given you a start to get you going.\n\nHere's another example:\n```terminal;eg:none;\nArrr, I am Captain Featherbot.\nWhat be your name?\n> @@@Felix\nAhoy Felix! What be on your mind?\n> @@@I want to go sailing.\nArrr. Go on...\n> @@@The ocean looks so pretty.\nArrr. Go on...\n> @@@But I don't have a boat.\nArrr. Go on...\n> @@@I need a boat to go sailing.\nArrr. Go on...\n> @@@Do you have a boat?\nArrr. Go on...\n> @@@Will you answer my question?\nArrr. Go on...\n> @@@You're not helping me!\nArrr. Go on...\n> @@@GO AWAY!!!\nArrr. Go on...\n> @@@Go Away\nShiver me timbers!\nFarewell Felix, yer landlubber.\nI will be off for more swashbuckling adventures!\n\n```\n\nNotice that the user has to type *exactly* <code data-lang=\"in\">go away<\/code> (or <code data-lang=\"in\">GO AWAY<\/code>) without any other characters on the line for the Captain to stop talking.",
      "options":"{}",
      "editor":1,
      "workspace":"[{\"content\":\"<xml xmlns=\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\">name<\\\/variable>\\n  <\\\/variables>\\n  <block type=\\\"io_print1\\\" id=\\\"G}+[xiww?1|9IPH\\\/[]c%\\\" x=\\\"-6\\\" y=\\\"6\\\">\\n    <value name=\\\"ANY0\\\">\\n      <block type=\\\"text\\\" id=\\\"E%%RP1++2GUS,`G-9\\\/_7\\\">\\n        <field name=\\\"TEXT\\\">Arrr, I am Captain Featherbot.<\\\/field>\\n      <\\\/block>\\n    <\\\/value>\\n    <next>\\n      <block type=\\\"io_print1\\\" id=\\\"5{rRH;L)Q_lnW@Ip0YW|\\\">\\n        <value name=\\\"ANY0\\\">\\n          <block type=\\\"text\\\" id=\\\"kx-Qmnel4b:ZFz6bWSmg\\\">\\n            <field name=\\\"TEXT\\\">What be your name?<\\\/field>\\n          <\\\/block>\\n        <\\\/value>\\n        <next>\\n          <block type=\\\"variables_set\\\" id=\\\"XFZ{XC_\\\/^h2rh=%Db;i=\\\">\\n            <field name=\\\"VAR\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\" variabletype=\\\"\\\">name<\\\/field>\\n            <value name=\\\"VALUE\\\">\\n              <block type=\\\"io_ask_text\\\" id=\\\"KV*G\\\/B-^`eY?0OxojK7i\\\">\\n                <value name=\\\"TEXT\\\">\\n                  <block type=\\\"text\\\" id=\\\"j%u+^kc~Gs~lcEbDx0TS\\\">\\n                    <field name=\\\"TEXT\\\">&gt;<\\\/field>\\n                  <\\\/block>\\n                <\\\/value>\\n              <\\\/block>\\n            <\\\/value>\\n            <next>\\n              <block type=\\\"io_print2\\\" id=\\\"e7+NjvjaG:RUM?ukuU^4\\\">\\n                <value name=\\\"ANY0\\\">\\n                  <block type=\\\"text\\\" id=\\\"CVI\\\/@xHXtLB\\\/qL}jPM#O\\\">\\n                    <field name=\\\"TEXT\\\">Ahoy<\\\/field>\\n                  <\\\/block>\\n                <\\\/value>\\n                <value name=\\\"ANY1\\\">\\n                  <block type=\\\"text_concat2\\\" id=\\\"SvyE{fBKZsMo7-zL63HN\\\">\\n                    <value name=\\\"TEXT0\\\">\\n                      <block type=\\\"variables_get\\\" id=\\\"~FWB*jN\\\/KTxiZF)h;aJu\\\">\\n                        <field name=\\\"VAR\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\" variabletype=\\\"\\\">name<\\\/field>\\n                      <\\\/block>\\n                    <\\\/value>\\n                    <value name=\\\"TEXT1\\\">\\n                      <block type=\\\"text\\\" id=\\\"i++JlgaYi_-f,LPEFkfO\\\">\\n                        <field name=\\\"TEXT\\\">! What be on your mind?<\\\/field>\\n                      <\\\/block>\\n                    <\\\/value>\\n                  <\\\/block>\\n                <\\\/value>\\n              <\\\/block>\\n            <\\\/next>\\n          <\\\/block>\\n        <\\\/next>\\n      <\\\/block>\\n    <\\\/next>\\n  <\\\/block>\\n  <block type=\\\"io_print1\\\" id=\\\"CpHQLWP0xR~B-pw\\\/*RVA\\\" x=\\\"-1\\\" y=\\\"281\\\">\\n    <value name=\\\"ANY0\\\">\\n      <block type=\\\"text\\\" id=\\\"2HW--2i?6FRQcf|UpG97\\\">\\n        <field name=\\\"TEXT\\\">Shiver me timbers!<\\\/field>\\n      <\\\/block>\\n    <\\\/value>\\n    <next>\\n      <block type=\\\"io_print2\\\" id=\\\"wuME7LW}$w|V}=Xo{=l%\\\">\\n        <value name=\\\"ANY0\\\">\\n          <block type=\\\"text\\\" id=\\\"2KGwo5PXN!*fOCg(@wux\\\">\\n            <field name=\\\"TEXT\\\">Farewell<\\\/field>\\n          <\\\/block>\\n        <\\\/value>\\n        <value name=\\\"ANY1\\\">\\n          <block type=\\\"text_concat2\\\" id=\\\"}[0.y_wun.X@$|+MwqO6\\\">\\n            <value name=\\\"TEXT0\\\">\\n              <block type=\\\"variables_get\\\" id=\\\"@8SJ5k9XcuTb6+UZJGxX\\\">\\n                <field name=\\\"VAR\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\" variabletype=\\\"\\\">name<\\\/field>\\n              <\\\/block>\\n            <\\\/value>\\n            <value name=\\\"TEXT1\\\">\\n              <block type=\\\"text\\\" id=\\\"5gt5z^G_:^UZ39[pab5j\\\">\\n                <field name=\\\"TEXT\\\">, yer landlubber.<\\\/field>\\n              <\\\/block>\\n            <\\\/value>\\n          <\\\/block>\\n        <\\\/value>\\n        <next>\\n          <block type=\\\"io_print1\\\" id=\\\")`CWj%Qhp6b,7Q\\\/w}NO$\\\">\\n            <value name=\\\"ANY0\\\">\\n              <block type=\\\"text\\\" id=\\\"D$2fOZ7+h`KWsOC6BRw\\\/\\\">\\n                <field name=\\\"TEXT\\\">I will be off for more swashbuckling adventures!<\\\/field>\\n              <\\\/block>\\n            <\\\/value>\\n          <\\\/block>\\n        <\\\/next>\\n      <\\\/block>\\n    <\\\/next>\\n  <\\\/block>\\n<\\\/xml>\",\"path\":\"program.blockly\",\"is_static\":false,\"undeletable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_concat2\",\"text_changeCase\",\"io_print1_text\",\"io_print1\",\"io_print2\",\"io_print3\",\"io_ask_text\",\"loops_read_text\",\"logic_compare\"]",
      "teacher_notes":"#markdown\n\nWe gave you a head start for this question so you started with the beginning and end of the interaction with Captain Feathersword.\n\nYour task was to write the main loop that asked what was on the user's mind over and over and over again, until they told the Captain to `go away`. \n\nStart the loop that will drive the main program, listening to their answer for that question, and then telling them to go on:\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"o;ad?)`@CG4roMj~pRXw\">line<\/variable>\n    <variable type=\"\" id=\"p*!?-(T;:{umJ:YFfvOi\">lower_word2<\/variable>\n    <variable type=\"\" id=\"EE(_@P+~Tmoct5nMtR`g\">movie<\/variable>\n    <variable type=\"\" id=\"mk7K?g5xExYc+6vL}N4?\">name<\/variable>\n    <variable type=\"\" id=\"t0Asn6?Tm)\/a(9v,+u=e\">word2<\/variable>\n  <\/variables>\n  <block type=\"loops_read_ask\" id=\"JR}jBfZb)E*,@(qO3~}u\" x=\"-9\" y=\"0\">\n    <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n    <value name=\"ASK_BLOCK\">\n      <block type=\"io_ask_text\" id=\"5k%wN-U#;AA|w5$0PjGr\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"DRY?PNIMkkTfyz\/(cnaX\">\n            <field name=\"TEXT\">&gt;<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"BOOL\">\n      <block type=\"logic_compare\" id=\"Z06Ld=Z2DSgU\/o7.:R]\/\">\n        <field name=\"OP\">NEQ<\/field>\n        <value name=\"A\">\n          <block type=\"text_changeCase\" id=\"I~?YziNKqd:V*Xj++?zq\">\n            <field name=\"CASE\">LOWERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"54XeWaPe%:PC+~;LbA7-\">\n                <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"B\">\n          <block type=\"text\" id=\"eg,t4#`XZ8H9OCv^(6zy\">\n            <field name=\"TEXT\">go away<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO\">\n      <block type=\"io_print1\" id=\"K|+t\/Io75utN}clrdh18\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"^TagE{$S?*KbF2n{ucTl\">\n            <field name=\"TEXT\">Arrr. Go on...<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n```\n\nA big gotcha in this question was remembering you have to check if the line converted to lower case letters was `'go away'`, rather than simply matching."
    },
    {
      "language":0,
      "title":"Captain Featherbot!",
      "notes":"#markdown\n\nWell done! You made it!\n\nBuilding from the last question, this one wasn't too tricky. You needed to use string slicing to grab out the *state* - that is, the words after \"i am\" in a line that starts with those words. Once that was saved in a variable, you could print it out and were on your way to swashbuckling adventures! \n\nGreat work!",
      "updated_at":"2017-07-25T15:15:55.884980+00:00",
      "label":"bk-py3-chatbot-capt-featherbot-4",
      "content":"#markdown\n\n**Take your answer from the last question, and then we'll add to it in this question!**\n\nThere's one more thing to add to Captain Featherbot's repertoire. \n\nIf the user enters a line that starts with <code data-lang=\"in\">I am &lt;something&gt;<\/code>, the Captain should say: <code data-lang=\"out\">When I was last &lt;something&gt; I stole a boat and sailed the seas.<\/code> The Captain will replace the <code data-lang=\"out\">&lt;something&gt;<\/code> with what the user typed in.\n\nThis should work if the user enters a line that starts with that pattern regardless of the case of the letters.\n\nHere's an example interaction:\n\n```terminal;eg:none;\nArrr, I am Captain Featherbot.\nWhat be your name?\n> @@@Beets McGee\nAhoy Beets McGee! What be on your mind?\n> @@@I am hungry\nWhen I was last hungry I stole a boat and sailed the seas.\n> @@@i am not amused\nWhen I was last not amused I stole a boat and sailed the seas.\n> @@@go away\nShiver me timbers!\nFarewell Beets McGee, yer landlubber.\nI will be off for more swashbuckling adventures!\n\n```\n\nHere's another example.\n```terminal;eg:none;\nArrr, I am Captain Featherbot.\nWhat be your name?\n> @@@Captain Bitbots\nAhoy Captain Bitbots! What be on your mind?\n> @@@Bits and bytes\nArrr. Go on...\n> @@@I want a boat.\nOh, I do love my boat, Floaty McFloatface.\n> @@@Why did you name it that?\nThat be the real question Captain Bitbots. I wish I knew.\n> @@@You don't know?!\nYo ho ho. That be a good one, Captain Bitbots! Then what?\n> @@@I feel like you should know.\nWhen I feel that way, I go sailing. What do you do?\n> @@@I go look at the sea.\nOh, the sea. Arrr to be back on the sea.\n> @@@Indeed. I do miss it.\nArrr. Go on...\n> @@@I should get going, I am glad to have met you.\nArrr. Go on...\n> @@@I am going to miss you.\nWhen I was last going to miss you. I stole a boat and sailed the seas.\n> @@@go away\nShiver me timbers!\nFarewell Captain Bitbots, yer landlubber.\nI will be off for more swashbuckling adventures!\n\n```\n\n> ## Putting it all together!\n> This question's tricky! There's a lot to put together. Stick with it and you'll be hacking like a pirate it no time!",
      "options":"{}",
      "editor":1,
      "workspace":"[{\"content\":\"<xml xmlns=\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"o;ad?)`@CG4roMj~pRXw\\\">line<\\\/variable>\\n    <variable type=\\\"\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\">name<\\\/variable>\\n    <variable type=\\\"\\\" id=\\\"EE(_@P+~Tmoct5nMtR`g\\\">state<\\\/variable>\\n  <\\\/variables>\\n  <block type=\\\"io_print1\\\" id=\\\"G}+[xiww?1|9IPH\\\/[]c%\\\" x=\\\"0\\\" y=\\\"0\\\">\\n    <value name=\\\"ANY0\\\">\\n      <block type=\\\"text\\\" id=\\\"E%%RP1++2GUS,`G-9\\\/_7\\\">\\n        <field name=\\\"TEXT\\\">Arrr, I am Captain Featherbot.<\\\/field>\\n      <\\\/block>\\n    <\\\/value>\\n    <next>\\n      <block type=\\\"io_print1\\\" id=\\\"5{rRH;L)Q_lnW@Ip0YW|\\\">\\n        <value name=\\\"ANY0\\\">\\n          <block type=\\\"text\\\" id=\\\"kx-Qmnel4b:ZFz6bWSmg\\\">\\n            <field name=\\\"TEXT\\\">What be your name?<\\\/field>\\n          <\\\/block>\\n        <\\\/value>\\n        <next>\\n          <block type=\\\"variables_set\\\" id=\\\"XFZ{XC_\\\/^h2rh=%Db;i=\\\">\\n            <field name=\\\"VAR\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\" variabletype=\\\"\\\">name<\\\/field>\\n            <value name=\\\"VALUE\\\">\\n              <block type=\\\"io_ask_text\\\" id=\\\"KV*G\\\/B-^`eY?0OxojK7i\\\">\\n                <value name=\\\"TEXT\\\">\\n                  <block type=\\\"text\\\" id=\\\"j%u+^kc~Gs~lcEbDx0TS\\\">\\n                    <field name=\\\"TEXT\\\">&gt;<\\\/field>\\n                  <\\\/block>\\n                <\\\/value>\\n              <\\\/block>\\n            <\\\/value>\\n            <next>\\n              <block type=\\\"io_print2\\\" id=\\\"e7+NjvjaG:RUM?ukuU^4\\\">\\n                <value name=\\\"ANY0\\\">\\n                  <block type=\\\"text\\\" id=\\\"CVI\\\/@xHXtLB\\\/qL}jPM#O\\\">\\n                    <field name=\\\"TEXT\\\">Ahoy<\\\/field>\\n                  <\\\/block>\\n                <\\\/value>\\n                <value name=\\\"ANY1\\\">\\n                  <block type=\\\"text_concat2\\\" id=\\\"SvyE{fBKZsMo7-zL63HN\\\">\\n                    <value name=\\\"TEXT0\\\">\\n                      <block type=\\\"variables_get\\\" id=\\\"~FWB*jN\\\/KTxiZF)h;aJu\\\">\\n                        <field name=\\\"VAR\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\" variabletype=\\\"\\\">name<\\\/field>\\n                      <\\\/block>\\n                    <\\\/value>\\n                    <value name=\\\"TEXT1\\\">\\n                      <block type=\\\"text\\\" id=\\\"i++JlgaYi_-f,LPEFkfO\\\">\\n                        <field name=\\\"TEXT\\\">! What be on your mind?<\\\/field>\\n                      <\\\/block>\\n                    <\\\/value>\\n                  <\\\/block>\\n                <\\\/value>\\n                <next>\\n                  <block type=\\\"loops_read_ask\\\" id=\\\"JR}jBfZb)E*,@(qO3~}u\\\">\\n                    <field name=\\\"VAR\\\" id=\\\"o;ad?)`@CG4roMj~pRXw\\\" variabletype=\\\"\\\">line<\\\/field>\\n                    <value name=\\\"ASK_BLOCK\\\">\\n                      <block type=\\\"io_ask_text\\\" id=\\\"5k%wN-U#;AA|w5$0PjGr\\\">\\n                        <value name=\\\"TEXT\\\">\\n                          <block type=\\\"text\\\" id=\\\"DRY?PNIMkkTfyz\\\/(cnaX\\\">\\n                            <field name=\\\"TEXT\\\">&gt;<\\\/field>\\n                          <\\\/block>\\n                        <\\\/value>\\n                      <\\\/block>\\n                    <\\\/value>\\n                    <statement name=\\\"DO\\\">\\n                      <block type=\\\"decisions_if_elif_elif_else\\\" id=\\\"HqrEklWA3)%WX\\\/%m^2*W\\\">\\n                        <statement name=\\\"ELSE\\\">\\n                          <block type=\\\"decisions_if_elif_elif_else\\\" id=\\\"=jrmZVa^h-Ye$D14tvXv\\\"><\\\/block>\\n                        <\\\/statement>\\n                      <\\\/block>\\n                    <\\\/statement>\\n                    <next>\\n                      <block type=\\\"io_print1\\\" id=\\\"CpHQLWP0xR~B-pw\\\/*RVA\\\">\\n                        <value name=\\\"ANY0\\\">\\n                          <block type=\\\"text\\\" id=\\\"2HW--2i?6FRQcf|UpG97\\\">\\n                            <field name=\\\"TEXT\\\">Shiver me timbers!<\\\/field>\\n                          <\\\/block>\\n                        <\\\/value>\\n                        <next>\\n                          <block type=\\\"io_print2\\\" id=\\\"wuME7LW}$w|V}=Xo{=l%\\\">\\n                            <value name=\\\"ANY0\\\">\\n                              <block type=\\\"text\\\" id=\\\"2KGwo5PXN!*fOCg(@wux\\\">\\n                                <field name=\\\"TEXT\\\">Farewell<\\\/field>\\n                              <\\\/block>\\n                            <\\\/value>\\n                            <value name=\\\"ANY1\\\">\\n                              <block type=\\\"text_concat2\\\" id=\\\"}[0.y_wun.X@$|+MwqO6\\\">\\n                                <value name=\\\"TEXT0\\\">\\n                                  <block type=\\\"variables_get\\\" id=\\\"@8SJ5k9XcuTb6+UZJGxX\\\">\\n                                    <field name=\\\"VAR\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\" variabletype=\\\"\\\">name<\\\/field>\\n                                  <\\\/block>\\n                                <\\\/value>\\n                                <value name=\\\"TEXT1\\\">\\n                                  <block type=\\\"text\\\" id=\\\"5gt5z^G_:^UZ39[pab5j\\\">\\n                                    <field name=\\\"TEXT\\\">, yer landlubber.<\\\/field>\\n                                  <\\\/block>\\n                                <\\\/value>\\n                              <\\\/block>\\n                            <\\\/value>\\n                            <next>\\n                              <block type=\\\"io_print1\\\" id=\\\")`CWj%Qhp6b,7Q\\\/w}NO$\\\">\\n                                <value name=\\\"ANY0\\\">\\n                                  <block type=\\\"text\\\" id=\\\"D$2fOZ7+h`KWsOC6BRw\\\/\\\">\\n                                    <field name=\\\"TEXT\\\">I will be off for more swashbuckling adventures!<\\\/field>\\n                                  <\\\/block>\\n                                <\\\/value>\\n                              <\\\/block>\\n                            <\\\/next>\\n                          <\\\/block>\\n                        <\\\/next>\\n                      <\\\/block>\\n                    <\\\/next>\\n                  <\\\/block>\\n                <\\\/next>\\n              <\\\/block>\\n            <\\\/next>\\n          <\\\/block>\\n        <\\\/next>\\n      <\\\/block>\\n    <\\\/next>\\n  <\\\/block>\\n<\\\/xml>\",\"path\":\"program.blockly\",\"is_static\":false,\"undeletable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_concat2\",\"text_changeCase\",\"text_slice_to_end\",\"math_number\",\"io_print1_text\",\"io_print1\",\"io_print2\",\"io_print3\",\"io_ask_text\",\"decisions_if_elif_elif_else\",\"loops_read_text\",\"logic_compare\",\"logic_isMember\",\"logic_stringEnds\"]",
      "teacher_notes":"#markdown\n\nWell done! You made it!\n\nBuilding from the last question, this one wasn't too tricky. You needed to use string slicing to grab out the *state* - that is, the words after \"i am\" in a line that starts with those words. Once that was saved in a variable, you could print it out and were on your way to swashbuckling adventures! \n\nGreat work!"
    },
    {
      "language":0,
      "title":"Captain Featherbot, are you listening?",
      "notes":"#markdown\n\nOnce again, we'll start with our solution to the last question and add in some more specifics.\n\nTo solve this question, we need to check if the line `startswith` or `endswith` specific things. There are three checks, and we'll need to print out a specific message for each.\n\nThe three checks are:\n\n```lang:blockly;norun\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"o;ad?)`@CG4roMj~pRXw\">line<\/variable>\n    <variable type=\"\" id=\"mk7K?g5xExYc+6vL}N4?\">name<\/variable>\n    <variable type=\"\" id=\"EE(_@P+~Tmoct5nMtR`g\">state<\/variable>\n  <\/variables>\n  <block type=\"logic_stringEnds\" id=\"GF\/Tj\/`ZWAFAzOHLasIs\" x=\"16\" y=\"7\">\n    <field name=\"OP\">ENDSWITH<\/field>\n    <value name=\"TEXT\">\n      <block type=\"variables_get\" id=\"!$l?slm+V_-(2Xs%sVME\">\n        <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"FIX\">\n      <block type=\"text\" id=\"$sMFgQD.}g_~F1U[M#@V\">\n        <field name=\"TEXT\">!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n  <block type=\"logic_stringEnds\" id=\":]^YWoCfz^27}#D8rYaS\" x=\"15\" y=\"62\">\n    <field name=\"OP\">ENDSWITH<\/field>\n    <value name=\"TEXT\">\n      <block type=\"variables_get\" id=\"w8zGYBPAA;mz{SgqBz?`\">\n        <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"FIX\">\n      <block type=\"text\" id=\"S1!ZW7[BO@?K[?X:Lr:E\">\n        <field name=\"TEXT\">?<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n  <block type=\"logic_stringEnds\" id=\"S1:\/VU\/62.Pn9TJD%bp?\" x=\"14\" y=\"113\">\n    <field name=\"OP\">STARTSWITH<\/field>\n    <value name=\"TEXT\">\n      <block type=\"text_changeCase\" id=\"uioMI[ND!f\/+X4Hx`r(K\">\n        <field name=\"CASE\">LOWERCASE<\/field>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"J+HRQ^bTbf=5{gI5e@pz\">\n            <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"FIX\">\n      <block type=\"text\" id=\"UK:\/LkGOXmW3\/Qe|#8CY\">\n        <field name=\"TEXT\">i feel<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nPutting it together:\n```lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"o;ad?)`@CG4roMj~pRXw\">line<\/variable>\n    <variable type=\"\" id=\"mk7K?g5xExYc+6vL}N4?\">name<\/variable>\n    <variable type=\"\" id=\"EE(_@P+~Tmoct5nMtR`g\">state<\/variable>\n  <\/variables>\n  <block type=\"decisions_if_elif_elif_else\" id=\"HqrEklWA3)%WX\/%m^2*W\" x=\"3\" y=\"5\">\n    <value name=\"IF0\">\n      <block type=\"logic_stringEnds\" id=\"GF\/Tj\/`ZWAFAzOHLasIs\">\n        <field name=\"OP\">ENDSWITH<\/field>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"!$l?slm+V_-(2Xs%sVME\">\n            <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"FIX\">\n          <block type=\"text\" id=\"$sMFgQD.}g_~F1U[M#@V\">\n            <field name=\"TEXT\">!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print2\" id=\"=E[pgfx`R.`aCL^oAQ[C\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"$[uzhW2-,:a,~N%z}Ws+\">\n            <field name=\"TEXT\">Yo ho ho. That be a good one,<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"text_concat2\" id=\"u}DVrZ^[msQ;Do}kD7}*\">\n            <value name=\"TEXT0\">\n              <block type=\"variables_get\" id=\"6FFGdL}#H!p:Mfw-A93e\">\n                <field name=\"VAR\" id=\"mk7K?g5xExYc+6vL}N4?\" variabletype=\"\">name<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT1\">\n              <block type=\"text\" id=\"`OBe;ry!C^yb5oPUmK^E\">\n                <field name=\"TEXT\">! Then what?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <value name=\"IF1\">\n      <block type=\"logic_stringEnds\" id=\":]^YWoCfz^27}#D8rYaS\">\n        <field name=\"OP\">ENDSWITH<\/field>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"w8zGYBPAA;mz{SgqBz?`\">\n            <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"FIX\">\n          <block type=\"text\" id=\"S1!ZW7[BO@?K[?X:Lr:E\">\n            <field name=\"TEXT\">?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO1\">\n      <block type=\"io_print2\" id=\"JntdsS%}L3=)WWP31tQ;\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"h?N~-@pvZ;aj`U*SjCrB\">\n            <field name=\"TEXT\">That be the real question<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"text_concat2\" id=\"%xvKax~k`x:oE^1!ZuQS\">\n            <value name=\"TEXT0\">\n              <block type=\"variables_get\" id=\"*?.?JLN`).F^dK!5%*,a\">\n                <field name=\"VAR\" id=\"mk7K?g5xExYc+6vL}N4?\" variabletype=\"\">name<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT1\">\n              <block type=\"text\" id=\"^)}b:)@M(9F7[A,*}rqY\">\n                <field name=\"TEXT\">. I wish I knew.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <value name=\"IF2\">\n      <block type=\"logic_stringEnds\" id=\"S1:\/VU\/62.Pn9TJD%bp?\">\n        <field name=\"OP\">STARTSWITH<\/field>\n        <value name=\"TEXT\">\n          <block type=\"text_changeCase\" id=\"uioMI[ND!f\/+X4Hx`r(K\">\n            <field name=\"CASE\">LOWERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"J+HRQ^bTbf=5{gI5e@pz\">\n                <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"FIX\">\n          <block type=\"text\" id=\"UK:\/LkGOXmW3\/Qe|#8CY\">\n            <field name=\"TEXT\">i feel<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO2\">\n      <block type=\"io_print1\" id=\".O~*^s[rHRm=,(=u:]Vj\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"mAm.obWPXQCqPo{w-$PL\">\n            <field name=\"TEXT\">When I feel that way, I go sailing. What do you do?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n```",
      "updated_at":"2017-07-25T15:18:01.048999+00:00",
      "label":"bk-py3-chatbot-capt-featherbot-3",
      "content":"#markdown\n\nNow Captain Featherbot is starting to have a bit of personality! \n\n**Take your answer from the last question, and then we'll add to it in this question!**\n\nFor lines that end in a question mark, the Captain says: <code data-lang=\"out\">That be the real question &lt;name&gt;. I wish I knew.<\/code> Make sure to replace <code data-lang=\"out\">&lt;name&gt;<\/code> with the user's name!\n\nIf the line ends in an exclamation mark, the Captain says: <code data-lang=\"out\">Yo ho ho. That be a good one, &lt;name&gt;! Then what?<\/code>\n\nIf the line starts with <code data-lang=\"in\">I feel<\/code>, the Captain says: <code data-lang=\"out\">When I feel that way, I go sailing. What do you do?<\/code>\n\nHere's an example interaction:\n\n```terminal;eg:none;\nArrr, I am Captain Featherbot.\nWhat be your name?\n> @@@Bluebeard\nAhoy Bluebeard! What be on your mind?\n> @@@I'm a pirate!\nYo ho ho. That be a good one, Bluebeard! Then what?\n> @@@No, that's it.\nArrr. Go on...\n> @@@Are you following me?\nThat be the real question Bluebeard. I wish I knew.\n> @@@Don't follow me!\nYo ho ho. That be a good one, Bluebeard! Then what?\n> @@@I feel like I'm not being understood.\nWhen I feel that way, I go sailing. What do you do?\n> @@@I try to explain it a different way.\nArrr. Go on...\n> @@@Consider the lowly boatsman.\nOh, I do love my boat, Floaty McFloatface.\n> @@@Are you even listening?\nThat be the real question Bluebeard. I wish I knew.\n> @@@go AWAY\nShiver me timbers!\nFarewell Bluebeard, yer landlubber.\nI will be off for more swashbuckling adventures!\n\n```\n\n> ## Which rule first?\n> You won't be given a line that matches multiple criteria, so don't worry about which way the rules are ordered.",
      "options":"{}",
      "editor":1,
      "workspace":"[{\"content\":\"<xml xmlns=\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"o;ad?)`@CG4roMj~pRXw\\\">line<\\\/variable>\\n    <variable type=\\\"\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\">name<\\\/variable>\\n    <variable type=\\\"\\\" id=\\\"EE(_@P+~Tmoct5nMtR`g\\\">state<\\\/variable>\\n  <\\\/variables>\\n  <block type=\\\"io_print1\\\" id=\\\"G}+[xiww?1|9IPH\\\/[]c%\\\" x=\\\"0\\\" y=\\\"0\\\">\\n    <value name=\\\"ANY0\\\">\\n      <block type=\\\"text\\\" id=\\\"E%%RP1++2GUS,`G-9\\\/_7\\\">\\n        <field name=\\\"TEXT\\\">Arrr, I am Captain Featherbot.<\\\/field>\\n      <\\\/block>\\n    <\\\/value>\\n    <next>\\n      <block type=\\\"io_print1\\\" id=\\\"5{rRH;L)Q_lnW@Ip0YW|\\\">\\n        <value name=\\\"ANY0\\\">\\n          <block type=\\\"text\\\" id=\\\"kx-Qmnel4b:ZFz6bWSmg\\\">\\n            <field name=\\\"TEXT\\\">What be your name?<\\\/field>\\n          <\\\/block>\\n        <\\\/value>\\n        <next>\\n          <block type=\\\"variables_set\\\" id=\\\"XFZ{XC_\\\/^h2rh=%Db;i=\\\">\\n            <field name=\\\"VAR\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\" variabletype=\\\"\\\">name<\\\/field>\\n            <value name=\\\"VALUE\\\">\\n              <block type=\\\"io_ask_text\\\" id=\\\"KV*G\\\/B-^`eY?0OxojK7i\\\">\\n                <value name=\\\"TEXT\\\">\\n                  <block type=\\\"text\\\" id=\\\"j%u+^kc~Gs~lcEbDx0TS\\\">\\n                    <field name=\\\"TEXT\\\">&gt;<\\\/field>\\n                  <\\\/block>\\n                <\\\/value>\\n              <\\\/block>\\n            <\\\/value>\\n            <next>\\n              <block type=\\\"io_print2\\\" id=\\\"e7+NjvjaG:RUM?ukuU^4\\\">\\n                <value name=\\\"ANY0\\\">\\n                  <block type=\\\"text\\\" id=\\\"CVI\\\/@xHXtLB\\\/qL}jPM#O\\\">\\n                    <field name=\\\"TEXT\\\">Ahoy<\\\/field>\\n                  <\\\/block>\\n                <\\\/value>\\n                <value name=\\\"ANY1\\\">\\n                  <block type=\\\"text_concat2\\\" id=\\\"SvyE{fBKZsMo7-zL63HN\\\">\\n                    <value name=\\\"TEXT0\\\">\\n                      <block type=\\\"variables_get\\\" id=\\\"~FWB*jN\\\/KTxiZF)h;aJu\\\">\\n                        <field name=\\\"VAR\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\" variabletype=\\\"\\\">name<\\\/field>\\n                      <\\\/block>\\n                    <\\\/value>\\n                    <value name=\\\"TEXT1\\\">\\n                      <block type=\\\"text\\\" id=\\\"i++JlgaYi_-f,LPEFkfO\\\">\\n                        <field name=\\\"TEXT\\\">! What be on your mind?<\\\/field>\\n                      <\\\/block>\\n                    <\\\/value>\\n                  <\\\/block>\\n                <\\\/value>\\n                <next>\\n                  <block type=\\\"loops_read_ask\\\" id=\\\"JR}jBfZb)E*,@(qO3~}u\\\">\\n                    <field name=\\\"VAR\\\" id=\\\"o;ad?)`@CG4roMj~pRXw\\\" variabletype=\\\"\\\">line<\\\/field>\\n                    <value name=\\\"ASK_BLOCK\\\">\\n                      <block type=\\\"io_ask_text\\\" id=\\\"5k%wN-U#;AA|w5$0PjGr\\\">\\n                        <value name=\\\"TEXT\\\">\\n                          <block type=\\\"text\\\" id=\\\"DRY?PNIMkkTfyz\\\/(cnaX\\\">\\n                            <field name=\\\"TEXT\\\">&gt;<\\\/field>\\n                          <\\\/block>\\n                        <\\\/value>\\n                      <\\\/block>\\n                    <\\\/value>\\n                    <statement name=\\\"DO\\\">\\n                      <block type=\\\"decisions_if_elif_elif_else\\\" id=\\\"HqrEklWA3)%WX\\\/%m^2*W\\\">\\n                        <statement name=\\\"ELSE\\\">\\n                          <block type=\\\"decisions_if_elif_else\\\" id=\\\"Od$!4;@pOIzH-5aM4p%^\\\"><\\\/block>\\n                        <\\\/statement>\\n                      <\\\/block>\\n                    <\\\/statement>\\n                    <next>\\n                      <block type=\\\"io_print1\\\" id=\\\"CpHQLWP0xR~B-pw\\\/*RVA\\\">\\n                        <value name=\\\"ANY0\\\">\\n                          <block type=\\\"text\\\" id=\\\"2HW--2i?6FRQcf|UpG97\\\">\\n                            <field name=\\\"TEXT\\\">Shiver me timbers!<\\\/field>\\n                          <\\\/block>\\n                        <\\\/value>\\n                        <next>\\n                          <block type=\\\"io_print2\\\" id=\\\"wuME7LW}$w|V}=Xo{=l%\\\">\\n                            <value name=\\\"ANY0\\\">\\n                              <block type=\\\"text\\\" id=\\\"2KGwo5PXN!*fOCg(@wux\\\">\\n                                <field name=\\\"TEXT\\\">Farewell<\\\/field>\\n                              <\\\/block>\\n                            <\\\/value>\\n                            <value name=\\\"ANY1\\\">\\n                              <block type=\\\"text_concat2\\\" id=\\\"}[0.y_wun.X@$|+MwqO6\\\">\\n                                <value name=\\\"TEXT0\\\">\\n                                  <block type=\\\"variables_get\\\" id=\\\"@8SJ5k9XcuTb6+UZJGxX\\\">\\n                                    <field name=\\\"VAR\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\" variabletype=\\\"\\\">name<\\\/field>\\n                                  <\\\/block>\\n                                <\\\/value>\\n                                <value name=\\\"TEXT1\\\">\\n                                  <block type=\\\"text\\\" id=\\\"5gt5z^G_:^UZ39[pab5j\\\">\\n                                    <field name=\\\"TEXT\\\">, yer landlubber.<\\\/field>\\n                                  <\\\/block>\\n                                <\\\/value>\\n                              <\\\/block>\\n                            <\\\/value>\\n                            <next>\\n                              <block type=\\\"io_print1\\\" id=\\\")`CWj%Qhp6b,7Q\\\/w}NO$\\\">\\n                                <value name=\\\"ANY0\\\">\\n                                  <block type=\\\"text\\\" id=\\\"D$2fOZ7+h`KWsOC6BRw\\\/\\\">\\n                                    <field name=\\\"TEXT\\\">I will be off for more swashbuckling adventures!<\\\/field>\\n                                  <\\\/block>\\n                                <\\\/value>\\n                              <\\\/block>\\n                            <\\\/next>\\n                          <\\\/block>\\n                        <\\\/next>\\n                      <\\\/block>\\n                    <\\\/next>\\n                  <\\\/block>\\n                <\\\/next>\\n              <\\\/block>\\n            <\\\/next>\\n          <\\\/block>\\n        <\\\/next>\\n      <\\\/block>\\n    <\\\/next>\\n  <\\\/block>\\n  <block type=\\\"io_print2\\\" id=\\\"JntdsS%}L3=)WWP31tQ;\\\" x=\\\"1087\\\" y=\\\"495\\\">\\n    <value name=\\\"ANY0\\\">\\n      <block type=\\\"text\\\" id=\\\"h?N~-@pvZ;aj`U*SjCrB\\\">\\n        <field name=\\\"TEXT\\\">That be the real question<\\\/field>\\n      <\\\/block>\\n    <\\\/value>\\n    <value name=\\\"ANY1\\\">\\n      <block type=\\\"text_concat2\\\" id=\\\"%xvKax~k`x:oE^1!ZuQS\\\">\\n        <value name=\\\"TEXT0\\\">\\n          <block type=\\\"variables_get\\\" id=\\\"*?.?JLN`).F^dK!5%*,a\\\">\\n            <field name=\\\"VAR\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\" variabletype=\\\"\\\">name<\\\/field>\\n          <\\\/block>\\n        <\\\/value>\\n        <value name=\\\"TEXT1\\\">\\n          <block type=\\\"text\\\" id=\\\"^)}b:)@M(9F7[A,*}rqY\\\">\\n            <field name=\\\"TEXT\\\">. I wish I knew.<\\\/field>\\n          <\\\/block>\\n        <\\\/value>\\n      <\\\/block>\\n    <\\\/value>\\n  <\\\/block>\\n<\\\/xml>\",\"path\":\"program.blockly\",\"is_static\":false,\"undeletable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_concat2\",\"text_changeCase\",\"io_print1_text\",\"io_print1\",\"io_print2\",\"io_print3\",\"io_ask_text\",\"decisions_if_elif_else\",\"decisions_if_elif_elif_else\",\"loops_read_text\",\"logic_compare\",\"logic_isMember\",\"logic_stringEnds\"]",
      "teacher_notes":"#markdown\n\nOnce again, we'll start with our solution to the last question and add in some more specifics.\n\nTo solve this question, we need to check if the line `startswith` or `endswith` specific things. There are three checks, and we'll need to print out a specific message for each.\n\nThe three checks are:\n\n```lang:blockly;norun\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"o;ad?)`@CG4roMj~pRXw\">line<\/variable>\n    <variable type=\"\" id=\"mk7K?g5xExYc+6vL}N4?\">name<\/variable>\n    <variable type=\"\" id=\"EE(_@P+~Tmoct5nMtR`g\">state<\/variable>\n  <\/variables>\n  <block type=\"logic_stringEnds\" id=\"GF\/Tj\/`ZWAFAzOHLasIs\" x=\"16\" y=\"7\">\n    <field name=\"OP\">ENDSWITH<\/field>\n    <value name=\"TEXT\">\n      <block type=\"variables_get\" id=\"!$l?slm+V_-(2Xs%sVME\">\n        <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"FIX\">\n      <block type=\"text\" id=\"$sMFgQD.}g_~F1U[M#@V\">\n        <field name=\"TEXT\">!<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n  <block type=\"logic_stringEnds\" id=\":]^YWoCfz^27}#D8rYaS\" x=\"15\" y=\"62\">\n    <field name=\"OP\">ENDSWITH<\/field>\n    <value name=\"TEXT\">\n      <block type=\"variables_get\" id=\"w8zGYBPAA;mz{SgqBz?`\">\n        <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n      <\/block>\n    <\/value>\n    <value name=\"FIX\">\n      <block type=\"text\" id=\"S1!ZW7[BO@?K[?X:Lr:E\">\n        <field name=\"TEXT\">?<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n  <block type=\"logic_stringEnds\" id=\"S1:\/VU\/62.Pn9TJD%bp?\" x=\"14\" y=\"113\">\n    <field name=\"OP\">STARTSWITH<\/field>\n    <value name=\"TEXT\">\n      <block type=\"text_changeCase\" id=\"uioMI[ND!f\/+X4Hx`r(K\">\n        <field name=\"CASE\">LOWERCASE<\/field>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"J+HRQ^bTbf=5{gI5e@pz\">\n            <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <value name=\"FIX\">\n      <block type=\"text\" id=\"UK:\/LkGOXmW3\/Qe|#8CY\">\n        <field name=\"TEXT\">i feel<\/field>\n      <\/block>\n    <\/value>\n  <\/block>\n<\/xml>\n```\n\nPutting it together:\n```lang:blockly;norun;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"o;ad?)`@CG4roMj~pRXw\">line<\/variable>\n    <variable type=\"\" id=\"mk7K?g5xExYc+6vL}N4?\">name<\/variable>\n    <variable type=\"\" id=\"EE(_@P+~Tmoct5nMtR`g\">state<\/variable>\n  <\/variables>\n  <block type=\"decisions_if_elif_elif_else\" id=\"HqrEklWA3)%WX\/%m^2*W\" x=\"3\" y=\"5\">\n    <value name=\"IF0\">\n      <block type=\"logic_stringEnds\" id=\"GF\/Tj\/`ZWAFAzOHLasIs\">\n        <field name=\"OP\">ENDSWITH<\/field>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"!$l?slm+V_-(2Xs%sVME\">\n            <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"FIX\">\n          <block type=\"text\" id=\"$sMFgQD.}g_~F1U[M#@V\">\n            <field name=\"TEXT\">!<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO0\">\n      <block type=\"io_print2\" id=\"=E[pgfx`R.`aCL^oAQ[C\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"$[uzhW2-,:a,~N%z}Ws+\">\n            <field name=\"TEXT\">Yo ho ho. That be a good one,<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"text_concat2\" id=\"u}DVrZ^[msQ;Do}kD7}*\">\n            <value name=\"TEXT0\">\n              <block type=\"variables_get\" id=\"6FFGdL}#H!p:Mfw-A93e\">\n                <field name=\"VAR\" id=\"mk7K?g5xExYc+6vL}N4?\" variabletype=\"\">name<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT1\">\n              <block type=\"text\" id=\"`OBe;ry!C^yb5oPUmK^E\">\n                <field name=\"TEXT\">! Then what?<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <value name=\"IF1\">\n      <block type=\"logic_stringEnds\" id=\":]^YWoCfz^27}#D8rYaS\">\n        <field name=\"OP\">ENDSWITH<\/field>\n        <value name=\"TEXT\">\n          <block type=\"variables_get\" id=\"w8zGYBPAA;mz{SgqBz?`\">\n            <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"FIX\">\n          <block type=\"text\" id=\"S1!ZW7[BO@?K[?X:Lr:E\">\n            <field name=\"TEXT\">?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO1\">\n      <block type=\"io_print2\" id=\"JntdsS%}L3=)WWP31tQ;\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"h?N~-@pvZ;aj`U*SjCrB\">\n            <field name=\"TEXT\">That be the real question<\/field>\n          <\/block>\n        <\/value>\n        <value name=\"ANY1\">\n          <block type=\"text_concat2\" id=\"%xvKax~k`x:oE^1!ZuQS\">\n            <value name=\"TEXT0\">\n              <block type=\"variables_get\" id=\"*?.?JLN`).F^dK!5%*,a\">\n                <field name=\"VAR\" id=\"mk7K?g5xExYc+6vL}N4?\" variabletype=\"\">name<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"TEXT1\">\n              <block type=\"text\" id=\"^)}b:)@M(9F7[A,*}rqY\">\n                <field name=\"TEXT\">. I wish I knew.<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n    <value name=\"IF2\">\n      <block type=\"logic_stringEnds\" id=\"S1:\/VU\/62.Pn9TJD%bp?\">\n        <field name=\"OP\">STARTSWITH<\/field>\n        <value name=\"TEXT\">\n          <block type=\"text_changeCase\" id=\"uioMI[ND!f\/+X4Hx`r(K\">\n            <field name=\"CASE\">LOWERCASE<\/field>\n            <value name=\"TEXT\">\n              <block type=\"variables_get\" id=\"J+HRQ^bTbf=5{gI5e@pz\">\n                <field name=\"VAR\" id=\"o;ad?)`@CG4roMj~pRXw\" variabletype=\"\">line<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <value name=\"FIX\">\n          <block type=\"text\" id=\"UK:\/LkGOXmW3\/Qe|#8CY\">\n            <field name=\"TEXT\">i feel<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <statement name=\"DO2\">\n      <block type=\"io_print1\" id=\".O~*^s[rHRm=,(=u:]Vj\">\n        <value name=\"ANY0\">\n          <block type=\"text\" id=\"mAm.obWPXQCqPo{w-$PL\">\n            <field name=\"TEXT\">When I feel that way, I go sailing. What do you do?<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/statement>\n  <\/block>\n<\/xml>\n```"
    },
    {
      "language":0,
      "title":"Captain Featherbot and the Sea",
      "notes":"#markdown\nThis question builds on the previous question.\nWe're going to add in more checks and specific responses for if the user mentions a `'boat'` or the `'sea'`.\n\nWe can do this using `if` statements _inside_ the main loop:\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"E~Y)aKVHewe*RwQsKHR~\">line<\/variable>\n    <variable type=\"\" id=\"lt{[Wa@Tu:$:{XbKoao=\">name<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"n4I1z$t_%cjb.#\/i2qhE\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text_changeCase\" id=\"(=Z|0-FJ(f;$i6e4Ut]N\">\n        <field name=\"CASE\">LOWERCASE<\/field>\n        <value name=\"TEXT\">\n          <block type=\"io_ask_text\" id=\"a#WPTE-*2WLz(fd[|mnh\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"k1l)U`AOfD)]UABb\/K.j\">\n                <field name=\"TEXT\">&gt;<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_while\" id=\"^L!8zmzJMi?-`L1Fl#il\">\n        <value name=\"BOOL\">\n          <block type=\"logic_compare\" id=\"^9U~.Mr|(^^.Q0}2,@Hr\">\n            <field name=\"OP\">NEQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"o^LgOC]\/X0n(`xKd8mO[\">\n                <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"i[?OQfnn#9#j=^Z+Uz-B\">\n                <field name=\"TEXT\">go away<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO\">\n          <block type=\"decisions_if_elif_else\" id=\"3b*,hZk;6q+|y89^x*0W\">\n            <value name=\"IF0\">\n              <block type=\"logic_isMember\" id=\"=!][@tw@l=RaO~t;$$wa\">\n                <field name=\"OP\">IN<\/field>\n                <value name=\"MEMBER\">\n                  <block type=\"text\" id=\"oBZ8[J#CA^o+O#:8ID9G\">\n                    <field name=\"TEXT\">boat<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"l5BN`:l_OW*}PYVWfq=P\">\n                    <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <statement name=\"DO0\">\n              <block type=\"io_print1\" id=\"Mu?Qy3m:DSgw*J-q{|WC\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\".?%,2),aNk@+9F`*q3a@\">\n                    <field name=\"TEXT\">Oh, I do love my boat, Floaty McFloatface.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <value name=\"IF1\">\n              <block type=\"logic_isMember\" id=\"aP|)i^5r0GdBNw*$$F[W\">\n                <field name=\"OP\">IN<\/field>\n                <value name=\"MEMBER\">\n                  <block type=\"text\" id=\"a@(qOLajbk9BBw(7Wfad\">\n                    <field name=\"TEXT\">sea<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"=cG}l,\/y?L_!ut|;l}XR\">\n                    <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <statement name=\"DO1\">\n              <block type=\"io_print1\" id=\"S0Fj:.t,KtkojvfMcq,\/\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\".#mD(\/[y2)Ojl2in[UDI\">\n                    <field name=\"TEXT\">Oh, the sea. Arrr to be back on the sea.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <statement name=\"ELSE\">\n              <block type=\"io_print1\" id=\"J]-d+f5h\/L%z@{\/]UGV9\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"lG5u6-9)j:7H*3xD%h;m\">\n                    <field name=\"TEXT\">Arrr. Go on...<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <next>\n              <block type=\"variables_set\" id=\"xIxI(L`Q#=,u^aOnjK+R\">\n                <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n                <value name=\"VALUE\">\n                  <block type=\"text_changeCase\" id=\"%h[,D9OWR1_9%ZQ%1pq?\">\n                    <field name=\"CASE\">LOWERCASE<\/field>\n                    <value name=\"TEXT\">\n                      <block type=\"io_ask_text\" id=\"`7BPRTC{^nHl!d`*v:7W\">\n                        <value name=\"TEXT\">\n                          <block type=\"text\" id=\"DUNXKst:Gt15\/_$Z`c!o\">\n                            <field name=\"TEXT\">&gt;<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nIn this case, we've `lower`ed the whole line, but another option would be to only use `lower` when doing the comparisons:\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"E~Y)aKVHewe*RwQsKHR~\">line<\/variable>\n    <variable type=\"\" id=\"lt{[Wa@Tu:$:{XbKoao=\">name<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"n4I1z$t_%cjb.#\/i2qhE\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"a#WPTE-*2WLz(fd[|mnh\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"k1l)U`AOfD)]UABb\/K.j\">\n            <field name=\"TEXT\">&gt;<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_while\" id=\"^L!8zmzJMi?-`L1Fl#il\">\n        <value name=\"BOOL\">\n          <block type=\"logic_compare\" id=\"^9U~.Mr|(^^.Q0}2,@Hr\">\n            <field name=\"OP\">NEQ<\/field>\n            <value name=\"A\">\n              <block type=\"text_changeCase\" id=\"%h[,D9OWR1_9%ZQ%1pq?\">\n                <field name=\"CASE\">LOWERCASE<\/field>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"o^LgOC]\/X0n(`xKd8mO[\">\n                    <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"i[?OQfnn#9#j=^Z+Uz-B\">\n                <field name=\"TEXT\">go away<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO\">\n          <block type=\"decisions_if_elif_else\" id=\"3b*,hZk;6q+|y89^x*0W\">\n            <value name=\"IF0\">\n              <block type=\"logic_isMember\" id=\"=!][@tw@l=RaO~t;$$wa\">\n                <field name=\"OP\">IN<\/field>\n                <value name=\"MEMBER\">\n                  <block type=\"text\" id=\"oBZ8[J#CA^o+O#:8ID9G\">\n                    <field name=\"TEXT\">boat<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"text_changeCase\" id=\"(=Z|0-FJ(f;$i6e4Ut]N\">\n                    <field name=\"CASE\">LOWERCASE<\/field>\n                    <value name=\"TEXT\">\n                      <block type=\"variables_get\" id=\"l5BN`:l_OW*}PYVWfq=P\">\n                        <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <statement name=\"DO0\">\n              <block type=\"io_print1\" id=\"Mu?Qy3m:DSgw*J-q{|WC\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\".?%,2),aNk@+9F`*q3a@\">\n                    <field name=\"TEXT\">Oh, I do love my boat, Floaty McFloatface.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <value name=\"IF1\">\n              <block type=\"logic_isMember\" id=\"aP|)i^5r0GdBNw*$$F[W\">\n                <field name=\"OP\">IN<\/field>\n                <value name=\"MEMBER\">\n                  <block type=\"text\" id=\"a@(qOLajbk9BBw(7Wfad\">\n                    <field name=\"TEXT\">sea<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"text_changeCase\" id=\"0-*{]X*G\/@d?Pq@-8f^v\">\n                    <field name=\"CASE\">LOWERCASE<\/field>\n                    <value name=\"TEXT\">\n                      <block type=\"variables_get\" id=\"[,`V7(urJ]BG*3{`w2.!\">\n                        <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <statement name=\"DO1\">\n              <block type=\"io_print1\" id=\"S0Fj:.t,KtkojvfMcq,\/\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\".#mD(\/[y2)Ojl2in[UDI\">\n                    <field name=\"TEXT\">Oh, the sea. Arrr to be back on the sea.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <statement name=\"ELSE\">\n              <block type=\"io_print1\" id=\"J]-d+f5h\/L%z@{\/]UGV9\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"lG5u6-9)j:7H*3xD%h;m\">\n                    <field name=\"TEXT\">Arrr. Go on...<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <next>\n              <block type=\"variables_set\" id=\"xIxI(L`Q#=,u^aOnjK+R\">\n                <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n                <value name=\"VALUE\">\n                  <block type=\"io_ask_text\" id=\"`7BPRTC{^nHl!d`*v:7W\">\n                    <value name=\"TEXT\">\n                      <block type=\"text\" id=\"DUNXKst:Gt15\/_$Z`c!o\">\n                        <field name=\"TEXT\">&gt;<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\n",
      "updated_at":"2017-07-25T15:17:33.727625+00:00",
      "label":"bk-py3-chatbot-capt-featherbot-2",
      "content":"#markdown\n\nLet's make Captain Featherbot a bit more interesting to talk to.\n\n**We've given you some scaffolding for this question. You should also add the logic from the last question!**\n\nCaptain Featherbot loves talking about their boat and the sea. If you mention the word `'boat'` or `'sea'` while you're talking to them, they will derail the conversation!\n\nAdd to your program, such that if you use the word `'boat'` in the line, the Captain says: <code data-lang=\"out\">Oh, I do love my boat, Floaty McFloatface.<\/code> Or, if you use the word `'sea'` in the line, the Captain says: <code data-lang=\"out\">Oh, the sea. Arrr to be back on the sea.<\/code>\n\nHere's an example interaction:\n\n```terminal;eg:none;\nArrr, I am Captain Featherbot.\nWhat be your name?\n> @@@Guybrush\nAhoy Guybrush! What be on your mind?\n> @@@I have a little row boat\nOh, I do love my boat, Floaty McFloatface.\n> @@@That's a nice name for a boat.\nOh, I do love my boat, Floaty McFloatface.\n> Yes, you said you like it.\nArrr. Go on...\n> @@@But I've never been to the seaside.\nOh, the sea. Arrr to be back on the sea.\n> @@@I'd like to go!\nArrr. Go on...\n> @@@You're no help!\nArrr. Go on...\n> @@@GO AWAY\nShiver me timbers!\nFarewell Guybrush, yer landlubber.\nI will be off for more swashbuckling adventures!\n\n```\n\nHere's another example. Make sure your program works with upper case and lower case!\n```terminal;eg:none;\nArrr, I am Captain Featherbot.\nWhat be your name? Ahmed\nAhoy Ahmed! What be on your mind?\n> BOATS! I like boats.\nOh, I do love my boat, Floaty McFloatface.\n> That's a funny name for a boat.\nOh, I do love my boat, Floaty McFloatface.\n> Are boats all you ever talk about?\nOh, I do love my boat, Floaty McFloatface.\n> STOP TALKING ABOUT YOUR BOAT\nOh, I do love my boat, Floaty McFloatface.\n> go away\nShiver me timbers!\nFarewell Ahmed, yer landlubber.\nI will be off for more swashbuckling adventures!\n\n```\n\n> ## Boats or Seas? Which first?\n> You won't be given a line that has both `'boat'` and `'sea'` in it, so don't worry about which way the tests are ordered.",
      "options":"{}",
      "editor":1,
      "workspace":"[{\"content\":\"<xml xmlns=\\\"http:\\\/\\\/www.w3.org\\\/1999\\\/xhtml\\\">\\n  <variables>\\n    <variable type=\\\"\\\" id=\\\"o;ad?)`@CG4roMj~pRXw\\\">line<\\\/variable>\\n    <variable type=\\\"\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\">name<\\\/variable>\\n    <variable type=\\\"\\\" id=\\\"EE(_@P+~Tmoct5nMtR`g\\\">state<\\\/variable>\\n  <\\\/variables>\\n  <block type=\\\"io_print1\\\" id=\\\"G}+[xiww?1|9IPH\\\/[]c%\\\" x=\\\"0\\\" y=\\\"0\\\">\\n    <value name=\\\"ANY0\\\">\\n      <block type=\\\"text\\\" id=\\\"E%%RP1++2GUS,`G-9\\\/_7\\\">\\n        <field name=\\\"TEXT\\\">Arrr, I am Captain Featherbot.<\\\/field>\\n      <\\\/block>\\n    <\\\/value>\\n    <next>\\n      <block type=\\\"io_print1\\\" id=\\\"5{rRH;L)Q_lnW@Ip0YW|\\\">\\n        <value name=\\\"ANY0\\\">\\n          <block type=\\\"text\\\" id=\\\"kx-Qmnel4b:ZFz6bWSmg\\\">\\n            <field name=\\\"TEXT\\\">What be your name?<\\\/field>\\n          <\\\/block>\\n        <\\\/value>\\n        <next>\\n          <block type=\\\"variables_set\\\" id=\\\"XFZ{XC_\\\/^h2rh=%Db;i=\\\">\\n            <field name=\\\"VAR\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\" variabletype=\\\"\\\">name<\\\/field>\\n            <value name=\\\"VALUE\\\">\\n              <block type=\\\"io_ask_text\\\" id=\\\"KV*G\\\/B-^`eY?0OxojK7i\\\">\\n                <value name=\\\"TEXT\\\">\\n                  <block type=\\\"text\\\" id=\\\"j%u+^kc~Gs~lcEbDx0TS\\\">\\n                    <field name=\\\"TEXT\\\">&gt;<\\\/field>\\n                  <\\\/block>\\n                <\\\/value>\\n              <\\\/block>\\n            <\\\/value>\\n            <next>\\n              <block type=\\\"io_print2\\\" id=\\\"e7+NjvjaG:RUM?ukuU^4\\\">\\n                <value name=\\\"ANY0\\\">\\n                  <block type=\\\"text\\\" id=\\\"CVI\\\/@xHXtLB\\\/qL}jPM#O\\\">\\n                    <field name=\\\"TEXT\\\">Ahoy<\\\/field>\\n                  <\\\/block>\\n                <\\\/value>\\n                <value name=\\\"ANY1\\\">\\n                  <block type=\\\"text_concat2\\\" id=\\\"SvyE{fBKZsMo7-zL63HN\\\">\\n                    <value name=\\\"TEXT0\\\">\\n                      <block type=\\\"variables_get\\\" id=\\\"~FWB*jN\\\/KTxiZF)h;aJu\\\">\\n                        <field name=\\\"VAR\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\" variabletype=\\\"\\\">name<\\\/field>\\n                      <\\\/block>\\n                    <\\\/value>\\n                    <value name=\\\"TEXT1\\\">\\n                      <block type=\\\"text\\\" id=\\\"i++JlgaYi_-f,LPEFkfO\\\">\\n                        <field name=\\\"TEXT\\\">! What be on your mind?<\\\/field>\\n                      <\\\/block>\\n                    <\\\/value>\\n                  <\\\/block>\\n                <\\\/value>\\n                <next>\\n                  <block type=\\\"loops_read_ask\\\" id=\\\"JR}jBfZb)E*,@(qO3~}u\\\">\\n                    <field name=\\\"VAR\\\" id=\\\"o;ad?)`@CG4roMj~pRXw\\\" variabletype=\\\"\\\">line<\\\/field>\\n                    <value name=\\\"ASK_BLOCK\\\">\\n                      <block type=\\\"io_ask_text\\\" id=\\\"5k%wN-U#;AA|w5$0PjGr\\\">\\n                        <value name=\\\"TEXT\\\">\\n                          <block type=\\\"text\\\" id=\\\"DRY?PNIMkkTfyz\\\/(cnaX\\\">\\n                            <field name=\\\"TEXT\\\">&gt;<\\\/field>\\n                          <\\\/block>\\n                        <\\\/value>\\n                      <\\\/block>\\n                    <\\\/value>\\n                    <next>\\n                      <block type=\\\"io_print1\\\" id=\\\"CpHQLWP0xR~B-pw\\\/*RVA\\\">\\n                        <value name=\\\"ANY0\\\">\\n                          <block type=\\\"text\\\" id=\\\"2HW--2i?6FRQcf|UpG97\\\">\\n                            <field name=\\\"TEXT\\\">Shiver me timbers!<\\\/field>\\n                          <\\\/block>\\n                        <\\\/value>\\n                        <next>\\n                          <block type=\\\"io_print2\\\" id=\\\"wuME7LW}$w|V}=Xo{=l%\\\">\\n                            <value name=\\\"ANY0\\\">\\n                              <block type=\\\"text\\\" id=\\\"2KGwo5PXN!*fOCg(@wux\\\">\\n                                <field name=\\\"TEXT\\\">Farewell<\\\/field>\\n                              <\\\/block>\\n                            <\\\/value>\\n                            <value name=\\\"ANY1\\\">\\n                              <block type=\\\"text_concat2\\\" id=\\\"}[0.y_wun.X@$|+MwqO6\\\">\\n                                <value name=\\\"TEXT0\\\">\\n                                  <block type=\\\"variables_get\\\" id=\\\"@8SJ5k9XcuTb6+UZJGxX\\\">\\n                                    <field name=\\\"VAR\\\" id=\\\"mk7K?g5xExYc+6vL}N4?\\\" variabletype=\\\"\\\">name<\\\/field>\\n                                  <\\\/block>\\n                                <\\\/value>\\n                                <value name=\\\"TEXT1\\\">\\n                                  <block type=\\\"text\\\" id=\\\"5gt5z^G_:^UZ39[pab5j\\\">\\n                                    <field name=\\\"TEXT\\\">, yer landlubber.<\\\/field>\\n                                  <\\\/block>\\n                                <\\\/value>\\n                              <\\\/block>\\n                            <\\\/value>\\n                            <next>\\n                              <block type=\\\"io_print1\\\" id=\\\")`CWj%Qhp6b,7Q\\\/w}NO$\\\">\\n                                <value name=\\\"ANY0\\\">\\n                                  <block type=\\\"text\\\" id=\\\"D$2fOZ7+h`KWsOC6BRw\\\/\\\">\\n                                    <field name=\\\"TEXT\\\">I will be off for more swashbuckling adventures!<\\\/field>\\n                                  <\\\/block>\\n                                <\\\/value>\\n                              <\\\/block>\\n                            <\\\/next>\\n                          <\\\/block>\\n                        <\\\/next>\\n                      <\\\/block>\\n                    <\\\/next>\\n                  <\\\/block>\\n                <\\\/next>\\n              <\\\/block>\\n            <\\\/next>\\n          <\\\/block>\\n        <\\\/next>\\n      <\\\/block>\\n    <\\\/next>\\n  <\\\/block>\\n<\\\/xml>\",\"path\":\"program.blockly\",\"is_static\":false,\"undeletable\":true}]",
      "concepts":[

      ],
      "choices":"",
      "blockly_blocks":"[\"text\",\"text_concat2\",\"text_concat3\",\"text_changeCase\",\"io_print1\",\"io_print3\",\"io_ask_text\",\"decisions_if_elif_else\",\"loops_while\",\"logic_compare\",\"logic_isMember\"]",
      "teacher_notes":"#markdown\nThis question builds on the previous question.\nWe're going to add in more checks and specific responses for if the user mentions a `'boat'` or the `'sea'`.\n\nWe can do this using `if` statements _inside_ the main loop:\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"E~Y)aKVHewe*RwQsKHR~\">line<\/variable>\n    <variable type=\"\" id=\"lt{[Wa@Tu:$:{XbKoao=\">name<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"n4I1z$t_%cjb.#\/i2qhE\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n    <value name=\"VALUE\">\n      <block type=\"text_changeCase\" id=\"(=Z|0-FJ(f;$i6e4Ut]N\">\n        <field name=\"CASE\">LOWERCASE<\/field>\n        <value name=\"TEXT\">\n          <block type=\"io_ask_text\" id=\"a#WPTE-*2WLz(fd[|mnh\">\n            <value name=\"TEXT\">\n              <block type=\"text\" id=\"k1l)U`AOfD)]UABb\/K.j\">\n                <field name=\"TEXT\">&gt;<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_while\" id=\"^L!8zmzJMi?-`L1Fl#il\">\n        <value name=\"BOOL\">\n          <block type=\"logic_compare\" id=\"^9U~.Mr|(^^.Q0}2,@Hr\">\n            <field name=\"OP\">NEQ<\/field>\n            <value name=\"A\">\n              <block type=\"variables_get\" id=\"o^LgOC]\/X0n(`xKd8mO[\">\n                <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"i[?OQfnn#9#j=^Z+Uz-B\">\n                <field name=\"TEXT\">go away<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO\">\n          <block type=\"decisions_if_elif_else\" id=\"3b*,hZk;6q+|y89^x*0W\">\n            <value name=\"IF0\">\n              <block type=\"logic_isMember\" id=\"=!][@tw@l=RaO~t;$$wa\">\n                <field name=\"OP\">IN<\/field>\n                <value name=\"MEMBER\">\n                  <block type=\"text\" id=\"oBZ8[J#CA^o+O#:8ID9G\">\n                    <field name=\"TEXT\">boat<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"l5BN`:l_OW*}PYVWfq=P\">\n                    <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <statement name=\"DO0\">\n              <block type=\"io_print1\" id=\"Mu?Qy3m:DSgw*J-q{|WC\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\".?%,2),aNk@+9F`*q3a@\">\n                    <field name=\"TEXT\">Oh, I do love my boat, Floaty McFloatface.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <value name=\"IF1\">\n              <block type=\"logic_isMember\" id=\"aP|)i^5r0GdBNw*$$F[W\">\n                <field name=\"OP\">IN<\/field>\n                <value name=\"MEMBER\">\n                  <block type=\"text\" id=\"a@(qOLajbk9BBw(7Wfad\">\n                    <field name=\"TEXT\">sea<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"=cG}l,\/y?L_!ut|;l}XR\">\n                    <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <statement name=\"DO1\">\n              <block type=\"io_print1\" id=\"S0Fj:.t,KtkojvfMcq,\/\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\".#mD(\/[y2)Ojl2in[UDI\">\n                    <field name=\"TEXT\">Oh, the sea. Arrr to be back on the sea.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <statement name=\"ELSE\">\n              <block type=\"io_print1\" id=\"J]-d+f5h\/L%z@{\/]UGV9\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"lG5u6-9)j:7H*3xD%h;m\">\n                    <field name=\"TEXT\">Arrr. Go on...<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <next>\n              <block type=\"variables_set\" id=\"xIxI(L`Q#=,u^aOnjK+R\">\n                <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n                <value name=\"VALUE\">\n                  <block type=\"text_changeCase\" id=\"%h[,D9OWR1_9%ZQ%1pq?\">\n                    <field name=\"CASE\">LOWERCASE<\/field>\n                    <value name=\"TEXT\">\n                      <block type=\"io_ask_text\" id=\"`7BPRTC{^nHl!d`*v:7W\">\n                        <value name=\"TEXT\">\n                          <block type=\"text\" id=\"DUNXKst:Gt15\/_$Z`c!o\">\n                            <field name=\"TEXT\">&gt;<\/field>\n                          <\/block>\n                        <\/value>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\nIn this case, we've `lower`ed the whole line, but another option would be to only use `lower` when doing the comparisons:\n```lang:blockly;\n<xml xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <variables>\n    <variable type=\"\" id=\"E~Y)aKVHewe*RwQsKHR~\">line<\/variable>\n    <variable type=\"\" id=\"lt{[Wa@Tu:$:{XbKoao=\">name<\/variable>\n  <\/variables>\n  <block type=\"variables_set\" id=\"n4I1z$t_%cjb.#\/i2qhE\" x=\"10\" y=\"10\">\n    <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n    <value name=\"VALUE\">\n      <block type=\"io_ask_text\" id=\"a#WPTE-*2WLz(fd[|mnh\">\n        <value name=\"TEXT\">\n          <block type=\"text\" id=\"k1l)U`AOfD)]UABb\/K.j\">\n            <field name=\"TEXT\">&gt;<\/field>\n          <\/block>\n        <\/value>\n      <\/block>\n    <\/value>\n    <next>\n      <block type=\"loops_while\" id=\"^L!8zmzJMi?-`L1Fl#il\">\n        <value name=\"BOOL\">\n          <block type=\"logic_compare\" id=\"^9U~.Mr|(^^.Q0}2,@Hr\">\n            <field name=\"OP\">NEQ<\/field>\n            <value name=\"A\">\n              <block type=\"text_changeCase\" id=\"%h[,D9OWR1_9%ZQ%1pq?\">\n                <field name=\"CASE\">LOWERCASE<\/field>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\" id=\"o^LgOC]\/X0n(`xKd8mO[\">\n                    <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <value name=\"B\">\n              <block type=\"text\" id=\"i[?OQfnn#9#j=^Z+Uz-B\">\n                <field name=\"TEXT\">go away<\/field>\n              <\/block>\n            <\/value>\n          <\/block>\n        <\/value>\n        <statement name=\"DO\">\n          <block type=\"decisions_if_elif_else\" id=\"3b*,hZk;6q+|y89^x*0W\">\n            <value name=\"IF0\">\n              <block type=\"logic_isMember\" id=\"=!][@tw@l=RaO~t;$$wa\">\n                <field name=\"OP\">IN<\/field>\n                <value name=\"MEMBER\">\n                  <block type=\"text\" id=\"oBZ8[J#CA^o+O#:8ID9G\">\n                    <field name=\"TEXT\">boat<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"text_changeCase\" id=\"(=Z|0-FJ(f;$i6e4Ut]N\">\n                    <field name=\"CASE\">LOWERCASE<\/field>\n                    <value name=\"TEXT\">\n                      <block type=\"variables_get\" id=\"l5BN`:l_OW*}PYVWfq=P\">\n                        <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <statement name=\"DO0\">\n              <block type=\"io_print1\" id=\"Mu?Qy3m:DSgw*J-q{|WC\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\".?%,2),aNk@+9F`*q3a@\">\n                    <field name=\"TEXT\">Oh, I do love my boat, Floaty McFloatface.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <value name=\"IF1\">\n              <block type=\"logic_isMember\" id=\"aP|)i^5r0GdBNw*$$F[W\">\n                <field name=\"OP\">IN<\/field>\n                <value name=\"MEMBER\">\n                  <block type=\"text\" id=\"a@(qOLajbk9BBw(7Wfad\">\n                    <field name=\"TEXT\">sea<\/field>\n                  <\/block>\n                <\/value>\n                <value name=\"TEXT\">\n                  <block type=\"text_changeCase\" id=\"0-*{]X*G\/@d?Pq@-8f^v\">\n                    <field name=\"CASE\">LOWERCASE<\/field>\n                    <value name=\"TEXT\">\n                      <block type=\"variables_get\" id=\"[,`V7(urJ]BG*3{`w2.!\">\n                        <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/value>\n            <statement name=\"DO1\">\n              <block type=\"io_print1\" id=\"S0Fj:.t,KtkojvfMcq,\/\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\".#mD(\/[y2)Ojl2in[UDI\">\n                    <field name=\"TEXT\">Oh, the sea. Arrr to be back on the sea.<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <statement name=\"ELSE\">\n              <block type=\"io_print1\" id=\"J]-d+f5h\/L%z@{\/]UGV9\">\n                <value name=\"ANY0\">\n                  <block type=\"text\" id=\"lG5u6-9)j:7H*3xD%h;m\">\n                    <field name=\"TEXT\">Arrr. Go on...<\/field>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/statement>\n            <next>\n              <block type=\"variables_set\" id=\"xIxI(L`Q#=,u^aOnjK+R\">\n                <field name=\"VAR\" id=\"E~Y)aKVHewe*RwQsKHR~\" variabletype=\"\">line<\/field>\n                <value name=\"VALUE\">\n                  <block type=\"io_ask_text\" id=\"`7BPRTC{^nHl!d`*v:7W\">\n                    <value name=\"TEXT\">\n                      <block type=\"text\" id=\"DUNXKst:Gt15\/_$Z`c!o\">\n                        <field name=\"TEXT\">&gt;<\/field>\n                      <\/block>\n                    <\/value>\n                  <\/block>\n                <\/value>\n              <\/block>\n            <\/next>\n          <\/block>\n        <\/statement>\n      <\/block>\n    <\/next>\n  <\/block>\n<\/xml>\n```\n\n"
    }
  ],
  "lead_text":"Write code to create word games and develop a Pirate Chatbot. Arrr, me hearties!",
  "short_title":"DT Blockly Chatbot",
  "export_version":1,
  "slug":"aca-dt-56-bk-chatbot",
  "outline":""
}